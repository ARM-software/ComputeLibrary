<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/tile_helpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('tile__helpers_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">tile_helpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="tile__helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2023 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_CORE_CL_CL_KERNELS_TILE_HELPERS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_CORE_CL_CL_KERNELS_TILE_HELPERS</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// *INDENT-OFF*</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// clang-format off</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5e609c7f3149034582297b7c811c76d4">   30</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE1 1</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5fd38a757ff30ca38844449b268ce702">   31</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE2 2</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab72c9e1ee2fb8a606d1a9311600d1df0">   32</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE3 3</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0794d936ea076f7ead3477340813663f">   33</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE4 4</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afa84a4d5631d23fc5c3e1d730e01dcc4">   34</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE5 8</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aba21723d36d820500e11ed9a388e1684">   35</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE6 8</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a26249919626a3943d07e29f8d5a9517d">   36</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE7 8</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab9109fe3442dc5c58f957ddbb5645e50">   37</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE8 8</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a167aaf487db2545e08a8d640071e15c2">   38</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE9 16</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a63183b277a6c6cc6b1302172bd2e3b19">   39</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE10 16</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a02c0dfa7706279a1eb34a200ea0ca2e5">   40</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE11 16</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a111bf7bf0998d8feb85bfeb8191c76b6">   41</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE12 16</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aee618b50e411cd99ccff0085c59109b4">   42</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE13 16</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afc1789629e10adea0c5bc5f7f9c09f97">   43</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE14 16</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab452b4dda25c62ac39fbd545551f7248">   44</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE15 16</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0c0a4a03ca81a5de362407974f3fb26e">   45</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_SIZE16 16</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a22c3ab4f9d9955d61ff54f5760e8e289">   47</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE1(DATA_TYPE) DATA_TYPE##1</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab0b5288f4cc0eca9fe2470120822789a">   48</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE2(DATA_TYPE) DATA_TYPE##2</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0dbac1a44756f42a4a372a7bd02f5ced">   49</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE3(DATA_TYPE) DATA_TYPE##3</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a70c36dddb63504da8b52cdcd2ae8f933">   50</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE4(DATA_TYPE) DATA_TYPE##4</span></div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a358fe1786fc792c42260cb69f3bdd75c">   51</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE5(DATA_TYPE) DATA_TYPE##8</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae75f1b27eff8c9bfab4bcea08d8920a9">   52</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE6(DATA_TYPE) DATA_TYPE##8</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a3e9ebb72fc6030c263ba1ea68b109294">   53</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE7(DATA_TYPE) DATA_TYPE##8</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a11b4a6404f6ae938c59520573f93bc13">   54</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE8(DATA_TYPE) DATA_TYPE##8</span></div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9e941ab0861c4d8a520bcaca1f6bcc30">   55</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE9(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a121cab3884f1e9c4a75d67c0b7b7145a">   56</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE10(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a45d433e2c7ad4bbb7073dd0fa076a9a7">   57</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE11(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a04f6dde1f97334270c3d203c36f2e299">   58</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE12(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afc40b4f050d34c7c064867bff7639f16">   59</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE13(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab7af8909fa41c8660e5e2803782ca773">   60</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE14(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a66949986e6cb773d0a486682a0d1ef85">   61</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE15(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a63381e107f3b4e0abf7b9d4084038eb4">   62</a></span>&#160;<span class="preprocessor">#define TILE_VECTOR_TYPE16(DATA_TYPE) DATA_TYPE##16</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/** Tile object</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> *  A tile object is a 2D memory block and can be accessed using the following syntax:</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> *  -# a[m0].v    = access the the vector at row &quot;m0&quot; (OpenCL vector)</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> *  -# dst[m0].s[n0] = access the scalar element at row &quot;m0&quot; and column &quot;n0&quot; (scalar access)</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * @param[in] DATA_TYPE Data type of the tile</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * @param[in] H         Number of tile rows</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @param[in] W         Number of tile colums</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * @param[in] BASENAME  Tile&#39;s name</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">   74</a></span>&#160;<span class="preprocessor">#define TILE(DATA_TYPE, H, W, BASENAME) TILE_STR(DATA_TYPE, H, W, BASENAME)</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8b1aeca12f9bd2cd0f874ccf0ab6335c">   75</a></span>&#160;<span class="preprocessor">#define TILE_STR(DATA_TYPE, H, W, BASENAME) \</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    union {                                 \</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">        DATA_TYPE                      s[TILE_VECTOR_SIZE##W];                  \</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">        TILE_VECTOR_TYPE##W(DATA_TYPE) v;                     \</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    } BASENAME[H]</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a57af279efc3d46e3965589b617b6724b">   81</a></span>&#160;<span class="preprocessor">#define TENSOR4D_IMAGE(name)          \</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">    __read_only image2d_t name##_img, \</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,       \</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    uint            name##_stride_x,  \</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">    uint            name##_step_x,    \</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">    uint            name##_stride_y,  \</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">    uint            name##_step_y,    \</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">    uint            name##_stride_z,  \</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">    uint            name##_step_z,    \</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">    uint            name##_stride_w,  \</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">    uint            name##_step_w,    \</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">    uint            name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2eef641fe559cee0e27b2c1e05c902c5">   94</a></span>&#160;<span class="preprocessor">#define TENSOR4D_BUFFER(name)    \</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,  \</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">    uint        name##_stride_x, \</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">    uint        name##_step_x,   \</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">    uint        name##_stride_y, \</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">    uint        name##_step_y,   \</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">    uint        name##_stride_z, \</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">    uint        name##_step_z,   \</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">    uint        name##_stride_w, \</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">    uint        name##_step_w,   \</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">    uint        name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a984a6d693d00699fdf9e0ec16119730f">  106</a></span>&#160;<span class="preprocessor">#define TENSOR4D_STR(name, type) TENSOR4D_##type(name)</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a168f86841ca2abbe137f82251bf27c08">  107</a></span>&#160;<span class="preprocessor">#define TENSOR4D(name, type) TENSOR4D_STR(name, type)</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a16eb72fca43416ec2593b92bdd025ebd">  109</a></span>&#160;<span class="preprocessor">#define TENSOR4D_T_IMAGE(name)          \</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">    __read_only image2d_t name##_img, \</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,       \</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">    uint        name##_stride_y, \</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">    uint        name##_stride_z, \</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">    uint        name##_stride_w, \</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">    uint        name##_c,   \</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">    uint        name##_w,   \</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">    uint        name##_h,   \</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">    uint        name##_n,   \</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">    uint        name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afebf8e9b4d5c6dcda65d700fc480eda5">  121</a></span>&#160;<span class="preprocessor">#define TENSOR4D_T_BUFFER(name)    \</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,  \</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">    uint        name##_stride_y, \</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">    uint        name##_stride_z, \</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">    uint        name##_stride_w, \</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">    uint        name##_c,   \</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">    uint        name##_w,   \</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">    uint        name##_h,   \</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">    uint        name##_n,   \</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    uint        name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae8bf7362f62da3e1e369da8a0f38baf4">  132</a></span>&#160;<span class="preprocessor">#define TENSOR4D_T_STR(name, type) TENSOR4D_T_##type(name)</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/** Legacy tensor 4D arguments</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * @param[in] name Tensor name. The tensor name is the prefix of the tensor components</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * @param[in] type Tensor type (BUFFER or IMAGE)</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a34d00b5fedb9850f102ea9e5906cb0c3">  139</a></span>&#160;<span class="preprocessor">#define TENSOR4D_T(name, type) TENSOR4D_T_STR(name, type)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9016ec473d8d6297d715eba783b0cedb">  141</a></span>&#160;<span class="preprocessor">#define TENSOR4D_RO_T_IMAGE(name)          \</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">    __read_only image2d_t name##_img, \</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">    TENSOR4D_T_BUFFER(name)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a71acdcb7d18a89d7e7093d73c9f5c0f8">  145</a></span>&#160;<span class="preprocessor">#define TENSOR4D_RO_T_BUFFER(name) TENSOR4D_T_BUFFER(name)</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2463232b8f797d6849d92aabfa91be16">  147</a></span>&#160;<span class="preprocessor">#define TENSOR4D_RO_T_STR(name, type) TENSOR4D_RO_T_##type(name)</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">/** Read-Only (RO) tensor 4D.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> * @param[in] name Tensor name. The tensor name is the prefix of the tensor components</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * @param[in] type Tensor type (BUFFER or IMAGE)</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab575ed042147daf18e7284af479592cb">  154</a></span>&#160;<span class="preprocessor">#define TENSOR4D_RO_T(name, type) TENSOR4D_RO_T_STR(name, type)</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a56f43b09468a8dfafbf9babba87cc861">  156</a></span>&#160;<span class="preprocessor">#define TENSOR4D_WO_T_IMAGE(name)          \</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">    __write_only image2d_t name##_img, \</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">    TENSOR4D_T_BUFFER(name)</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a838ddaa7a45817faebecbe6a02c98ca8">  160</a></span>&#160;<span class="preprocessor">#define TENSOR4D_WO_T_BUFFER(name) TENSOR4D_T_BUFFER(name)</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ada6393ba4739582f6bddc53a00984af1">  162</a></span>&#160;<span class="preprocessor">#define TENSOR4D_WO_T_STR(name, type) TENSOR4D_WO_T_##type(name)</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">/** Write-Only (WO) tensor 4D.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> * @param[in] name Tensor name. The tensor name is the prefix of the tensor components</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> * @param[in] type Tensor type (BUFFER or IMAGE)</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7c52ccabcbf0e7f93f430d72976ec174">  169</a></span>&#160;<span class="preprocessor">#define TENSOR4D_WO_T(name, type) TENSOR4D_WO_T_STR(name, type)</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#acfd07c8cad0c30dc52290951c307b385">  171</a></span>&#160;<span class="preprocessor">#define TENSOR3D_T_IMAGE(name)          \</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">    __read_only image2d_t name##_img, \</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,       \</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">    uint        name##_stride_y, \</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">    uint        name##_stride_z, \</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">    uint        name##_w,   \</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">    uint        name##_h,   \</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">    uint        name##_n,   \</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">    uint        name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a24abc984299987913e02e7794ddf20aa">  181</a></span>&#160;<span class="preprocessor">#define TENSOR3D_T_BUFFER(name)    \</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">    __global uchar *name##_ptr,  \</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">    uint        name##_stride_y, \</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">    uint        name##_stride_z, \</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">    uint        name##_w,   \</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">    uint        name##_h,   \</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">    uint        name##_n,   \</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">    uint        name##_offset_first_element_in_bytes</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a552033358f7da749c5d74bec8bfb3abd">  190</a></span>&#160;<span class="preprocessor">#define TENSOR3D_T_STR(name, type) TENSOR3D_T_##type(name)</span></div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">  191</a></span>&#160;<span class="preprocessor">#define TENSOR3D_T(name, type) TENSOR3D_T_STR(name, type)</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#if !defined(UNROLL_WITH_PRAGMA)</span></div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2a1fa653db470ab6d66ab833e5159fb1">  194</a></span>&#160;<span class="preprocessor">#define UNROLL_INCR(idx, step, macro) idx += (step); (macro)</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a130fdcf61c6c3296befe6cfedef441d6">  196</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_1(idx, step, macro) (macro)</span></div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4a511a19a5b774c8e5e482c5928f2bea">  197</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_2(idx, step, macro) LOOP_UNROLLING_1(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a55121c4850ada6339a787f72f3ee5fe0">  198</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_3(idx, step, macro) LOOP_UNROLLING_2(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6f22d2bb978918984aa0479772d34ce1">  199</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_4(idx, step, macro) LOOP_UNROLLING_3(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0c6f631055e33244652cd571083bc668">  200</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_5(idx, step, macro) LOOP_UNROLLING_4(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad997bd4c524191ba7a81ad91dc5f6717">  201</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_6(idx, step, macro) LOOP_UNROLLING_5(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad60a3be6201955f799f004db4dffb414">  202</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_7(idx, step, macro) LOOP_UNROLLING_6(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae02d9f8c2a86cf847d9645bf5d8564f9">  203</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_8(idx, step, macro) LOOP_UNROLLING_7(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a17fa80fa2db3c0ae40e56b59c470d354">  204</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_9(idx, step, macro) LOOP_UNROLLING_8(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a435b56aa514d0504ae624ce5361c0bb8">  205</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_10(idx, step, macro) LOOP_UNROLLING_9(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a90346e994ab76523aa8b808f4a208e79">  206</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_11(idx, step, macro) LOOP_UNROLLING_10(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a94a0aff01782871d0aea96a0127ffb0c">  207</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_12(idx, step, macro) LOOP_UNROLLING_11(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ac7f5fcf0121b160905b6e17120d2fae1">  208</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_13(idx, step, macro) LOOP_UNROLLING_12(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a755a5bb4143f31e9f75a08e846d80f77">  209</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_14(idx, step, macro) LOOP_UNROLLING_13(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af05a31af154233134778021eff074b75">  210</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_15(idx, step, macro) LOOP_UNROLLING_14(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af292c04a7d366c60a90627617976037d">  211</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_16(idx, step, macro) LOOP_UNROLLING_15(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7a603c61d4c8633a4b259abf3b6c986f">  212</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_17(idx, step, macro) LOOP_UNROLLING_16(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ade5b7c3b248a7e0d3b617ad5e6d45031">  213</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_18(idx, step, macro) LOOP_UNROLLING_17(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa541e901306fa24c5bf3e00ae6a9990b">  214</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_19(idx, step, macro) LOOP_UNROLLING_18(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a221f1b823338e5036bff6b0b0541e83e">  215</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_20(idx, step, macro) LOOP_UNROLLING_19(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aee10bd342c2ed9b54d8688a0ae86162c">  216</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_21(idx, step, macro) LOOP_UNROLLING_20(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afa4cfd2590478f51230240f80b52dc99">  217</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_22(idx, step, macro) LOOP_UNROLLING_21(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a52a3a2b8be1e1bd10a707ec1aa4ee523">  218</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_23(idx, step, macro) LOOP_UNROLLING_22(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a346a17b59f0b5a72c8ea7f9b1749aa15">  219</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_24(idx, step, macro) LOOP_UNROLLING_23(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4af9a1b60b775e28bd33c3bb2111cdcb">  220</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_25(idx, step, macro) LOOP_UNROLLING_24(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae26e29ef9c6f7417f9a97513839cf77a">  221</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_26(idx, step, macro) LOOP_UNROLLING_25(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4666e09ec3b35869da7127fe979e6742">  222</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_27(idx, step, macro) LOOP_UNROLLING_26(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a88fad59704572143e9e3f1b75696b67c">  223</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_28(idx, step, macro) LOOP_UNROLLING_27(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af12fd6d32d25ba693e15258c9549f28e">  224</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_29(idx, step, macro) LOOP_UNROLLING_28(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a542d9a699e8ab8afd3f881c838b2e784">  225</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_30(idx, step, macro) LOOP_UNROLLING_29(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ac57fe50d09503a2de5ee55ae4e3a1771">  226</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_31(idx, step, macro) LOOP_UNROLLING_30(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8f33650ae72caa4494d2456318039b38">  227</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_32(idx, step, macro) LOOP_UNROLLING_31(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8610c7367ec437e56274514be64f2600">  228</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_33(idx, step, macro) LOOP_UNROLLING_32(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0441af100e8e976401274b0b8555c862">  229</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_34(idx, step, macro) LOOP_UNROLLING_33(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#affeaaaed83d940a0d5d3142cd1007bec">  230</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_35(idx, step, macro) LOOP_UNROLLING_34(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a67f44739dca84e52769cabb2f7031708">  231</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_36(idx, step, macro) LOOP_UNROLLING_35(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aebbd1b26bda9480c4422a8e31d8a92d8">  232</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_37(idx, step, macro) LOOP_UNROLLING_36(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a83971fa3e89259a6fc57310c2a85d22d">  233</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_38(idx, step, macro) LOOP_UNROLLING_37(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a41817c31b435c651c9c06f0efd020a85">  234</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_39(idx, step, macro) LOOP_UNROLLING_38(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab46b609d115e10f2053815dda6aa3352">  235</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_40(idx, step, macro) LOOP_UNROLLING_39(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a1032c93574c5c78b989845d178475ff9">  236</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_41(idx, step, macro) LOOP_UNROLLING_40(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aaec0a519fd8548b0d8fe2f50ad79b465">  237</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_42(idx, step, macro) LOOP_UNROLLING_41(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab0ad2913ff494605c3106343c53860a1">  238</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_43(idx, step, macro) LOOP_UNROLLING_42(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8b2582ef60296962b7c8007a676efbfe">  239</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_44(idx, step, macro) LOOP_UNROLLING_43(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a957f6b212c5a0e2438baf421310e4d10">  240</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_45(idx, step, macro) LOOP_UNROLLING_44(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ada99cd94a5d0c42f71799552b7ee06a7">  241</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_46(idx, step, macro) LOOP_UNROLLING_45(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa005da10b48f114e620ed9badb46ad9a">  242</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_47(idx, step, macro) LOOP_UNROLLING_46(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a1389347ec226fd576e51c5567afb2e5c">  243</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_48(idx, step, macro) LOOP_UNROLLING_47(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7748cd5978fb731eb49a11ffc15e6b8f">  244</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_49(idx, step, macro) LOOP_UNROLLING_48(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af8e56e67c05a1f06a810d9c509e22eed">  245</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_50(idx, step, macro) LOOP_UNROLLING_49(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a386e057070efdb891939c1a6d20881c5">  246</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_51(idx, step, macro) LOOP_UNROLLING_50(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7b44596d5f9bf4c3ea2ba3b24c75f40d">  247</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_52(idx, step, macro) LOOP_UNROLLING_51(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a61137f53738c123bf6cc8abcc037372f">  248</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_53(idx, step, macro) LOOP_UNROLLING_52(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afd16d4f2b712c59a88bc2c84cc14bc4c">  249</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_54(idx, step, macro) LOOP_UNROLLING_53(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a3cfb9a635d45d1a384b95f7ea452fd87">  250</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_55(idx, step, macro) LOOP_UNROLLING_54(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a17596e3875c38279ae74def988969c06">  251</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_56(idx, step, macro) LOOP_UNROLLING_55(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6b833f71cdc18f75bd7245d2ac30cc1c">  252</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_57(idx, step, macro) LOOP_UNROLLING_56(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a25aea0e1b70ef6852c8515ce8e9d438a">  253</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_58(idx, step, macro) LOOP_UNROLLING_57(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a322f617cb4ba0990eb2d2c649870d30b">  254</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_59(idx, step, macro) LOOP_UNROLLING_58(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ada3463f5f0a2280f5136b498b4ee3710">  255</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_60(idx, step, macro) LOOP_UNROLLING_59(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6a8d6ebb4b3a0398e5690b7e398d7497">  256</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_61(idx, step, macro) LOOP_UNROLLING_60(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa7afcdb694b9b1ef492b336adc1622cd">  257</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_62(idx, step, macro) LOOP_UNROLLING_61(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afac46f8380157c3404cd1b9d98cf89b9">  258</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_63(idx, step, macro) LOOP_UNROLLING_62(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af56652de3b3d174d9e832dd4a9071394">  259</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_64(idx, step, macro) LOOP_UNROLLING_63(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a03b75596f027d7213ae05eb952d29af0">  260</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_65(idx, step, macro) LOOP_UNROLLING_64(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5b2e01c6bac8090cf9e63242e0bd44dc">  261</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_66(idx, step, macro) LOOP_UNROLLING_65(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7e211d765502dbf4422dc93a66f675fd">  262</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_67(idx, step, macro) LOOP_UNROLLING_66(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ac3049dc25fa6d37314746f1f506025fa">  263</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_68(idx, step, macro) LOOP_UNROLLING_67(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a576ffca3257413d9f0be6db396840b64">  264</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_69(idx, step, macro) LOOP_UNROLLING_68(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad8fad270470fa5eb9a16e53886d96038">  265</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_70(idx, step, macro) LOOP_UNROLLING_69(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a1f90178ff28356f753d1d691d62431db">  266</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_71(idx, step, macro) LOOP_UNROLLING_70(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a389b914d41fdc75e203ae6fc3892f55c">  267</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_72(idx, step, macro) LOOP_UNROLLING_71(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9a820345d9d4a4367dae5eda06f35d61">  268</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_73(idx, step, macro) LOOP_UNROLLING_72(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a11d40d418120edfe3fa06f34c23830dc">  269</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_74(idx, step, macro) LOOP_UNROLLING_73(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a673d6bbd63192592c0d4ddf3f73720b9">  270</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_75(idx, step, macro) LOOP_UNROLLING_74(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ac54c6344855c0f0d94ca62e178e2c761">  271</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_76(idx, step, macro) LOOP_UNROLLING_75(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aec684415d78af74226b6e66e2df9b00c">  272</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_77(idx, step, macro) LOOP_UNROLLING_76(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a92e61c3861c8a846d0561573f870bca8">  273</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_78(idx, step, macro) LOOP_UNROLLING_77(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4008fcdf06ba0c7e31d86b7eaf7bcd37">  274</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_79(idx, step, macro) LOOP_UNROLLING_78(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a21c66857ee58351ed93bbe0e62ff10ae">  275</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_80(idx, step, macro) LOOP_UNROLLING_79(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7d4452e74858fe4e291d7d55904619ba">  276</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_81(idx, step, macro) LOOP_UNROLLING_80(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0ff77d4e7e6864e815ac6b94e20f1f97">  277</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_82(idx, step, macro) LOOP_UNROLLING_81(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa3e34463b8e2beb13ceeda1de3e48cca">  278</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_83(idx, step, macro) LOOP_UNROLLING_82(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#abcfd0806c126e46581eb2cee238046a3">  279</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_84(idx, step, macro) LOOP_UNROLLING_83(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a59f835e4a542eb11af3065cb038dd007">  280</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_85(idx, step, macro) LOOP_UNROLLING_84(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a3931c91286712fefc2c4d20eb96dfc19">  281</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_86(idx, step, macro) LOOP_UNROLLING_85(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0f5e461d45f547a4d77198b2df4f88f3">  282</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_87(idx, step, macro) LOOP_UNROLLING_86(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a30307f0a7403bbde77d7bdf79ede0fab">  283</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_88(idx, step, macro) LOOP_UNROLLING_87(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aafa2bedfe974be8ccd412c5857c94fdc">  284</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_89(idx, step, macro) LOOP_UNROLLING_88(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad135d16afafa25c223173946c0337cf3">  285</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_90(idx, step, macro) LOOP_UNROLLING_89(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5edb75c7a3c80e71bf9441a7a7538834">  286</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_91(idx, step, macro) LOOP_UNROLLING_90(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a99234f2ca50bebdc20947a552993eddf">  287</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_92(idx, step, macro) LOOP_UNROLLING_91(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad3ea319abaa00088e6dd993339506542">  288</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_93(idx, step, macro) LOOP_UNROLLING_92(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a16f33c5f73cd3f9deddd7c952a7445e5">  289</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_94(idx, step, macro) LOOP_UNROLLING_93(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a54250705d714f24c182451794cfc3d12">  290</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_95(idx, step, macro) LOOP_UNROLLING_94(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad3b6c2f1f29ac96694f27ca965045156">  291</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_96(idx, step, macro) LOOP_UNROLLING_95(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a961b75414c738bb563b37a3dfadf4e77">  292</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_97(idx, step, macro) LOOP_UNROLLING_96(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae7d1c49a1a770cc514620afd52a6fb23">  293</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_98(idx, step, macro) LOOP_UNROLLING_97(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a417de6ff346309097671abb14c7aa60a">  294</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_99(idx, step, macro) LOOP_UNROLLING_98(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab194082b98d2202c93880997550ba42d">  295</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_100(idx, step, macro) LOOP_UNROLLING_99(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4e7621f6f887ff8293bfed0d4e5dd24b">  296</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_101(idx, step, macro) LOOP_UNROLLING_100(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a899096510d4dff6a0d368b67eb9daca1">  297</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_102(idx, step, macro) LOOP_UNROLLING_101(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6b445ffa8c4254b1b9bd83d165e06f73">  298</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_103(idx, step, macro) LOOP_UNROLLING_102(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a386c30579141647c54a1824a0bb47c8a">  299</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_104(idx, step, macro) LOOP_UNROLLING_103(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2dbcf6193abd9d3d32918e3e2adaf7c0">  300</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_105(idx, step, macro) LOOP_UNROLLING_104(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af1e399212a8e9f7dbf6fd2746906a724">  301</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_106(idx, step, macro) LOOP_UNROLLING_105(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a750a9e73183e565dadcf2f96d1d73a1a">  302</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_107(idx, step, macro) LOOP_UNROLLING_106(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a177c9d5b31725d98882cdb4357ed02f3">  303</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_108(idx, step, macro) LOOP_UNROLLING_107(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a344dc0ed8d3b3a4d4daaa9b7650782b7">  304</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_109(idx, step, macro) LOOP_UNROLLING_108(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#abcfb131e5f3ebf05a09a4caaec8f826f">  305</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_110(idx, step, macro) LOOP_UNROLLING_109(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4ec6e7e003575ae1f30ac401403361d5">  306</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_111(idx, step, macro) LOOP_UNROLLING_110(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad14fefccce06a47aa0e13eb126f8a439">  307</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_112(idx, step, macro) LOOP_UNROLLING_111(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad7b24f06b56c551f6c279d2b1ef0fe14">  308</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_113(idx, step, macro) LOOP_UNROLLING_112(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8f481cf13bb603dc21f6cdc379284b24">  309</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_114(idx, step, macro) LOOP_UNROLLING_113(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a88879c48be26a2d280c9c8a1e9c68f55">  310</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_115(idx, step, macro) LOOP_UNROLLING_114(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a50322ed2fea255eb0c82cf820f0a120b">  311</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_116(idx, step, macro) LOOP_UNROLLING_115(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5b0bf6de32f9551197a79361e065c985">  312</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_117(idx, step, macro) LOOP_UNROLLING_116(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0b480af91fb5e0002e0e5521e17f42cc">  313</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_118(idx, step, macro) LOOP_UNROLLING_117(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab14939f7adf7ba956501983d626519b8">  314</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_119(idx, step, macro) LOOP_UNROLLING_118(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a121cdad0be49fef3fbe59060016c4f88">  315</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_120(idx, step, macro) LOOP_UNROLLING_119(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00316"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9d1baaf5b50b9efacbd233e621981214">  316</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_121(idx, step, macro) LOOP_UNROLLING_120(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7876b97412192ce0d951d148ca20deeb">  317</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_122(idx, step, macro) LOOP_UNROLLING_121(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a03541eb92dc2abafd4f05859b90c6993">  318</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_123(idx, step, macro) LOOP_UNROLLING_122(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a75e8bd6cda5c9fa9207761b0d4b869fa">  319</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_124(idx, step, macro) LOOP_UNROLLING_123(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2eeb83870cd5faf3b1c6f428672188a8">  320</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_125(idx, step, macro) LOOP_UNROLLING_124(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a936142db7d93d0456294a6bf024a9a27">  321</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_126(idx, step, macro) LOOP_UNROLLING_125(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6689f2889b761a521a1d55e2ed791c46">  322</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_127(idx, step, macro) LOOP_UNROLLING_126(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a157e3ee2ce4a6c42006a2ffd50babf28">  323</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_128(idx, step, macro) LOOP_UNROLLING_127(idx, step, macro); UNROLL_INCR(idx, step, macro)</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afb6d703a908eae5887c7fd658aad306b">  325</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_STR(type, idx, start, step, num, macro) \</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">    {                                                          \</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">        type idx = start;                                      \</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">        LOOP_UNROLLING_##num(idx, step, macro);                \</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#else // !defined(UNROLL_WITH_PRAGMA)</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#define LOOP_UNROLLING_STR(type, idx, start, step, num, macro) \</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">    {                                                          \</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">        _Pragma(&quot;unroll&quot;)                                      \</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">        for(type idx = start; idx &lt; (num * step); idx += step) \</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">        {                                                      \</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">            (macro);                                           \</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">        }                                                      \</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#endif // !defined(UNROLL_WITH_PRAGMA)</span></div><div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">  340</a></span>&#160;<span class="preprocessor">#define LOOP_UNROLLING(type, idx, start, step, num, macro) LOOP_UNROLLING_STR(type, idx, start, step, num, macro)</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">/** Get the get_global_id with partial N0. This function is useful when the dimension is not multiple of N0 and we need to use a partial N0</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> *  to avoid out-of-bound read/write</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> * @note PARTIAL_N0 is used for get_global_id(n) = 0.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * @param[in] IDX        get_global_id index (0,1 and 2 only)</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> * @param[in] N0         Number of elements read/written on the IDX direction</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> * @param[in] PARTIAL_N0 Number of elements read/written on the IDX direction for get_global_id(IDX) = 0. If zero,</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> *                        the Number of elements read/written on the IDX direction for get_global_id(IDX) = 0 is N0</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">  352</a></span>&#160;<span class="preprocessor">#define GET_SPATIAL_IDX(IDX, N0, PARTIAL_N0) (max((int)(get_global_id(IDX) * N0 - (N0 - PARTIAL_N0) % N0), 0))</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">/** Dot product integet 8bit function</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> *  @note Performs: c += dot(a, b)</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> * @param[in] A_DATA_TYPE A (lhs) data type</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> * @param[in] B_DATA_TYPE B (rhs) data type</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"> * @param[in] C_DATA_TYPE C (accumulator) data type</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"> * @param[in] K0          Number of accumulations</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"> * @param[in] a           OpenCL vector a</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"> * @param[in] b           OpenCL vector b</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> * @param[in] c           Scalar variable c</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a517e852b82d5acb73cb5735194a606d7">  366</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, b, c) DOT_PRODUCT_INTEGER8_STR(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, b, c)</span></div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#acb378f5ea819c225d16b792ec1086190">  367</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT_INTEGER8_STR(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, b, c) DOT_PRODUCT##K0##_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c)</span></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0f53d2ca2e4064e036d02c840ac24e07">  368</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT1_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">        c += (C_DATA_TYPE)(a) * (C_DATA_TYPE)(b);     \</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_khr_integer_dot_product)</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">#define DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += dot((A_DATA_TYPE##4)((a).s01, (A_DATA_TYPE##2)(0)), (B_DATA_TYPE##4)(((b).s01), (B_DATA_TYPE##2)(0)));</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">#define DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += dot((A_DATA_TYPE##4)((a).s012, (A_DATA_TYPE)0), (B_DATA_TYPE##4)(((b).s012), (B_DATA_TYPE)0));</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="preprocessor">#define DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += dot((a), (b));</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#elif defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8) //  defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_khr_integer_dot_product)</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor">#define DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c = arm_dot_acc((A_DATA_TYPE##4)((a).s01, (A_DATA_TYPE##2)(0)), (B_DATA_TYPE##4)(((b).s01), (B_DATA_TYPE##2)(0)), (c));</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor">#define DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c = arm_dot_acc((A_DATA_TYPE##4)((a).s012, (A_DATA_TYPE)0), (B_DATA_TYPE##4)(((b).s012), (B_DATA_TYPE)0), (c));</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#define DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c = arm_dot_acc((a), (b), (c));</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#elif defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8) // defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor">#define DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += arm_dot((A_DATA_TYPE##4)((a).s01, (A_DATA_TYPE##2)(0)), (B_DATA_TYPE##4)(((b).s01), (B_DATA_TYPE##2)(0)));</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="preprocessor">#define DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += arm_dot((A_DATA_TYPE##4)((a).s012, (A_DATA_TYPE)0), (B_DATA_TYPE##4)(((b).s012), (B_DATA_TYPE)0));</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="preprocessor">#define DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) c += arm_dot((a), (b));</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">#else // defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8)</span></div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a67b73cd99bac1d74128f6601ca4074ec">  385</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c)   \</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">    ({                                                  \</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor">        c += (C_DATA_TYPE)(a).s0 * (C_DATA_TYPE)(b).s0; \</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="preprocessor">        c += (C_DATA_TYPE)(a).s1 * (C_DATA_TYPE)(b).s1; \</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aadc3bfc3d71c86b04eed06001a51a1f9">  390</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c)   \</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="preprocessor">    ({                                                  \</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor">        DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c);  \</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">        c += (C_DATA_TYPE)(a).s2 * (C_DATA_TYPE)(b).s2; \</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">  395</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, x, y, val)   \</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor">    ({                                                    \</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="preprocessor">        val += (C_DATA_TYPE)(x).s0 * (C_DATA_TYPE)(y).s0; \</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="preprocessor">        val += (C_DATA_TYPE)(x).s1 * (C_DATA_TYPE)(y).s1; \</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">        val += (C_DATA_TYPE)(x).s2 * (C_DATA_TYPE)(y).s2; \</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">        val += (C_DATA_TYPE)(x).s3 * (C_DATA_TYPE)(y).s3; \</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8)</span></div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad7f7a6c98b6fa22296c0287757b00fcb">  403</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT5_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s0123), ((b).s0123), c);     \</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="preprocessor">        DOT_PRODUCT1_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s4), ((b).s4), c);     \</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a0a67f50cb1184ee9881636c77c1e4973">  408</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT6_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s0123), ((b).s0123), c);     \</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">        DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s45), ((b).s45), c);     \</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a61904a1a8ce88a26f6aa6512bc730a13">  413</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT7_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s0123), ((b).s0123), c);     \</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">        DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s456), ((b).s456), c);     \</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a3d4d250702ba77dd758b9d98fc81357a">  418</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).lo), ((b).lo), c);     \</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).hi), ((b).hi), c);     \</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a904e62f5650d6a0372598e4de9a51938">  423</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT9_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="preprocessor">        DOT_PRODUCT1_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s8), ((b).s8), c);     \</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa05d065b702d093b92afe70d6fe5a371">  428</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT10_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="preprocessor">        DOT_PRODUCT2_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89), ((b).s89), c);     \</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a89b86f72e9dcf2daad3a5acde76204a3">  433</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT11_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="preprocessor">        DOT_PRODUCT3_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89A), ((b).s89A), c);     \</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad46e619f5a1bc69b6c5b4a60c23198af">  438</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT12_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="preprocessor">        DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89AB), ((b).s89AB), c);     \</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2bfabbbfd2e2b4bbaa93de555e0792d7">  443</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT13_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">        DOT_PRODUCT5_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89ABC), ((b).s89ABC), c);     \</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aea8af75114d0f9f5b5b2b77376313720">  448</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT14_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="preprocessor">        DOT_PRODUCT6_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89ABCD), ((b).s89ABCD), c);     \</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00453"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae2593e2110d9971621ddda3e4f61a7ee">  453</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT15_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="preprocessor">    ({                                                \</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s01234567), ((b).s01234567), c);     \</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="preprocessor">        DOT_PRODUCT7_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).s89ABCDE), ((b).s89ABCDE), c);     \</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00458"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a47274fce9533dc026a154eac74259f31">  458</a></span>&#160;<span class="preprocessor">#define DOT_PRODUCT16_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, a, b, c) \</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="preprocessor">    ({                                                 \</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).lo), ((b).lo), c);      \</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="preprocessor">        DOT_PRODUCT8_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, ((a).hi), ((b).hi), c);      \</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">/** Dot product integet 8bit function</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment"> *  @note Performs: c += dot(a, b)</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment"> * @param[in] A_DATA_TYPE A (lhs) data type</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"> * @param[in] B_DATA_TYPE B (rhs) data type</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment"> * @param[in] C_DATA_TYPE C (accumulator) data type</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment"> * @param[in] K0          Number of accumulations</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"> * @param[in] a           OpenCL vector a</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"> * @param[in] c           Scalar variable c</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4da1cc065206c66d66afec5c05d24aa4">  475</a></span>&#160;<span class="preprocessor">#define REDUCE_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, c) REDUCE_INTEGER8_STR(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, c)</span></div><div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad1250f05eb43bc2e12b2acf5c1458587">  476</a></span>&#160;<span class="preprocessor">#define REDUCE_INTEGER8_STR(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, c) DOT_PRODUCT_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, K0, a, (TILE_VECTOR_TYPE##K0(B_DATA_TYPE))1, c)</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">/** Load a vector from global memory (tensor)</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @param[in] DATA_TYPE   Data type</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> * @param[in] WIDTH       Number of dst columns</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * @param[in] TENSOR_TYPE Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image).</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> *                        In case of cl_image, only WIDTH multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> * @param[in] TENSOR      Tensor basename</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> * @param[in] X           Starting X position</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> * @param[in] Y           Starting Y position</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> * @param[in] STRIDE_Y    Stride Y (in bytes)</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00489"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2f9a690628885b2e9cbb2186532f614e">  489</a></span>&#160;<span class="preprocessor">#define V_LOAD(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y) V_LOAD_STR(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y)</span></div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae9284a682f8b066de87365618de2b7f9">  490</a></span>&#160;<span class="preprocessor">#define V_LOAD_STR(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y) V_LOAD_##TENSOR_TYPE(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y)</span></div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a64e9050c413f916fdb723a6b7c48890a">  491</a></span>&#160;<span class="preprocessor">#define V_LOAD_BUFFER(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y) \</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">    VLOAD(WIDTH)                                                \</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor">    (0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (X) * sizeof(DATA_TYPE) + (Y) * (STRIDE_Y)))</span></div><div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a832fce8769605f438ec0812c2d7c4ed7">  494</a></span>&#160;<span class="preprocessor">#define V_LOAD_IMAGE(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y) READ_IMAGE2D(DATA_TYPE, CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT(WIDTH), TENSOR##_img, (X) / 4, (Y))</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">/** Store a vector in global memory (tensor)</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @param[in] DATA_TYPE   Data type</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * @param[in] WIDTH       Number of dst columns</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @param[in] TENSOR_TYPE Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image).</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> *                        In case of cl_image, only WIDTH multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> * @param[in] TENSOR      Tensor basename</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @param[in] X           Starting X position</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> * @param[in] Y           Starting Y position</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment"> * @param[in] STRIDE_Y    Stride Y (in bytes)</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"> * @param[in] VALUES      Values to store in memory</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00508"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a3a7b05d432e885ad335187a76665d63c">  508</a></span>&#160;<span class="preprocessor">#define V_STORE(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y, VALUES) V_STORE_STR(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y, VALUES)</span></div><div class="line"><a name="l00509"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa6f7cf74e390e733a50fc3b2183bc56e">  509</a></span>&#160;<span class="preprocessor">#define V_STORE_STR(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y, VALUES) V_STORE_##TENSOR_TYPE(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y, VALUES)</span></div><div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#acc522bcf28f70f8cbaaf679a23e0ba07">  510</a></span>&#160;<span class="preprocessor">#define V_STORE_BUFFER(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y, VALUES) \</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="preprocessor">    VSTORE(WIDTH)                                                \</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">    (VALUES, 0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (X) * sizeof(DATA_TYPE) + (Y) * (STRIDE_Y)))</span></div><div class="line"><a name="l00513"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a2024b61c803cb0eaa2f2e674c0126a49">  513</a></span>&#160;<span class="preprocessor">#define V_STORE_IMAGE(DATA_TYPE, WIDTH, TENSOR, X, Y, STRIDE_Y, VALUES) WRITE_IMAGE2D(DATA_TYPE, CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT(WIDTH), TENSOR##_img, (X) / 4, (Y), VALUES)</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">/** Load a tile from global memory (tensor)</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE     Data type</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"> * @param[in]  HEIGHT        Number of dst rows</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment"> * @param[in]  WIDTH         Number of dst columns</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE   Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image).</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"> *                           In case of cl_image, only WIDTH multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment"> * @param[in]  TENSOR        Tensor basename</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"> * @param[in]  X             Starting X position</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"> * @param[in]  Y             Starting Y position</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"> * @param[in]  YI_MULTIPLIER Parameter used to multiply the internal row increment (_i).</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> *                           In common cases should be 1 but it becomes useful when we want to load rows which are multiple of STRIDE_Y. (e.g. loading the weights of convolution layer).</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> *                           In this case the address calculation is performed as: (Y + _i * Y_MULTIPLIER) * STRIDE_Y</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y      Stride Y (in bytes) used to load each row.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @param[out] dst           Output tile</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">  531</a></span>&#160;<span class="preprocessor">#define T_LOAD(DATA_TYPE, HEIGHT, WIDTH, TENSOR_TYPE, TENSOR, X, Y, YI_MULTIPLIER, STRIDE_Y, dst)                      \</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="preprocessor">    ({                                                                                                                 \</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                                          \</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="preprocessor">        {                                                                                                              \</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="preprocessor">            dst[_i].v = V_LOAD(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, ((Y) + _i * (int)(YI_MULTIPLIER)), STRIDE_Y); \</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">        })                                                                                                             \</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) using an indirect Y index tile</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE   Data type</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment"> * @param[in]  HEIGHT      Number of dst rows</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"> * @param[in]  WIDTH       Number of dst columns</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"> *                         In case of cl_image, only WIDTH multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment"> * @param[in]  TENSOR      Tensor basename</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"> * @param[in]  X           Starting X position</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y    Stride Y (in bytes)</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"> * @param[in]  indirect_y  Indirect Y index tile</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"> * @param[out] dst         Output tile</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a383125ec37d095829f7a9c5694ea8907">  552</a></span>&#160;<span class="preprocessor">#define T_LOAD_INDIRECT(DATA_TYPE, HEIGHT, WIDTH, TENSOR_TYPE, TENSOR, X, STRIDE_Y, indirect_y, dst)    \</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor">    ({                                                                                                  \</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                           \</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">        {                                                                                               \</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="preprocessor">            dst[_i].v = V_LOAD(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, (indirect_y[_i].v), STRIDE_Y); \</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="preprocessor">        })                                                                                              \</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) using an indirect Y index tile and conditionally use a different length for the load</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment"> * @note If WIDTH1_CONDITION is true, the load will use the WIDTH1 length for the store</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment"> * @note The vectors are stored in reverse order so the invalid rows are overwritten by the valid ones</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE        Data type</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment"> * @param[in]  HEIGHT           Number of dst rows</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"> * @param[in]  WIDTH0           Store width to use if WIDTH1_CONDITION = false</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment"> * @param[in]  WIDTH1           Store width to use if WIDTH1_CONDITION = true</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE      Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image).</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment"> *                              In case of cl_image, only WIDTH multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"> * @param[in]  TENSOR           Tensor basename</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment"> * @param[in]  X                Starting X position</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y         Stride Y (in bytes) used to load each row.</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"> * @param[in]  WIDTH1_CONDITION Condition to select the WIDTH1 store</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> * @param[out] dst              Output tile</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> * @param[out] indirect_y       Indirect Y index tile</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00578"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">  578</a></span>&#160;<span class="preprocessor">#define T_LOAD_INDIRECT_WIDTH_SELECT(DATA_TYPE, HEIGHT, WIDTH0, WIDTH1, TENSOR_TYPE, TENSOR, X, STRIDE_Y, WIDTH1_CONDITION, dst, indirect_y)                                                      \</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="preprocessor">    ({                                                                                                                                                                                             \</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">        if(WIDTH1_CONDITION)                                                                                                                                                                       \</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="preprocessor">        {                                                                                                                                                                                          \</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                                                                                                                  \</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">            {                                                                                                                                                                                      \</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="preprocessor">                VLOAD_PARTIAL(WIDTH0, WIDTH1)                                                         \</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">                (dst[HEIGHT - 1 - _i].v, 0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (X) * sizeof(DATA_TYPE) + (indirect_y[HEIGHT - 1 - _i].v) * STRIDE_Y));               \</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor">            })                                                                                                                                                                                     \</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="preprocessor">        }                                                                                                                                                                                          \</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="preprocessor">        else                                                                                                                                                                                       \</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="preprocessor">        {                                                                                                                                                                                          \</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                                                                                                                  \</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="preprocessor">            {                                                                                                                                                                                      \</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="preprocessor">                dst[HEIGHT - 1 - _i].v = V_LOAD(DATA_TYPE, WIDTH0, TENSOR_TYPE, TENSOR, X, (indirect_y[HEIGHT - 1 - _i].v), STRIDE_Y); \</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor">            })                                                                                                                                                                                     \</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="preprocessor">        }                                                                                                                                                                                          \</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) when the tensor is stored using a NHWC layout</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE     Data type</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment"> * @param[in]  TILE_HEIGHT   Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment"> * @param[in]  TILE_WIDTH    Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment"> * @param[in]  TILE_CHANNELS Number of elements to load from C (channel) dimension</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE   Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment"> *                           In case of cl_image, only TILE_CHANNELS multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment"> * @param[in]  TENSOR        Tensor basename</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment"> * @param[in]  B             Starting batch index</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment"> * @param[in]  Y             Starting Y index</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"> * @param[in]  X             Starting X index</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment"> * @param[in]  C             Starting C index</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment"> * @param[in]  TENSOR_HEIGHT Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"> * @param[in]  TENSOR_WIDTH  Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y      Stride Y (in bytes)</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"> * @param[out] dst           Output tile</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00614"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a662951b6d89a60bbc2dbb500e6cbbaaf">  614</a></span>&#160;<span class="preprocessor">#define T_LOAD_NHWC(DATA_TYPE, TILE_HEIGHT, TILE_WIDTH, TILE_CHANNELS, TENSOR_TYPE, TENSOR, B, Y, X, C, TENSOR_WIDTH, TENSOR_HEIGHT, STRIDE_Y, dst)   \</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="preprocessor">    ({                                                                                                                                                \</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _yk, 0, 1, TILE_HEIGHT,                                                                                                   \</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="preprocessor">        {                                                                                                                                             \</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _xk, 0, 1, TILE_WIDTH,                                                                                                \</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="preprocessor">            {                                                                                                                                         \</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="preprocessor">                int _src_y = (X) + _xk + ((Y) + _yk) * (TENSOR_WIDTH);                                                                                \</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor">                _src_y    += (B) * (int)(TENSOR_WIDTH) * (int)(TENSOR_HEIGHT);                                                                        \</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="preprocessor">                int _src_valid_y = (((X) + _xk) &gt;= 0 &amp;&amp; ((X) + _xk) &lt; (int)(TENSOR_WIDTH) &amp;&amp; ((Y) + _yk) &gt;= 0 &amp;&amp; ((Y) + _yk) &lt; (int)(TENSOR_HEIGHT)); \</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">                if(_src_valid_y != 0)                                                                                                                 \</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor">                {                                                                                                                                     \</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="preprocessor">                    dst[_xk + _yk * (TILE_WIDTH)].v = V_LOAD(DATA_TYPE, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, _src_y, STRIDE_Y);                     \</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">                }                                                                                                                                     \</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="preprocessor">            })                                                                                                                                        \</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="preprocessor">        })                                                                                                                                            \</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) when the tensor is stored using a NHWC layout with dilation for the X and Y increments</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE      Data type</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"> * @param[in]  TILE_HEIGHT    Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"> * @param[in]  TILE_WIDTH     Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> * @param[in]  TILE_CHANNELS  Number of elements to load from C (channel) dimension</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE    Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"> *                            In case of cl_image, only TILE_CHANNELS multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"> * @param[in]  TENSOR         Tensor basename</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment"> * @param[in]  B              Starting batch index</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment"> * @param[in]  Y              Starting Y index</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"> * @param[in]  X              Starting X index</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment"> * @param[in]  C              Starting C index</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"> * @param[in]  TENSOR_HEIGHT  Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"> * @param[in]  TENSOR_WIDTH   Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"> * @param[in]  DILATION_X     Dilation for the X increment</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"> * @param[in]  DILATION_Y     Dilation for the Y increment</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment"> * @param[in]  BOUNDARY_CHECK Boundary check flag. If true, it checks for any out-of-bound reads</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment"> * @param[out] dst            Output tile</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae7ee036b8056025786dd409e34712fca">  651</a></span>&#160;<span class="preprocessor">#define T_LOAD_NHWC_WITH_DILATION(DATA_TYPE, TILE_HEIGHT, TILE_WIDTH, TILE_CHANNELS, TENSOR_TYPE, TENSOR, B, Y, X, C, TENSOR_WIDTH, TENSOR_HEIGHT, DILATION_X, DILATION_Y, BOUNDARY_CHECK, dst)         \</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _yk, 0, 1, TILE_HEIGHT, \</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _xk, 0, 1, TILE_WIDTH, \</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="preprocessor">                int _src_y = (X) + _xk * (DILATION_X); \</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="preprocessor">                int _src_z = ((Y) + _yk * (DILATION_Y)); \</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="preprocessor">                int _src_w    = (B); \</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="preprocessor">                bool _src_valid_y = (((X) + _xk * (DILATION_X)) &gt;= 0) &amp;&amp; (((X) + _xk * (DILATION_X)) &lt; (int)(TENSOR_WIDTH)) &amp;&amp; (((Y) + _yk * (DILATION_Y)) &gt;= 0) &amp;&amp; (((Y) + _yk * (DILATION_Y)) &lt; (int)(TENSOR_HEIGHT)); \</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">                if(!(BOUNDARY_CHECK)) \</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="preprocessor">                { \</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="preprocessor">                    dst[_xk + _yk * (TILE_WIDTH)].v = VLOAD(TILE_CHANNELS)                                                \</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="preprocessor">                    (0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (C) * sizeof(DATA_TYPE) + (_src_y) * (TENSOR##_stride_y) + (_src_z) * (TENSOR##_stride_z) + (_src_w) * (TENSOR##_stride_w))); \</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="preprocessor">                } \</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="preprocessor">                else \</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="preprocessor">                { \</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="preprocessor">                    if(_src_valid_y) \</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="preprocessor">                    { \</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="preprocessor">                        dst[_xk + _yk * (TILE_WIDTH)].v = VLOAD(TILE_CHANNELS)                                                \</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="preprocessor">                    (0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (C) * sizeof(DATA_TYPE) + (_src_y) * (TENSOR##_stride_y) + (_src_z) * (TENSOR##_stride_z) + (_src_w) * (TENSOR##_stride_w))); \</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="preprocessor">                    }                                                                                                                                                                                                 \</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="preprocessor">                } \</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="preprocessor">            })                                                                                                                                                                                                             \</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="preprocessor">        })                                                                                                                                                                                                             \</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) when the tensor is stored using a NHWC layout using indirect X and Y coordinates</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE     Data type</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment"> * @param[in]  TILE_AREA     Number of elements to load from Y (height) dimension * Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="comment"> * @param[in]  TILE_CHANNELS Number of elements to load from C (channel) dimension</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE   Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment"> *                           In case of cl_image, only TILE_CHANNELS multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment"> * @param[in]  TENSOR        Tensor basename</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"> * @param[in]  B             Starting batch index</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment"> * @param[in]  Y             Starting Y index</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment"> * @param[in]  X             Starting X index</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"> * @param[in]  C             Starting C index</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment"> * @param[in]  TENSOR_WIDTH  Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment"> * @param[in]  TENSOR_HEIGHT Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y      Stride Y (in bytes)</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment"> * @param[out] xi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect X coordinate</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"> * @param[out] yi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect Y coordinate</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"> * @param[out] dst           Output tile</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a75fb420dffabff5bf77607056bc8e5fa">  697</a></span>&#160;<span class="preprocessor">#define T_LOAD_NHWC_INDIRECT(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, B, Y, X, C, TENSOR_WIDTH, TENSOR_HEIGHT, STRIDE_Y, xi, yi, dst)                \</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="preprocessor">    ({                                                                                                                                                                \</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, TILE_AREA,                                                                                                                      \</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="preprocessor">        {                                                                                                                                                             \</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="preprocessor">            int _src_y = (X) + xi[_i].v + ((Y) + yi[_i].v) * (TENSOR_WIDTH);                                                                                          \</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="preprocessor">            _src_y += (B) * (int)(TENSOR_WIDTH) * (int)(TENSOR_HEIGHT);                                                                                               \</span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor">            int _src_valid_y = (((X) + xi[_i].v) &gt;= 0 &amp;&amp; ((X) + xi[_i].v) &lt; (int)(TENSOR_WIDTH) &amp;&amp; ((Y) + yi[_i].v) &gt;= 0 &amp;&amp; ((Y) + yi[_i].v) &lt; (int)(TENSOR_HEIGHT)); \</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="preprocessor">            if(_src_valid_y != 0)                                                                                                                                     \</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="preprocessor">            {                                                                                                                                                         \</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="preprocessor">                dst[_i].v = V_LOAD(DATA_TYPE, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, _src_y, STRIDE_Y);                                                               \</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="preprocessor">            }                                                                                                                                                         \</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="preprocessor">        })                                                                                                                                                            \</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) using an indirect buffer for the Y coordinates</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE     Data type</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment"> * @param[in]  TILE_AREA     Number of elements to load from Y (height) dimension * Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment"> * @param[in]  TILE_CHANNELS Number of elements to load from C (channel) dimension</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE   Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image).</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment"> *                           When TENSOR_TYPE=IMAGE, the if condition for the out-of-bound check can be skipped</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment"> *                           In case of cl_image, only TILE_CHANNELS multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment"> * @param[in]  TENSOR        Tensor basename</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment"> * @param[in]  C             Starting C index</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y      Stride Y (in bytes)</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment"> * @param[out] yi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect Y coordinate</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment"> *                           16 is the maximum indirect buffer size.</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment"> * @param[out] dst           Output tile</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00726"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae40a940455ca89171c2534705c5240fe">  726</a></span>&#160;<span class="preprocessor">#define T_LOAD2D_INDIRECT(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst) T_LOAD2D_INDIRECT_STR(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst)</span></div><div class="line"><a name="l00727"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5bb84cdc5ac8027d7788c25fc7c48600">  727</a></span>&#160;<span class="preprocessor">#define T_LOAD2D_INDIRECT_STR(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst) T_LOAD2D_INDIRECT_##TENSOR_TYPE(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst)</span></div><div class="line"><a name="l00728"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aac1c1770d2c80d671e4ae0c8379a4937">  728</a></span>&#160;<span class="preprocessor">#define T_LOAD2D_INDIRECT_BUFFER(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst) \</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, TILE_AREA, \</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="preprocessor">            if(yi[0].s[_i] &gt;= 0) \</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="preprocessor">                dst[_i].v = V_LOAD(DATA_TYPE, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, yi[0].s[_i], STRIDE_Y); \</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="preprocessor">            } \</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="preprocessor">        }) \</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a25b7e15257ef00a0d026890c7284052f">  739</a></span>&#160;<span class="preprocessor">#define T_LOAD2D_INDIRECT_IMAGE(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, STRIDE_Y, yi, dst) \</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, TILE_AREA, \</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="preprocessor">            dst[_i].v = V_LOAD(DATA_TYPE, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, yi[0].s[_i], STRIDE_Y); \</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="preprocessor">        }) \</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment">/** Load a tile from global memory (tensor) when the tensor is stored using a NDHWC layout using indirect X, Y and Z coordinates</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE     Data type</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"> * @param[in]  TILE_AREA     Number of elements to load from Y (height) dimension * Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment"> * @param[in]  TILE_CHANNELS Number of elements to load from C (channel) dimension</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment"> * @param[in]  TENSOR_TYPE   Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment"> *                           In case of cl_image, only TILE_CHANNELS multiples of 4 are supported (4, 8, 16)</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment"> * @param[in]  TENSOR        Tensor basename</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="comment"> * @param[in]  B             Starting batch index</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment"> * @param[in]  Z             Starting Z index</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment"> * @param[in]  Y             Starting Y index</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment"> * @param[in]  X             Starting X index</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"> * @param[in]  C             Starting C index</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment"> * @param[in]  TENSOR_WIDTH  Number of elements to load from X (width) dimension</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"> * @param[in]  TENSOR_HEIGHT Number of elements to load from Y (height) dimension</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment"> * @param[in]  TENSOR_DEPTH  Number of elements to load from Z (depth) dimension</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment"> * @param[in]  STRIDE_Y      Stride Y (in bytes)</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"> * @param[out] xi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect X coordinate</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment"> * @param[out] yi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect Y coordinate</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"> * @param[out] zi            A tile with (TILE_WIDTH x TILE_HEIGHT) values with the indirect Z coordinate</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment"> * @param[out] dst           Output tile</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00769"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a863adacda2e2ff835832de31550cf866">  769</a></span>&#160;<span class="preprocessor">#define T_LOAD_NDHWC_INDIRECT(DATA_TYPE, TILE_AREA, TILE_CHANNELS, TENSOR_TYPE, TENSOR, B, Z, Y, X, C, TENSOR_WIDTH, TENSOR_HEIGHT, TENSOR_DEPTH, STRIDE_Y, xi, yi, zi, dst) \</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="preprocessor">    ({                                                                                                                                                                \</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _i, 0, 1, TILE_AREA,                                                                                                                      \</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="preprocessor">        {                                                                                                                                                             \</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="preprocessor">            int _src_y = (X) + xi[_i].v + ((Y) + yi[_i].v) * (TENSOR_WIDTH) + ((Z) + zi[_i].v) * (TENSOR_WIDTH * TENSOR_HEIGHT);                                      \</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="preprocessor">            _src_y += (B) * (int)(TENSOR_WIDTH) * (int)(TENSOR_HEIGHT) * (int)(TENSOR_DEPTH);                                                                         \</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="preprocessor">            int _src_valid_y = (((X) + xi[_i].v) &gt;= 0 &amp;&amp; ((X) + xi[_i].v) &lt; (int)(TENSOR_WIDTH) &amp;&amp; ((Y) + yi[_i].v) &gt;= 0 &amp;&amp; ((Y) + yi[_i].v) &lt; (int)(TENSOR_HEIGHT)   \</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="preprocessor">                             &amp;&amp; ((Z) + zi[_i].v) &gt;= 0 &amp;&amp; ((Z) + zi[_i].v) &lt; (int)(TENSOR_DEPTH));                                                                     \</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="preprocessor">            if(_src_valid_y != 0)                                                                                                                                     \</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="preprocessor">            {                                                                                                                                                         \</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="preprocessor">                dst[_i].v = V_LOAD(DATA_TYPE, TILE_CHANNELS, TENSOR_TYPE, TENSOR, C, _src_y, STRIDE_Y);                                                               \</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="preprocessor">            }                                                                                                                                                         \</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="preprocessor">        })                                                                                                                                                            \</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment">/** Store a tile to global memory (tensor) using an indirect Y index tile and conditionally use a different length for the store</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment"> * @note If WIDTH1_CONDITION is true, the store will use the WIDTH1 length for the store</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment"> * @note The vectors are stored in reverse order so the invalid rows are overwritten by the valid ones</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment"> * @param[in] DATA_TYPE        Data type</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment"> * @param[in] HEIGHT           Number of src rows</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment"> * @param[in] WIDTH0           Store width to use if WIDTH1_CONDITION = false</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment"> * @param[in] WIDTH1           Store width to use if WIDTH1_CONDITION = true</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment"> * @param[in] TENSOR_TYPE      Type of cl_type used to store the tensor in global memory (BUFFER=cl_buffer, IMAGE=cl_image). Currently BUFFER only is supported</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="comment"> *                             cl_image is not supported.</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment"> * @param[in] TENSOR           Tensor basename</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment"> * @param[in] X                Starting X position</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="comment"> * @param[in] STRIDE_Y         Stride Y (in bytes)</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="comment"> * @param[in] WIDTH1_CONDITION Condition to select the WIDTH1 store</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment"> * @param[in] src              Input tile</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment"> * @param[in] indirect_y       Indirect Y index tile</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00802"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">  802</a></span>&#160;<span class="preprocessor">#define T_STORE_INDIRECT_WIDTH_SELECT(DATA_TYPE, HEIGHT, WIDTH0, WIDTH1, TENSOR_TYPE, TENSOR, X, STRIDE_Y, WIDTH1_CONDITION, src, indirect_y)                                                      \</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="preprocessor">    ({                                                                                                                                                                                             \</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="preprocessor">        if(WIDTH1_CONDITION)                                                                                                                                                                       \</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="preprocessor">        {                                                                                                                                                                                          \</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                                                                                                                  \</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="preprocessor">            {                                                                                                                                                                                      \</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="preprocessor">                VSTORE_PARTIAL(WIDTH0, WIDTH1)                                                                                                                                                     \</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="preprocessor">                (CONVERT(src[HEIGHT - 1 - _i].v, VEC_DATA_TYPE(DATA_TYPE, WIDTH0)), 0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (X) * sizeof(DATA_TYPE) + (indirect_y[HEIGHT - 1 - _i].v) * STRIDE_Y)); \</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="preprocessor">            })                                                                                                                                                                                     \</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="preprocessor">        }                                                                                                                                                                                          \</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="preprocessor">        else                                                                                                                                                                                       \</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="preprocessor">        {                                                                                                                                                                                          \</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _i, 0, 1, HEIGHT,                                                                                                                                                  \</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="preprocessor">            {                                                                                                                                                                                      \</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="preprocessor">                VSTORE(WIDTH0)                                                                                                                                                                     \</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">                (CONVERT(src[HEIGHT - 1 - _i].v, VEC_DATA_TYPE(DATA_TYPE, WIDTH0)), 0, (__global DATA_TYPE *)(TENSOR##_ptr + TENSOR##_offset_first_element_in_bytes + (X) * sizeof(DATA_TYPE) + (indirect_y[HEIGHT - 1 - _i].v) * STRIDE_Y)); \</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="preprocessor">            })                                                                                                                                                                                     \</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="preprocessor">        }                                                                                                                                                                                          \</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">/** Offset correction for the QASYMM8 computation</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment"> * @param[in]  ACC_DATA_TYPE Accumulator data type</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment"> * @param[in]  M0            Number of src/dst rows</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment"> * @param[in]  N0            Number of src/dst columns</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment"> * @param[in]  K0            Number of src columns</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"> * @param[in]  SRC_OFFSET    Source quantization offset</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment"> * @param[in]  WEI_OFFSET    Weights quantization shift</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment"> * @param[in]  lhs           LHS tile</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"> * @param[in]  rhs           RHS tile</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment"> * @param[out] dst           DST tile</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00834"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6a68b53701400447db7c777eb3b3a3a5">  834</a></span>&#160;<span class="preprocessor">#define T_OFFSET_CORRECTION(ACC_DATA_TYPE, M0, N0, K0, SRC_OFFSET, WEI_OFFSET, lhs, rhs, dst)        \</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="preprocessor">    ({                                                                                               \</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                                                           \</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="preprocessor">        {                                                                                            \</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="preprocessor">            ACC_DATA_TYPE _tm = 0;                                                                   \</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _k0, 0, 1, K0,                                                       \</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="preprocessor">            {                                                                                        \</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="preprocessor">                _tm += ((ACC_DATA_TYPE)lhs[_m0].s[_k0] * (ACC_DATA_TYPE)WEI_OFFSET);                 \</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="preprocessor">            })                                                                                       \</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n0, 0, 1, N0,                                                       \</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="preprocessor">            {                                                                                        \</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="preprocessor">                dst[_m0].s[_n0] += _tm;                                                              \</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="preprocessor">                LOOP_UNROLLING(int, _k0, 0, 1, K0,                                                   \</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="preprocessor">                {                                                                                    \</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="preprocessor">                    dst[_m0].s[_n0] += ((ACC_DATA_TYPE)rhs[_n0].s[_k0] * (ACC_DATA_TYPE)SRC_OFFSET); \</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="preprocessor">                })                                                                                   \</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="preprocessor">            })                                                                                       \</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="preprocessor">        })                                                                                          \</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">/** 8-bit quantization with fixed-point scale</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment"> * @param[in]  SRC_DATA_TYPE     SRC data type</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE     DST data type</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment"> * @param[in]  QUANTIZATION_TYPE Quantization type (PER_TENSOR or PER_CHANNEL)</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment"> * @param[in]  M0                Number of src/dst rows</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment"> * @param[in]  N0                Number of src/dst columns</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment"> * @param[in]  DST_OFFSET        Quantization offset used for both the per-tensor and per-channel quantization</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment"> * @param[in]  DST_SHIFT         Quantization shift for the per-tensor quantization</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment"> * @param[in]  DST_MULTIPLIER    Quantization multiplier for the per-tensor quantization</span></div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment"> * @param[in]  src               Input tile</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment"> * @param[in]  dst_multipliers   Output multipliers tile for the per-channel quantization</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment"> * @param[in]  dst_shifts        Output shift tile for the per-channel quantization</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment"> * @param[out] dst               Output tile</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00869"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">  869</a></span>&#160;<span class="preprocessor">#define T_QUANTIZE8(SRC_DATA_TYPE, DST_DATA_TYPE, QUANTIZATION_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst) T_QUANTIZE8_STR(SRC_DATA_TYPE, DST_DATA_TYPE, QUANTIZATION_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)</span></div><div class="line"><a name="l00870"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9dc8b4ef8492e47a26563bb504b99490">  870</a></span>&#160;<span class="preprocessor">#define T_QUANTIZE8_STR(SRC_DATA_TYPE, DST_DATA_TYPE, QUANTIZATION_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst) T_QUANTIZE8_##QUANTIZATION_TYPE(SRC_DATA_TYPE, DST_DATA_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">/** 8-bit per-tensor quantization with fixed-point scale</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment"> * @param[in]  SRC_DATA_TYPE   SRC data type</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE   DST data type</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment"> * @param[in]  M0              Number of src/dst rows</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment"> * @param[in]  N0              Number of src/dst columns</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="comment"> * @param[in]  DST_OFFSET      Quantization offset</span></div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment"> * @param[in]  DST_SHIFT       Quantization shift for the per-tensor quantization</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment"> * @param[in]  DST_MULTIPLIER  Quantization multiplier for the per-tensor quantization</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment"> * @param[in]  src             Input tile</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment"> * @param[in]  dst_multipliers (unused)</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment"> * @param[in]  dst_shifts      (unused)</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment"> * @param[out] dst             Output tile</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00886"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a905daa64964edaae4b7634c1298467ec">  886</a></span>&#160;<span class="preprocessor">#define T_QUANTIZE8_PER_TENSOR(SRC_DATA_TYPE, DST_DATA_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)                          \</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0, \</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n0, 0, 1, N0, \</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _tmp = 0; \</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _src = src[_m0].s[_n0]; \</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="preprocessor">                _src *= select((SRC_DATA_TYPE)1, ((SRC_DATA_TYPE)1 &lt;&lt; (SRC_DATA_TYPE)(-DST_SHIFT)), ((SRC_DATA_TYPE)DST_SHIFT &lt; (SRC_DATA_TYPE)0)); \</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE overflow = _src == DST_MULTIPLIER &amp;&amp; _src == INT_MIN; \</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="preprocessor">                long a_64 = (long)(_src); \</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="preprocessor">                long b_64 = (long)(DST_MULTIPLIER); \</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="preprocessor">                long ab_64 = a_64 * b_64; \</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="preprocessor">                long mask1 = 1 &lt;&lt; 30; \</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="preprocessor">                long mask2 = 1 - (1 &lt;&lt; 30); \</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="preprocessor">                long is_positive_or_zero = ab_64 &gt;= 0; \</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="preprocessor">                long nudge = select(mask2, mask1, is_positive_or_zero); \</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE ab_x2_high32 = CONVERT((ab_64 + nudge) / (long)(1ll &lt;&lt; 31), SRC_DATA_TYPE); \</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="preprocessor">                _tmp = select(ab_x2_high32, (SRC_DATA_TYPE)INT_MAX, overflow); \</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="preprocessor">                if(DST_SHIFT &gt;= 0) \</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="preprocessor">                { \</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="preprocessor">                    long mask = ((((int)1) &lt;&lt; DST_SHIFT) - (long)1); \</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="preprocessor">                    long threshold = _tmp &lt; (int)0 ? (mask &gt;&gt; 1) + (long)1 : (mask &gt;&gt; 1) + 0; \</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="preprocessor">                    _tmp = (_tmp &amp; mask) &gt; threshold ? (_tmp &gt;&gt; DST_SHIFT) + (int)1 : (_tmp &gt;&gt; DST_SHIFT); \</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="preprocessor">                } \</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="preprocessor">                _tmp += DST_OFFSET; \</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="preprocessor">                dst[_m0].s[_n0] = CONVERT_SAT(_tmp, DST_DATA_TYPE);                                                                            \</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="preprocessor">            })                                                                                                                                          \</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="preprocessor">        })                                                                                                                                          \</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment">/** 8-bit per-channel quantization with fixed-point scale</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment"> * @param[in]  SRC_DATA_TYPE   SRC data type</span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE   DST data type</span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment"> * @param[in]  M0              Number of src/dst rows</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment"> * @param[in]  N0              Number of src/dst columns</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment"> * @param[in]  DST_OFFSET      Quantization offset</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment"> * @param[in]  DST_SHIFT       (unused)</span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment"> * @param[in]  DST_MULTIPLIER  (unused)</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment"> * @param[in]  src             Input tile</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment"> * @param[in]  dst_multipliers Output multipliers tile for the per-channel quantization</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment"> * @param[in]  dst_shifts      Output shift tile for the per-channel quantization</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment"> * @param[out] dst             Output tile</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00931"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ad88e14864b3413d4968ac8aca87db599">  931</a></span>&#160;<span class="preprocessor">#define T_QUANTIZE8_PER_CHANNEL(SRC_DATA_TYPE, DST_DATA_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)                          \</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0, \</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n0, 0, 1, N0, \</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _tmp = 0; \</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _tmp2 = 0; \</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _src = src[_m0].s[_n0]; \</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _dst_multiplier = dst_multipliers[0].s[_n0]; \</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _dst_shift = dst_shifts[0].s[_n0]; \</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="preprocessor">                _src *= select((SRC_DATA_TYPE)1, ((SRC_DATA_TYPE)1 &lt;&lt; (SRC_DATA_TYPE)(-_dst_shift)), ((SRC_DATA_TYPE)_dst_shift &lt; (SRC_DATA_TYPE)0)); \</span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE overflow = _src == _dst_multiplier &amp;&amp; _src == INT_MIN; \</span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="preprocessor">                long a_64 = (long)(_src); \</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="preprocessor">                long b_64 = (long)(_dst_multiplier); \</span></div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="preprocessor">                long ab_64 = a_64 * b_64; \</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="preprocessor">                long mask1 = 1 &lt;&lt; 30; \</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="preprocessor">                long mask2 = 1 - (1 &lt;&lt; 30); \</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="preprocessor">                long is_positive_or_zero = ab_64 &gt;= 0; \</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="preprocessor">                long nudge = select(mask2, mask1, is_positive_or_zero); \</span></div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE ab_x2_high32 = CONVERT((ab_64 + nudge) / (long)(1ll &lt;&lt; 31), SRC_DATA_TYPE); \</span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="preprocessor">                _tmp = select(ab_x2_high32, (SRC_DATA_TYPE)INT_MAX, overflow); \</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="preprocessor">                long mask = ((((int)1) &lt;&lt; _dst_shift) - (int)1); \</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="preprocessor">                long threshold = (mask &gt;&gt; 1) + any(_tmp); \</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="preprocessor">                _tmp2 = _tmp &gt;&gt; _dst_shift; \</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="preprocessor">                _tmp2 += select(0, 1, (_tmp &amp; mask) &gt; threshold); \</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="preprocessor">                _tmp = select(_tmp, _tmp2, _dst_shift &gt;= 0); \</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="preprocessor">                _tmp += DST_OFFSET; \</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="preprocessor">                dst[_m0].s[_n0] = CONVERT_SAT(_tmp, DST_DATA_TYPE);                                                                            \</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="preprocessor">            })                                                                                                                                          \</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="preprocessor">        })                                                                                                                                         \</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment">/** Quantized the 8-bit tile with fixed-point scale for asymmetric</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment"> * @param[in]  SRC_DATA_TYPE  SRC data type</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE  DST data type</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment"> * @param[in]  M0             Number of src/dst rows</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<span class="comment"> * @param[in]  N0             Number of src/dst columns</span></div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment"> * @param[in]  DST_OFFSET     Quantization offset used for both the per-tensor and per-channel quantization</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment"> * @param[in]  DST_SHIFT      Quantization shift for the per-tensor quantization</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment"> * @param[in]  DST_MULTIPLIER Quantization multiplier for the per-tensor quantization</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment"> * @param[in]  src            Input tile</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment"> * @param[out] dst            Output tile</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00976"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aec4e2fc77571ec86d0186790f9246203">  976</a></span>&#160;<span class="preprocessor">#define T_QUANTIZE8_ASYMMETRIC(SRC_DATA_TYPE, DST_DATA_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst)                          \</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0, \</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n0, 0, 1, N0, \</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _tmp = 0; \</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE _src = src[_m0].s[_n0]; \</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="preprocessor">                _src *= select((SRC_DATA_TYPE)1, ((SRC_DATA_TYPE)1 &lt;&lt; (SRC_DATA_TYPE)(-DST_SHIFT)), ((SRC_DATA_TYPE)DST_SHIFT &lt; (SRC_DATA_TYPE)0)); \</span></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE overflow = _src == DST_MULTIPLIER &amp;&amp; _src == INT_MIN; \</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="preprocessor">                long a_64 = (long)(_src); \</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="preprocessor">                long b_64 = (long)(DST_MULTIPLIER); \</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="preprocessor">                long ab_64 = a_64 * b_64; \</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="preprocessor">                long mask1 = 1 &lt;&lt; 30; \</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="preprocessor">                long mask2 = 1 - (1 &lt;&lt; 30); \</span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="preprocessor">                long is_positive_or_zero = ab_64 &gt;= 0; \</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="preprocessor">                long nudge = select(mask2, mask1, is_positive_or_zero); \</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="preprocessor">                SRC_DATA_TYPE ab_x2_high32 = CONVERT((ab_64 + nudge) / (long)(1ll &lt;&lt; 31), SRC_DATA_TYPE); \</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="preprocessor">                _tmp = select(ab_x2_high32, (SRC_DATA_TYPE)INT_MAX, overflow); \</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="preprocessor">                if(DST_SHIFT &gt;= 0) \</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="preprocessor">                { \</span></div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="preprocessor">                    long mask = ((((int)1) &lt;&lt; DST_SHIFT) - (int)1); \</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="preprocessor">                    long threshold = _tmp &lt; (int)0 ? (mask &gt;&gt; 1) + (long)1 : (mask &gt;&gt; 1) + 0; \</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="preprocessor">                    _tmp = (_tmp &amp; mask) &gt; threshold ? (_tmp &gt;&gt; DST_SHIFT) + (int)1 : (_tmp &gt;&gt; DST_SHIFT); \</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="preprocessor">                } \</span></div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="preprocessor">                _tmp += DST_OFFSET; \</span></div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="preprocessor">                dst[_m0].s[_n0] = CONVERT_SAT(_tmp, DST_DATA_TYPE);                                                                            \</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="preprocessor">            })                                                                                                                                          \</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="preprocessor">        })                                                                                                                                          \</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment">/** Conditional rowset (memset by row)</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment"> * @note Set the row to VALUE_TO_SET if the corresponding mask == 0</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment"> * @param[in]      DATA_TYPE    Data type</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment"> * @param[in]      M0           Number of LHS rows</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment"> * @param[in]      N0           Number of LHS columns</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="comment"> * @param[in]      VALUE_TO_SET Value to set the row</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment"> * @param[in, out] a            Input/output tile</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment"> * @param[out]     mask         Mask to check for setting the row to VALUE_TO_SET</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01018"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a22c55ae970c97f5492dd5a4c0747f0ff"> 1018</a></span>&#160;<span class="preprocessor">#define T_ROWSET_MASK(DATA_TYPE, M0, N0, VALUE_TO_SET, a, mask)                                                                                            \</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="preprocessor">    ({                                                                                                                                                     \</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                                                                                                                 \</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="preprocessor">        {                                                                                                                                                  \</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n0, 0, 1, N0,                                                                                                             \</span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="preprocessor">            {                                                                                                                                              \</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="preprocessor">                a[_m0].s[_n0] = select((DATA_TYPE)(a[_m0].s[_n0]), (DATA_TYPE)(VALUE_TO_SET), (SELECT_DATA_TYPE(DATA_TYPE))(mask[_m0].v == (DATA_TYPE)0)); \</span></div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="preprocessor">            })                                                                                                                                             \</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="preprocessor">        })                                                                                                                                                 \</span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment">/** Element-wise activation for floating point types</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment"> * @note Performs: activation(LHS) = DST</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE       SRC/DST data type</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment"> * @param[in]  M0              Number of SRC/DST rows</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment"> * @param[in]  N0              Number of SRC/DST columns</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment"> * @param[in]  ACTIVATION_TYPE Activation type</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment"> * @param[in]  A_VAL           A value used for the activation (e.g. tanh_op, brelu,..)</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment"> * @param[in]  B_VAL           B value used for the activation (e.g. tanh_op, brelu,..)</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment"> * @param[out] src             SRC tile</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="comment"> * @param[out] dst             DST tile</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01042"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a336c1d61c904535dcf47e0baadc1d63e"> 1042</a></span>&#160;<span class="preprocessor">#define T_ACTIVATION(DATA_TYPE, M0, N0, ACTIVATION_TYPE, A_VAL, B_VAL, src, dst)               \</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="preprocessor">    ({                                                                                         \</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                                                     \</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="preprocessor">        {                                                                                      \</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="preprocessor">            dst[_m0].v = ACTIVATION(ACTIVATION_TYPE, DATA_TYPE, N0, src[_m0].v, A_VAL, B_VAL); \</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="preprocessor">        })                                                                                     \</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">// RELU Activation</span></div><div class="line"><a name="l01051"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa7cae90bd9288a29042e9f5e61099acb"> 1051</a></span>&#160;<span class="preprocessor">#define relu_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) (max((DATA_TYPE)ZERO_VALUE, x))</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment">// Bounded RELU Activation</span></div><div class="line"><a name="l01053"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aed6d70bea1db470289b61ef40db94fbc"> 1053</a></span>&#160;<span class="preprocessor">#define brelu_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) (min((DATA_TYPE)A_VAL, max((DATA_TYPE)ZERO_VALUE, x)))</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment">// Lower Upper Bounded RELU Activation</span></div><div class="line"><a name="l01055"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6550b04fc5893b1cb7c2596ab6ca104b"> 1055</a></span>&#160;<span class="preprocessor">#define lu_brelu_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) (min(max(x, (DATA_TYPE)B_VAL), (DATA_TYPE)A_VAL))</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment">// Hard Swish Activation</span></div><div class="line"><a name="l01057"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab6c7522266abe4f7008a353883947117"> 1057</a></span>&#160;<span class="preprocessor">#define hard_swish_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) (x * ((min(max((DATA_TYPE)(x + (DATA_TYPE)3.f), (DATA_TYPE)0.f), (DATA_TYPE)6.f)) * (DATA_TYPE)0.166666667f))</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment">// Identity Activation</span></div><div class="line"><a name="l01059"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7748a965dde0eb12582dee25f95c1a54"> 1059</a></span>&#160;<span class="preprocessor">#define identity_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) (x)</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a4256097eef1c4ed830b68ff0971ebccc"> 1061</a></span>&#160;<span class="preprocessor">#define ACT_OP_QUANTIZED(op, DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) op##_op_quantized(DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x)</span></div><div class="line"><a name="l01062"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a769834e4c047a255424828ad5e37f1f9"> 1062</a></span>&#160;<span class="preprocessor">#define ACTIVATION_QUANTIZED(op, DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x) ACT_OP_QUANTIZED(op, DATA_TYPE, VEC_SIZE, ZERO_VALUE, A_VAL, B_VAL, x)</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a8e9be124cc215bbada294acdc355cd16"> 1064</a></span>&#160;<span class="preprocessor">#define V_ADD(A_VAL, B_VAL) ((A_VAL) + (B_VAL))</span></div><div class="line"><a name="l01065"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab7ac9788e2664e06078af2fb3a002e65"> 1065</a></span>&#160;<span class="preprocessor">#define V_SUB(A_VAL, B_VAL) ((A_VAL) - (B_VAL))</span></div><div class="line"><a name="l01066"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a78372d98977dbeccbb0a3803868ef550"> 1066</a></span>&#160;<span class="preprocessor">#define V_DIV(A_VAL, B_VAL) ((A_VAL) / (B_VAL))</span></div><div class="line"><a name="l01067"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae4961bf2aaa8b0dea5de23cb7b3729f0"> 1067</a></span>&#160;<span class="preprocessor">#define V_MUL(A_VAL, B_VAL) ((A_VAL) * (B_VAL))</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="comment">/** Element-wise activation for quantized types</span></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment"> * @note Performs: activation(LHS) = DST</span></div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE       SRC/DST data type</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"> * @param[in]  M0              Number of SRC/DST rows</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment"> * @param[in]  N0              Number of SRC/DST columns</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> * @param[in]  ACTIVATION_TYPE Activation type</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment"> * @param[in]  ZERO_VALUE      The zero value to consider in the computation</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"> * @param[in]  A_VAL           A value used for the activation (e.g. tanh_op, brelu,..)</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"> * @param[in]  B_VAL           B value used for the activation (e.g. tanh_op, brelu,..)</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> * @param[out] src             SRC tile</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"> * @param[out] dst             DST tile</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01083"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aca28f580270a7e9de24e485a61de9c5e"> 1083</a></span>&#160;<span class="preprocessor">#define T_ACTIVATION_QUANTIZED(DATA_TYPE, M0, N0, ACTIVATION_TYPE, ZERO_VALUE, A_VAL, B_VAL, src, dst)               \</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0, \</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="preprocessor">            dst[_m0].v = ACTIVATION_QUANTIZED(ACTIVATION_TYPE, DATA_TYPE, N0, ZERO_VALUE, A_VAL, B_VAL, src[_m0].v); \</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="preprocessor">        })                                                                                          \</span></div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment">/** Element-wise addition between two tiles</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment"> * @note Performs: LHS + RHS = DST</span></div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE LHS/RHS/DST data type</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment"> * @param[in]  M0        Number of LHS rows</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment"> * @param[in]  N0        Number of LHS columns</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment"> * @param[in]  lhs       LHS tile</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment"> * @param[in]  rhs       Constant RHS tile</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment"> * @param[out] dst       DST tile</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01102"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a154f08c5653ab9437108c613d293289a"> 1102</a></span>&#160;<span class="preprocessor">#define T_ADD(DATA_TYPE, M0, N0, lhs, rhs, dst) \</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="preprocessor">    ({                                                            \</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                        \</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="preprocessor">        {                                                         \</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="preprocessor">            dst[_m0].v = lhs[_m0].v + rhs[_m0].v; \</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="preprocessor">        })                                                        \</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment">/** Element-wise addition with a constant value</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment"> * @note Performs: LHS + constant = DST</span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE    LHS/RHS/DST data type</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="comment"> * @param[in]  M0           Number of LHS rows</span></div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="comment"> * @param[in]  N0           Number of LHS columns</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment"> * @param[in]  lhs          LHS tile</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment"> * @param[in]  rhs_constant Constant value</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="comment"> * @param[out] dst          DST tile</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01121"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a002bba6bacd4d85928c207b5c98b0881"> 1121</a></span>&#160;<span class="preprocessor">#define T_ADD_CONSTANT(DATA_TYPE, M0, N0, lhs, rhs_constant, dst) \</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="preprocessor">    ({                                                            \</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                        \</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="preprocessor">        {                                                         \</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">            dst[_m0].v = lhs[_m0].v + (DATA_TYPE)rhs_constant;               \</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="preprocessor">        })                                                        \</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div><div class="line"><a name="l01129"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40"> 1129</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_ADD_X(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_X(V_ADD, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01130"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aadbc7f44a9c1211df153c914c0ec9128"> 1130</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_LHS_X_ADD(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_LHS_X(V_ADD, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01131"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae3fea1ce5b307e5ffef3079006f99b30"> 1131</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_RHS_X_ADD(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_X(V_ADD, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7c8a36d80f12cf1eb21a633e1928e06b"> 1133</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_LHS_X_SUB(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_LHS_X(V_SUB, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01134"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aa9e373b4a98fbc198bf580330ecc4a62"> 1134</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_RHS_X_SUB(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_X(V_SUB, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;</div><div class="line"><a name="l01136"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#acc42b12ae9bb9e923242c286a36334e9"> 1136</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_DIV_X(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_X(V_DIV, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6a941b5f45e742d301133ec83d03758c"> 1138</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_LHS_X_MUL(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_LHS_X(V_MUL, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01139"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a066f375933fdac6767d45473c3b90aba"> 1139</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_RHS_X_MUL(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE_BROADCAST_X(V_MUL, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment">/** Element-wise scale with a constant value</span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment"> * @note Performs: LHS * constant = DST</span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment"> * @param[in]  DATA_TYPE    LHS/RHS/DST data type</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment"> * @param[in]  M0           Number of LHS rows</span></div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="comment"> * @param[in]  N0           Number of LHS columns</span></div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;<span class="comment"> * @param[in]  lhs          LHS tile</span></div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment"> * @param[in]  rhs_constant Constant value</span></div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="comment"> * @param[out] dst          DST tile</span></div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01152"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ae3176ee20096c234d65e79090d64ba9e"> 1152</a></span>&#160;<span class="preprocessor">#define T_SCALE_CONSTANT(DATA_TYPE, M0, N0, lhs, rhs_constant, dst) \</span></div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="preprocessor">    ({                                                            \</span></div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                        \</span></div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="preprocessor">        {                                                         \</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="preprocessor">            dst[_m0].v = lhs[_m0].v * (DATA_TYPE)rhs_constant; \</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="preprocessor">        })                                                        \</span></div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;<span class="comment">/** Element-wise operation with RHS broadcasted (RHS has the X dimension only)</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="comment"> * @note Performs: LHS OP RHS[broadcasted] = DST</span></div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment"> * @note Both tiles must have same data type</span></div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="comment"> * @param[in]  T_ELWISE_OP   Elementwise operator to perform</span></div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE DST data type</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment"> * @param[in]  M0            Number of LHS rows</span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment"> * @param[in]  N0            Number of LHS columns</span></div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment"> * @param[in]  lhs           LHS tile</span></div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment"> * @param[in]  rhs           RHS tile</span></div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment"> * @param[out] dst           DST tile</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01173"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a18f74105624ada82fef0ee4591d91815"> 1173</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_X(T_ELWISE_OP, DST_DATA_TYPE, M0, N0, lhs, rhs, dst) \</span></div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="preprocessor">    ({                                                      \</span></div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                  \</span></div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="preprocessor">        {                                                   \</span></div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;<span class="preprocessor">            dst[_m0].v = T_ELWISE_OP(CONVERT(lhs[_m0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)), CONVERT(rhs[0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)));             \</span></div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;<span class="preprocessor">        })                                                  \</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="comment">/** Element-wise operation with LHS broadcasted (LHS has the X dimension only)</span></div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="comment"> * @note Performs: LHS[broadcasted] OP RHS = DST</span></div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="comment"> * @note Both tiles must have same data type</span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="comment"> * @param[in]  T_ELWISE_OP   Elementwise operator to perform</span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE DST data type</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="comment"> * @param[in]  M0            Number of RHS rows</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="comment"> * @param[in]  N0            Number of RHS columns</span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="comment"> * @param[in]  lhs           LHS tile</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="comment"> * @param[in]  rhs           RHS tile</span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="comment"> * @param[out] dst           DST tile</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01194"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a092c1ceca912c9485b5225b4ad826e8c"> 1194</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_BROADCAST_LHS_X(T_ELWISE_OP, DST_DATA_TYPE, M0, N0, lhs, rhs, dst) \</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="preprocessor">    ({                                                      \</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                  \</span></div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="preprocessor">        {                                                   \</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="preprocessor">            dst[_m0].v = T_ELWISE_OP(CONVERT(lhs[0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)), CONVERT(rhs[_m0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)));             \</span></div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="preprocessor">        })                                                  \</span></div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6ae3fab3def0579dfc8f54ad0bdcad1b"> 1202</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_ADD(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE(V_ADD, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01203"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6cb772148ccd3e13d89950379f4ed12c"> 1203</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_SUB(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE(V_SUB, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01204"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a25992dfbea2c887750e9cf98193697da"> 1204</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_DIV(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE(V_DIV, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01205"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#afde6e50cd70df676c4fd7fd3e43794ec"> 1205</a></span>&#160;<span class="preprocessor">#define T_ELTWISE_MUL(DST_DATA_TYPE, M0, N0, lhs, rhs, dst) T_ELTWISE(V_MUL, DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</span></div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="comment">/** Element-wise operation between two tiles (LHS and RHS)</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="comment"> * @note Performs: LHS OP RHS = DST</span></div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="comment"> * @note Both tiles must have same data type</span></div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="comment"> * @param[in]  T_ELWISE_OP   Elementwise operator to perform</span></div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE DST data type</span></div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;<span class="comment"> * @param[in]  M0            Number of LHS rows</span></div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="comment"> * @param[in]  N0            Number of LHS columns</span></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="comment"> * @param[in]  lhs           LHS tile</span></div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment"> * @param[in]  rhs           RHS tile</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="comment"> * @param[out] dst           DST tile</span></div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01220"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a7c1e6b07f6fef9e0bf9049ce6cd91de1"> 1220</a></span>&#160;<span class="preprocessor">#define T_ELTWISE(T_ELWISE_OP, DST_DATA_TYPE, M0, N0, lhs, rhs, dst) \</span></div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="preprocessor">    ({                                                      \</span></div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                  \</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="preprocessor">        {                                                   \</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="preprocessor">            dst[_m0].v = T_ELWISE_OP(CONVERT(lhs[_m0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)), CONVERT(rhs[_m0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)));             \</span></div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="preprocessor">        })                                                  \</span></div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment">/** Floor operation on a tile</span></div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="comment"> * @note Performs: floor(SRC) = DST</span></div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"> * @note Both tiles must have same data type</span></div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment"> * @param[in]  DST_DATA_TYPE DST data type</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment"> * @param[in]  M0            Number of SRC rows</span></div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;<span class="comment"> * @param[in]  N0            Number of SRC columns</span></div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="comment"> * @param[in]  src           LHS tile</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="comment"> * @param[out] dst           DST tile</span></div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01239"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a5104aed866a4900a607353062fcf9506"> 1239</a></span>&#160;<span class="preprocessor">#define T_FLOOR(DST_DATA_TYPE, M0, N0, src, dst) \</span></div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="preprocessor">    ({                                                      \</span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m0, 0, 1, M0,                  \</span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="preprocessor">        {                                                   \</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<span class="preprocessor">            dst[_m0].v = floor(CONVERT(src[_m0].v, VEC_DATA_TYPE(DST_DATA_TYPE, N0)));             \</span></div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="preprocessor">        })                                                  \</span></div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="comment">/** Matrix multiplication</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment"> * @note Performs: LHS X RHS + DST = DST</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment"> * @param[in]      LHS_DATA_TYPE LHS tile data type</span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="comment"> * @param[in]      RHS_DATA_TYPE RHS tile data type</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="comment"> * @param[in]      DST_DATA_TYPE RHS tile data type</span></div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;<span class="comment"> * @param[in]      M0            Number of LHS rows</span></div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;<span class="comment"> * @param[in]      N0            Number of RHS columns</span></div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="comment"> * @param[in]      K0            Number of LHS columns</span></div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;<span class="comment"> * @param[in]      LHS_LAYOUT    LHS layout (T= transposed, NT= not transposed)</span></div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;<span class="comment"> * @param[in]      RHS_LAYOUT    RHS layout (T= transposed, NT= not transposed)</span></div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;<span class="comment"> * @param[in]      lhs           LHS tile</span></div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;<span class="comment"> * @param[in]      rhs           RHS tile</span></div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;<span class="comment"> * @param[in, out] dst           DST tile</span></div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01263"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a00d8171420bb5b00639be9e0776262f5"> 1263</a></span>&#160;<span class="preprocessor">#define T_MMUL(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, LHS_LAYOUT, RHS_LAYOUT, lhs, rhs, dst) T_MMUL_##LHS_LAYOUT##_##RHS_LAYOUT(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01264"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ab31aed5e5490fa56e68de4fd1801a7be"> 1264</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_##LHS_DATA_TYPE##_##RHS_DATA_TYPE##_##DST_DATA_TYPE(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01265"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9fcbfd2d986c6d6627a7fe1d4a0d3b9a"> 1265</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_float_float_float(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_FLOAT(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01266"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a6814e336b0f21cc089a3c8ab65688c29"> 1266</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_half_half_float(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_FLOAT(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01267"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#a9340276252c55ac0728d665391652ea1"> 1267</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_half_half_half(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_FLOAT(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01268"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af990a08f320ba9a388de6e587a00547e"> 1268</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_char_char_int(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_INTEGER8(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01269"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#ac82cfd5071a9147c6fecd1d8026d6988"> 1269</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_uchar_uchar_uint(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_INTEGER8(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01270"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#aca983830bf9fbe2fbad22c22c6524f36"> 1270</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_uchar_uchar_int(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst) T_MMUL_NT_T_INTEGER8(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)</span></div><div class="line"><a name="l01271"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#abfe99d07158f933c1b24f2000f7693cf"> 1271</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_FLOAT(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)                       \</span></div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="preprocessor">    {                                                                                     \</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m, 0, 1, M0,                                                 \</span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="preprocessor">        {                                                                                 \</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n, 0, 1, N0,                                             \</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="preprocessor">            {                                                                             \</span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="preprocessor">                LOOP_UNROLLING(int, _k, 0, 1, K0,                                         \</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="preprocessor">                {                                                                         \</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="preprocessor">                    dst[_m].s[_n] = fma((DST_DATA_TYPE)(lhs[_m].s[_k]), (DST_DATA_TYPE)(rhs[_n].s[_k]), dst[_m].s[_n]); \</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor">                })                                                                        \</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor">            })                                                                            \</span></div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="preprocessor">        })                                                                                \</span></div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div><div class="line"><a name="l01285"></a><span class="lineno"><a class="line" href="tile__helpers_8h.xhtml#af2c779ff5c7513ae751524b8e270387e"> 1285</a></span>&#160;<span class="preprocessor">#define T_MMUL_NT_T_INTEGER8(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, lhs, rhs, dst)                            \</span></div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;<span class="preprocessor">    ({ \</span></div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="preprocessor">        LOOP_UNROLLING(int, _m, 0, 1, M0, \</span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="preprocessor">        { \</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="preprocessor">            LOOP_UNROLLING(int, _n, 0, 1, N0, \</span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="preprocessor">            { \</span></div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="preprocessor">                DOT_PRODUCT_INTEGER8(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, K0, (lhs[_m].v), (rhs[_n].v), dst[_m].s[_n]); \</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="preprocessor">            })                                                                                             \</span></div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="preprocessor">        })                                                                                             \</span></div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_CORE_CL_CL_KERNELS_TILE_HELPERS */</span><span class="preprocessor"></span></div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="tile__helpers_8h.xhtml">tile_helpers.h</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:44 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
