<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/pooling/depthfirst_driver.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('pooling_2depthfirst__driver_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthfirst_driver.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pooling_2depthfirst__driver_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;pooling.hpp&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">src/core/NEON/kernels/arm_gemm/utils.hpp</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a> {</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacearm__conv_1_1pooling.xhtml">   31</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml">   33</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml">IDepthfirstStrategy</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a8d54fabd7fca24845dfea0efb29e78e1">~IDepthfirstStrategy</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#ab0b6ea9c4b4f604ca361b6721ea98bb7">get_input_rows</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a91ca018be7e1c85f38958fc03ccd0c99">get_input_cols</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a7f54bd87fda5be013a3db54229e51fd9">get_output_rows</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a3099c5aa5c16177dbd9ac096452da791">get_output_cols</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;};</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">   47</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">   49</a></span>&#160;  T <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">base</a>;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#aa6545bf4fbb65fb7740e5ca3ee13b48e">   50</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#aa6545bf4fbb65fb7740e5ca3ee13b48e">ld_row</a>, ld_col;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#abbccc9114a18de5948c045732565be64">   52</a></span>&#160;  <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#abbccc9114a18de5948c045732565be64">TensorSpec</a>(T ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  : base(ptr), ld_row(ld_row), ld_col(ld_col) {}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TOutput&gt;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml">   58</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml">DepthfirstDriver</a> : <span class="keyword">public</span> PoolingCommon&lt;TInput, TOutput&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">protected</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keyword">using</span> Parent = PoolingCommon&lt;TInput, TOutput&gt;;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="comment">// The strategy which we&#39;re applying to solve the pooling problem.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  std::unique_ptr&lt;const IDepthfirstStrategy&gt; m_strat;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="comment">/* Compute the amount of working space required for a single thread. */</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> get_working_size_per_thread(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_input_channels) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="comment">/* Initialise the working space for a thread. */</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> initialise_working_space(<span class="keywordtype">void</span> *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_input_channels) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="comment">/* Compute a portion of the output tensor with padding. */</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> compute_tile_padded(</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_j,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_end,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;const TInput *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;TOutput *&gt;</a> &amp;output,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">void</span> *working_space</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  ) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="comment">/* Compute a portion of the work with only top/bottom padding.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">   *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">   * The default implementation of this repeatedly calls into the padded tile</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">   * variant.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">   */</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> compute_row_padded_tile_row(</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_j, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_tile_cols,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_start, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_end,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;const TInput *&gt;</a> &amp;input,</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;TOutput *&gt;</a> &amp;output,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">void</span> *working_space</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  )<span class="keyword"> const</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">for</span> (; n_tile_cols; n_tile_cols--, output_j += m_strat-&gt;get_output_cols())</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      this-&gt;compute_tile_padded(</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        output_i, output_j, output_channel_start, output_channel_end,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        input, output, working_space</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      );</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="comment">/* Compute a portion of the output tensor with no padding.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">   *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">   * The default implementation of this repeatedly calls into the padded</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">   * variant.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">   */</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> compute_tiles_unpadded(</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_output_i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_output_j,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_tile_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_tile_cols,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_start, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_channel_end,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;const TInput *&gt;</a> &amp;input,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;TOutput *&gt;</a> &amp;output,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">void</span> *working_space</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  )<span class="keyword"> const</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tile_i = 0; tile_i &lt; n_tile_rows; tile_i++)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      this-&gt;compute_row_padded_tile_row(</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        start_output_i, start_output_j, n_tile_cols,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        output_channel_start, output_channel_end,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        input, output, working_space</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      );</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      start_output_i += m_strat-&gt;get_output_rows();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordtype">void</span> execute_internal(</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_batches,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_channels,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> PaddingValues &amp;padding,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *input,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">size_t</span> ld_input_col,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">size_t</span> ld_input_row,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">size_t</span> ld_input_batch,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">void</span> *output,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">size_t</span> ld_output_col,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">size_t</span> ld_output_row,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">size_t</span> ld_output_batch,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">void</span> *working_space,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_id,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  )<span class="keyword"> const override</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Get and initialise the working space for this thread.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">void</span> *thread_working_space =</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(working_space) + thread_id * this-&gt;get_working_size_per_thread(n_channels);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    this-&gt;initialise_working_space(thread_working_space, n_channels);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Construct convenient representations of the input/output tensors.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;const TInput *&gt;</a> input_tensor(reinterpret_cast&lt;const TInput *&gt;(input), ld_input_row, ld_input_col);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec&lt;TOutput *&gt;</a> output_tensor(reinterpret_cast&lt;TOutput *&gt;(output), ld_output_row, ld_output_col);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// If the output is a 1x1 tensor, which commonly occurs at the end of a</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// network, then we change the threading strategy to parallelise over</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// channels rather than rows of the tensor.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">if</span> (n_threads &gt; 1 &amp;&amp; output_height == 1 &amp;&amp; output_width == 1)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="comment">// Determine how many channels should be assigned to each thread, we</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      <span class="comment">// round up first to ensure we get a reasonable spread across the</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      <span class="comment">// threads.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> channels_per_thread = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a>(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a>(n_channels, 16u), n_threads) / n_threads;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> start_channel = thread_id * channels_per_thread;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> end_channel = std::min(start_channel + channels_per_thread, n_channels);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      <span class="keywordflow">if</span> (start_channel &gt;= end_channel)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="comment">// This thread should move on if we have insufficient work to do.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      <span class="keywordflow">for</span> (; n_batches; n_batches--)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// We know we don&#39;t need to iterate over rows or columns here; so just</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// execute the tile.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        this-&gt;compute_tile_padded(</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;          0, 0,  <span class="comment">// Compute the only output point</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;          start_channel, end_channel,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;          input_tensor, output_tensor, thread_working_space</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        );</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Progress the pointers for the next batch.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        input_tensor.<a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">base</a> += ld_input_batch;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        output_tensor.<a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">base</a> += ld_output_batch;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="comment">// Exit here, since we&#39;ve done all the work using the different strategy.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> &lt; n_batches; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>++)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="comment">// Iterate over rows of the output tensor; we stripe over the tiles.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_output_i = thread_id * m_strat-&gt;get_output_rows();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;           start_output_i &lt; output_height;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;           start_output_i += n_threads * m_strat-&gt;get_output_rows())</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="comment">// Determine what (if any padding) is required on the top/bottom of</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">// this row of the convolution.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> end_output_i = start_output_i + m_strat-&gt;get_output_rows();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> pad_output_bottom = output_height &lt; end_output_i;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_input_i = start_output_i * this-&gt;m_args.pool_stride.rows - padding.top;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> pad_input_top = start_input_i &lt; 0;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_input_i = start_input_i + m_strat-&gt;get_input_rows();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> pad_input_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>) &lt; end_input_i;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> pad_row = pad_input_top || pad_input_bottom || pad_output_bottom;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="comment">// Iterate over the columns of the output tensor; we attempt to grab as</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// much as possible of the unpadded regions, so the loop structure is a</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// bit odd.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_output_j = 0;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">while</span> (start_output_j &lt; output_width)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_j = start_output_j * this-&gt;m_args.pool_stride.cols - padding.left;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">bool</span> pad_input_left = start_in_j &lt; 0;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          <span class="comment">// Determine if we can process a number of unpadded tiles in one go.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;          <span class="keywordtype">int</span> n_unpadded_tiles = 0;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          <span class="keywordflow">if</span> (!pad_input_left)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="comment">// Determine the maximum number of tiles we could handle.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            n_unpadded_tiles = (output_width - start_output_j) / m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="comment">// Handle padding on the right hand edge</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> tile_stride = m_strat-&gt;get_output_cols() * this-&gt;m_args.pool_stride.cols;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordtype">int</span> end_output_j = start_output_j + n_unpadded_tiles * m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keywordtype">int</span> end_input_j = start_in_j + m_strat-&gt;get_input_cols() + (n_unpadded_tiles - 1)*tile_stride;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">while</span> (n_unpadded_tiles &gt; 0 &amp;&amp;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                   (static_cast&lt;int&gt;(output_width) &lt; end_output_j ||</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    static_cast&lt;int&gt;(input_width) &lt; end_input_j))</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;              n_unpadded_tiles--;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;              end_output_j -= m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;              end_input_j -= tile_stride;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;          }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;          <span class="comment">// Process unpadded tiles, if possible, otherwise process a padded tile.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;          <span class="keywordflow">if</span> (n_unpadded_tiles)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;          {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">if</span> (!pad_row)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;              <span class="comment">// Completely unpadded execution</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;              this-&gt;compute_tiles_unpadded(</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                start_output_i, start_output_j,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                1, n_unpadded_tiles,  <span class="comment">// Compute a row of unpadded tiles</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                0, n_channels,  <span class="comment">// Compute all channels</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                input_tensor, output_tensor, thread_working_space</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;              );</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;              <span class="comment">// Top/bottom padding only</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;              this-&gt;compute_row_padded_tile_row(</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                start_output_i, start_output_j, n_unpadded_tiles,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                0, n_channels,  <span class="comment">// Compute all channels</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                input_tensor, output_tensor, thread_working_space</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;              );</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            start_output_j += n_unpadded_tiles * m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;          }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;          <span class="keywordflow">else</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;          {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            this-&gt;compute_tile_padded(</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;              start_output_i, start_output_j,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;              0, n_channels,  <span class="comment">// Compute all channels</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;              input_tensor, output_tensor, thread_working_space</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            );</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            start_output_j += m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="comment">// Progress the pointers for the next batch.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      input_tensor.<a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">base</a> += ld_input_batch;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      output_tensor.<a class="code" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">base</a> += ld_output_batch;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a1cc73f031d4d21471113eb34e4124ffb">  287</a></span>&#160;  <a class="code" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a1cc73f031d4d21471113eb34e4124ffb">DepthfirstDriver</a>(<span class="keyword">const</span> <a class="code" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml">IDepthfirstStrategy</a> *<a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, <span class="keyword">const</span> PoolingArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  : Parent(args), m_strat(strategy)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">  292</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">get_working_size</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads)<span class="keyword"> const override</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">return</span> this-&gt;get_working_size(n_threads, this-&gt;m_args.n_channels);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a0fa0038f87c223437d9be07ce66ccbed">  297</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a0fa0038f87c223437d9be07ce66ccbed">get_working_size</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_channels) <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> n_threads * this-&gt;get_working_size_per_thread(n_channels);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;};</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}  <span class="comment">// namespace pooling</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}  <span class="comment">// namespace arm_conv</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="namespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00029">addressing.cpp:29</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_depthfirst_driver_xhtml_ae2ca173a7d8633ac958e775fb614b1e1"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">arm_conv::pooling::DepthfirstDriver::get_working_size</a></div><div class="ttdeci">size_t get_working_size(unsigned int n_threads) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00292">depthfirst_driver.hpp:292</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00062">impl.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__conv_1_1pooling_xhtml_a2dbb9d67088387c8cb61b8d7d063afd1"><div class="ttname"><a href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">arm_conv::pooling::pooling</a></div><div class="ttdeci">template UniquePoolingCommon&lt; float, float &gt; pooling(const PoolingArgs &amp;, const Nothing &amp;)</div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml_a8d54fabd7fca24845dfea0efb29e78e1"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a8d54fabd7fca24845dfea0efb29e78e1">arm_conv::pooling::IDepthfirstStrategy::~IDepthfirstStrategy</a></div><div class="ttdeci">virtual ~IDepthfirstStrategy()=default</div></div>
<div class="ttc" id="structarm__conv_1_1pooling_1_1_tensor_spec_xhtml_abbccc9114a18de5948c045732565be64"><div class="ttname"><a href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#abbccc9114a18de5948c045732565be64">arm_conv::pooling::TensorSpec::TensorSpec</a></div><div class="ttdeci">TensorSpec(T ptr, size_t ld_row, size_t ld_col)</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00052">depthfirst_driver.hpp:52</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_depthfirst_driver_xhtml_a0fa0038f87c223437d9be07ce66ccbed"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a0fa0038f87c223437d9be07ce66ccbed">arm_conv::pooling::DepthfirstDriver::get_working_size</a></div><div class="ttdeci">size_t get_working_size(unsigned int n_threads, unsigned int n_channels) const override final</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00297">depthfirst_driver.hpp:297</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml_a7f54bd87fda5be013a3db54229e51fd9"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a7f54bd87fda5be013a3db54229e51fd9">arm_conv::pooling::IDepthfirstStrategy::get_output_rows</a></div><div class="ttdeci">virtual unsigned int get_output_rows() const =0</div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml_ab0b6ea9c4b4f604ca361b6721ea98bb7"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#ab0b6ea9c4b4f604ca361b6721ea98bb7">arm_conv::pooling::IDepthfirstStrategy::get_input_rows</a></div><div class="ttdeci">virtual unsigned int get_input_rows() const =0</div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="structarm__conv_1_1pooling_1_1_tensor_spec_xhtml_a11521c8ae37a77e6e129b4e1ea8d6fda"><div class="ttname"><a href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#a11521c8ae37a77e6e129b4e1ea8d6fda">arm_conv::pooling::TensorSpec::base</a></div><div class="ttdeci">T base</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00049">depthfirst_driver.hpp:49</a></div></div>
<div class="ttc" id="structarm__conv_1_1pooling_1_1_tensor_spec_xhtml_aa6545bf4fbb65fb7740e5ca3ee13b48e"><div class="ttname"><a href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml#aa6545bf4fbb65fb7740e5ca3ee13b48e">arm_conv::pooling::TensorSpec::ld_row</a></div><div class="ttdeci">size_t ld_row</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00050">depthfirst_driver.hpp:50</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_depthfirst_driver_xhtml_a1cc73f031d4d21471113eb34e4124ffb"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml#a1cc73f031d4d21471113eb34e4124ffb">arm_conv::pooling::DepthfirstDriver::DepthfirstDriver</a></div><div class="ttdeci">DepthfirstDriver(const IDepthfirstStrategy *strategy, const PoolingArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00287">depthfirst_driver.hpp:287</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_depthfirst_driver_xhtml"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml">arm_conv::pooling::DepthfirstDriver</a></div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00058">depthfirst_driver.hpp:58</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml">arm_conv::pooling::IDepthfirstStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00033">depthfirst_driver.hpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml_a3099c5aa5c16177dbd9ac096452da791"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a3099c5aa5c16177dbd9ac096452da791">arm_conv::pooling::IDepthfirstStrategy::get_output_cols</a></div><div class="ttdeci">virtual unsigned int get_output_cols() const =0</div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy_xhtml_a91ca018be7e1c85f38958fc03ccd0c99"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml#a91ca018be7e1c85f38958fc03ccd0c99">arm_conv::pooling::IDepthfirstStrategy::get_input_cols</a></div><div class="ttdeci">virtual unsigned int get_input_cols() const =0</div></div>
<div class="ttc" id="structarm__conv_1_1pooling_1_1_tensor_spec_xhtml"><div class="ttname"><a href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">arm_conv::pooling::TensorSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="pooling_2depthfirst__driver_8hpp_source.xhtml#l00047">depthfirst_driver.hpp:47</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="dir_0478b45d7abe353b326d807ccde1ebbc.xhtml">pooling</a></li><li class="navelem"><a class="el" href="pooling_2depthfirst__driver_8hpp.xhtml">depthfirst_driver.hpp</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:45 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
