<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/GpuWorkloadSourceCode.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_gpu_workload_source_code_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GpuWorkloadSourceCode.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gpu_workload_source_code_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022-2023 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUWORKLOADSOURCECODE</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUWORKLOADSOURCECODE</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_types_8h.xhtml">arm_compute/core/experimental/Types.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_descriptor_8h.xhtml">arm_compute/dynamic_fusion/sketch/MemoryDescriptor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_kernel_source_code_8h.xhtml">src/dynamic_fusion/sketch/gpu/GpuKernelSourceCode.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/** Uniquely identifies a @ref GpuUnitWorkload within a @ref GpuWorkloadSourceCode */</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">   38</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> = int32_t;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/** Describes all the info related to a kernel in order to:</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *  - be used by runtime to configure gpu kernel argument</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> *  - be used by memory managers to allocate required memory</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">   44</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#aeccf7e6df13a7461dc94b8c3d210055c">GpuWorkloadArgument</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * @param[in] tensor_info     @ref ITensorInfo of the workload argument</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     * @param[in] mem_desc        @ref MemoryDescriptor of the workload argument</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     * @param[in] kernel_arg_info @ref GpuKernelArgumentInfo of the workload argument</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#acaf9c2ec24f769f6ba11b82fde99aa52">   55</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#acaf9c2ec24f769f6ba11b82fde99aa52">GpuWorkloadArgument</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>           &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ae6cb0552151232cf220aceefd6325bb1">tensor_info</a>,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>      &amp;mem_desc,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;kernel_arg_info)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        : _tensor_info{ tensor_info },</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;          _mem_desc{ mem_desc },</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;          _kernel_arg_info{ kernel_arg_info }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /** Get tensor id within workload */</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a370bcd54ccd7afe8eedb3be0c47bd689">   64</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a370bcd54ccd7afe8eedb3be0c47bd689">id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> _tensor_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">id</a>();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">    /** Get @ref ITensorInfo of the argument */</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ae6cb0552151232cf220aceefd6325bb1">   69</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ae6cb0552151232cf220aceefd6325bb1">tensor_info</a>()</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> &amp;_tensor_info;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /** Get @ref ITensorInfo of the argument */</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#add1ac05b810f3150c4b78235e4b166bf">   74</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#add1ac05b810f3150c4b78235e4b166bf">tensor_info</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> &amp;_tensor_info;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /** Get @ref MemoryDescriptor of the argument */</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#afc2cb47763f78c8fd5c37087f80a562e">   79</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#afc2cb47763f78c8fd5c37087f80a562e">memory_descriptor</a>()</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> &amp;_mem_desc;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">    /** Get @ref MemoryDescriptor of the argument */</span></div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a590b2ba63f21d3e8566ec22c4de43e74">   84</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a590b2ba63f21d3e8566ec22c4de43e74">memory_descriptor</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> &amp;_mem_desc;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /** Get @ref GpuKernelArgumentInfo of the argument */</span></div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a791c669c9aca06f81dcf8bbb94c34f24">   89</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a791c669c9aca06f81dcf8bbb94c34f24">kernel_argument_info</a>()</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> &amp;_kernel_arg_info;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /** Get @ref GpuKernelArgumentInfo of the argument */</span></div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a335866a3d0ebf784ed26a25bac0edf33">   94</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a335866a3d0ebf784ed26a25bac0edf33">kernel_argument_info</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> &amp;_kernel_arg_info;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">    /** Check if the workload argument has valid id</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @return true   If has valid id</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     * @return false  Otherwise</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">  103</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">has_valid_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> _tensor_info.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">has_valid_id</a>();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>            _tensor_info{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>      _mem_desc{};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> _kernel_arg_info{};</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/** Describes when a unit workload is run.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">  116</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604eb">  118</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604eb">Stage</a></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">Prepare</a>, <span class="comment">/**&lt; Only run once at the beginning. */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        Run,     <span class="comment">/**&lt; Run every time after the first time. */</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    };</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#a883f9b9e0d3b0efbf982dc8c1d814ccc">  123</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604eb">Stage</a> stage{ Stage::Run };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;};</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d8c915c15145d6e31f8123d349cd895">  126</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7bf4bff4857d4c4853192a2ad42f3328">operator==</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage0, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage1)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> stage0.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#a883f9b9e0d3b0efbf982dc8c1d814ccc">stage</a> == stage1.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#a883f9b9e0d3b0efbf982dc8c1d814ccc">stage</a>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/** The atomic unit in a Gpu workload. It contains exactly one kernel to run.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">  133</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * @param[in] id          Id that uniquely identifies this unit workload in a workload</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * @param[in] kernel_code @ref GpuKernelSourceCode contained within</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * @param[in] stage       Stage of the unit workload</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a457fda6a21fa78f244b13dada30bffd5">  144</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a457fda6a21fa78f244b13dada30bffd5">GpuUnitWorkload</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> &amp;kernel_code, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        : _id{ <span class="keywordtype">id</span> }, _kernel_code{ kernel_code }, _stage{ stage }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">    /** Get the id of the unit workload */</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a6d4253fcad8ca5c7c33464bec324c0d9">  149</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a6d4253fcad8ca5c7c33464bec324c0d9">id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> _id;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">    /** Get reference to the underlying @ref GpuKernelSourceCode */</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a527f7161e9420f23aef62e54ba1ae96d">  154</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a527f7161e9420f23aef62e54ba1ae96d">code</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> _kernel_code;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /** Get the stage of the unit workload */</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#ac01b84040141b3c4aec889386cb7faac">  159</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#ac01b84040141b3c4aec889386cb7faac">stage</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">return</span> _stage;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a>      _id{};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> _kernel_code{};</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a>   _stage{};</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;};</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">/** Hold the generated kernel source code and other information required to compile and run the workload.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">  172</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">    /** Add a unit workload to the workload code</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     * @param[in] kernel_code @ref GpuKernelSourceCode to be contained within the unit workload</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * @param[in] stage       Stage of the unit workload</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * @param[in] mem_map     @ref MemoryDescriptor map for all tensors within the unit workload</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * @return UnitWorkloadId  Allocated unit workload id</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a27af264f70b8aa87ceba002fd8091129">  185</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a27af264f70b8aa87ceba002fd8091129">add_unit_workload</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> &amp;kernel_code, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> &amp;mem_map)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// Use the size of the kernel codes as Id</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> uwk_id    = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a><span class="keyword">&gt;</span>(_unit_workloads.size());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> unit_work = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>(uwk_id, kernel_code, stage);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        _unit_workloads.push_back(unit_work);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">// Assemble kernel argument with memory descriptor to form workload argument</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;id_arg : kernel_code.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml#af347f4d304e8438f3396f6380feccc88">arguments</a>())</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_id           = id_arg.first;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg              = id_arg.second;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            _workload_arguments[arg_id] = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a>{ *arg.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ae6cb0552151232cf220aceefd6325bb1">tensor_info</a>(), mem_map.at(arg_id), *arg.kernel_argument_info() };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">if</span>(_tensor_uwork_map.find(arg_id) == _tensor_uwork_map.end())</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                _tensor_uwork_map[arg_id] = std::set&lt;UnitWorkloadId&gt;();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            _tensor_uwork_map[arg_id].insert(uwk_id);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">return</span> uwk_id;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">    /** Get a unit workload from its id */</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#aed8dfe12532ef59b7227fd4d98de0f5d">  206</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#aed8dfe12532ef59b7227fd4d98de0f5d">query_unit_workload</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> <span class="keywordtype">id</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keywordtype">id</span> &lt; 0);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> _unit_workloads.at(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">    /** Get all unit workloads sorted in topological order */</span></div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a92bdead48551a0dd9f3130be51f232a4">  212</a></span>&#160;    std::vector&lt;UnitWorkloadId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a92bdead48551a0dd9f3130be51f232a4">unit_workloads</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        std::vector&lt;UnitWorkloadId&gt; ids{};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;uwk : _unit_workloads)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            ids.push_back(uwk.id());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">    /** Get a @ref GpuWorkloadArgument from its associated tensor id */</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a436e490ebc74a1c95654c97ee8a7084e">  223</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a436e490ebc74a1c95654c97ee8a7084e">query_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> t_id)<span class="keyword"> const</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span> &amp;_workload_arguments.at(t_id);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /** Get all tensors in the entire workload */</span></div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a1c98886be19b8a3140f462f67a123652">  228</a></span>&#160;    std::vector&lt;ITensorInfo::Id&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a1c98886be19b8a3140f462f67a123652">tensors</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        std::vector&lt;ITensorInfo::Id&gt; ids{};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;id_tensor : _workload_arguments)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            ids.push_back(id_tensor.first);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">    /** Get all unit workloads connected to the tensor with @p t_id */</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#af1f6a79485c6bf44b9969e372bd96edd">  238</a></span>&#160;    std::vector&lt;UnitWorkloadId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#af1f6a79485c6bf44b9969e372bd96edd">get_unit_workloads_from_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> t_id)<span class="keyword"> const</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> unit_work_set = _tensor_uwork_map.at(t_id);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;UnitWorkloadId&gt;(unit_work_set.begin(), unit_work_set.end());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::vector&lt;GpuUnitWorkload&gt; _unit_workloads{};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    std::map&lt;ITensorInfo::Id, GpuWorkloadArgument&gt;      _workload_arguments{};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    std::map&lt;ITensorInfo::Id, std::set&lt;UnitWorkloadId&gt;&gt; _tensor_uwork_map{};</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_DYNAMIC_FUSION_SKETCH_GPU_GPUWORKLOADSOURCECODE */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_aed8dfe12532ef59b7227fd4d98de0f5d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#aed8dfe12532ef59b7227fd4d98de0f5d">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::query_unit_workload</a></div><div class="ttdeci">const GpuUnitWorkload &amp; query_unit_workload(UnitWorkloadId id) const</div><div class="ttdoc">Get a unit workload from its id. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00206">GpuWorkloadSourceCode.h:206</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_a370bcd54ccd7afe8eedb3be0c47bd689"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a370bcd54ccd7afe8eedb3be0c47bd689">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::id</a></div><div class="ttdeci">ITensorInfo::Id id() const</div><div class="ttdoc">Get tensor id within workload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00064">GpuWorkloadSourceCode.h:64</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a7bf4bff4857d4c4853192a2ad42f3328"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7bf4bff4857d4c4853192a2ad42f3328">arm_compute::experimental::dynamic_fusion::operator==</a></div><div class="ttdeci">bool operator==(const KernelProperties &amp;config0, const KernelProperties &amp;config1)</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00056">IGpuKernelComponent.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">arm_compute::experimental::dynamic_fusion::GpuUnitWorkload</a></div><div class="ttdoc">The atomic unit in a Gpu workload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00133">GpuWorkloadSourceCode.h:133</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_a883f9b9e0d3b0efbf982dc8c1d814ccc"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#a883f9b9e0d3b0efbf982dc8c1d814ccc">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::stage</a></div><div class="ttdeci">Stage stage</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00123">GpuWorkloadSourceCode.h:123</a></div></div>
<div class="ttc" id="_memory_descriptor_8h_xhtml"><div class="ttname"><a href="_memory_descriptor_8h.xhtml">MemoryDescriptor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode</a></div><div class="ttdoc">Hold the generated kernel source code and other information required to compile and run the workload...</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00172">GpuWorkloadSourceCode.h:172</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelSourceCode</a></div><div class="ttdoc">Container of kernel code to be compiled and run in a GpuUnitWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_source_code_8h_source.xhtml#l00045">GpuKernelSourceCode.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_ae6cb0552151232cf220aceefd6325bb1"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ae6cb0552151232cf220aceefd6325bb1">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::tensor_info</a></div><div class="ttdeci">ITensorInfo * tensor_info()</div><div class="ttdoc">Get ITensorInfo of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00069">GpuWorkloadSourceCode.h:69</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_a1c98886be19b8a3140f462f67a123652"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a1c98886be19b8a3140f462f67a123652">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::tensors</a></div><div class="ttdeci">std::vector&lt; ITensorInfo::Id &gt; tensors() const</div><div class="ttdoc">Get all tensors in the entire workload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00228">GpuWorkloadSourceCode.h:228</a></div></div>
<div class="ttc" id="arm__compute_2core_2experimental_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a4d71b29724606979807dcfc1ad80ef6c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">arm_compute::experimental::dynamic_fusion::UnitWorkloadId</a></div><div class="ttdeci">int32_t UnitWorkloadId</div><div class="ttdoc">Uniquely identifies a GpuUnitWorkload within a GpuWorkloadSourceCode. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00038">GpuWorkloadSourceCode.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_ac3b745acece5fb22971e8888f1d5b4a6"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::has_valid_id</a></div><div class="ttdeci">bool has_valid_id() const</div><div class="ttdoc">Check if the workload argument has valid id. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00103">GpuWorkloadSourceCode.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_a27af264f70b8aa87ceba002fd8091129"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a27af264f70b8aa87ceba002fd8091129">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::add_unit_workload</a></div><div class="ttdeci">UnitWorkloadId add_unit_workload(const GpuKernelSourceCode &amp;kernel_code, const UnitWorkloadStage &amp;stage, const MemoryDescriptorMap &amp;mem_map)</div><div class="ttdoc">Add a unit workload to the workload code. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00185">GpuWorkloadSourceCode.h:185</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_afc2cb47763f78c8fd5c37087f80a562e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#afc2cb47763f78c8fd5c37087f80a562e">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::memory_descriptor</a></div><div class="ttdeci">MemoryDescriptor * memory_descriptor()</div><div class="ttdoc">Get MemoryDescriptor of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00079">GpuWorkloadSourceCode.h:79</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelArgumentInfo</a></div><div class="ttdoc">Contain information required to set up a kernel argument at run time. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_argument_8h_source.xhtml#l00037">GpuKernelArgument.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload_xhtml_a6d4253fcad8ca5c7c33464bec324c0d9"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a6d4253fcad8ca5c7c33464bec324c0d9">arm_compute::experimental::dynamic_fusion::GpuUnitWorkload::id</a></div><div class="ttdeci">UnitWorkloadId id() const</div><div class="ttdoc">Get the id of the unit workload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00149">GpuWorkloadSourceCode.h:149</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload_xhtml_a527f7161e9420f23aef62e54ba1ae96d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a527f7161e9420f23aef62e54ba1ae96d">arm_compute::experimental::dynamic_fusion::GpuUnitWorkload::code</a></div><div class="ttdeci">const GpuKernelSourceCode &amp; code() const</div><div class="ttdoc">Get reference to the underlying GpuKernelSourceCode. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00154">GpuWorkloadSourceCode.h:154</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_a791c669c9aca06f81dcf8bbb94c34f24"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a791c669c9aca06f81dcf8bbb94c34f24">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::kernel_argument_info</a></div><div class="ttdeci">GpuKernelArgumentInfo * kernel_argument_info()</div><div class="ttdoc">Get GpuKernelArgumentInfo of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00089">GpuWorkloadSourceCode.h:89</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage</a></div><div class="ttdoc">Describes when a unit workload is run. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00116">GpuWorkloadSourceCode.h:116</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::MemoryDescriptor</a></div><div class="ttdoc">Descriptor of a workload tensor memory. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_descriptor_8h_source.xhtml#l00084">MemoryDescriptor.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_aeccf7e6df13a7461dc94b8c3d210055c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#aeccf7e6df13a7461dc94b8c3d210055c">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::GpuWorkloadArgument</a></div><div class="ttdeci">GpuWorkloadArgument()=default</div><div class="ttdoc">Default constructor. </div></div>
<div class="ttc" id="_gpu_kernel_source_code_8h_xhtml"><div class="ttname"><a href="_gpu_kernel_source_code_8h.xhtml">GpuKernelSourceCode.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload_xhtml_ac01b84040141b3c4aec889386cb7faac"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#ac01b84040141b3c4aec889386cb7faac">arm_compute::experimental::dynamic_fusion::GpuUnitWorkload::stage</a></div><div class="ttdeci">UnitWorkloadStage stage() const</div><div class="ttdoc">Get the stage of the unit workload. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00159">GpuWorkloadSourceCode.h:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload_xhtml_a457fda6a21fa78f244b13dada30bffd5"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#a457fda6a21fa78f244b13dada30bffd5">arm_compute::experimental::dynamic_fusion::GpuUnitWorkload::GpuUnitWorkload</a></div><div class="ttdeci">GpuUnitWorkload(UnitWorkloadId id, const GpuKernelSourceCode &amp;kernel_code, const UnitWorkloadStage &amp;stage)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00144">GpuWorkloadSourceCode.h:144</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_a92bdead48551a0dd9f3130be51f232a4"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a92bdead48551a0dd9f3130be51f232a4">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::unit_workloads</a></div><div class="ttdeci">std::vector&lt; UnitWorkloadId &gt; unit_workloads() const</div><div class="ttdoc">Get all unit workloads sorted in topological order. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00212">GpuWorkloadSourceCode.h:212</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_abe5718c3616edd5134e3058a1bb50b76"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">arm_compute::experimental::dynamic_fusion::MemoryDescriptorMap</a></div><div class="ttdeci">std::map&lt; ITensorInfo::Id, MemoryDescriptor &gt; MemoryDescriptorMap</div><div class="ttdoc">A map from ITensorInfo to their corresponding MemoryDescriptor. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_descriptor_8h_source.xhtml#l00091">MemoryDescriptor.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_add1ac05b810f3150c4b78235e4b166bf"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#add1ac05b810f3150c4b78235e4b166bf">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::tensor_info</a></div><div class="ttdeci">const ITensorInfo * tensor_info() const</div><div class="ttdoc">Get ITensorInfo of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00074">GpuWorkloadSourceCode.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_a335866a3d0ebf784ed26a25bac0edf33"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a335866a3d0ebf784ed26a25bac0edf33">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::kernel_argument_info</a></div><div class="ttdeci">const GpuKernelArgumentInfo * kernel_argument_info() const</div><div class="ttdoc">Get GpuKernelArgumentInfo of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00094">GpuWorkloadSourceCode.h:94</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::MemoryLifetime::Prepare</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument</a></div><div class="ttdoc">Describes all the info related to a kernel in order to: </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00044">GpuWorkloadSourceCode.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_acaf9c2ec24f769f6ba11b82fde99aa52"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#acaf9c2ec24f769f6ba11b82fde99aa52">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::GpuWorkloadArgument</a></div><div class="ttdeci">GpuWorkloadArgument(const ITensorInfo &amp;tensor_info, const MemoryDescriptor &amp;mem_desc, const GpuKernelArgumentInfo &amp;kernel_arg_info)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00055">GpuWorkloadSourceCode.h:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a5b041295b3b91cef1c6ff19132d5d471"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">arm_compute::TensorInfo::id</a></div><div class="ttdeci">ITensorInfo::Id id() const override</div><div class="ttdoc">Get the workload tensor id of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00302">TensorInfo.h:302</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_a436e490ebc74a1c95654c97ee8a7084e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a436e490ebc74a1c95654c97ee8a7084e">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::query_tensor</a></div><div class="ttdeci">const GpuWorkloadArgument * query_tensor(ITensorInfo::Id t_id) const</div><div class="ttdoc">Get a GpuWorkloadArgument from its associated tensor id. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00223">GpuWorkloadSourceCode.h:223</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code_xhtml_af347f4d304e8438f3396f6380feccc88"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml#af347f4d304e8438f3396f6380feccc88">arm_compute::experimental::dynamic_fusion::GpuKernelSourceCode::arguments</a></div><div class="ttdeci">GpuKernelSourceCode &amp; arguments(const GpuKernelArgumentList &amp;arguments)</div><div class="ttdoc">Set kernel argument list. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_source_code_8h_source.xhtml#l00079">GpuKernelSourceCode.h:79</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_aca8133200c1122e29b87b314d82604eb"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604eb">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::Stage</a></div><div class="ttdeci">Stage</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00118">GpuWorkloadSourceCode.h:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ac3b745acece5fb22971e8888f1d5b4a6"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">arm_compute::ITensorInfo::has_valid_id</a></div><div class="ttdeci">bool has_valid_id() const</div><div class="ttdoc">Check if the tensor id is valid. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00309">ITensorInfo.h:309</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a1fafaeb6e3ab8c0bc772532cc3fcff1a"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">arm_compute::ITensorInfo::Id</a></div><div class="ttdeci">int32_t Id</div><div class="ttdoc">An id that uniquely identifies an ITensorInfo within some domain (e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00046">ITensorInfo.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument_xhtml_a590b2ba63f21d3e8566ec22c4de43e74"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#a590b2ba63f21d3e8566ec22c4de43e74">arm_compute::experimental::dynamic_fusion::GpuWorkloadArgument::memory_descriptor</a></div><div class="ttdeci">const MemoryDescriptor * memory_descriptor() const</div><div class="ttdoc">Get MemoryDescriptor of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00084">GpuWorkloadSourceCode.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code_xhtml_af1f6a79485c6bf44b9969e372bd96edd"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#af1f6a79485c6bf44b9969e372bd96edd">arm_compute::experimental::dynamic_fusion::GpuWorkloadSourceCode::get_unit_workloads_from_tensor</a></div><div class="ttdeci">std::vector&lt; UnitWorkloadId &gt; get_unit_workloads_from_tensor(ITensorInfo::Id t_id) const</div><div class="ttdoc">Get all unit workloads connected to the tensor with t_id. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00238">GpuWorkloadSourceCode.h:238</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="_gpu_workload_source_code_8h.xhtml">GpuWorkloadSourceCode.h</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:48 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
