<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::experimental::dynamic_fusion Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::experimental::dynamic_fusion Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a generic class that packs the arguments of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> information for tensors with <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">MemoryType::Auxiliary</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">CastAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">ClampAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_activation.xhtml">ClComponentActivation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast.xhtml">ClComponentCast</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast_settings.xhtml">ClComponentCastSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d.xhtml">ClComponentDepthwiseConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml">ClComponentDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml">ClComponentDirectConv2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_elementwise_binary.xhtml">ClComponentElementwiseBinary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_logits1_d_max_shift_exp_sum.xhtml">ClComponentLogits1DMaxShiftExpSum</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component to calculate max-shifted exponentials and their sum.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_logits1_d_max_shift_exp_sum.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_logits1_d_norm.xhtml">ClComponentLogits1DNorm</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component to calculate the final step of the Softmax Layer where each logit value is multiplied by the inverse of the sum of the logits.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_logits1_d_norm.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_pool2d.xhtml">ClComponentPool2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_reshape.xhtml">ClComponentReshape</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_resize.xhtml">ClComponentResize</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_store.xhtml">ClComponentStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml">ClKernelRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a single kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_activation.xhtml">ClTemplateActivation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_cast.xhtml">ClTemplateCast</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_depthwise_conv2d.xhtml">ClTemplateDepthwiseConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_direct_conv2d.xhtml">ClTemplateDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_elementwise_binary.xhtml">ClTemplateElementwiseBinary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_logits1_d_max_shift_exp_sum.xhtml">ClTemplateLogits1DMaxShiftExpSum</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_logits1_d_norm.xhtml">ClTemplateLogits1DNorm</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_pool2d.xhtml">ClTemplatePool2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_reshape.xhtml">ClTemplateReshape</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_resize.xhtml">ClTemplateResize</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_store.xhtml">ClTemplateStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml">ClTemplateWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use a templated-string-based method to write kernel code It stitches the component code templates together based on the valid fusion configuration.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">Conv2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-input (tensors), multi-output (tensors) acyclic directed graph Represented as a doubly-linked adjacency list with the differentiation between source and destination.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">DepthwiseConv2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml">ElementwiseBinaryCommonAttributes</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_add.xhtml">GpuAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_cast.xhtml">GpuCast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_clamp.xhtml">GpuClamp</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_clamp.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Services that are used throughout the creation phase of workload code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml">GpuConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_depthwise_conv2d.xhtml">GpuDepthwiseConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_depthwise_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_elementwise_binary_common.xhtml">GpuElementwiseBinaryCommon</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_elementwise_binary_common.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> argument information linked with its corresponding <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contain information required to set up a kernel argument at run time.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml">GpuKernelComponentFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory class that creates new instances of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> by assigning new component ids.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-input (tensors), multi-output (tensors) acyclic directed graph of gpu kernel components Its main purposes are:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A group of gpu kernel components to be fused together PRECONDITIONS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of component groups serialized from the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> Each component group in the stream denotes a complete kernel that may consist of multiple components.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of kernel code to be compiled and run in a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_variable_table.xhtml">GpuKernelVariableTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A table of all the variables used in the kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_variable_table.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper-processor of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> It adds the load (if any) and store components to the component group The <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a> represents a complete kernel, and can proceed to invoke any kernel writer to generate the full kernel code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mul.xhtml">GpuMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml">GpuOperatorGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of operators to be fused in a workload For the time being, this class is only used for validating operator fusion INVARIANTS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_output.xhtml">GpuOutput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_output.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d.xhtml">GpuPool2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">GpuPool2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> backend specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_reshape.xhtml">GpuReshape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_reshape.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_resize.xhtml">GpuResize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_resize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_softmax.xhtml">GpuSoftmax</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_softmax.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sub.xhtml">GpuSub</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sub.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The atomic unit in a Gpu workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes all the info related to a kernel in order to:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml">GpuWorkloadContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide context necessary for the creation and configuration of a workload e.g.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A descriptor of a workload of operators.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hold the generated kernel source code and other information required to compile and run the workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An abstract interface of a component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml">IGpuKernelWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface that can write a gpu kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_template_component_writer.xhtml">IGpuTemplateComponentWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface used by <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_template_writer.xhtml">ClTemplateWriter</a> to write source code for a kernel component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_template_component_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Properties common to all kernel component types.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor of a workload tensor memory.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An operator for the sole purpose of validating fusion.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_reshape_attributes.xhtml">ReshapeAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_reshape_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">ResizeAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">SoftmaxAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tag value will substitute a tag in a string template during its instantiation.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes when a unit workload is run.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a37e4969b4b21379046bb4d89690af049"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a37e4969b4b21379046bb4d89690af049">GpuTarget</a> = ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td></tr>
<tr class="memdesc:a37e4969b4b21379046bb4d89690af049"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Information such as the Gpu target (for example, G76)  <a href="#a37e4969b4b21379046bb4d89690af049">More...</a><br /></td></tr>
<tr class="separator:a37e4969b4b21379046bb4d89690af049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5718c3616edd5134e3058a1bb50b76"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> &gt;</td></tr>
<tr class="memdesc:abe5718c3616edd5134e3058a1bb50b76"><td class="mdescLeft">&#160;</td><td class="mdescRight">A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>.  <a href="#abe5718c3616edd5134e3058a1bb50b76">More...</a><br /></td></tr>
<tr class="separator:abe5718c3616edd5134e3058a1bb50b76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03b0a94b67bc162ab8e33fffab3269a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a03b0a94b67bc162ab8e33fffab3269a0">Settings</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td></tr>
<tr class="separator:a03b0a94b67bc162ab8e33fffab3269a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afff13da4ff0bb0cd14e24f19743c8225"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> = int32_t</td></tr>
<tr class="memdesc:afff13da4ff0bb0cd14e24f19743c8225"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a kernel component within a workload.  <a href="#afff13da4ff0bb0cd14e24f19743c8225">More...</a><br /></td></tr>
<tr class="separator:afff13da4ff0bb0cd14e24f19743c8225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a165147f9bae84df3fd14dda9e8894051"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a165147f9bae84df3fd14dda9e8894051">GpuKernelArgumentList</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a> &gt;</td></tr>
<tr class="memdesc:a165147f9bae84df3fd14dda9e8894051"><td class="mdescLeft">&#160;</td><td class="mdescRight">The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>.  <a href="#a165147f9bae84df3fd14dda9e8894051">More...</a><br /></td></tr>
<tr class="separator:a165147f9bae84df3fd14dda9e8894051"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c53fb0e6cdb59d291688a586922ae57"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td></tr>
<tr class="separator:a7c53fb0e6cdb59d291688a586922ae57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d71b29724606979807dcfc1ad80ef6c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> = int32_t</td></tr>
<tr class="memdesc:a4d71b29724606979807dcfc1ad80ef6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>.  <a href="#a4d71b29724606979807dcfc1ad80ef6c">More...</a><br /></td></tr>
<tr class="separator:a4d71b29724606979807dcfc1ad80ef6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af037c70dc8c0318e30d3a5138776337e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a> = std::string</td></tr>
<tr class="memdesc:af037c70dc8c0318e30d3a5138776337e"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tag used in a string template is a placeholder string to be substituted by real values during template instantiation.  <a href="#af037c70dc8c0318e30d3a5138776337e">More...</a><br /></td></tr>
<tr class="separator:af037c70dc8c0318e30d3a5138776337e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afacfec8193ed701f3646c22bc2d35455"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> = std::unordered_map&lt; <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a> &gt;</td></tr>
<tr class="memdesc:afacfec8193ed701f3646c22bc2d35455"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tag lookup table.  <a href="#afacfec8193ed701f3646c22bc2d35455">More...</a><br /></td></tr>
<tr class="separator:afacfec8193ed701f3646c22bc2d35455"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>
 }<tr class="memdesc:aa334134c2d2596d8de13df6f9cb67d1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Language.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462bfa9dfea81692463ecb192183dd01"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">Virtual</a> = 2
 }<tr class="memdesc:a462bfa9dfea81692463ecb192183dd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of memory used by a workload tensor.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a462bfa9dfea81692463ecb192183dd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab26c0327042b802ca8cff46a9bc67670"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">Output</a>
 }<tr class="memdesc:ab26c0327042b802ca8cff46a9bc67670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:ab26c0327042b802ca8cff46a9bc67670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17730d14d0e88d5aed17a12e872c4efe"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>
 }<tr class="memdesc:a17730d14d0e88d5aed17a12e872c4efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contain properties common to all operator types.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a17730d14d0e88d5aed17a12e872c4efe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7bf4bff4857d4c4853192a2ad42f3328">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config1)</td></tr>
<tr class="separator:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59d422703eb311f8538f35e041b0bbcf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a59d422703eb311f8538f35e041b0bbcf">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;info0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;info1)</td></tr>
<tr class="separator:a59d422703eb311f8538f35e041b0bbcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d8c915c15145d6e31f8123d349cd895"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d8c915c15145d6e31f8123d349cd895">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage1)</td></tr>
<tr class="separator:a4d8c915c15145d6e31f8123d349cd895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a118248edb8d3a4911bc101671512856b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a118248edb8d3a4911bc101671512856b">is_alloc_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a118248edb8d3a4911bc101671512856b"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> should have backing memory.  <a href="#a118248edb8d3a4911bc101671512856b">More...</a><br /></td></tr>
<tr class="separator:a118248edb8d3a4911bc101671512856b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499dfe6aa8bf166e03f1a15eca55355e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a499dfe6aa8bf166e03f1a15eca55355e">is_noalloc_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a499dfe6aa8bf166e03f1a15eca55355e"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> should not have backing memory.  <a href="#a499dfe6aa8bf166e03f1a15eca55355e">More...</a><br /></td></tr>
<tr class="separator:a499dfe6aa8bf166e03f1a15eca55355e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66520faad3ee3d1e34cc87dc42499e2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">is_valid_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a66520faad3ee3d1e34cc87dc42499e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has valid id  <a href="#a66520faad3ee3d1e34cc87dc42499e2c">More...</a><br /></td></tr>
<tr class="separator:a66520faad3ee3d1e34cc87dc42499e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abc943b3c8259d286f7f04e3dd5fcec7f">is_invalid_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has invalid id  <a href="#abc943b3c8259d286f7f04e3dd5fcec7f">More...</a><br /></td></tr>
<tr class="separator:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7efcc693cd1a28a201322cf6b330bba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab7efcc693cd1a28a201322cf6b330bba">convert_pool_attr_to_pool_info</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> &amp;pool_attr, bool mixed_precision=false, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</td></tr>
<tr class="memdesc:ab7efcc693cd1a28a201322cf6b330bba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inline function to convert <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> to <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct. ">PoolingLayerInfo</a>.  <a href="#ab7efcc693cd1a28a201322cf6b330bba">More...</a><br /></td></tr>
<tr class="separator:ab7efcc693cd1a28a201322cf6b330bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a229f7c437acf59940c4723fce78c6d5c"><td class="memItemLeft" align="right" valign="top">constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a229f7c437acf59940c4723fce78c6d5c">vector_size_byte_opencl</a> = 16</td></tr>
<tr class="separator:a229f7c437acf59940c4723fce78c6d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="afff13da4ff0bb0cd14e24f19743c8225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afff13da4ff0bb0cd14e24f19743c8225">&#9670;&nbsp;</a></span>ComponentId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a kernel component within a workload. </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">37</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a165147f9bae84df3fd14dda9e8894051"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a165147f9bae84df3fd14dda9e8894051">&#9670;&nbsp;</a></span>GpuKernelArgumentList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a165147f9bae84df3fd14dda9e8894051">GpuKernelArgumentList</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument.xhtml">GpuKernelArgument</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml">GpuKernelSourceCode.h</a>.</p>

</div>
</div>
<a id="a37e4969b4b21379046bb4d89690af049"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e4969b4b21379046bb4d89690af049">&#9670;&nbsp;</a></span>GpuTarget</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GpuTarget</a> =  ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gpu Information such as the Gpu target (for example, G76) </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>

</div>
</div>
<a id="abe5718c3616edd5134e3058a1bb50b76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe5718c3616edd5134e3058a1bb50b76">&#9670;&nbsp;</a></span>MemoryDescriptorMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>. </p>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00091">91</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>

</div>
</div>
<a id="a7c53fb0e6cdb59d291688a586922ae57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c53fb0e6cdb59d291688a586922ae57">&#9670;&nbsp;</a></span>OperatorId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>.</p>

</div>
</div>
<a id="a03b0a94b67bc162ab8e33fffab3269a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03b0a94b67bc162ab8e33fffab3269a0">&#9670;&nbsp;</a></span>Settings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a03b0a94b67bc162ab8e33fffab3269a0">Settings</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml">ClComponentDepthwiseConv2d.cpp</a>.</p>

</div>
</div>
<a id="af037c70dc8c0318e30d3a5138776337e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af037c70dc8c0318e30d3a5138776337e">&#9670;&nbsp;</a></span>Tag</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a> =  std::string</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A tag used in a string template is a placeholder string to be substituted by real values during template instantiation. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml#l00123">123</a> of file <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml">GpuKernelVariableTable.h</a>.</p>

</div>
</div>
<a id="afacfec8193ed701f3646c22bc2d35455"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afacfec8193ed701f3646c22bc2d35455">&#9670;&nbsp;</a></span>TagLUT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> =  std::unordered_map&lt;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tag_val.xhtml">TagVal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tag lookup table. </p>
<p>It is used to instantiate a string template </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml">GpuKernelVariableTable.h</a>.</p>

</div>
</div>
<a id="a4d71b29724606979807dcfc1ad80ef6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d71b29724606979807dcfc1ad80ef6c">&#9670;&nbsp;</a></span>UnitWorkloadId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="ab26c0327042b802ca8cff46a9bc67670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab26c0327042b802ca8cff46a9bc67670">&#9670;&nbsp;</a></span>GpuComponentType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54"></a>Output&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00042">42</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::GpuComponentType::Complex</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::GpuComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa334134c2d2596d8de13df6f9cb67d1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa334134c2d2596d8de13df6f9cb67d1d">&#9670;&nbsp;</a></span>GpuLanguage</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gpu Language. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"></a>OpenCL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">arm_compute::experimental::dynamic_fusion::GpuLanguage::OpenCL</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">acl::DataType::Unknown</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17730d14d0e88d5aed17a12e872c4efe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17730d14d0e88d5aed17a12e872c4efe">&#9670;&nbsp;</a></span>GpuOperatorType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Contain properties common to all operator types. </p>
<p><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion. ">Operator</a> type in the context of fusion </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"><p>Simple operators are operators that: </p>
<ol type="1">
<li>Have a 1-to-1 mapping between the input elements and output elements, like elementwise</li>
<li>Have exactly 1 output </li>
</ol>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"><p>Complex operators are operators that are not simple but are still fusable with simple ones. </p>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"><p>Unfusable operators are operators that cannot be fused with any other types of operators. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_properties_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_gpu_operator_properties_8h_source.xhtml">GpuOperatorProperties.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** Simple operators are operators that:</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">     *  1. Have a 1-to-1 mapping between the input elements and output elements, like elementwise</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">     *  2. Have exactly 1 output</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Complex operators are operators that are not simple but are still fusable with simple ones</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Unfusable operators are operators that cannot be fused with any other types of operators</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::GpuComponentType::Complex</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::GpuComponentType::Simple</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a462bfa9dfea81692463ecb192183dd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462bfa9dfea81692463ecb192183dd01">&#9670;&nbsp;</a></span>MemoryType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of memory used by a workload tensor. </p>
<p>We can classify tensors in 2 dimensions: Topology (where they are in a workload) and <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> allocation: Topology: Argument tensors: "Outer" tensors exposed to the users as inputs and outputs (arguments) Intermediate tensors: "Inner" tensors hidden from the users as links between operators <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> allocation: Alloc: Tensors that need to be allocated real backing memory No-Alloc: Tensors that don't need to be allocated real backing memory</p>
<p>We end up with 3 MemoryType based on the product of these two classifications | Argument | Intermediate | ------&mdash;*-------------&mdash;*----------------&mdash;* Alloc | User | Auxiliary | ------&mdash;*-------------&mdash;*----------------&mdash;* No-Alloc * N/A | Virtual | ------&mdash;*-------------&mdash;*----------------&mdash;* </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"></a>User&#160;</td><td class="fielddoc"><p>Both User and Auxiliary types are of Alloc type. </p>
<p>Since they require memory allocation <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> coming directly from users, e.g. for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Additional memory required by the workload tensor, e.g. </p>
<p>for tensors holding temporary results between kernels </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70"></a>Virtual&#160;</td><td class="fielddoc"><p>Virtual type is of No-Alloc type. </p>
<p>Since it doesn't require memory allocation Temporary tile which is not allocated as a whole tensor in the memory. It is mainly used at sketch time to link operators; there should be no Virtual tensors at runtime </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00053">53</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Both User and Auxiliary types are of Alloc type. Since they require memory allocation */</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a>      = 0, <span class="comment">/**&lt; Memory coming directly from users, e.g. for argument tensors */</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> = 1, <span class="comment">/**&lt; Additional memory required by the workload tensor, e.g. for tensors holding temporary results between kernels */</span><span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /** Virtual type is of No-Alloc type. Since it doesn&#39;t require memory allocation */</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">Virtual</a> = 2, <span class="comment">/**&lt; Temporary tile which is not allocated as a whole tensor in the memory. It is mainly used at sketch time to link operators; there should be no Virtual tensors at runtime */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdoc">Additional memory required by the workload tensor, e.g. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">arm_compute::experimental::dynamic_fusion::MemoryType::Virtual</a></div><div class="ttdoc">Virtual type is of No-Alloc type. </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">arm_compute::experimental::dynamic_fusion::MemoryType::User</a></div><div class="ttdoc">Both User and Auxiliary types are of Alloc type. </div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab7efcc693cd1a28a201322cf6b330bba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7efcc693cd1a28a201322cf6b330bba">&#9670;&nbsp;</a></span>convert_pool_attr_to_pool_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> arm_compute::experimental::dynamic_fusion::convert_pool_attr_to_pool_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mixed_precision</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inline function to convert <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> to <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct. ">PoolingLayerInfo</a>. </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00066">66</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">arm_compute::test::validation::data_layout</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00078">Pool2dAttributes::exclude_padding()</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::FLOOR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00795">Padding2D::left</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00045">Pool2dAttributes::pad()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00056">Pool2dAttributes::pool_size()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00034">Pool2dAttributes::pool_type()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00067">Pool2dAttributes::stride()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00797">Padding2D::top</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00075">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00084">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00137">GpuPool2d::create_op()</a>, <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00093">GpuPool2d::is_supported_op()</a>, <a class="el" href="_cl_component_pool2d_8cpp_source.xhtml#l00041">ClComponentPool2d::validate()</a>, and <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00063">GpuPool2d::validate_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Create PadStrideInfo</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> Size2D        stride  = pool_attr.stride();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> Padding2D     padding = pool_attr.pad();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> PadStrideInfo pad_stride(stride.x(), stride.y(), padding.left, padding.top, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> PoolingLayerInfo(pool_attr.pool_type(), pool_attr.pool_size(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, pad_stride, pool_attr.exclude_padding(), mixed_precision);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a118248edb8d3a4911bc101671512856b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a118248edb8d3a4911bc101671512856b">&#9670;&nbsp;</a></span>is_alloc_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_alloc_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> should have backing memory. </p>
<p><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00038">38</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a483adb167280ee358ade0b46e6d2ac71">ITensorInfo::id()</a>, and <a class="el" href="_i_tensor_info_8h_source.xhtml#l00048">ITensorInfo::invalid_tensor_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_output_8cpp_source.xhtml#l00063">GpuOutput::validate_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;id() &gt; ITensorInfo::invalid_tensor_id;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abc943b3c8259d286f7f04e3dd5fcec7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc943b3c8259d286f7f04e3dd5fcec7f">&#9670;&nbsp;</a></span>is_invalid_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_invalid_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has invalid id </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00059">59</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">is_valid_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> !<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">is_valid_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a66520faad3ee3d1e34cc87dc42499e2c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">arm_compute::experimental::dynamic_fusion::is_valid_tensor</a></div><div class="ttdeci">bool is_valid_tensor(const ITensorInfo *tensor_info)</div><div class="ttdoc">ITensorInfo has valid id </div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">Utils.h:52</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a499dfe6aa8bf166e03f1a15eca55355e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499dfe6aa8bf166e03f1a15eca55355e">&#9670;&nbsp;</a></span>is_noalloc_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_noalloc_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> should not have backing memory. </p>
<p><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00045">45</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a483adb167280ee358ade0b46e6d2ac71">ITensorInfo::id()</a>, and <a class="el" href="_i_tensor_info_8h_source.xhtml#l00048">ITensorInfo::invalid_tensor_id</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;id() &lt; ITensorInfo::invalid_tensor_id;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a66520faad3ee3d1e34cc87dc42499e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66520faad3ee3d1e34cc87dc42499e2c">&#9670;&nbsp;</a></span>is_valid_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_valid_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has valid id </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">52</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_i_tensor_info_8h_source.xhtml#l00309">ITensorInfo::has_valid_id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00059">is_invalid_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;has_valid_id();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59d422703eb311f8538f35e041b0bbcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59d422703eb311f8538f35e041b0bbcf">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_info.xhtml">GpuKernelArgumentInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_argument_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_gpu_kernel_argument_8cpp_source.xhtml">GpuKernelArgument.cpp</a>.</p>

<p class="reference">References <a class="el" href="_gpu_kernel_argument_8h_source.xhtml#l00065">GpuKernelArgumentInfo::type</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> info0.type == info1.type;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7bf4bff4857d4c4853192a2ad42f3328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bf4bff4857d4c4853192a2ad42f3328">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml">IGpuKernelComponent.h</a>.</p>

<p class="reference">References <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00042">KernelProperties::stage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> config0.stage() == config1.stage();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4d8c915c15145d6e31f8123d349cd895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d8c915c15145d6e31f8123d349cd895">&#9670;&nbsp;</a></span>operator==() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

<p class="reference">References <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00123">UnitWorkloadStage::stage</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> stage0.stage == stage1.stage;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a229f7c437acf59940c4723fce78c6d5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a229f7c437acf59940c4723fce78c6d5c">&#9670;&nbsp;</a></span>vector_size_byte_opencl</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr unsigned int vector_size_byte_opencl = 16</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml">ClTemplateElementwiseBinary.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:25:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
