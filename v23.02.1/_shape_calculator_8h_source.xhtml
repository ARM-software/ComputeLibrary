<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/utils/misc/ShapeCalculator.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_shape_calculator_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ShapeCalculator.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_shape_calculator_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_MISC_SHAPE_CALCULATOR_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_MISC_SHAPE_CALCULATOR_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_kernel_descriptors_8h.xhtml">arm_compute/core/KernelDescriptors.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_function_descriptors_8h.xhtml">arm_compute/runtime/FunctionDescriptors.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tensor__transform_8h.xhtml">arm_compute/core/utils/helpers/tensor_transform.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc.xhtml">   39</a></span>&#160;<span class="keyword">namespace </span>misc</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml">   41</a></span>&#160;<span class="keyword">namespace </span>shape_calculator</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/** Calculate the output tensor shape for the reduce mean operation</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @param[in] input          Input tensor shape</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] reduction_axis Reduction axis</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * @param[in] keep_dims      Flag to indicate if dimensions are kept</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aa122204d58183b5b9cea670d8aa3c51c">   51</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aa122204d58183b5b9cea670d8aa3c51c">calculate_reduce_mean_shape</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;reduction_axis, <span class="keywordtype">bool</span> keep_dims)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   reduction_ops = reduction_axis.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> axis_local    = reduction_axis;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   input_dims    = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a519df47124aa903c7de8be2624640c1b">convert_negative_axis</a>(axis_local, input_dims);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Configure reshape layer if we want to drop the dimensions</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(!keep_dims)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// We have to sort the reduction axis vectors in order for remove_dimension</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// to work properly</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::sort(axis_local.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>(), axis_local.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>() + reduction_ops);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; reduction_ops; ++i)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">remove_dimension</a>(axis_local[i] - i);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; reduction_ops; ++i)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(axis_local[i], 1);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">/** Calculate the output tensor shape of a vector input given the convolution dimensions</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in] input       Input tensor shape</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in] conv_w      Convolution width</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in] conv_h      Convolution height</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @param[in] data_layout Data layout</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a951fb0d8dcf2a2a338e26a59ffc9af17">   88</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a951fb0d8dcf2a2a338e26a59ffc9af17">compute_vector_to_tensor_output_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">size_t</span> conv_w, <span class="keywordtype">size_t</span> conv_h, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_c = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>(input);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_w, conv_w);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_h, conv_h);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_c, input.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() / (conv_w * conv_h));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/** Calculate the permuted shape of an input given a permutation vector</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * @param[in] perm  Permutation vector</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a593fb7ecc281425b190cd6f20164b1a3">  109</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a593fb7ecc281425b190cd6f20164b1a3">compute_permutation_output_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a> &amp;perm)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(output_shape, perm);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/** Calculate the output shape of the reorg layer given a stride</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * @param[in] input  Input tensor info</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @param[in] stride Stride</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afbc83cd4145d161da4c026e1f5743e1d">  123</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afbc83cd4145d161da4c026e1f5743e1d">compute_reorg_output_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, int32_t stride)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_channel = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stride &lt;= 0);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] % stride != 0), <span class="stringliteral">&quot;The width of the input tensor must be a multiple of stride&quot;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] % stride != 0), <span class="stringliteral">&quot;The height of the input tensor must be a multiple of stride&quot;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[idx_width] / stride);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[idx_height] / stride);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_channel, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[idx_channel] * stride * stride);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">/** Calculate the reshaped shape of the weights</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * @param[in] weights    Weights tensor info</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * @param[in] has_bias   (Optional) Set to true if there is bias</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @param[in] num_groups (Optional) Number of groups</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> * @return the calculated shape of the reshaped weights</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6365b505b5c1b98916425bc692b6ea49">  150</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6365b505b5c1b98916425bc692b6ea49">compute_weights_reshaped_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = <span class="keyword">false</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = 1)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Number of groups greater than one are only supported for NCHW data layout, and the number of weights must be a multiple of it.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> == 0);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> &gt; 1);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(3) % <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>) != 0);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Calculate output shape</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_reshaped{ weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    weights_reshaped.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(3, weights_reshaped[3] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    weights_reshaped.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a>(3);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> tmp_dim = weights_reshaped[0];</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    weights_reshaped.set(0, weights_reshaped[1]);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    weights_reshaped.set(1, tmp_dim + (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> ? 1 : 0));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span>(weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &lt; 5)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        weights_reshaped.set(2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> weights_reshaped;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">/** Calculate the Left Hand Side matrix reshaped shape</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> * @param[in] a                       Input tensor info</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> * @param[in] lhs_info                Left Hand Side matrix information</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> * @param[in] reinterpret_input_as_3d (Optional) Set to true if the input need to be interpreted as 3d</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">  181</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">compute_lhs_reshaped_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9f9ebacf4b044525b8cfefbc8795a9cc">lhs_info</a>, <span class="keywordtype">bool</span> reinterpret_input_as_3d = <span class="keyword">false</span>)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a41618231c7d7b990c42fe6846b4dde27">m0</a> == 0);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a> == 0);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#acfef62abd2f827bf05666ba50a705c0d">v0</a> == 0);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Input width/height</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>  = a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a> = reinterpret_input_as_3d ? a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) : a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Number of horizontal/vertical blocks in the input tensor</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_horiz_blocks = std::ceil(input_width / static_cast&lt;float&gt;(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a>));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_vert_blocks  = std::ceil(input_height / static_cast&lt;float&gt;(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a41618231c7d7b990c42fe6846b4dde27">m0</a>));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// Block size</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block_size = lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a41618231c7d7b990c42fe6846b4dde27">m0</a> * lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Output width/height</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = block_size * num_horiz_blocks * lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#acfef62abd2f827bf05666ba50a705c0d">v0</a>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = std::ceil(num_vert_blocks / static_cast&lt;float&gt;(lhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#acfef62abd2f827bf05666ba50a705c0d">v0</a>));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> lhs_shape{ a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    lhs_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, output_width);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    lhs_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, output_height);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">if</span>((reinterpret_input_as_3d) &amp;&amp; (lhs_shape.num_dimensions() &gt; 2))</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// When the data format is NHWC and the shapes are Nx1x1</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="comment">// the tensor shape num_dimensions is automatically set to 1 instead of 3.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// To avoid failures by removing a dimension that doesn&#39;t exist</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment">// check if the number of dimensions is greater than 2.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        lhs_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">remove_dimension</a>(2);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> lhs_shape;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">/** Calculate the Right Hand Side matrix reshaped shape</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @param[in] a        Input tensor info</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * @param[in] rhs_info Right Hand Side matrix information</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">  225</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">compute_rhs_reshaped_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a226889ea88d5691bdcbfba8243ed96b4">rhs_info</a>)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ac0c87b58d0d04796c81d8138231dccda">n0</a> == 0);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a> == 0);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a2dc097fefeb3d010fb5570a19cac6cd3">h0</a> == 0);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Input width/height</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>  = a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a> = a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Number of horizontal/vertical blocks in the input tensor</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_horiz_blocks = std::ceil(input_width / static_cast&lt;float&gt;(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ac0c87b58d0d04796c81d8138231dccda">n0</a>));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_vert_blocks  = std::ceil(input_height / static_cast&lt;float&gt;(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a>));</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Block size</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block_size = rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ac0c87b58d0d04796c81d8138231dccda">n0</a> * rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">k0</a>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Output width/height</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = block_size * num_vert_blocks * rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a2dc097fefeb3d010fb5570a19cac6cd3">h0</a>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = std::ceil(num_horiz_blocks / static_cast&lt;float&gt;(rhs_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a2dc097fefeb3d010fb5570a19cac6cd3">h0</a>));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> rhs_shape{ a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    rhs_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, output_width);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    rhs_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, output_height);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> rhs_shape;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">/** Calculate the interleaved shape of an input tensor</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> * @param[in] a                         Input tensor info</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> * @param[in] mult_interleave4x4_height (Optional) Interleave4x4 height</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> * @param[in] reinterpret_input_as_3d   (Optional)  Set to true if the input need to be interpreted as 3d</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8d52adbbcd2c53f837c96b5a3d15c4fb">  261</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8d52adbbcd2c53f837c96b5a3d15c4fb">compute_interleaved_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, <span class="keywordtype">int</span> mult_interleave4x4_height = 1, <span class="keywordtype">bool</span> reinterpret_input_as_3d = <span class="keyword">false</span>)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;{</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="comment">// The interleaved output matrix will have the following shape: [ a_height * W, ceil(a_width / W) ] where W = 4 * mult_interleave4x4_height</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mult_interleave4x4_height &lt; 1);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   interleave_width = 4 * mult_interleave4x4_height;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_interleaved_a{ a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    shape_interleaved_a.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) * interleave_width);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span>(reinterpret_input_as_3d)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>      = a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> height = std::ceil(M / static_cast&lt;float&gt;(interleave_width));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        shape_interleaved_a.set(1, height);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="comment">// When the data format is NHWC and the shapes are Nx1x1</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">// the tensor shape num_dimensions is automatically set to 1 instead of 3.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">// To avoid failures by removing a dimension that doesn&#39;t exist</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="comment">// check if the number of dimensions is greater than 2.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">if</span>(shape_interleaved_a.num_dimensions() &gt; 2)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            shape_interleaved_a.remove_dimension(2);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        shape_interleaved_a.set(1, std::ceil(a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(interleave_width)));</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> shape_interleaved_a;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">/** Calculate the transposed 1xW shape</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * @param[in] b Input tensor info</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a70a2ef9fd754b5798a0a92656f8b5fcf">  297</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a70a2ef9fd754b5798a0a92656f8b5fcf">compute_transpose1xW_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// The transpose1xW output matrix will have the following shape: [ b_height * 16, ceil(b_width / 16.0f) ]</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_transposed1xW_b{ b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    shape_transposed1xW_b.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * 16);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    shape_transposed1xW_b.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, std::ceil(b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) / 16.f));</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">return</span> shape_transposed1xW_b;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">/** Calculate the transposed 1xW width element shape</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> * @param[in] b                       Input tensor info</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> * @param[in] mult_transpose1xW_width (Optional) Transpose1xW width</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5797726a8fbee3b11b92757c2f0031d6">  314</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5797726a8fbee3b11b92757c2f0031d6">compute_transpose1xW_with_element_size_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keywordtype">int</span> mult_transpose1xW_width = 1)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Note: mult_transpose1xW_width expresses the number of chunks with size 1x(W) we want to store on the same row</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">//       The transpose1xW output matrix will have the following shape:</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">//       [ b_height * W, ceil(b_width / W) ] where W = (16 / element size of the tensor) * mult_transpose1xW_width</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mult_transpose1xW_width &lt; 1);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>  shape_transposed1xW_b{ b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> transpose_width = (16 / b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>()) * mult_transpose1xW_width;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    shape_transposed1xW_b.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * transpose_width);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    shape_transposed1xW_b.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, static_cast&lt;size_t&gt;(std::ceil(b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(transpose_width))));</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> shape_transposed1xW_b;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">/** Calculate the reductionA shape used in GEMMLowp</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> * @param[in] b Input tensor info</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a60ce6c017f70d978b48b101ce314969e">  334</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a60ce6c017f70d978b48b101ce314969e">compute_reductionA_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_vector_sum_col{ b.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">if</span>(shape_vector_sum_col.num_dimensions() &gt; 1)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        shape_vector_sum_col.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">remove_dimension</a>(1);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> shape_vector_sum_col;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">/** Calculate the reductionB shape used in GEMMLowp</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * @param[in] a Input tensor info</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69f9b3191aafc4905f9d029ff9d48fea">  351</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69f9b3191aafc4905f9d029ff9d48fea">compute_reductionB_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_vector_sum_row{ a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    shape_vector_sum_row.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span>(shape_vector_sum_row.num_dimensions() &gt; 1)</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        shape_vector_sum_row.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">remove_dimension</a>(1);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">return</span> shape_vector_sum_row;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">/** Calculate the Col2Im shape</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> * @param[in] input           Input tensor info</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"> * @param[in] convolved_dims  Convolved dimensions</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> * @param[in] batch_size_on_z True if batch size is on z axis</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * @param[in] num_groups      (Optional)  Number of groups when performing a grouped convolution</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a264e2e6d3ff632e90d450435fce66d54">  372</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a264e2e6d3ff632e90d450435fce66d54">compute_col2im_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;convolved_dims, <span class="keywordtype">bool</span> batch_size_on_z, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = 1)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> == 0);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] != (convolved_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a75026dc1fa3840404ae4553010efcd52">area</a>()));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> &gt; 1) &amp;&amp; input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2] != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> col2im_shape{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// If batches start on 3rd dimension shift dimensions right by 1 to retain upper tensor shape,</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// as first three will be override by H,W,C data</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">if</span>(batch_size_on_z &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> == 1)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        col2im_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">shift_right</a>(1);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    col2im_shape.set(width_idx, convolved_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    col2im_shape.set(height_idx, convolved_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    col2im_shape.set(channel_idx, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0] * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> col2im_shape;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">/** Calculate the transposed shape of a tensor</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">  403</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_transposed{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    shape_transposed.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1));</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    shape_transposed.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(1, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">return</span> shape_transposed;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">/** Calculate the depthwise convolution output shape of a tensor</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"> * @param[in] input   Input tensor info</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"> * @param[in] weights Weights tensor info</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"> * @param[in] info    Convolution info</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">  421</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">compute_depthwise_convolution_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>{ weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> weights_data_layout = weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        weights_width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(weights_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        weights_height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(weights_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = 0;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = 0;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[height_idx],</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>[weights_width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>[weights_height_idx],</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                                              info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">pad_stride_info</a>, info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#a5159123bf7ffd6ecb44e7322a9b0492e">dilation</a>);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a> };</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(width_idx, output_width);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(height_idx, output_height);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(channel_idx, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[channel_idx] * info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#adccaa3ddba466fa0857ec3c9f33a9db4">depth_multiplier</a>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">/** Calculate the upsampled output shape used for deconvolution</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"> * @param[in] input    Input tensor info</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"> * @param[in] weights  Weights tensor shape</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment"> * @param[in] sx       Stride on x axis</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment"> * @param[in] sy       Stride on y axis</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment"> * @param[in] out_dims Output shape dimensions</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"> * @param[in] padx     Padding on x axis</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"> * @param[in] pady     Padding on y axis</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a7361bfd2660a28a8afff33307ed99b1b">  461</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a7361bfd2660a28a8afff33307ed99b1b">compute_deconvolution_upsampled_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sx, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sy,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                                         std::pair&lt;unsigned int, unsigned int&gt; &amp;out_dims, uint32_t &amp;padx, uint32_t &amp;pady)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     idx_w       = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     idx_h       = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// Find the upsampled dimensions</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_x = (input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_w) - 1) * sx + 1;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_y = (input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_h) - 1) * sy + 1;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="comment">// Find the padding needed for the convolution with stride 1 in order to match output shape</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    padx = out_dims.first - (out_x - weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_w) + 1);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    pady = out_dims.second - (out_y - weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_h) + 1);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    out_x += padx;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    out_y += pady;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> scale_out_shape(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    scale_out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_w, out_x);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    scale_out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_h, out_y);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">return</span> scale_out_shape;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">/** Calculate the output shape of the deconvolution layer</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> * @param[in] out_dims Output x and y shape dimensions</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> * @param[in] input    Input tensor info</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> * @param[in] weights  Weights tensor shape</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00493"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae270329cfe3dbab009b700318e8af8b4">  493</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae270329cfe3dbab009b700318e8af8b4">compute_deconvolution_output_shape</a>(<span class="keyword">const</span> std::pair&lt;unsigned int, unsigned int&gt; &amp;out_dims, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;{</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>{ weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        batch_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a> };</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    out_shape.set(width_idx, out_dims.first);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    out_shape.set(height_idx, out_dims.second);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    out_shape.set(channel_idx, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>[batch_idx]);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">/** Calculate the im2col output shape of a tensor</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment"> * @param[in] input           Input tensor info</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"> * @param[in] kernel_dims     The kernel dimensions (width and height).</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"> * @param[in] conv_info       Contains padding and stride information</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"> * @param[in] has_bias        In case biases are provided expands the matrix with 1</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"> * @param[in] dilation        Dilation, in elements, across x and y</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"> * @param[in] batch_size_on_z True if batch size is on z axis</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment"> * @param[in] num_groups      (Optional)  Number of groups when performing a grouped convolution</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00523"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8a9286d053e9f3a958064e4f3cdd02f7">  523</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8a9286d053e9f3a958064e4f3cdd02f7">compute_im2col_conv_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keywordtype">bool</span> batch_size_on_z,</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = 1)</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// The output shape will be the 3D shape [ out_channels * kernel_area, num_elems_per_out_channel, batches ]                           if batch_size_on_z == true</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="comment">//                       or the 4D shape [ out_channels * kernel_area / num_groups, num_elems_per_out_channel, num_groups, batches ]  if batch_size_on_z == false</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> == 0);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> &gt; 1 &amp;&amp; input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> &gt; 1 &amp;&amp; batch_size_on_z);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; out_dims = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[width_idx], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[height_idx], kernel_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>, kernel_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>, conv_info, dilation);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[channel_idx] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> * kernel_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a75026dc1fa3840404ae4553010efcd52">area</a>() + (has_bias ? 1 : 0))); <span class="comment">// NOLINT</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, (out_dims.first * out_dims.second));</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keywordflow">if</span>(batch_size_on_z &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.num_dimensions() &gt;= 3)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.remove_dimension(2);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment">/** Calculate the flattened output shape of a tensor</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00561"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">  561</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">compute_flatten_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;{</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="comment">// The output shape will be the flatten version of the input (i.e. [ width * height * channels, num_batches, ... ] ). Used for FlattenLayer and FullyConnectedLayer.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.collapse(3);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">/** Calculate the softmax output shape of a tensor</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> * @param[in] axis  (Optional) Softmax axis</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00579"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad16b366db486fec63b6d962937ec4545">  579</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad16b366db486fec63b6d962937ec4545">compute_softmax_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">size_t</span> axis = 1)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// The output shape will be a 2D version of the input. For instance:</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// - [x,y,z] and axis 1 will return [x, y*z]</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="comment">// - [x,y,z,w] and axis 2 will return [x*y, w*z]</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="comment">// - [x,y,z,w] and axis 3 will return [x*y*z, w]</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape2D = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">if</span>(axis &lt; input-&gt;num_dimensions())</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="comment">// Collapse from axis onward (this changes the shape)</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        shape2D.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">collapse_from</a>(axis);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="comment">// Collapse the rest (collapse is inclusive)</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        shape2D.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a>(shape2D.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() - 1);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    {</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="comment">// Collapse everything</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        shape2D.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a>(shape2D.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">if</span>(axis == 0)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="comment">// If axis is zero the first dim should be one. Since</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="comment">// collapse is an inclusive operation we need to shift</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        shape2D.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">shift_right</a>(1);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> shape2D;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">/** Calculate the winograd filter transform shape</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"> * @param[in] input         Input tensor info</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"> * @param[in] winograd_info Winograd information</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">  618</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">compute_winograd_filter_transform_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;{</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> kernel_size      = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#aca57076ead1d06c47d3d32f4302b14ac">kernel_size</a>;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> output_tile_size = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#a5cd6561e9acc0cf9ba11bc2f51ec7a33">output_tile_size</a>;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> input_tile_size  = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> + kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> - 1, output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> + kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> - 1);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    tensor_shape.remove_dimension(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>));</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    tensor_shape.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(3));</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    tensor_shape.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>)));</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    tensor_shape.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, input_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a75026dc1fa3840404ae4553010efcd52">area</a>());</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span> tensor_shape;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">/** Calculate the winograd input transform shape</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> * @param[in] input         Input tensor info</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"> * @param[in] winograd_info Winograd information</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">  641</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">compute_winograd_input_transform_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#ad99e40b120f0a9e96821c08bf60a84f2">convolution_info</a>;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        kernel_size      = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#aca57076ead1d06c47d3d32f4302b14ac">kernel_size</a>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        output_tile_size = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#a5cd6561e9acc0cf9ba11bc2f51ec7a33">output_tile_size</a>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        input_tile_size  = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> + kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> - 1, output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> + kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> - 1);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_c = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="comment">// Compute the number of output tiles along the x and y direction of size &quot;output_tile_size&quot;</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> num_tiles = <a class="code" href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">compute_winograd_convolution_tiles</a>(<a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_w], input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_h]),</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                                                kernel_size,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                                                output_tile_size,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                                                conv_info);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width  = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_c];</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = num_tiles.area();</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth  = input_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a75026dc1fa3840404ae4553010efcd52">area</a>();</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, width);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, height);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(2, depth);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;}</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">/** Calculate the winograd output transform shape</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment"> * @param[in] input         Input tensor info</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"> * @param[in] winograd_info Winograd information</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00677"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5699c316d27b41f0790827791e88ae26">  677</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5699c316d27b41f0790827791e88ae26">compute_winograd_output_transform_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> &amp;winograd_info)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;{</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#ad99e40b120f0a9e96821c08bf60a84f2">convolution_info</a>;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        kernel_size      = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#aca57076ead1d06c47d3d32f4302b14ac">kernel_size</a>;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        input_dimensions = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#af9ef316b2c98c946b47cd18f1319b93f">input_dimensions</a>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>      = winograd_info.<a class="code" href="structarm__compute_1_1_winograd_info.xhtml#a0bc60aaf23b2d3ed3b344576a708e84e">output_data_layout</a>;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="comment">// Compute output shape</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width  = 0;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height = 0;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(input_dimensions.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>, input_dimensions.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                                              kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>, kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>, conv_info);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="comment">// Output dimension</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_w = output_width;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_h = output_height;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_c = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>), out_w);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>), out_h);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    tensor_shape.set(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>), out_c);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordflow">return</span> tensor_shape;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;}</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment">/** Calculate the deep convolution shape output shape of a tensor</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment"> * @param[in] input_shape       Input tensor shape</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment"> * @param[in] input_data_layout Input data layout</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment"> * @param[in] weights_shape     Weights tensor shape</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="comment"> * @param[in] conv_info         Contains padding and stride information</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00713"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">  713</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">compute_deep_convolution_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> input_data_layout, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;{</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_channel = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>         = input_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>        = input_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#abe4640d429ac25799126454625834b7d">weights_width</a>       = weights_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab999f1a2cf0d5e438f487fabdc9e7430">weights_height</a>      = weights_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_out_channel = weights_shape[3];</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       output_width        = 0;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       output_height       = 0;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    std::tie(output_width, output_height) = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(input_width, input_height, weights_width, weights_height, conv_info);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input_shape };</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, output_width);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, output_height);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_channel, weights_out_channel);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment">/** Calculate the deep convolution shape output shape of a tensor</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment"> * @param[in] input     Input tensor info</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment"> * @param[in] weights   Weights tensor info</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment"> * @param[in] conv_info Contains padding and stride information</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00744"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69f28bd8c25c78d29ce938ed3665ca33">  744</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">compute_deep_convolution_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;{</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">compute_deep_convolution_shape</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), weights.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;}</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">/** Calculate the indirect buffer output shape used by the indirect convolution function</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment"> * @param[in] input_shape       Input tensor shape</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment"> * @param[in] input_data_layout Input data layout</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment"> * @param[in] weights_shape     Weights tensor shape</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment"> * @param[in] conv_info         Contains padding and stride information</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="comment"> * @param[in] desc              Contains the direct/indirect convolution compute arguments, such as the tiling dimensions</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00759"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af4c9e448fa705b36e59ac5db0cb586dc">  759</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af4c9e448fa705b36e59ac5db0cb586dc">compute_indirect_buffer_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> input_data_layout, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">weights_shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml">DirectConvComputeKernelInfo</a> &amp;desc)</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;{</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(input_data_layout != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>, <span class="stringliteral">&quot;The data layout can only be NHWC&quot;</span>);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(desc.<a class="code" href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml#a7fc920d041b4123c404d143170e835f1">m0</a> &lt;= 0 || desc.<a class="code" href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml#a7fc920d041b4123c404d143170e835f1">m0</a> &gt; 8, <span class="stringliteral">&quot;M0 can only be greater than 0 and less than or equal to 8&quot;</span>);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m0 = desc.<a class="code" href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml#a7fc920d041b4123c404d143170e835f1">m0</a>;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kw = weights_shape[1];</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kh = weights_shape[2];</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> output_conv2d_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">compute_deep_convolution_shape</a>(input_shape, input_data_layout, weights_shape, conv_info);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_w = m0 * kw * kh;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_h = <a class="code" href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">DIV_CEIL</a>(output_conv2d_shape[1] * output_conv2d_shape[2], m0);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_b = output_conv2d_shape[3];</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(output_w, output_h, output_b);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">/** Calculate the min/max shape output shape of a tensor</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00784"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1b843e3850ed7324d11f77882cc597ae">  784</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1b843e3850ed7324d11f77882cc597ae">compute_min_max_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;{</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, 2);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.remove_dimension(1);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.remove_dimension(1);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;}</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="comment">/** Calculate the output pool shape of a tensor</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment"> * @param[in] input     Input tensor info</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="comment"> * @param[in] pool_info Pooling layer info</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00801"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">  801</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">compute_pool_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info)</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;{</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordtype">int</span> pooled_w = 0;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keywordtype">int</span> pooled_h = 0;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_global_pooling = pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a>;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>         = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>        = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>       = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>];</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>      = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>];</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  pool_size_x       = is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] : pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">pool_size</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  pool_size_y       = is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] : pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">pool_size</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    std::tie(pooled_w, pooled_h) = <a class="code" href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">scaled_dimensions_signed</a>(input_width, input_height,</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                                                            pool_size_x, pool_size_y,</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                                                            pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">pad_stride_info</a>);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((pooled_w &lt; 1 || pooled_h &lt; 1), <span class="stringliteral">&quot;Calculated output dimension size is invalid&quot;</span>);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, static_cast&lt;size_t&gt;(pooled_w));</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, static_cast&lt;size_t&gt;(pooled_h));</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;}</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment">/** Calculate the output unpool shape of a tensor</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment"> * @param[in] input     Input tensor info</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"> * @param[in] pool_info Pooling layer info</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00835"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a07aa17a679384eec2f192f8ee16bc9ec">  835</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a07aa17a679384eec2f192f8ee16bc9ec">compute_unpool_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_shape[idx_height] &lt;= 1 || input_shape[idx_width] &lt;= 1);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> pad_stride_info = pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">pad_stride_info</a>;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  stride_x        = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().first;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  stride_y        = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().second;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>();</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>();</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>();</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>();</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_width    = (input_shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] - 1) * stride_x - pad_left - pad_right + pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">pool_size</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_height   = (input_shape[idx_height] - 1) * stride_y - pad_top - pad_bottom + pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">pool_size</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_width, out_width);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(idx_height, out_height);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;}</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment">/** Calculate the output roi align shape of a tensor</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment"> * @param[in] input     Input tensor info</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment"> * @param[in] rois      Rois tensor info</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment"> * @param[in] pool_info Pooling layer info</span></div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00867"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3d3eaddfd85c16e7a9a385ba0e6a45b0">  867</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3d3eaddfd85c16e7a9a385ba0e6a45b0">compute_roi_align_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;rois, <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info)</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;{</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">pooled_width</a>());</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">pooled_height</a>());</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(3, rois.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1));</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;}</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">/** Calculate the RNN shape of a tensor</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment"> * @param[in] input      Input tensor info</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment"> * @param[in] batch_size Batch size</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00888"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af98bc3ef5c65dbb63bc79700ccdd043b">  888</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af98bc3ef5c65dbb63bc79700ccdd043b">compute_rnn_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, batch_size);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;}</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">/** Calculate the matrix multiplication output shape of two tensors</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="comment"> * @param[in] input0                    First input tensor info</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="comment"> * @param[in] input1                    Second input tensor info</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="comment"> * @param[in] is_interleaved_transposed True if the input is interleaved transposed</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment"> * @param[in] reshape_info              GEMM reshape info</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00905"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">  905</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">compute_mm_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keywordtype">bool</span> is_interleaved_transposed, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;reshape_info)</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;{</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 4, <span class="stringliteral">&quot;The number of dimensions for the matrix A must be &lt;= 4&quot;</span>);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(is_interleaved_transposed &amp;&amp; reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>(), <span class="stringliteral">&quot;The first input tensor cannot be reinterpreted as 3D if is_interleaved_transposed is true&quot;</span>);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_input_as_3d  = reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>();</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_output_as_3d = reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>() != 0;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  depth_output_gemm3d      = reinterpret_output_as_3d ? reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>() : 1;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>                        = reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>() ? input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) : input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="comment">// If the output of GEMM has to be reinterpreted as 3D, the number of input0 rows (M) is obtained collapsing the second and third</span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="comment">// dimension of the output tensor</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim0 = is_interleaved_transposed ? reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">n</a>() : input1.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim1 = is_interleaved_transposed ? reshape_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">m</a>() / depth_output_gemm3d : m / depth_output_gemm3d;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim2 = reinterpret_input_as_3d ? input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[3] : input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2];</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dim3 = reinterpret_input_as_3d ? 1 : input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[3];</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, dim0);</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, dim1);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(2, reinterpret_output_as_3d ? depth_output_gemm3d : dim2);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(3, reinterpret_output_as_3d ? dim2 : dim3);</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(4, reinterpret_output_as_3d ? dim3 : 1);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;}</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment">/** Calculate the matrix multiplication output shape of two tensors</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment"> * @param[in] input0    First input tensor info</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment"> * @param[in] input1    Second input tensor info</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment"> * @param[in] gemm_info GEMM reshape info</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00941"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5076384fc9981ec1b497daab624a555b">  941</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">compute_mm_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">gemm_info</a>)</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;{</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input1);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 4, <span class="stringliteral">&quot;The number of dimensions for the matrix A must be &lt;= 4&quot;</span>);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_input_as_3d  = gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>();</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_output_as_3d = gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>() != 0;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  depth_output_gemm3d      = reinterpret_output_as_3d ? gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>() : 1;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordflow">if</span>(!reinterpret_input_as_3d &amp;&amp; !reinterpret_output_as_3d)</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    {</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">n</a>());</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">m</a>());</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    }</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    {</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        <span class="comment">// If the output of GEMM has to be reinterpreted as 3D, the number of input0 rows (M) is obtained collapsing the second and third</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        <span class="comment">// dimension of the output tensor</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size = reinterpret_input_as_3d ? input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[3] : input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2];</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">n</a>());</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, gemm_info.<a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">m</a>() / depth_output_gemm3d);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(2, reinterpret_output_as_3d ? depth_output_gemm3d : batch_size);</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(3, reinterpret_output_as_3d ? batch_size : 1);</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;}</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment">/** Calculate the matrix multiplication output shape of two tensors</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment"> * @param[in] input0    First input tensor info</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment"> * @param[in] input1    Second input tensor info</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment"> * @param[in] gemm_info GEMM kernel info used to retrieve the original dimensions of the input matrices</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00979"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5a875efce77eabbdc40028c4fd288b68">  979</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">compute_mm_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">GEMMKernelInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">gemm_info</a>)</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;{</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input1);</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 4, <span class="stringliteral">&quot;The number of dimensions for the matrix A must be &lt;= 4&quot;</span>);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         reinterpret_input_as_3d  = gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#aba258627772f6f76f644911b027cbab5">reinterpret_input_as_3d</a>;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         reinterpret_output_as_3d = gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a370d5ff7251d8d974c634c9ed0dde094">depth_output_gemm3d</a> != 0;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_output_gemm3d      = reinterpret_output_as_3d ? gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a370d5ff7251d8d974c634c9ed0dde094">depth_output_gemm3d</a> : 1;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keywordflow">if</span>(!reinterpret_input_as_3d &amp;&amp; !reinterpret_output_as_3d)</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    {</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a7d46b74409bd32b539089ef4721ea544">n</a>);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a4033037df26775dd60840e66d38a08ba">m</a>);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    }</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    {</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="comment">// If the output of GEMM has to be reinterpreted as 3D, the number of input0 rows (M) is obtained collapsing the second and third</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="comment">// dimension of the output tensor</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size = reinterpret_input_as_3d ? input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[3] : input0.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2];</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a7d46b74409bd32b539089ef4721ea544">n</a>);</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, gemm_info.<a class="code" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a4033037df26775dd60840e66d38a08ba">m</a> / depth_output_gemm3d);</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(2, reinterpret_output_as_3d ? depth_output_gemm3d : batch_size);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(3, reinterpret_output_as_3d ? batch_size : 1);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    }</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;}</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment">/** Calculate the matrix multiplication output shape of two tensors</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment"> * @param[in] input           Input tensor info</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment"> * @param[in] gemm_3d_depth   (Optional)  GEMM 3d depth</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment"> * @param[in] batch_size_on_z (Optional) True if batch size is on z axis</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01017"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1d3b8af21d25d9e6871673565f9f7532"> 1017</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1d3b8af21d25d9e6871673565f9f7532">compute_output_stage_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> gemm_3d_depth = 1, <span class="keywordtype">bool</span> batch_size_on_z = <span class="keyword">false</span>)</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;{</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> &amp;&amp; gemm_3d_depth &gt; 1);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    <span class="keywordflow">if</span>(gemm_3d_depth &gt; 1)</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    {</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="keywordflow">if</span>(batch_size_on_z)</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        {</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">shift_right</a>(1);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        }</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        output_shape.set(0, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>());</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        output_shape.set(1, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>() / gemm_3d_depth);</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        output_shape.set(2, gemm_3d_depth);</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;}</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment">/** Calculate the strided slice output shape of a tensor</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment"> * @param[in] input            Input tensor info</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment"> * @param[in] starts           The starts of the dimensions of the input tensor to be sliced</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="comment"> * @param[in] ends             The ends of the dimensions of the input tensor to be sliced</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="comment"> * @param[in] strides          The strides of the dimensions of the input tensor to be sliced</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="comment"> * @param[in] begin_mask       If the ith bit of begin_mask is set, starts[i] is ignored and the fullest possible range in that dimension is used instead.</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="comment"> * @param[in] end_mask         If the ith bit of end_mask is set, ends[i] is ignored and the fullest possible range in that dimension is used instead.</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="comment"> * @param[in] shrink_axis_mask If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01048"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ab288dc7ed664925c6f992b0e6aa3bc1b"> 1048</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ab288dc7ed664925c6f992b0e6aa3bc1b">compute_strided_slice_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;strides,</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                                               int32_t begin_mask, int32_t end_mask, int32_t shrink_axis_mask)</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;{</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a>;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">compute_strided_slice_output_shape</a>(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), starts, ends, strides, begin_mask, end_mask, shrink_axis_mask);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment">/** Calculate the slice output shape of a tensor</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment"> * @param[in] input_shape Input tensor info</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment"> * @param[in] starts      The starts of the dimensions of the input tensor to be sliced</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment"> * @param[in] ends        The ends of the dimensions of the input tensor to be sliced</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01064"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a30c67d11c15378ffe67ca3c31e848917"> 1064</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a30c67d11c15378ffe67ca3c31e848917">compute_slice_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends)</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;{</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a>;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">compute_strided_slice_output_shape</a>(input_shape,</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                                              starts, ends, <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a>(),</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                              0, <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a396d80389277ad8cd13a5e0567776191">construct_slice_end_mask</a>(ends), 0);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;}</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment">/** Calculate the batch to space output shape of a tensor</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment"> * @param[in] input   Input tensor info</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> * @param[in] block_x Block shape x value</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment"> * @param[in] block_y Block shape y value</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01081"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac4d688e137d670d209b647ec37592a92"> 1081</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac4d688e137d670d209b647ec37592a92">compute_batch_to_space_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> block_x, <span class="keyword">const</span> <span class="keywordtype">int</span> block_y)</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;{</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(block_x &lt;= 0 || block_y &lt;= 0);</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_batch   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] * block_x);</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] * block_y);</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_batch, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_batch] / (block_x * block_y));</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;}</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment">/** Calculate the depth to space output shape of a tensor</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment"> * @param[in] input_shape Input tensor shape</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment"> * @param[in] data_layout Operation data layout</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="comment"> * @param[in] block       Block shape value</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01106"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afc6b7d4a0a2cb7074f644de316ca696b"> 1106</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afc6b7d4a0a2cb7074f644de316ca696b">compute_depth_to_space_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <span class="keywordtype">int</span> block)</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;{</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(block &lt; 2);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> idx_channel = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input_shape };</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, input_shape[idx_width] * block);</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, input_shape[idx_height] * block);</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_channel, input_shape[idx_channel] / (block * block));</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;}</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="comment">/** Calculate the split output shape of a tensor</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="comment"> * @param[in] input      Input tensor info</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="comment"> * @param[in] axis       Axis on which to split the input</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="comment"> * @param[in] num_splits Number of splits</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01130"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abe10cfa0b480704109fd1a925301f58b"> 1130</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abe10cfa0b480704109fd1a925301f58b">compute_split_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_splits)</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> empty_shape;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    empty_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(0, 0);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="comment">// Return empty shape if axis is invalid</span></div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keywordflow">if</span>(axis &gt; input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>())</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    {</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <span class="keywordflow">return</span> empty_shape;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    }</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordtype">size_t</span> axis_size = out_shape[axis];</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="comment">// Return empty shape if num_split is not valid</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <span class="keywordflow">if</span>(axis_size % num_splits)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    {</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        <span class="keywordflow">return</span> empty_shape;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    }</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    out_shape[axis] = axis_size / num_splits;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;}</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="comment">/** Calculate the space to batch output shape of a tensor</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="comment"> * @param[in] input         Input tensor info</span></div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="comment"> * @param[in] block_x       Block shape x value</span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="comment"> * @param[in] block_y       Block shape y value</span></div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;<span class="comment"> * @param[in] padding_left  Left padding values</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="comment"> * @param[in] padding_right Right padding values</span></div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01165"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a585529133e437dc5f935d33de17c4abb"> 1165</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a585529133e437dc5f935d33de17c4abb">compute_space_to_batch_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> block_x, <span class="keyword">const</span> <span class="keywordtype">int</span> block_y, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;padding_left, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;padding_right)</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;{</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_batch   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] + padding_left.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>() + padding_right.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>()) % block_x != 0);</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] + padding_left.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>() + padding_right.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>()) % block_y != 0);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, (input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] + padding_left.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>() + padding_right.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>()) / block_x);</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, (input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] + padding_left.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>() + padding_right.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>()) / block_y);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_batch, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_batch] * block_x * block_y);</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="comment">/** Calculate the space to batch output shape of a tensor</span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="comment"> * @param[in] input       Input tensor info</span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment"> * @param[in] block_shape Block shape value</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01191"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abd7ceb09e076b5e3374aeb1fab08fc84"> 1191</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abd7ceb09e076b5e3374aeb1fab08fc84">compute_space_to_depth_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, int32_t block_shape)</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;{</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        idx_depth   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] / block_shape);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] / block_shape);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_depth, input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[idx_depth] * (block_shape * block_shape));</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;}</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="comment">/** Calculate the prior box output shape of a tensor</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="comment"> * @param[in] info  PriorBoxLayer info</span></div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01214"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae3f672f124e4228db364bb811e770226"> 1214</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae3f672f124e4228db364bb811e770226">compute_prior_box_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_w       = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> idx_h       = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    num_priors  = info.<a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6a8ad2364ce45d0cb7c6938544711f7c">aspect_ratios</a>().size() * info.<a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a147b1e13f347e7b995de58f8fafd6723">min_sizes</a>().size() + info.<a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a985940fefc02bdbc0ea1c916bb0ac82b">max_sizes</a>().size();</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{};</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(0, input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_w) * input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_h) * num_priors * 4);</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(1, 2);</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;}</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment">/** Calculate the padded shape of a tensor</span></div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="comment"> * @param[in] input_shape Input tensor shape</span></div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"> * @param[in] padding     Paddings list</span></div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01235"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4e7f3187350db69156c1026860ace4e5"> 1235</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4e7f3187350db69156c1026860ace4e5">compute_padded_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;padding)</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;{</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> padded_shape = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> dim = 0; dim &lt; padding.size(); ++dim)</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    {</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>    &amp;padding_pair   = padding[dim];</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        <span class="keyword">const</span> uint32_t shape_on_index = (padded_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &lt;= dim) ? 1 : input_shape[dim];</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        padded_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(dim, padding_pair.first + shape_on_index + padding_pair.second);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    }</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keywordflow">return</span> padded_shape;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;}</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="comment">/** Calculate the tiled shape of a tensor</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment"> * @param[in] input_shape Input tensor shape</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment"> * @param[in] multiples   Paddings list</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01254"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a626cdfbacb377ee26462155d421717d3"> 1254</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a626cdfbacb377ee26462155d421717d3">compute_tiled_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> &amp;multiples)</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;{</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tiled_shape = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> dim = 0; dim &lt; multiples.size(); ++dim)</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    {</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        tiled_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(dim, input_shape[dim] * multiples[dim]);</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    }</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keywordflow">return</span> tiled_shape;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;}</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="comment">/** Calculate the reduced shape of a tensor given an axis</span></div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;<span class="comment"> * @param[in] input     Input tensor info</span></div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;<span class="comment"> * @param[in] axis      Axis on which to perform reduction</span></div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="comment"> * @param[in] keep_dims (Optional) Whether to keep the dimension after reduction operation. Defaults to true.</span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01272"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aff7ab3043f63660295d229ebc9e6c2b1"> 1272</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aff7ab3043f63660295d229ebc9e6c2b1">compute_reduced_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis, <span class="keywordtype">bool</span> keep_dims = <span class="keyword">true</span>)</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;{</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ input };</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <span class="keywordflow">if</span>(!keep_dims)</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    {</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.remove_dimension(axis);</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    }</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    {</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(axis, 1);</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    }</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;}</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="comment">/** Calculate the upsampled shape of a tensor</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="comment"> * @param[in] input Input tensor info</span></div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="comment"> * @param[in] info  Contains stride information (x and y)</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01295"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3173d90757ec6ff31441b55883eafbca"> 1295</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3173d90757ec6ff31441b55883eafbca">compute_upsample_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;{</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>        scale_out_shape(input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_x = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_width) * info.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>();</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_y = input.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_height) * info.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>();</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    scale_out_shape.set(idx_width, out_x);</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    scale_out_shape.set(idx_height, out_y);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <span class="keywordflow">return</span> scale_out_shape;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;}</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;<span class="comment">/** Get the tensor shape</span></div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;<span class="comment"> * @param[in] data Input data</span></div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;<span class="comment"> * @return the extracted tensor shape</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01317"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851"> 1317</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(T *data)</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;{</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="keywordflow">return</span> data-&gt;info()-&gt;tensor_shape();</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;}</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;</div><div class="line"><a name="l01322"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af79493c6c07a3eb2b3a27712221b66b8"> 1322</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *data)</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;{</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <span class="keywordflow">return</span> data-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;}</div><div class="line"><a name="l01326"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4205a4be15a80494979ec1f19a66b21a"> 1326</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *data)</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;{</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keywordflow">return</span> data-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;}</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;</div><div class="line"><a name="l01331"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae7f0e5491e0f43e371f7db047a03dd4c"> 1331</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> *data)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;{</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keywordflow">return</span> *data;</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;}</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;</div><div class="line"><a name="l01336"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a29fee5f196a5154a39526b7b88594059"> 1336</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> *data)</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;{</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="keywordflow">return</span> *data;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;}</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="comment">/** Calculate the unstack shape of a tensor</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment"> * @param[in] input_shape Input tensor shape</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="comment"> * @param[in] axis        Axis on which to perform the unstack operation</span></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01348"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acedb0877d41f2ae0591a2d4e84318140"> 1348</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acedb0877d41f2ae0591a2d4e84318140">calculate_unstack_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis)</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;{</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(axis &gt; input_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    input_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">remove_dimension</a>(axis);</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>;</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;}</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="comment">/** Calculate the concatenate output shape of the concatenate operation along a single axis</span></div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="comment"> * @param[in] input Vector containing the shapes of the inputs</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="comment"> * @param[in] axis  Axis along which to concatenate the input tensors</span></div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01363"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#add0528a8b08196d4e30e760499c552d4"> 1363</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#add0528a8b08196d4e30e760499c552d4">calculate_concatenate_shape</a>(<span class="keyword">const</span> std::vector&lt;T *&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">size_t</span> axis)</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;{</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(input[0]);</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ASSERTS_ENABLED)</span></div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    <span class="comment">// All dimensions must match except the axis one</span></div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">MAX_DIMS</a>; ++i)</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    {</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;        <span class="keywordflow">if</span>(i == axis)</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        {</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        }</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : input)</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        {</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(out_shape[i] != shape[i]);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        }</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    }</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_ASSERTS_ENABLED)</span></div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="comment">// Calculate output shape</span></div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="keywordtype">size_t</span> new_size = 0;</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : input)</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    {</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">extract_shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        new_size += shape[axis];</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    }</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(axis, new_size);</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="comment">/** Calculate the stack output shape of a tensor</span></div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="comment"> * @param[in] a           Input tensor info</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="comment"> * @param[in] axis        Axis on which to perform the stack operation</span></div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="comment"> * @param[in] num_tensors Number of tensors to stack</span></div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01405"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a32c692ab35f40f9ce6e27e1f4016e921"> 1405</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a32c692ab35f40f9ce6e27e1f4016e921">compute_stack_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;a, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_tensors)</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;{</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(axis &gt; a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>());</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 4);</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_out{ a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>() };</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    shape_out.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(axis, num_tensors);</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i_shift = 0;</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>(); ++i)</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    {</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;        <span class="keywordflow">if</span>(i == axis)</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        {</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;            i_shift++;</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        }</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        shape_out.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(i + i_shift, a.<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[i]);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    }</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="keywordflow">return</span> shape_out;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;}</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="comment">/** Calculate the output shape of 3d Convolution</span></div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment"> * @param[in] src         Input tensor shape</span></div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="comment"> * @param[in] weights     Weights tensor shape</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment"> * @param[in] conv3d_info 3d Convolution Parameters object</span></div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01435"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a48df2e30342af92f8082425bafc36a4d"> 1435</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a48df2e30342af92f8082425bafc36a4d">compute_conv3d_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info)</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;{</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="comment">// Weight tensor shape indices (D H W Cin Cout)</span></div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a>  = 4u;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a> = 3u;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a>  = 2u;</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">weights_CHout_dim</a>  = 0u;</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <span class="comment">// Source/Destination Tensor shape indices (N D H W C)</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a>   = 4u;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a>   = 3u;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a>  = 2u;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a>   = 1u;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a> = 0u;</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ src };</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_left   = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>;</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_right  = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">right</a>;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_top    = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_bottom = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">bottom</a>;</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_front  = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">front</a>;</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_back   = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">back</a>;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dilation_x = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">dilation</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dilation_y = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">dilation</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dilation_z = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">dilation</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride_x   = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>();</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride_y   = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>();</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> stride_z   = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">z</a>();</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    <span class="keywordtype">int</span> output_width_size  = 0;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    <span class="keywordtype">int</span> output_height_size = 0;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    <span class="keywordtype">int</span> output_depth_size  = 0;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <span class="keywordflow">switch</span>(conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">round_type</a>)</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    {</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>:</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;            output_width_size  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor((static_cast&lt;float&gt;(src[width_dim] + pad_left + pad_right - (dilation_x * (weights[weights_width_dim] - 1) + 1)) / stride_x) + 1));</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;            output_height_size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor((static_cast&lt;float&gt;(src[height_dim] + pad_top + pad_bottom - (dilation_y * (weights[weights_height_dim] - 1) + 1)) / stride_y) + 1));</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;            output_depth_size  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor((static_cast&lt;float&gt;(src[depth_dim] + pad_front + pad_back - (dilation_z * (weights[weights_depth_dim] - 1) + 1)) / stride_z) + 1));</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">DimensionRoundingType::CEIL</a>:</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;            output_width_size  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil((static_cast&lt;float&gt;(src[width_dim] + pad_left + pad_right - (dilation_x * (weights[weights_width_dim] - 1) + 1)) / stride_x) + 1));</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;            output_height_size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil((static_cast&lt;float&gt;(src[height_dim] + pad_top + pad_bottom - (dilation_y * (weights[weights_height_dim] - 1) + 1)) / stride_y) + 1));</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;            output_depth_size  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil((static_cast&lt;float&gt;(src[depth_dim] + pad_front + pad_back - (dilation_z * (weights[weights_depth_dim] - 1) + 1)) / stride_z) + 1));</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    }</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(batch_dim, src[batch_dim]);</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(width_dim, output_width_size);</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(height_dim, output_height_size);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(depth_dim, output_depth_size);</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(channel_dim, weights[weights_CHout_dim]);</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;}</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment">/** Calculate the output pool3d shape of a tensor</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;<span class="comment"> * @param[in] src         Input tensor info</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="comment"> * @param[in] pool3d_info Pooling layer info</span></div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01499"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a225ba1ef310f1bf3802ec35d4808bb41"> 1499</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a225ba1ef310f1bf3802ec35d4808bb41">compute_pool3d_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> pool3d_info)</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;{</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>{ src };</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>      = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">DataLayout::NDHWC</a>;</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>        = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>       = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  idx_depth        = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DataLayoutDimension::DEPTH</a>);</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  pool_size_width  = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? src[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] : pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  pool_size_height = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? src[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] : pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  pool_size_depth  = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? src[idx_depth] : pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>;</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <span class="keywordtype">int</span>        output_width     = 0;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keywordtype">int</span>        output_height    = 0;</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordtype">int</span>        output_depth     = 0;</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    std::tie(output_width, output_height, output_depth) = <a class="code" href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">scaled_3d_dimensions_signed</a>(src[idx_width], src[idx_height], src[idx_depth], pool_size_width, pool_size_height,</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;                                                                                      pool_size_depth, pool3d_info);</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((output_width &lt; 1 || output_height &lt; 1 || output_depth &lt; 1), <span class="stringliteral">&quot;Calculated output dimension size is invalid&quot;</span>);</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_width, static_cast&lt;size_t&gt;(output_width));</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_height, static_cast&lt;size_t&gt;(output_height));</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.set(idx_depth, static_cast&lt;size_t&gt;(output_depth));</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;}</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;<span class="comment">/** Calculate the gather output shape of a tensor</span></div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;<span class="comment"> * @param[in] input_shape   Input tensor shape</span></div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;<span class="comment"> * @param[in] indices_shape Indices tensor shape. Only supports for 2d and 3d indices</span></div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;<span class="comment"> * @param[in] actual_axis   Axis to be used in the computation</span></div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;<span class="comment"> * @note Let input_shape be (X,Y,Z) and indices shape (W,O,P) and axis 1</span></div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;<span class="comment"> *       the new shape is computed by replacing the axis in the input shape with</span></div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;<span class="comment"> *       the indice shape so the output shape will be (X,W,O,P,Z)</span></div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;<span class="comment"> * @return the calculated shape</span></div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01538"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae6578c8df1088c90dfa0d1be6bca605d"> 1538</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae6578c8df1088c90dfa0d1be6bca605d">compute_gather_shape</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;indices_shape, uint32_t actual_axis)</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;{</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 4);</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(actual_axis &gt;= input_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(indices_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 3);</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>;</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;    <span class="keywordflow">if</span>(indices_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() == 1u)</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    {</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        output_shape[actual_axis] = indices_shape[0];</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    }</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    {</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> ind_num_dims</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        {</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;            indices_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>()</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        };</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;        output_shape.shift_right(ind_num_dims - 1);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;        <span class="keywordflow">switch</span>(actual_axis)</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;        {</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;            {</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                output_shape[0] = input_shape[0];</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> idx = 0; idx &lt; ind_num_dims; ++idx)</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;                {</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                    output_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(actual_axis + idx, indices_shape[idx], <span class="keyword">false</span>);</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                }</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;            }</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;            {</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;                <span class="comment">// 2d and 3d indices are only supported for axis == 1</span></div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(actual_axis != 1 &amp;&amp; indices_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 1);</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;            }</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;        }</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    }</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;}</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;} <span class="comment">// namespace shape_calculator</span></div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;} <span class="comment">// namespace misc</span></div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_MISC_SHAPE_CALCULATOR_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a1f4e725b8e1ea36b30e09dc08ae6961d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">arm_compute::ITensorInfo::num_dimensions</a></div><div class="ttdeci">virtual size_t num_dimensions() const =0</div><div class="ttdoc">The number of dimensions of the tensor (rank) </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">Scale.cpp:264</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_ab6d90bb06b3c19db6aba94975be64d10"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">arm_compute::TensorShape::shift_right</a></div><div class="ttdeci">void shift_right(size_t step)</div><div class="ttdoc">Shifts right the tensor shape increasing its dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00144">TensorShape.h:144</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a30c67d11c15378ffe67ca3c31e848917"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a30c67d11c15378ffe67ca3c31e848917">arm_compute::misc::shape_calculator::compute_slice_shape</a></div><div class="ttdeci">TensorShape compute_slice_shape(const TensorShape &amp;input_shape, const Coordinates &amp;starts, const Coordinates &amp;ends)</div><div class="ttdoc">Calculate the slice output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01064">ShapeCalculator.h:1064</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a593fb7ecc281425b190cd6f20164b1a3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a593fb7ecc281425b190cd6f20164b1a3">arm_compute::misc::shape_calculator::compute_permutation_output_shape</a></div><div class="ttdeci">TensorShape compute_permutation_output_shape(const ITensorInfo &amp;input, const PermutationVector &amp;perm)</div><div class="ttdoc">Calculate the permuted shape of an input given a permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00109">ShapeCalculator.h:109</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_afc6b7d4a0a2cb7074f644de316ca696b"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afc6b7d4a0a2cb7074f644de316ca696b">arm_compute::misc::shape_calculator::compute_depth_to_space_shape</a></div><div class="ttdeci">TensorShape compute_depth_to_space_shape(const TensorShape &amp;input_shape, DataLayout data_layout, int block)</div><div class="ttdoc">Calculate the depth to space output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01106">ShapeCalculator.h:1106</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a335af87f447f4eb79718a3722f9e0203"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape</a></div><div class="ttdeci">TensorShape compute_depthwise_convolution_shape(const ITensorInfo &amp;input, const ITensorInfo &amp;weights, const ConvolutionInfo &amp;info)</div><div class="ttdoc">Calculate the depthwise convolution output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00421">ShapeCalculator.h:421</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_af3ea9359e54887bee840504b4e51ccda"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a></div><div class="ttdeci">constexpr unsigned int channel_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00036">Conv3D.cpp:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_acb74edf42335de0dca0da5158b704c4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#acb74edf42335de0dca0da5158b704c4b">arm_compute::TensorShape::remove_dimension</a></div><div class="ttdeci">void remove_dimension(size_t n)</div><div class="ttdoc">Accessor to remove the dimension n from the tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00111">TensorShape.h:111</a></div></div>
<div class="ttc" id="structarm__compute_1_1_conv3d_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml">arm_compute::Conv3dInfo</a></div><div class="ttdoc">Descriptor used by the 3d Convolution function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00081">FunctionDescriptors.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a04249f91ec2964d21a91bb7038821000"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape</a></div><div class="ttdeci">TensorShape compute_winograd_input_transform_shape(const ITensorInfo &amp;input, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Calculate the winograd input transform shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00641">ShapeCalculator.h:641</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_a0bc60aaf23b2d3ed3b344576a708e84e"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#a0bc60aaf23b2d3ed3b344576a708e84e">arm_compute::WinogradInfo::output_data_layout</a></div><div class="ttdeci">DataLayout output_data_layout</div><div class="ttdoc">Data layout to use for the output tensor once the convolution has been applied (NCHW or NHWC) ...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02638">Types.h:2638</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_acedb0877d41f2ae0591a2d4e84318140"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acedb0877d41f2ae0591a2d4e84318140">arm_compute::misc::shape_calculator::calculate_unstack_shape</a></div><div class="ttdeci">TensorShape calculate_unstack_shape(TensorShape input_shape, unsigned int axis)</div><div class="ttdoc">Calculate the unstack shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01348">ShapeCalculator.h:1348</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a5797726a8fbee3b11b92757c2f0031d6"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5797726a8fbee3b11b92757c2f0031d6">arm_compute::misc::shape_calculator::compute_transpose1xW_with_element_size_shape</a></div><div class="ttdeci">TensorShape compute_transpose1xW_with_element_size_shape(const ITensorInfo &amp;b, int mult_transpose1xW_width=1)</div><div class="ttdoc">Calculate the transposed 1xW width element shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00314">ShapeCalculator.h:314</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_kernel_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml">arm_compute::GEMMKernelInfo</a></div><div class="ttdoc">Descriptor used by the GEMM kernels. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00058">KernelDescriptors.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a32c692ab35f40f9ce6e27e1f4016e921"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a32c692ab35f40f9ce6e27e1f4016e921">arm_compute::misc::shape_calculator::compute_stack_shape</a></div><div class="ttdeci">TensorShape compute_stack_shape(const ITensorInfo &amp;a, unsigned int axis, unsigned int num_tensors)</div><div class="ttdoc">Calculate the stack output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01405">ShapeCalculator.h:1405</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">arm_compute::DimensionRoundingType::CEIL</a></div><div class="ttdoc">Ceil rounding. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a3d3eaddfd85c16e7a9a385ba0e6a45b0"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3d3eaddfd85c16e7a9a385ba0e6a45b0">arm_compute::misc::shape_calculator::compute_roi_align_shape</a></div><div class="ttdeci">TensorShape compute_roi_align_shape(const ITensorInfo &amp;input, const ITensorInfo &amp;rois, ROIPoolingLayerInfo pool_info)</div><div class="ttdoc">Calculate the output roi align shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00867">ShapeCalculator.h:867</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="structarm__compute_1_1_conv3d_info_xhtml_a51ba0498913f8c74b9ba8938694d09bf"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">arm_compute::Conv3dInfo::padding</a></div><div class="ttdeci">Padding3D padding</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00096">FunctionDescriptors.h:96</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml_acfef62abd2f827bf05666ba50a705c0d"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#acfef62abd2f827bf05666ba50a705c0d">arm_compute::GEMMLHSMatrixInfo::v0</a></div><div class="ttdeci">unsigned int v0</div><div class="ttdoc">Number of vertical blocks of size (m0xk0) stored on the same output row. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02314">Types.h:2314</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_kernel_info_xhtml_a370d5ff7251d8d974c634c9ed0dde094"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a370d5ff7251d8d974c634c9ed0dde094">arm_compute::GEMMKernelInfo::depth_output_gemm3d</a></div><div class="ttdeci">unsigned int depth_output_gemm3d</div><div class="ttdoc">Depth of the output tensor in case is reinterpreted as 3D. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00087">KernelDescriptors.h:87</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_a08435ee49cd2444e8f8f31362062be07"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a></div><div class="ttdeci">constexpr unsigned int weights_height_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00040">Conv3D.cpp:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml">arm_compute::WinogradInfo</a></div><div class="ttdoc">Winograd information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02619">Types.h:2619</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">arm_compute::GEMMReshapeInfo</a></div><div class="ttdoc">GEMM reshape information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02161">Types.h:2161</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_ad99e40b120f0a9e96821c08bf60a84f2"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#ad99e40b120f0a9e96821c08bf60a84f2">arm_compute::WinogradInfo::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info</div><div class="ttdoc">Convolution info (Pads, strides,...) </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02637">Types.h:2637</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a6a8ad2364ce45d0cb7c6938544711f7c"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6a8ad2364ce45d0cb7c6938544711f7c">arm_compute::PriorBoxLayerInfo::aspect_ratios</a></div><div class="ttdeci">std::vector&lt; float &gt; aspect_ratios() const</div><div class="ttdoc">Get aspect ratios. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00932">Types.h:932</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_adca241b012a5e00ddfcdc5a8db05a2a3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#adca241b012a5e00ddfcdc5a8db05a2a3">arm_compute::misc::shape_calculator::compute_mm_shape</a></div><div class="ttdeci">TensorShape compute_mm_shape(const ITensorInfo &amp;input0, const ITensorInfo &amp;input1, bool is_interleaved_transposed, const GEMMReshapeInfo &amp;reshape_info)</div><div class="ttdoc">Calculate the matrix multiplication output shape of two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00905">ShapeCalculator.h:905</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a60ce6c017f70d978b48b101ce314969e"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a60ce6c017f70d978b48b101ce314969e">arm_compute::misc::shape_calculator::compute_reductionA_shape</a></div><div class="ttdeci">TensorShape compute_reductionA_shape(const ITensorInfo &amp;b)</div><div class="ttdoc">Calculate the reductionA shape used in GEMMLowp. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00334">ShapeCalculator.h:334</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_aa9c700eabf3b1ac4158662e957f4d165"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a></div><div class="ttdeci">constexpr unsigned int weights_depth_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00039">Conv3D.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ad16b366db486fec63b6d962937ec4545"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad16b366db486fec63b6d962937ec4545">arm_compute::misc::shape_calculator::compute_softmax_shape</a></div><div class="ttdeci">TensorShape compute_softmax_shape(const ITensorInfo *input, size_t axis=1)</div><div class="ttdoc">Calculate the softmax output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00579">ShapeCalculator.h:579</a></div></div>
<div class="ttc" id="structarm__compute_1_1_conv3d_info_xhtml_a883bafc097dfc9eb0a78b92154b759c4"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">arm_compute::Conv3dInfo::dilation</a></div><div class="ttdeci">Size3D dilation</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00098">FunctionDescriptors.h:98</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a11916d4148a39a67794050373f54825a"><div class="ttname"><a href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">arm_compute::BiStrides</a></div><div class="ttdeci">Coordinates BiStrides</div><div class="ttdoc">Bidirectional strides. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00053">Types.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a585529133e437dc5f935d33de17c4abb"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a585529133e437dc5f935d33de17c4abb">arm_compute::misc::shape_calculator::compute_space_to_batch_shape</a></div><div class="ttdeci">TensorShape compute_space_to_batch_shape(const ITensorInfo *input, const int block_x, const int block_y, const Size2D &amp;padding_left, const Size2D &amp;padding_right)</div><div class="ttdoc">Calculate the space to batch output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01165">ShapeCalculator.h:1165</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml_a2dc097fefeb3d010fb5570a19cac6cd3"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a2dc097fefeb3d010fb5570a19cac6cd3">arm_compute::GEMMRHSMatrixInfo::h0</a></div><div class="ttdeci">unsigned int h0</div><div class="ttdoc">Number of horizontal blocks of size (k0xn0) stored on the same output row. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02329">Types.h:2329</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_af98bc3ef5c65dbb63bc79700ccdd043b"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af98bc3ef5c65dbb63bc79700ccdd043b">arm_compute::misc::shape_calculator::compute_rnn_shape</a></div><div class="ttdeci">TensorShape compute_rnn_shape(const ITensorInfo *input, const unsigned int batch_size)</div><div class="ttdoc">Calculate the RNN shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00888">ShapeCalculator.h:888</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="structarm__compute_1_1_conv3d_info_xhtml_a8552c72afa19c3cb09f61e2ac730f504"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">arm_compute::Conv3dInfo::stride</a></div><div class="ttdeci">Size3D stride</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00095">FunctionDescriptors.h:95</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">arm_compute::GEMMLHSMatrixInfo</a></div><div class="ttdoc">GEMM LHS (Left Hand Side) matrix information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02305">Types.h:2305</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">arm_compute::helpers::tensor_transform</a></div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8h_source.xhtml#l00033">tensor_transform.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3b0c016b53e97663b39c2f3875f46c24"><div class="ttname"><a href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">arm_compute::compute_winograd_convolution_tiles</a></div><div class="ttdeci">Size2D compute_winograd_convolution_tiles(const Size2D &amp;in_dims, const Size2D &amp;kernel_size, const Size2D &amp;output_tile_size, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the number of output tiles required by Winograd Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00227">Helpers.h:227</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00055">CpuGemmAssemblyDispatch.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_afbc83cd4145d161da4c026e1f5743e1d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#afbc83cd4145d161da4c026e1f5743e1d">arm_compute::misc::shape_calculator::compute_reorg_output_shape</a></div><div class="ttdeci">TensorShape compute_reorg_output_shape(const ITensorInfo &amp;input, int32_t stride)</div><div class="ttdoc">Calculate the output shape of the reorg layer given a stride. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00123">ShapeCalculator.h:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00075">Size2D.h:75</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a5a00bf3cb11be124771cf7e3958e218e"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">arm_compute::ROIPoolingLayerInfo::pooled_width</a></div><div class="ttdeci">unsigned int pooled_width() const</div><div class="ttdoc">Get the pooled width of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01415">Types.h:1415</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3fea0ce4e6eeee7bf3a511c31b51d44f"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">arm_compute::PadStrideInfo::pad_top</a></div><div class="ttdeci">unsigned int pad_top() const</div><div class="ttdoc">Get the top padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00755">Types.h:755</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a225ba1ef310f1bf3802ec35d4808bb41"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a225ba1ef310f1bf3802ec35d4808bb41">arm_compute::misc::shape_calculator::compute_pool3d_shape</a></div><div class="ttdeci">TensorShape compute_pool3d_shape(const TensorShape &amp;src, Pooling3dLayerInfo pool3d_info)</div><div class="ttdoc">Calculate the output pool3d shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01499">ShapeCalculator.h:1499</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00062">impl.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a8d52adbbcd2c53f837c96b5a3d15c4fb"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8d52adbbcd2c53f837c96b5a3d15c4fb">arm_compute::misc::shape_calculator::compute_interleaved_shape</a></div><div class="ttdeci">TensorShape compute_interleaved_shape(const ITensorInfo &amp;a, int mult_interleave4x4_height=1, bool reinterpret_input_as_3d=false)</div><div class="ttdoc">Calculate the interleaved shape of an input tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00261">ShapeCalculator.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a1d3b8af21d25d9e6871673565f9f7532"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1d3b8af21d25d9e6871673565f9f7532">arm_compute::misc::shape_calculator::compute_output_stage_shape</a></div><div class="ttdeci">TensorShape compute_output_stage_shape(const ITensorInfo &amp;input, unsigned int gemm_3d_depth=1, bool batch_size_on_z=false)</div><div class="ttdoc">Calculate the matrix multiplication output shape of two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01017">ShapeCalculator.h:1017</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00091">Size2D.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a1b843e3850ed7324d11f77882cc597ae"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a1b843e3850ed7324d11f77882cc597ae">arm_compute::misc::shape_calculator::compute_min_max_shape</a></div><div class="ttdeci">TensorShape compute_min_max_shape(const ITensorInfo *input)</div><div class="ttdoc">Calculate the min/max shape output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00784">ShapeCalculator.h:784</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_a396d80389277ad8cd13a5e0567776191"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a396d80389277ad8cd13a5e0567776191">arm_compute::helpers::tensor_transform::construct_slice_end_mask</a></div><div class="ttdeci">int32_t construct_slice_end_mask(Coordinates ends)</div><div class="ttdoc">Constructs end mask in case we want to perform a slice operation using the strided slice interface...</div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00172">tensor_transform.cpp:172</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ab288dc7ed664925c6f992b0e6aa3bc1b"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ab288dc7ed664925c6f992b0e6aa3bc1b">arm_compute::misc::shape_calculator::compute_strided_slice_shape</a></div><div class="ttdeci">TensorShape compute_strided_slice_shape(const ITensorInfo &amp;input, const Coordinates &amp;starts, const Coordinates &amp;ends, const Coordinates &amp;strides, int32_t begin_mask, int32_t end_mask, int32_t shrink_axis_mask)</div><div class="ttdoc">Calculate the strided slice output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01048">ShapeCalculator.h:1048</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_acac1575c0edd329ceb4a54d9fe8dcb08"><div class="ttname"><a href="namespacearm__compute.xhtml#acac1575c0edd329ceb4a54d9fe8dcb08">arm_compute::DIV_CEIL</a></div><div class="ttdeci">constexpr auto DIV_CEIL(S val, T m) -&gt; decltype((val+m - 1)/m)</div><div class="ttdoc">Calculate the rounded up quotient of val / m. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00058">Utils.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a138beaeb1260b90cb03bc3f761628724"><div class="ttname"><a href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">arm_compute::scaled_dimensions</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(int width, int height, int kernel_width, int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00429">Utils.cpp:429</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a769d636d7a3c7c84579a5f477a18bc9d"><div class="ttname"><a href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">arm_compute::MAX_DIMS</a></div><div class="ttdeci">constexpr size_t MAX_DIMS</div><div class="ttdoc">Constant value used to indicate maximum dimensions of a Window, TensorShape and Coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00038">Dimensions.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a69cb11b5b37f94a6bea9eaad9d13cccf"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">arm_compute::misc::shape_calculator::compute_transposed_shape</a></div><div class="ttdeci">TensorShape compute_transposed_shape(const ITensorInfo &amp;input)</div><div class="ttdoc">Calculate the transposed shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00403">ShapeCalculator.h:403</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">Helpers.h:125</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ae270329cfe3dbab009b700318e8af8b4"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae270329cfe3dbab009b700318e8af8b4">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape</a></div><div class="ttdeci">TensorShape compute_deconvolution_output_shape(const std::pair&lt; unsigned int, unsigned int &gt; &amp;out_dims, const ITensorInfo &amp;input, const ITensorInfo &amp;weights)</div><div class="ttdoc">Calculate the output shape of the deconvolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00493">ShapeCalculator.h:493</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1d8da22845d57d4aacb55b7d5ae6c013"><div class="ttname"><a href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">arm_compute::scaled_dimensions_signed</a></div><div class="ttdeci">std::pair&lt; int, int &gt; scaled_dimensions_signed(int width, int height, int kernel_width, int kernel_height, const PadStrideInfo &amp;pad_stride_info)</div><div class="ttdoc">Returns calculated width and height of output scaled tensor depending on dimensions rounding mode...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00463">Utils.cpp:463</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ad242bedd6845b8fc13ade41cfc062c83"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ad242bedd6845b8fc13ade41cfc062c83">arm_compute::misc::shape_calculator::compute_pool_shape</a></div><div class="ttdeci">TensorShape compute_pool_shape(const ITensorInfo &amp;input, PoolingLayerInfo pool_info)</div><div class="ttdoc">Calculate the output pool shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00801">ShapeCalculator.h:801</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a841b7b7f4c7b50931fabb298cfb7bed3"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">arm_compute::GEMMReshapeInfo::n</a></div><div class="ttdeci">int n() const</div><div class="ttdoc">Number of matrix B columns. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02199">Types.h:2199</a></div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_adccaa3ddba466fa0857ec3c9f33a9db4"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#adccaa3ddba466fa0857ec3c9f33a9db4">arm_compute::ConvolutionInfo::depth_multiplier</a></div><div class="ttdeci">unsigned int depth_multiplier</div><div class="ttdoc">Multiplier to apply to input&amp;#39;s depth to retrieve the output depth. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02274">Types.h:2274</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a83efb6708574e67d13965bcd2059ad75"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">arm_compute::misc::shape_calculator::compute_flatten_shape</a></div><div class="ttdeci">TensorShape compute_flatten_shape(const ITensorInfo *input)</div><div class="ttdoc">Calculate the flattened output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00561">ShapeCalculator.h:561</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml_a9bca3aa421b5fa7c07b0aa751b39b25f"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">arm_compute::GEMMRHSMatrixInfo::k0</a></div><div class="ttdeci">unsigned int k0</div><div class="ttdoc">Number of partial accumulations performed by the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02328">Types.h:2328</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ae3f672f124e4228db364bb811e770226"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae3f672f124e4228db364bb811e770226">arm_compute::misc::shape_calculator::compute_prior_box_shape</a></div><div class="ttdeci">TensorShape compute_prior_box_shape(const ITensorInfo &amp;input, const PriorBoxLayerInfo &amp;info)</div><div class="ttdoc">Calculate the prior box output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01214">ShapeCalculator.h:1214</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a951fb0d8dcf2a2a338e26a59ffc9af17"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a951fb0d8dcf2a2a338e26a59ffc9af17">arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape</a></div><div class="ttdeci">TensorShape compute_vector_to_tensor_output_shape(const TensorShape &amp;input, size_t conv_w, size_t conv_h, const DataLayout &amp;data_layout)</div><div class="ttdoc">Calculate the output tensor shape of a vector input given the convolution dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00088">ShapeCalculator.h:88</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_kernel_info_xhtml_a4033037df26775dd60840e66d38a08ba"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a4033037df26775dd60840e66d38a08ba">arm_compute::GEMMKernelInfo::m</a></div><div class="ttdeci">unsigned int m</div><div class="ttdoc">Number of LHS rows. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00084">KernelDescriptors.h:84</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_kernel_info_xhtml_a7d46b74409bd32b539089ef4721ea544"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#a7d46b74409bd32b539089ef4721ea544">arm_compute::GEMMKernelInfo::n</a></div><div class="ttdeci">unsigned int n</div><div class="ttdoc">Number of RHS columns. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00085">KernelDescriptors.h:85</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af78b3c8c9ad65dcb4bfa1d2fee424308"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">const auto input_shape</div><div class="ttdoc">Validate test suite is to test ARM_COMPUTE_RETURN_ON_* macros we use to check the validity of given a...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00408">ConvolutionLayer.cpp:408</a></div></div>
<div class="ttc" id="structarm__compute_1_1_conv3d_info_xhtml_acfcc7a243b3338bedc78c7c645d972fd"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">arm_compute::Conv3dInfo::round_type</a></div><div class="ttdeci">DimensionRoundingType round_type</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00099">FunctionDescriptors.h:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_a1052a747170eed194bab868f0fce68ad"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">arm_compute::Padding3D::front</a></div><div class="ttdeci">size_t front</div><div class="ttdoc">Padding across the depth dimenstion on the front, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00822">Types.h:822</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_aafa923d0a069ae069f7a9239f65452dd"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">arm_compute::Pooling3dLayerInfo::pool_size</a></div><div class="ttdeci">Size3D pool_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01390">Types.h:1390</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a112cc1d5093b7672bf11569659251a7c"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">arm_compute::Dimensions::collapse_from</a></div><div class="ttdeci">void collapse_from(size_t start)</div><div class="ttdoc">Collapse dimensions starting from a given point. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00183">Dimensions.h:183</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">const auto output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00411">ConvolutionLayer.cpp:411</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a389f89ab5121dad0906d0b7324fbf73d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a389f89ab5121dad0906d0b7324fbf73d">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape</a></div><div class="ttdeci">TensorShape compute_lhs_reshaped_shape(const ITensorInfo &amp;a, const GEMMLHSMatrixInfo &amp;lhs_info, bool reinterpret_input_as_3d=false)</div><div class="ttdoc">Calculate the Left Hand Side matrix reshaped shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00181">ShapeCalculator.h:181</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_aa122204d58183b5b9cea670d8aa3c51c"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aa122204d58183b5b9cea670d8aa3c51c">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape</a></div><div class="ttdeci">TensorShape calculate_reduce_mean_shape(ITensorInfo *input, const Coordinates &amp;reduction_axis, bool keep_dims)</div><div class="ttdoc">Calculate the output tensor shape for the reduce mean operation. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00051">ShapeCalculator.h:51</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">arm_compute::GEMMRHSMatrixInfo</a></div><div class="ttdoc">GEMM RHS (Right Hand Side) matrix information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02320">Types.h:2320</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a07aa17a679384eec2f192f8ee16bc9ec"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a07aa17a679384eec2f192f8ee16bc9ec">arm_compute::misc::shape_calculator::compute_unpool_shape</a></div><div class="ttdeci">TensorShape compute_unpool_shape(const ITensorInfo &amp;input, PoolingLayerInfo pool_info)</div><div class="ttdoc">Calculate the output unpool shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00835">ShapeCalculator.h:835</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_a5cd6561e9acc0cf9ba11bc2f51ec7a33"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#a5cd6561e9acc0cf9ba11bc2f51ec7a33">arm_compute::WinogradInfo::output_tile_size</a></div><div class="ttdeci">Size2D output_tile_size</div><div class="ttdoc">Width and height of the output tile. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02634">Types.h:2634</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_a38fe393e11c69a5d459a75e2858e9f17"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">arm_compute::ConvolutionInfo::pad_stride_info</a></div><div class="ttdeci">PadStrideInfo pad_stride_info</div><div class="ttdoc">Convolution info (Pads, strides,...) </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02273">Types.h:2273</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a9f9ebacf4b044525b8cfefbc8795a9cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a9f9ebacf4b044525b8cfefbc8795a9cc">arm_compute::test::validation::lhs_info</a></div><div class="ttdeci">lhs_info</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_reshaped_8cpp_source.xhtml#l00862">GEMMMatrixMultiplyReshaped.cpp:862</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml_ac0c87b58d0d04796c81d8138231dccda"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ac0c87b58d0d04796c81d8138231dccda">arm_compute::GEMMRHSMatrixInfo::n0</a></div><div class="ttdeci">unsigned int n0</div><div class="ttdoc">Number of columns processed by the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02327">Types.h:2327</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size3D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the 3D shape or object. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00093">Size3D.h:93</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a626cdfbacb377ee26462155d421717d3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a626cdfbacb377ee26462155d421717d3">arm_compute::misc::shape_calculator::compute_tiled_shape</a></div><div class="ttdeci">TensorShape compute_tiled_shape(const TensorShape &amp;input_shape, const Multiples &amp;multiples)</div><div class="ttdoc">Calculate the tiled shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01254">ShapeCalculator.h:1254</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_aac145e44968aa3f4c5c8ee8f27ec6baf"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a></div><div class="ttdeci">constexpr unsigned int depth_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00033">Conv3D.cpp:33</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml">arm_compute::Pooling3dLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01297">Types.h:1297</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a6e324c1bd1111876469ea247da156147"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const</div><div class="ttdoc">Get the stride. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00719">Types.h:719</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a16875a1122accc1277a22e0ddbb8e94d"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">arm_compute::Pooling3dLayerInfo::is_global_pooling</a></div><div class="ttdeci">bool is_global_pooling</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01394">Types.h:1394</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_aff7ab3043f63660295d229ebc9e6c2b1"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#aff7ab3043f63660295d229ebc9e6c2b1">arm_compute::misc::shape_calculator::compute_reduced_shape</a></div><div class="ttdeci">TensorShape compute_reduced_shape(const TensorShape &amp;input, unsigned int axis, bool keep_dims=true)</div><div class="ttdoc">Calculate the reduced shape of a tensor given an axis. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01272">ShapeCalculator.h:1272</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01202">Types.h:1202</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_a5159123bf7ffd6ecb44e7322a9b0492e"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#a5159123bf7ffd6ecb44e7322a9b0492e">arm_compute::ConvolutionInfo::dilation</a></div><div class="ttdeci">Size2D dilation</div><div class="ttdoc">Dilation, in elements, across x and y. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02276">Types.h:2276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a09ad10a110d947fd9c444b2ea5e4c127"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a09ad10a110d947fd9c444b2ea5e4c127">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape</a></div><div class="ttdeci">TensorShape compute_rhs_reshaped_shape(const ITensorInfo &amp;a, const GEMMRHSMatrixInfo &amp;rhs_info)</div><div class="ttdoc">Calculate the Right Hand Side matrix reshaped shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00225">ShapeCalculator.h:225</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_kernel_info_xhtml_aba258627772f6f76f644911b027cbab5"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml#aba258627772f6f76f644911b027cbab5">arm_compute::GEMMKernelInfo::reinterpret_input_as_3d</a></div><div class="ttdeci">bool reinterpret_input_as_3d</div><div class="ttdoc">Flag used to reinterpret the input as 3D. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00088">KernelDescriptors.h:88</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml">arm_compute::ConvolutionInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02266">Types.h:2266</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00827">Types.h:827</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a7361bfd2660a28a8afff33307ed99b1b"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a7361bfd2660a28a8afff33307ed99b1b">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape</a></div><div class="ttdeci">TensorShape compute_deconvolution_upsampled_shape(const ITensorInfo &amp;input, const ITensorInfo &amp;weights, unsigned int sx, unsigned int sy, std::pair&lt; unsigned int, unsigned int &gt; &amp;out_dims, uint32_t &amp;padx, uint32_t &amp;pady)</div><div class="ttdoc">Calculate the upsampled output shape used for deconvolution. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00461">ShapeCalculator.h:461</a></div></div>
<div class="ttc" id="_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3860caeeaa259d59ccf69c3aea23f549"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">arm_compute::PadStrideInfo::pad_right</a></div><div class="ttdeci">unsigned int pad_right() const</div><div class="ttdoc">Get the right padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00750">Types.h:750</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::Padding3D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimenstion on the top, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00820">Types.h:820</a></div></div>
<div class="ttc" id="structarm__compute_1_1_direct_conv_compute_kernel_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml">arm_compute::DirectConvComputeKernelInfo</a></div><div class="ttdoc">Compute descriptor used by the direct convolution kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00114">KernelDescriptors.h:114</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::Padding3D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimenstion on the left, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00818">Types.h:818</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size3D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the 3D shape or object. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00092">Size3D.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00671">Types.h:671</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::ITensorInfo::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Element size in bytes calculated as data_size() * num_channels() </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ab2878b67ca384a699c1270900b31290b"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">arm_compute::Dimensions::begin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::iterator begin()</div><div class="ttdoc">Returns a read/write iterator that points to the first element in the dimension array. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00215">Dimensions.h:215</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a9aeced5a5128f60a31ea3e327a45ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">arm_compute::test::validation::has_bias</a></div><div class="ttdeci">const bool has_bias</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">Im2Col.cpp:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a25e3751f07d4b2771a05d8d01a7f7620"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape</a></div><div class="ttdeci">TensorShape compute_winograd_filter_transform_shape(const ITensorInfo &amp;input, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Calculate the winograd filter transform shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00618">ShapeCalculator.h:618</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a4e7f3187350db69156c1026860ace4e5"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a4e7f3187350db69156c1026860ace4e5">arm_compute::misc::shape_calculator::compute_padded_shape</a></div><div class="ttdeci">TensorShape compute_padded_shape(const TensorShape &amp;input_shape, const PaddingList &amp;padding)</div><div class="ttdoc">Calculate the padded shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01235">ShapeCalculator.h:1235</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">arm_compute::DataLayout::NDHWC</a></div><div class="ttdoc">Num samples, depth, height, width, channels. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdoc">batches </div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_aa185c5e9eee32898d06143bbd95f77a8"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">arm_compute::Padding3D::back</a></div><div class="ttdeci">size_t back</div><div class="ttdoc">Padding across the depth dimenstion on the back, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00823">Types.h:823</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00084">Size2D.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa08a9b7cf30c1c3e56ca1d2060313408"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">arm_compute::test::validation::gemm_info</a></div><div class="ttdeci">gemm_info</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_reshaped_8cpp_source.xhtml#l00862">GEMMMatrixMultiplyReshaped.cpp:862</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_adbd8a17754adc67f128a28cd256e4d4a"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a></div><div class="ttdeci">constexpr unsigned int weights_width_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00041">Conv3D.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a69f9b3191aafc4905f9d029ff9d48fea"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69f9b3191aafc4905f9d029ff9d48fea">arm_compute::misc::shape_calculator::compute_reductionB_shape</a></div><div class="ttdeci">TensorShape compute_reductionB_shape(const ITensorInfo &amp;a)</div><div class="ttdoc">Calculate the reductionB shape used in GEMMLowp. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00351">ShapeCalculator.h:351</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_af12060b11d4c1c9f615d6a55738212be"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a></div><div class="ttdeci">constexpr unsigned int batch_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00032">Conv3D.cpp:32</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_acb3f0c947411cfe1d8c5f67af2cad851"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#acb3f0c947411cfe1d8c5f67af2cad851">arm_compute::misc::shape_calculator::extract_shape</a></div><div class="ttdeci">TensorShape extract_shape(T *data)</div><div class="ttdoc">Get the tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01317">ShapeCalculator.h:1317</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_aa022cff9934a1a99bd77c49ca6a135a2"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">arm_compute::Padding3D::right</a></div><div class="ttdeci">size_t right</div><div class="ttdoc">Padding across the width dimenstion on the right, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00819">Types.h:819</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_a820c167ceaaa9759b0ca2695d22db55c"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">arm_compute::Size3D::depth</a></div><div class="ttdeci">size_t depth</div><div class="ttdoc">Depth of the 3D shape or object. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00094">Size3D.h:94</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a38fe393e11c69a5d459a75e2858e9f17"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">arm_compute::PoolingLayerInfo::pad_stride_info</a></div><div class="ttdeci">PadStrideInfo pad_stride_info</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01290">Types.h:1290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a3173d90757ec6ff31441b55883eafbca"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a3173d90757ec6ff31441b55883eafbca">arm_compute::misc::shape_calculator::compute_upsample_shape</a></div><div class="ttdeci">TensorShape compute_upsample_shape(const ITensorInfo &amp;input, const Size2D &amp;info)</div><div class="ttdoc">Calculate the upsampled shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01295">ShapeCalculator.h:1295</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a5699c316d27b41f0790827791e88ae26"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a5699c316d27b41f0790827791e88ae26">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape</a></div><div class="ttdeci">TensorShape compute_winograd_output_transform_shape(const ITensorInfo &amp;input, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Calculate the winograd output transform shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00677">ShapeCalculator.h:677</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a48df2e30342af92f8082425bafc36a4d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a48df2e30342af92f8082425bafc36a4d">arm_compute::misc::shape_calculator::compute_conv3d_shape</a></div><div class="ttdeci">TensorShape compute_conv3d_shape(const TensorShape &amp;src, const TensorShape &amp;weights, const Conv3dInfo &amp;conv3d_info)</div><div class="ttdoc">Calculate the output shape of 3d Convolution. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01435">ShapeCalculator.h:1435</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00090">Size2D.h:90</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_aa700774683c3d8977c1021a9463b02c1"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">weights_CHout_dim</a></div><div class="ttdeci">constexpr unsigned int weights_CHout_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00043">Conv3D.cpp:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_aee6a0c75a44f00d3306101e14ffc3ebb"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">arm_compute::ROIPoolingLayerInfo::pooled_height</a></div><div class="ttdeci">unsigned int pooled_height() const</div><div class="ttdoc">Get the pooled height of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01420">Types.h:1420</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a6365b505b5c1b98916425bc692b6ea49"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6365b505b5c1b98916425bc692b6ea49">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape</a></div><div class="ttdeci">TensorShape compute_weights_reshaped_shape(const ITensorInfo &amp;weights, bool has_bias=false, unsigned int num_groups=1)</div><div class="ttdoc">Calculate the reshaped shape of the weights. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00150">ShapeCalculator.h:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a137948e04c296b448be2c0de97c6adcb"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">arm_compute::GEMMReshapeInfo::m</a></div><div class="ttdeci">int m() const</div><div class="ttdoc">Number of matrix A rows. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02191">Types.h:2191</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01400">Types.h:1400</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00193">Helpers.inl:193</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a985940fefc02bdbc0ea1c916bb0ac82b"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a985940fefc02bdbc0ea1c916bb0ac82b">arm_compute::PriorBoxLayerInfo::max_sizes</a></div><div class="ttdeci">std::vector&lt; float &gt; max_sizes() const</div><div class="ttdoc">Get max sizes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00927">Types.h:927</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="structarm__compute_1_1_direct_conv_compute_kernel_info_xhtml_a7fc920d041b4123c404d143170e835f1"><div class="ttname"><a href="structarm__compute_1_1_direct_conv_compute_kernel_info.xhtml#a7fc920d041b4123c404d143170e835f1">arm_compute::DirectConvComputeKernelInfo::m0</a></div><div class="ttdeci">int32_t m0</div><div class="ttdoc">Number of rows to be processed by the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00116">KernelDescriptors.h:116</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a226889ea88d5691bdcbfba8243ed96b4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a226889ea88d5691bdcbfba8243ed96b4">arm_compute::test::validation::rhs_info</a></div><div class="ttdeci">rhs_info</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_reshaped_8cpp_source.xhtml#l00862">GEMMMatrixMultiplyReshaped.cpp:862</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac4d688e137d670d209b647ec37592a92"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac4d688e137d670d209b647ec37592a92">arm_compute::misc::shape_calculator::compute_batch_to_space_shape</a></div><div class="ttdeci">TensorShape compute_batch_to_space_shape(const ITensorInfo *input, const int block_x, const int block_y)</div><div class="ttdoc">Calculate the batch to space output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01081">ShapeCalculator.h:1081</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a70a2ef9fd754b5798a0a92656f8b5fcf"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a70a2ef9fd754b5798a0a92656f8b5fcf">arm_compute::misc::shape_calculator::compute_transpose1xW_shape</a></div><div class="ttdeci">TensorShape compute_transpose1xW_shape(const ITensorInfo &amp;b)</div><div class="ttdoc">Calculate the transposed 1xW shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00297">ShapeCalculator.h:297</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_abbd888f118c2209bf7578eb4f8942a07"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">arm_compute::GEMMReshapeInfo::depth_output_gemm3d</a></div><div class="ttdeci">int depth_output_gemm3d() const</div><div class="ttdoc">Depth (third dimension) of the output tensor to be used with the GEMM3D kernel. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02234">Types.h:2234</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a7058bee3ed710f07d96cb0d856de3bec"><div class="ttname"><a href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">arm_compute::scaled_3d_dimensions_signed</a></div><div class="ttdeci">std::tuple&lt; int, int, int &gt; scaled_3d_dimensions_signed(int width, int height, int depth, int kernel_width, int kernel_height, int kernel_depth, const Pooling3dLayerInfo &amp;pool3d_info)</div><div class="ttdoc">Returns calculated width, height and depth of output scaled tensor depending on dimensions rounding m...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00492">Utils.cpp:492</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_aca57076ead1d06c47d3d32f4302b14ac"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#aca57076ead1d06c47d3d32f4302b14ac">arm_compute::WinogradInfo::kernel_size</a></div><div class="ttdeci">Size2D kernel_size</div><div class="ttdoc">Width and height of the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02635">Types.h:2635</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_abe4640d429ac25799126454625834b7d"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#abe4640d429ac25799126454625834b7d">weights_width</a></div><div class="ttdeci">const size_t weights_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00053">impl.cpp:53</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml_a9bca3aa421b5fa7c07b0aa751b39b25f"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f">arm_compute::GEMMLHSMatrixInfo::k0</a></div><div class="ttdeci">unsigned int k0</div><div class="ttdoc">Number of partial accumulations performed by the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02313">Types.h:2313</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f78c2eaf7349bd49dc6b49876a06c38"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f78c2eaf7349bd49dc6b49876a06c38">arm_compute::test::validation::weights_shape</a></div><div class="ttdeci">const auto weights_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00409">ConvolutionLayer.cpp:409</a></div></div>
<div class="ttc" id="tensor__transform_8h_xhtml"><div class="ttname"><a href="tensor__transform_8h.xhtml">tensor_transform.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml_a41618231c7d7b990c42fe6846b4dde27"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a41618231c7d7b990c42fe6846b4dde27">arm_compute::GEMMLHSMatrixInfo::m0</a></div><div class="ttdeci">unsigned int m0</div><div class="ttdoc">Number of rows processed by the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02312">Types.h:2312</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a71f0df0f3b7d1380f1ee669aec324eb9"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">arm_compute::PoolingLayerInfo::pool_size</a></div><div class="ttdeci">Size2D pool_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01288">Types.h:1288</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab999f1a2cf0d5e438f487fabdc9e7430"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab999f1a2cf0d5e438f487fabdc9e7430">weights_height</a></div><div class="ttdeci">const size_t weights_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00054">impl.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_a43852fa64fdbd5efa153e5c1e1e27ba4"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">arm_compute::Size3D::z</a></div><div class="ttdeci">size_t z() const</div><div class="ttdoc">Semantic accessor for depth as z. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00076">Size3D.h:76</a></div></div>
<div class="ttc" id="_function_descriptors_8h_xhtml"><div class="ttname"><a href="_function_descriptors_8h.xhtml">FunctionDescriptors.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00092">Dimensions.h:92</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a519df47124aa903c7de8be2624640c1b"><div class="ttname"><a href="namespacearm__compute.xhtml#a519df47124aa903c7de8be2624640c1b">arm_compute::convert_negative_axis</a></div><div class="ttdeci">Coordinates &amp; convert_negative_axis(Coordinates &amp;coords, int max_value)</div><div class="ttdoc">Convert negative coordinates to positive in the range [0, num_dims_input]. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00257">Helpers.h:257</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_a00cca3f535943c474cfb60f99e491bf1"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a></div><div class="ttdeci">constexpr unsigned int height_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00034">Conv3D.cpp:34</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a16875a1122accc1277a22e0ddbb8e94d"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">arm_compute::PoolingLayerInfo::is_global_pooling</a></div><div class="ttdeci">bool is_global_pooling</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01292">Types.h:1292</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a264e2e6d3ff632e90d450435fce66d54"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a264e2e6d3ff632e90d450435fce66d54">arm_compute::misc::shape_calculator::compute_col2im_shape</a></div><div class="ttdeci">TensorShape compute_col2im_shape(const ITensorInfo &amp;input, const Size2D &amp;convolved_dims, bool batch_size_on_z, unsigned int num_groups=1)</div><div class="ttdoc">Calculate the Col2Im shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00372">ShapeCalculator.h:372</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ac49df0924d183da42cffc04cf9aba1f8"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">arm_compute::PadStrideInfo::pad_bottom</a></div><div class="ttdeci">unsigned int pad_bottom() const</div><div class="ttdoc">Get the bottom padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00760">Types.h:760</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_af9ef316b2c98c946b47cd18f1319b93f"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#af9ef316b2c98c946b47cd18f1319b93f">arm_compute::WinogradInfo::input_dimensions</a></div><div class="ttdeci">Size2D input_dimensions</div><div class="ttdoc">Width and height of the input tensor before the convolution is applied. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02636">Types.h:2636</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_add0528a8b08196d4e30e760499c552d4"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#add0528a8b08196d4e30e760499c552d4">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a></div><div class="ttdeci">TensorShape calculate_concatenate_shape(const std::vector&lt; T *&gt; &amp;input, size_t axis)</div><div class="ttdoc">Calculate the concatenate output shape of the concatenate operation along a single axis...</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01363">ShapeCalculator.h:1363</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a00330b8913cac3b07029ac0c3350e806"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">arm_compute::GEMMReshapeInfo::reinterpret_input_as_3d</a></div><div class="ttdeci">bool reinterpret_input_as_3d() const</div><div class="ttdoc">Flag which specifies if the input tensor has to be reinterpreted as 3D. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02242">Types.h:2242</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size3D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00058">Size3D.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_abe10cfa0b480704109fd1a925301f58b"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abe10cfa0b480704109fd1a925301f58b">arm_compute::misc::shape_calculator::compute_split_shape</a></div><div class="ttdeci">TensorShape compute_split_shape(const ITensorInfo *input, unsigned int axis, unsigned int num_splits)</div><div class="ttdoc">Calculate the split output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01130">ShapeCalculator.h:1130</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a7144874ab401f5c4e249a1115dfb5166"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">arm_compute::PadStrideInfo::pad_left</a></div><div class="ttdeci">unsigned int pad_left() const</div><div class="ttdoc">Get the left padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00745">Types.h:745</a></div></div>
<div class="ttc" id="_kernel_descriptors_8h_xhtml"><div class="ttname"><a href="_kernel_descriptors_8h.xhtml">KernelDescriptors.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe9e10e5fdfd1e2665ac17c75c0cacd8"><div class="ttname"><a href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">arm_compute::Multiples</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Multiples</div><div class="ttdoc">Information to produce a tiled version of a Tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a8a9286d053e9f3a958064e4f3cdd02f7"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a8a9286d053e9f3a958064e4f3cdd02f7">arm_compute::misc::shape_calculator::compute_im2col_conv_shape</a></div><div class="ttdeci">TensorShape compute_im2col_conv_shape(const ITensorInfo *input, const Size2D &amp;kernel_dims, const PadStrideInfo &amp;conv_info, bool has_bias, const Size2D &amp;dilation, bool batch_size_on_z, unsigned int num_groups=1)</div><div class="ttdoc">Calculate the im2col output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00523">ShapeCalculator.h:523</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a8e15e87871211f98c2b566137e38ef99"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">arm_compute::TensorShape::collapse</a></div><div class="ttdeci">void collapse(size_t n, size_t first=0)</div><div class="ttdoc">Collapse the first n dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00133">TensorShape.h:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00079">TensorShape.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac93cc76b563b366f030b8310a46046c3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00713">ShapeCalculator.h:713</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a75026dc1fa3840404ae4553010efcd52"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a75026dc1fa3840404ae4553010efcd52">arm_compute::Size2D::area</a></div><div class="ttdeci">size_t area() const</div><div class="ttdoc">The area of the image or rectangle calculated as (width * height) </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00054">Size2D.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_a859088de403805f35d826df5ef39ee80"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">arm_compute::Padding3D::bottom</a></div><div class="ttdeci">size_t bottom</div><div class="ttdoc">Padding across the height dimenstion on the bottom, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00821">Types.h:821</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">arm_compute::DataLayoutDimension::DEPTH</a></div><div class="ttdoc">depth </div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_af4c9e448fa705b36e59ac5db0cb586dc"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#af4c9e448fa705b36e59ac5db0cb586dc">arm_compute::misc::shape_calculator::compute_indirect_buffer_shape</a></div><div class="ttdeci">TensorShape compute_indirect_buffer_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info, const DirectConvComputeKernelInfo &amp;desc)</div><div class="ttdoc">Calculate the indirect buffer output shape used by the indirect convolution function. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00759">ShapeCalculator.h:759</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_abd7ceb09e076b5e3374aeb1fab08fc84"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#abd7ceb09e076b5e3374aeb1fab08fc84">arm_compute::misc::shape_calculator::compute_space_to_depth_shape</a></div><div class="ttdeci">TensorShape compute_space_to_depth_shape(const ITensorInfo *input, int32_t block_shape)</div><div class="ttdoc">Calculate the space to batch output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01191">ShapeCalculator.h:1191</a></div></div>
<div class="ttc" id="_conv3_d_8cpp_xhtml_ac8ce77b502316d44dfbe3232259d9aff"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a></div><div class="ttdeci">constexpr unsigned int width_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00035">Conv3D.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a147b1e13f347e7b995de58f8fafd6723"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a147b1e13f347e7b995de58f8fafd6723">arm_compute::PriorBoxLayerInfo::min_sizes</a></div><div class="ttdeci">std::vector&lt; float &gt; min_sizes() const</div><div class="ttdoc">Get min sizes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00892">Types.h:892</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_adb1ed814b11a751017250143fb1a9174"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#adb1ed814b11a751017250143fb1a9174">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape</a></div><div class="ttdeci">TensorShape compute_strided_slice_output_shape(TensorShape input_shape, Coordinates starts, Coordinates ends, Coordinates strides, int32_t begin_mask=0, int32_t end_mask=0, int32_t shrink_axis_mask=0, bool return_unshrinked=false)</div><div class="ttdoc">Computes output shape of strided slice. </div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00139">tensor_transform.cpp:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size3D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00067">Size3D.h:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ae6578c8df1088c90dfa0d1be6bca605d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ae6578c8df1088c90dfa0d1be6bca605d">arm_compute::misc::shape_calculator::compute_gather_shape</a></div><div class="ttdeci">TensorShape compute_gather_shape(const TensorShape &amp;input_shape, const TensorShape &amp;indices_shape, uint32_t actual_axis)</div><div class="ttdoc">Calculate the gather output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01538">ShapeCalculator.h:1538</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_7b0825b7536eda12b63e5d87347b1c7d.xhtml">utils</a></li><li class="navelem"><a class="el" href="dir_cab437ca4f6ec1fbc573ae83f91b2654.xhtml">misc</a></li><li class="navelem"><a class="el" href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:42 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
