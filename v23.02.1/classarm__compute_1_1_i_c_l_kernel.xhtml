<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ICLKernel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_c_l_kernel.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ICLKernel Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Common interface for all the OpenCL kernels.  
 <a href="classarm__compute_1_1_i_c_l_kernel.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ICLKernel:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_i_c_l_kernel__coll__graph.svg" width="94" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6b10e96ce90bf901d17def86b874b019"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6b10e96ce90bf901d17def86b874b019">ICLKernel</a> ()</td></tr>
<tr class="memdesc:a6b10e96ce90bf901d17def86b874b019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a6b10e96ce90bf901d17def86b874b019">More...</a><br /></td></tr>
<tr class="separator:a6b10e96ce90bf901d17def86b874b019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5121015ab09ece4d470f50c7ffe198e"><td class="memItemLeft" align="right" valign="top">cl::Kernel &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">kernel</a> ()</td></tr>
<tr class="memdesc:ae5121015ab09ece4d470f50c7ffe198e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to the OpenCL kernel of this object.  <a href="#ae5121015ab09ece4d470f50c7ffe198e">More...</a><br /></td></tr>
<tr class="separator:ae5121015ab09ece4d470f50c7ffe198e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c6588cde16e65529a900be780c4cd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab3c6588cde16e65529a900be780c4cd2">type</a> () const</td></tr>
<tr class="memdesc:ab3c6588cde16e65529a900be780c4cd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the CL kernel type.  <a href="#ab3c6588cde16e65529a900be780c4cd2">More...</a><br /></td></tr>
<tr class="separator:ab3c6588cde16e65529a900be780c4cd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9331d385192a50adf74d3af40ce0fa20"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9331d385192a50adf74d3af40ce0fa20"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9331d385192a50adf74d3af40ce0fa20">add_1D_array_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *array, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, unsigned int num_dimensions, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a9331d385192a50adf74d3af40ce0fa20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 1D array's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a9331d385192a50adf74d3af40ce0fa20">More...</a><br /></td></tr>
<tr class="separator:a9331d385192a50adf74d3af40ce0fa20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a479e7043e65dc87de35d374e108510f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">add_1D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a479e7043e65dc87de35d374e108510f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a479e7043e65dc87de35d374e108510f7">More...</a><br /></td></tr>
<tr class="separator:a479e7043e65dc87de35d374e108510f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25965a58d98e44856da286925792a2f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a25965a58d98e44856da286925792a2f7">add_1D_tensor_argument_if</a> (bool cond, unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a25965a58d98e44856da286925792a2f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx if the condition is true.  <a href="#a25965a58d98e44856da286925792a2f7">More...</a><br /></td></tr>
<tr class="separator:a25965a58d98e44856da286925792a2f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">add_2D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#ac74dad3e61f79334f5e73f3c3ac603cb">More...</a><br /></td></tr>
<tr class="separator:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ada6044648832c64532588f75303b44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2ada6044648832c64532588f75303b44">add_2D_tensor_argument_if</a> (bool cond, unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a2ada6044648832c64532588f75303b44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx if the condition is true.  <a href="#a2ada6044648832c64532588f75303b44">More...</a><br /></td></tr>
<tr class="separator:a2ada6044648832c64532588f75303b44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f5847162f352444c6ac1825d0e99c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a28f5847162f352444c6ac1825d0e99c7">add_3D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a28f5847162f352444c6ac1825d0e99c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 3D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a28f5847162f352444c6ac1825d0e99c7">More...</a><br /></td></tr>
<tr class="separator:a28f5847162f352444c6ac1825d0e99c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33e09c946b338fbfc780a9d1c66e68ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a33e09c946b338fbfc780a9d1c66e68ad">add_4D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a33e09c946b338fbfc780a9d1c66e68ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 4D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a33e09c946b338fbfc780a9d1c66e68ad">More...</a><br /></td></tr>
<tr class="separator:a33e09c946b338fbfc780a9d1c66e68ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8910b901d11e82cfed6de5abea0f1ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac8910b901d11e82cfed6de5abea0f1ee">add_5D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:ac8910b901d11e82cfed6de5abea0f1ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 5D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#ac8910b901d11e82cfed6de5abea0f1ee">More...</a><br /></td></tr>
<tr class="separator:ac8910b901d11e82cfed6de5abea0f1ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaad3259259d5bac3e599cd2fe730ba4b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aaad3259259d5bac3e599cd2fe730ba4b">add_3d_tensor_nhw_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:aaad3259259d5bac3e599cd2fe730ba4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed NHW 3D tensor's parameters to the object's kernel's arguments by passing strides, dimensions and the offset to the first valid element in bytes.  <a href="#aaad3259259d5bac3e599cd2fe730ba4b">More...</a><br /></td></tr>
<tr class="separator:aaad3259259d5bac3e599cd2fe730ba4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a1cb16e212d102fb60d77161b40d78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a39a1cb16e212d102fb60d77161b40d78">add_4d_tensor_nhwc_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a39a1cb16e212d102fb60d77161b40d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed NHWC 4D tensor's parameters to the object's kernel's arguments by passing strides, dimensions and the offset to the first valid element in bytes.  <a href="#a39a1cb16e212d102fb60d77161b40d78">More...</a><br /></td></tr>
<tr class="separator:a39a1cb16e212d102fb60d77161b40d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d5ccb74e06677836b3ca4f30e6962da"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">run</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, cl::CommandQueue &amp;queue)</td></tr>
<tr class="memdesc:a9d5ccb74e06677836b3ca4f30e6962da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue.  <a href="#a9d5ccb74e06677836b3ca4f30e6962da">More...</a><br /></td></tr>
<tr class="separator:a9d5ccb74e06677836b3ca4f30e6962da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11b2791dada6be4d5857a18b0dafb550"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">run_op</a> (<a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, cl::CommandQueue &amp;queue)</td></tr>
<tr class="memdesc:a11b2791dada6be4d5857a18b0dafb550"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue.  <a href="#a11b2791dada6be4d5857a18b0dafb550">More...</a><br /></td></tr>
<tr class="separator:a11b2791dada6be4d5857a18b0dafb550"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50f427a1d9419800972b9e03c4034311"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a50f427a1d9419800972b9e03c4034311"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a50f427a1d9419800972b9e03c4034311">add_argument</a> (unsigned int &amp;idx, T value)</td></tr>
<tr class="memdesc:a50f427a1d9419800972b9e03c4034311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed parameters to the object's kernel's arguments starting from the index idx.  <a href="#a50f427a1d9419800972b9e03c4034311">More...</a><br /></td></tr>
<tr class="separator:a50f427a1d9419800972b9e03c4034311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad356b88c8f61267d593d9ed99835bde9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a> (const cl::NDRange &amp;<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a>)</td></tr>
<tr class="memdesc:ad356b88c8f61267d593d9ed99835bde9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the Local-Workgroup-Size hint.  <a href="#ad356b88c8f61267d593d9ed99835bde9">More...</a><br /></td></tr>
<tr class="separator:ad356b88c8f61267d593d9ed99835bde9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9f813c25ed75ea7b7ac2fa3926a8f55"><td class="memItemLeft" align="right" valign="top">cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a> () const</td></tr>
<tr class="memdesc:ab9f813c25ed75ea7b7ac2fa3926a8f55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the Local-Workgroup-Size hint.  <a href="#ab9f813c25ed75ea7b7ac2fa3926a8f55">More...</a><br /></td></tr>
<tr class="separator:ab9f813c25ed75ea7b7ac2fa3926a8f55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48bd4a8a34a8bfa14d8092efd3f3f171"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">set_wbsm_hint</a> (const cl_int &amp;<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a>)</td></tr>
<tr class="memdesc:a48bd4a8a34a8bfa14d8092efd3f3f171"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the workgroup batch size modifier hint.  <a href="#a48bd4a8a34a8bfa14d8092efd3f3f171">More...</a><br /></td></tr>
<tr class="separator:a48bd4a8a34a8bfa14d8092efd3f3f171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ebf899a53f8bdab96eaaf2bb3d41985"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a> () const</td></tr>
<tr class="memdesc:a7ebf899a53f8bdab96eaaf2bb3d41985"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the workgroup batch size modifier hint.  <a href="#a7ebf899a53f8bdab96eaaf2bb3d41985">More...</a><br /></td></tr>
<tr class="separator:a7ebf899a53f8bdab96eaaf2bb3d41985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f7f6ab59fc0e601d750b83e75a398eb"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a> () const</td></tr>
<tr class="memdesc:a8f7f6ab59fc0e601d750b83e75a398eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the configuration ID.  <a href="#a8f7f6ab59fc0e601d750b83e75a398eb">More...</a><br /></td></tr>
<tr class="separator:a8f7f6ab59fc0e601d750b83e75a398eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</td></tr>
<tr class="memdesc:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the targeted GPU architecture.  <a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">More...</a><br /></td></tr>
<tr class="separator:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a57e5f498fcbfc25c28b8496dfa3fc33c">set_target</a> (cl::Device &amp;device)</td></tr>
<tr class="memdesc:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the targeted GPU architecture according to the CL device.  <a href="#a57e5f498fcbfc25c28b8496dfa3fc33c">More...</a><br /></td></tr>
<tr class="separator:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa550ff0352ff2388e02f7b0a41bf5fe7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">get_target</a> () const</td></tr>
<tr class="memdesc:aa550ff0352ff2388e02f7b0a41bf5fe7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the targeted GPU architecture.  <a href="#aa550ff0352ff2388e02f7b0a41bf5fe7">More...</a><br /></td></tr>
<tr class="separator:aa550ff0352ff2388e02f7b0a41bf5fe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abca336f832d730e8494049bd714df60a"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#abca336f832d730e8494049bd714df60a">get_max_workgroup_size</a> ()</td></tr>
<tr class="memdesc:abca336f832d730e8494049bd714df60a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the maximum workgroup size for the device the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> uses.  <a href="#abca336f832d730e8494049bd714df60a">More...</a><br /></td></tr>
<tr class="separator:abca336f832d730e8494049bd714df60a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0191633c258a30cc27e35b99b663aac"><td class="memTemplParams" colspan="2">template&lt;unsigned int dimension_size&gt; </td></tr>
<tr class="memitem:aa0191633c258a30cc27e35b99b663aac"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa0191633c258a30cc27e35b99b663aac">add_tensor_argument</a> (unsigned &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="separator:aa0191633c258a30cc27e35b99b663aac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d7c6b5f3332604ad6a637457f65c342"><td class="memTemplParams" colspan="2">template&lt;typename T , unsigned int dimension_size&gt; </td></tr>
<tr class="memitem:a2d7c6b5f3332604ad6a637457f65c342"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2d7c6b5f3332604ad6a637457f65c342">add_array_argument</a> (unsigned &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *array, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, unsigned int num_dimensions, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a2d7c6b5f3332604ad6a637457f65c342"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed array's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a2d7c6b5f3332604ad6a637457f65c342">More...</a><br /></td></tr>
<tr class="separator:a2d7c6b5f3332604ad6a637457f65c342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_kernel"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_kernel')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></td></tr>
<tr class="memitem:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">IKernel</a> ()</td></tr>
<tr class="memdesc:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">More...</a><br /></td></tr>
<tr class="separator:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">~IKernel</a> ()=default</td></tr>
<tr class="memdesc:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">More...</a><br /></td></tr>
<tr class="separator:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a> () const</td></tr>
<tr class="memdesc:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates whether or not the kernel is parallelisable.  <a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">More...</a><br /></td></tr>
<tr class="separator:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">border_size</a> () const</td></tr>
<tr class="memdesc:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the border for that kernel.  <a href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">More...</a><br /></td></tr>
<tr class="separator:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a> () const</td></tr>
<tr class="memdesc:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum window the kernel can be executed on.  <a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">More...</a><br /></td></tr>
<tr class="separator:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">is_window_configured</a> () const</td></tr>
<tr class="memdesc:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to check if the embedded window of this kernel has been configured.  <a href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">More...</a><br /></td></tr>
<tr class="separator:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a176b47627f076da2f4f821665f617fa5"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a176b47627f076da2f4f821665f617fa5">num_arguments_per_3d_tensor_nhw</a> ()</td></tr>
<tr class="memdesc:a176b47627f076da2f4f821665f617fa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per NHW 3D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object.  <a href="#a176b47627f076da2f4f821665f617fa5">More...</a><br /></td></tr>
<tr class="separator:a176b47627f076da2f4f821665f617fa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6613ac1df9303071051dbec519fb977b"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6613ac1df9303071051dbec519fb977b">num_arguments_per_4d_tensor_nhwc</a> ()</td></tr>
<tr class="memdesc:a6613ac1df9303071051dbec519fb977b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per NHWC 4D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object.  <a href="#a6613ac1df9303071051dbec519fb977b">More...</a><br /></td></tr>
<tr class="separator:a6613ac1df9303071051dbec519fb977b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a278f0e6c68ca17e71f4c4ff82f360aa0"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a278f0e6c68ca17e71f4c4ff82f360aa0">num_arguments_per_1D_array</a> ()</td></tr>
<tr class="memdesc:a278f0e6c68ca17e71f4c4ff82f360aa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 1D array object.  <a href="#a278f0e6c68ca17e71f4c4ff82f360aa0">More...</a><br /></td></tr>
<tr class="separator:a278f0e6c68ca17e71f4c4ff82f360aa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b6c5e4b57069c5f61e96dff24c212d"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a43b6c5e4b57069c5f61e96dff24c212d">num_arguments_per_1D_tensor</a> ()</td></tr>
<tr class="memdesc:a43b6c5e4b57069c5f61e96dff24c212d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 1D tensor object.  <a href="#a43b6c5e4b57069c5f61e96dff24c212d">More...</a><br /></td></tr>
<tr class="separator:a43b6c5e4b57069c5f61e96dff24c212d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45601e0d46621a5b6f2e417d60e5c800"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a45601e0d46621a5b6f2e417d60e5c800">num_arguments_per_2D_tensor</a> ()</td></tr>
<tr class="memdesc:a45601e0d46621a5b6f2e417d60e5c800"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 2D tensor object.  <a href="#a45601e0d46621a5b6f2e417d60e5c800">More...</a><br /></td></tr>
<tr class="separator:a45601e0d46621a5b6f2e417d60e5c800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c9c1e7a7d96743375ca40847f0f12e2"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c9c1e7a7d96743375ca40847f0f12e2">num_arguments_per_3D_tensor</a> ()</td></tr>
<tr class="memdesc:a6c9c1e7a7d96743375ca40847f0f12e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 3D tensor object.  <a href="#a6c9c1e7a7d96743375ca40847f0f12e2">More...</a><br /></td></tr>
<tr class="separator:a6c9c1e7a7d96743375ca40847f0f12e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a184fdf37587a9314cf12623accea6c73"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a184fdf37587a9314cf12623accea6c73">num_arguments_per_4D_tensor</a> ()</td></tr>
<tr class="memdesc:a184fdf37587a9314cf12623accea6c73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 4D tensor object.  <a href="#a184fdf37587a9314cf12623accea6c73">More...</a><br /></td></tr>
<tr class="separator:a184fdf37587a9314cf12623accea6c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c01790e4e3f22f70f69002f0cb1b913"><td class="memItemLeft" align="right" valign="top">static cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">gws_from_window</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</td></tr>
<tr class="memdesc:a6c01790e4e3f22f70f69002f0cb1b913"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the global work size given an execution window.  <a href="#a6c01790e4e3f22f70f69002f0cb1b913">More...</a><br /></td></tr>
<tr class="separator:a6c01790e4e3f22f70f69002f0cb1b913"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Common interface for all the OpenCL kernels. </p>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00067">67</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a6b10e96ce90bf901d17def86b874b019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b10e96ce90bf901d17def86b874b019">&#9670;&nbsp;</a></span>ICLKernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00126">126</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        : _kernel(<span class="keyword">nullptr</span>), _target(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">GPUTarget::MIDGARD</a>), _config_id(arm_compute::default_config_id), _max_workgroup_size(0), _type(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">CLKernelType::UNKNOWN</a>), _tuning_params_hint()</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9331d385192a50adf74d3af40ce0fa20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9331d385192a50adf74d3af40ce0fa20">&#9670;&nbsp;</a></span>add_1D_array_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_1D_array_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 1D array's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the array's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values...">Array</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> object containing stride of each dimension in bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_dimensions</td><td>Number of dimensions of the <code>array</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00155">155</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        add_array_argument&lt;T, 1&gt;(idx, array, strides, num_dimensions, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a479e7043e65dc87de35d374e108510f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a479e7043e65dc87de35d374e108510f7">&#9670;&nbsp;</a></span>add_1D_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_1D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00165">165</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00176">ICLKernel::add_1D_tensor_argument_if()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00136">CLSelectKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00123">CLReverseKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00135">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00148">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00121">CLGatherKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00123">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00130">CLRangeKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00176">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00161">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00358">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00188">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00169">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00191">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00243">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00261">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00131">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00402">ClDirectConv2dKernel::run_op()</a>, and <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00225">ClDirectConv3dKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        add_tensor_argument&lt;1&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a25965a58d98e44856da286925792a2f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25965a58d98e44856da286925792a2f7">&#9670;&nbsp;</a></span>add_1D_tensor_argument_if()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_1D_tensor_argument_if </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx if the condition is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cond</td><td>Condition to check </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00176">176</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00165">ICLKernel::add_1D_tensor_argument()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00173">ClGemmLowpOffsetContributionKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00219">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span>(cond)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">add_1D_tensor_argument</a>(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a479e7043e65dc87de35d374e108510f7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">arm_compute::ICLKernel::add_1D_tensor_argument</a></div><div class="ttdeci">void add_1D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 1D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00165">ICLKernel.h:165</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac74dad3e61f79334f5e73f3c3ac603cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac74dad3e61f79334f5e73f3c3ac603cb">&#9670;&nbsp;</a></span>add_2D_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_2D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00189">189</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00200">ICLKernel::add_2D_tensor_argument_if()</a>, <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00097">CLBitwiseKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00148">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00136">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00119">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00208">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00154">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00161">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00103">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00209">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00108">ClConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00278">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00367">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00128">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00334">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00366">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00329">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00200">ClGemmLowpMatrixBReductionKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        add_tensor_argument&lt;2&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2ada6044648832c64532588f75303b44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ada6044648832c64532588f75303b44">&#9670;&nbsp;</a></span>add_2D_tensor_argument_if()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_2D_tensor_argument_if </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx if the condition is true. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cond</td><td>Condition to check </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00200">200</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00189">ICLKernel::add_2D_tensor_argument()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00119">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00173">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00219">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00334">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, and <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00329">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span>(cond)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">add_2D_tensor_argument</a>(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ac74dad3e61f79334f5e73f3c3ac603cb"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">arm_compute::ICLKernel::add_2D_tensor_argument</a></div><div class="ttdeci">void add_2D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 2D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00189">ICLKernel.h:189</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28f5847162f352444c6ac1825d0e99c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28f5847162f352444c6ac1825d0e99c7">&#9670;&nbsp;</a></span>add_3D_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_3D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 3D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00213">213</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00116">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00136">CLSelectKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00115">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00105">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00129">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00119">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00172">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00237">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00136">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00123">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00128">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00176">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00187">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00155">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00199">CLFillBorderKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00154">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00188">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00169">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00191">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00128">CLComputeMeanVariance::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00293">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00127">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00102">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00114">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00136">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00146">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00099">ClFillKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00229">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00158">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00118">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00132">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00114">ClCropKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00225">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00131">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00144">ClCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00173">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00142">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00402">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00219">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00225">ClLogits1DMaxShiftExpSumKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00128">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00174">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00366">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00319">ClLogits1DNormKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00200">ClGemmLowpMatrixBReductionKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        add_tensor_argument&lt;3&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaad3259259d5bac3e599cd2fe730ba4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaad3259259d5bac3e599cd2fe730ba4b">&#9670;&nbsp;</a></span>add_3d_tensor_nhw_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_3d_tensor_nhw_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed NHW 3D tensor's parameters to the object's kernel's arguments by passing strides, dimensions and the offset to the first valid element in bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLTensor::cl_buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00233">ICLKernel::add_5D_tensor_argument()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00177">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00302">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, and <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00154">ClGemmReshapeRhsMatrixKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(info == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> Strides &amp;strides = info-&gt;strides_in_bytes();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Tensor poniter</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    _kernel.setArg(idx++, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;cl_buffer());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Add stride_y, stride_z</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, strides[1]);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, strides[2]);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// Tensor dimensions</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(0));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(1));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(2));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Offset of first element</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = info-&gt;offset_first_element_in_bytes();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a33e09c946b338fbfc780a9d1c66e68ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33e09c946b338fbfc780a9d1c66e68ad">&#9670;&nbsp;</a></span>add_4D_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_4D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 4D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00223">223</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00184">CLChannelShuffleLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00116">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00123">CLReverseKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00115">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00121">CLGatherKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00135">CLTileKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00122">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00169">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00128">CLComputeMeanVariance::run()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00141">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00122">ClHeightConcatenateKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00117">ClWidthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00162">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00124">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00225">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00167">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00142">ClCol2ImKernel::run_op()</a>, and <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00225">ClDirectConv3dKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        add_tensor_argument&lt;4&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a39a1cb16e212d102fb60d77161b40d78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39a1cb16e212d102fb60d77161b40d78">&#9670;&nbsp;</a></span>add_4d_tensor_nhwc_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_4d_tensor_nhwc_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed NHWC 4D tensor's parameters to the object's kernel's arguments by passing strides, dimensions and the offset to the first valid element in bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLTensor::cl_buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00249">ICLKernel::num_arguments_per_3d_tensor_nhw()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00358">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00243">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00209">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00261">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00145">ClIndirectConv2dAddressPrecalculationKernel::run_op()</a>, and <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00402">ClDirectConv2dKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(info == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> Strides &amp;strides = info-&gt;strides_in_bytes();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Tensor poniter</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    _kernel.setArg(idx++, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;cl_buffer());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Add stride_y, stride_z and stride_w</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, strides[1]);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, strides[2]);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, strides[3]);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Tensor dimensions</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(0));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(1));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(2));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, info-&gt;dimension(3));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// Offset of first element</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = info-&gt;offset_first_element_in_bytes();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8910b901d11e82cfed6de5abea0f1ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8910b901d11e82cfed6de5abea0f1ee">&#9670;&nbsp;</a></span>add_5D_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_5D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed 5D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00233">233</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00119">ICLKernel::add_3d_tensor_nhw_argument()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        add_tensor_argument&lt;5&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a50f427a1d9419800972b9e03c4034311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50f427a1d9419800972b9e03c4034311">&#9670;&nbsp;</a></span>add_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to set as an argument of the object's kernel. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00341">341</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00116">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00115">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00169">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, and <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00114">ClCropKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        _kernel.setArg(idx++, value);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a2d7c6b5f3332604ad6a637457f65c342"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d7c6b5f3332604ad6a637457f65c342">&#9670;&nbsp;</a></span>add_array_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_array_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed array's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the array's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values...">Array</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> object containing stride of each dimension in bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_dimensions</td><td>Number of dimensions of the <code>array</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00496">496</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00457">ARM_COMPUTE_ERROR_ON_MSG_VAR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLArray&lt; T &gt;::cl_buffer()</a>, and <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(array == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="comment">// Calculate offset to the start of the window</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = 0;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; num_dimensions; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        offset_first_element += <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start() * strides[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>];</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_start = idx;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    _kernel.setArg(idx++, array-&gt;cl_buffer());</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension = 0; dimension &lt; dimension_size; dimension++)</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension]);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension] * <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>[dimension].step());</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a>(idx_start + num_arguments_per_array&lt;dimension_size&gt;() != idx,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                 <span class="stringliteral">&quot;add_%dD_array_argument() is supposed to add exactly %d arguments to the kernel&quot;</span>, dimension_size, num_arguments_per_array&lt;dimension_size&gt;());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(idx_start);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_error_8h_xhtml_acaa348bf0c7eb9493c72092b7293d45f"><div class="ttname"><a href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG_VAR(cond, msg,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa0191633c258a30cc27e35b99b663aac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0191633c258a30cc27e35b99b663aac">&#9670;&nbsp;</a></span>add_tensor_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00457">ARM_COMPUTE_ERROR_ON_MSG_VAR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLTensor::cl_buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_window_8inl_source.xhtml#l00062">Window::is_broadcasted()</a>, <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>    = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> Strides     &amp;strides = info-&gt;strides_in_bytes();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Calculate offset to the start of the window</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = info-&gt;offset_first_element_in_bytes();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; info-&gt;num_dimensions(); ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        offset_first_element += (<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>) ? 0 : <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start()) * strides[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>];</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_start = idx;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    _kernel.setArg(idx++, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;cl_buffer());</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; dimension_size; ++d)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a>(d) ? 0 : strides[d]);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a>(d) ? 0 : (strides[d] * <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>[d].step()));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a>(idx_start + num_arguments_per_tensor&lt;dimension_size&gt;() != idx,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                 <span class="stringliteral">&quot;add_%dD_tensor_argument() is supposed to add exactly %d arguments to the kernel&quot;</span>, dimension_size, num_arguments_per_tensor&lt;dimension_size&gt;());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(idx_start);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_error_8h_xhtml_acaa348bf0c7eb9493c72092b7293d45f"><div class="ttname"><a href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG_VAR(cond, msg,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a6e77b72655c2e465435a83497961bdcb"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">arm_compute::Window::is_broadcasted</a></div><div class="ttdeci">bool is_broadcasted(size_t dimension) const</div><div class="ttdoc">Return whether a dimension has been broadcasted. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00062">Window.inl:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f7f6ab59fc0e601d750b83e75a398eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f7f6ab59fc0e601d750b83e75a398eb">&#9670;&nbsp;</a></span>config_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; config_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the configuration ID. </p>
<dl class="section note"><dt>Note</dt><dd>The configuration ID can be used by the caller to distinguish different calls of the same OpenCL kernel In particular, this method can be used by <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue. ">CLScheduler</a> to keep track of the best LWS for each configuration of the same kernel. The configuration ID should be provided only for the kernels potentially affected by the LWS geometry</dd>
<dd>
This method should be called after the configuration of the kernel</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>configuration id string </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00398">398</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00093">CLTuner::tune_kernel_dynamic()</a>, and <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00421">ClSaturatedArithmeticKernel::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">return</span> _config_id;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="abca336f832d730e8494049bd714df60a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abca336f832d730e8494049bd714df60a">&#9670;&nbsp;</a></span>get_max_workgroup_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_max_workgroup_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the maximum workgroup size for the device the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> uses. </p>
<dl class="section return"><dt>Returns</dt><dd>The maximum workgroup size value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, and <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00114">CLKernelLibrary::max_local_workgroup_size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00032">arm_compute::enqueue()</a>, and <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">ICLKernel::get_target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span>(_max_workgroup_size == 0)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        _max_workgroup_size = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aaeda307cc2131afa8a4764e38373f94e">max_local_workgroup_size</a>(_kernel);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> _max_workgroup_size;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aaeda307cc2131afa8a4764e38373f94e"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aaeda307cc2131afa8a4764e38373f94e">arm_compute::CLKernelLibrary::max_local_workgroup_size</a></div><div class="ttdeci">size_t max_local_workgroup_size(const cl::Kernel &amp;kernel) const</div><div class="ttdoc">Find the maximum number of local work items in a workgroup can be supported for the kernel...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00114">CLKernelLibrary.cpp:114</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa550ff0352ff2388e02f7b0a41bf5fe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa550ff0352ff2388e02f7b0a41bf5fe7">&#9670;&nbsp;</a></span>get_target()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> get_target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the targeted GPU architecture. </p>
<dl class="section return"><dt>Returns</dt><dd>The targeted GPU architecture. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">422</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00032">arm_compute::enqueue()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00184">ICLKernel::get_max_workgroup_size()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00193">ICLKernel::gws_from_window()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00134">ICLKernel::kernel()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00362">ICLKernel::lws_hint()</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00117">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00152">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00179">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, and <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00093">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">return</span> _target;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6c01790e4e3f22f70f69002f0cb1b913"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c01790e4e3f22f70f69002f0cb1b913">&#9670;&nbsp;</a></span>gws_from_window()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::NDRange gws_from_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the global work size given an execution window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Global work size of the given execution window </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00102">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00097">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00107">Window::Dimension::step()</a>, <a class="el" href="_window_8h_source.xhtml#l00159">Window::x()</a>, <a class="el" href="_window_8h_source.xhtml#l00168">Window::y()</a>, and <a class="el" href="_window_8h_source.xhtml#l00177">Window::z()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00145">CLTuner::add_tuning_params()</a>, and <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">ICLKernel::get_target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">if</span>((<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) == 0 || (<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) == 0)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">return</span> cl::NullRange;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    cl::NDRange gws((<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) / <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>(),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    (<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) / <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>(),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    (<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) / <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> gws;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00107">Window.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a51a8c7a9d2fa20943c213e85eb8d9caf"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">arm_compute::Window::z</a></div><div class="ttdeci">constexpr const Dimension &amp; z() const</div><div class="ttdoc">Alias to access the third dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00177">Window.h:177</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00168">Window.h:168</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00102">Window.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00159">Window.h:159</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae5121015ab09ece4d470f50c7ffe198e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5121015ab09ece4d470f50c7ffe198e">&#9670;&nbsp;</a></span>kernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::Kernel&amp; kernel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a reference to the OpenCL kernel of this object. </p>
<dl class="section return"><dt>Returns</dt><dd>A reference to the OpenCL kernel of this object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00134">134</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00032">arm_compute::enqueue()</a>, and <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">ICLKernel::get_target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> _kernel;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ab9f813c25ed75ea7b7ac2fa3926a8f55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9f813c25ed75ea7b7ac2fa3926a8f55">&#9670;&nbsp;</a></span>lws_hint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::NDRange lws_hint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the Local-Workgroup-Size hint. </p>
<dl class="section return"><dt>Returns</dt><dd>Current lws hint </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00362">362</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00069">CLTuningParams::get_lws()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00080">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">ICLKernel::get_target()</a>, <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00097">CLBitwiseKernel::run()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00184">CLChannelShuffleLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00123">CLReverseKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00136">CLSelectKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00115">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00116">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00105">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00119">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00135">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00129">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00148">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00136">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00121">CLGatherKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00172">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00237">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00123">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00135">CLTileKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00119">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00130">CLRangeKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00128">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00176">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00208">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00187">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00155">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00199">CLFillBorderKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00154">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00161">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00122">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00358">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00188">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00169">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00191">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00187">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00128">CLComputeMeanVariance::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00293">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00103">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00127">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00114">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00102">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00243">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00099">ClFillKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00136">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00146">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00209">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00141">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00117">ClWidthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00122">ClHeightConcatenateKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00229">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00158">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00124">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00162">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00132">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00118">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00114">ClCropKernel::run_op()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00108">ClConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00177">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00278">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00225">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00261">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00144">ClCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00131">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00367">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00154">ClGemmReshapeRhsMatrixKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00167">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00173">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00142">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00219">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00402">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00225">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00225">ClLogits1DMaxShiftExpSumKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00128">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00174">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00334">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00366">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00329">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00319">ClLogits1DNormKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00200">ClGemmLowpMatrixBReductionKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">get_lws</a>();</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a722b1a9a06026623079b291d4a6c752f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">arm_compute::CLTuningParams::get_lws</a></div><div class="ttdeci">cl::NDRange get_lws() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00069">CLTuningParams.h:69</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a278f0e6c68ca17e71f4c4ff82f360aa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a278f0e6c68ca17e71f4c4ff82f360aa0">&#9670;&nbsp;</a></span>num_arguments_per_1D_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_1D_array </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 1D array object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 1D array object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00276">276</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_array&lt;1&gt;();</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a43b6c5e4b57069c5f61e96dff24c212d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43b6c5e4b57069c5f61e96dff24c212d">&#9670;&nbsp;</a></span>num_arguments_per_1D_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_1D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 1D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 1D tensor object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00284">284</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, and <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00136">CLSelectKernel::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;1&gt;();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a45601e0d46621a5b6f2e417d60e5c800"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45601e0d46621a5b6f2e417d60e5c800">&#9670;&nbsp;</a></span>num_arguments_per_2D_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_2D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 2D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 2D tensor object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00292">292</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00110">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00278">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00367">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, and <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00366">ClIm2ColKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;2&gt;();</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6c9c1e7a7d96743375ca40847f0f12e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c9c1e7a7d96743375ca40847f0f12e2">&#9670;&nbsp;</a></span>num_arguments_per_3D_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_3D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 3D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 3D tensor object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00300">300</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00070">ClReshapeKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00066">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00089">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00176">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00127">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00132">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00118">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00225">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00130">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00131">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00402">ClDirectConv2dKernel::run_op()</a>, and <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00366">ClIm2ColKernel::run_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;3&gt;();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a176b47627f076da2f4f821665f617fa5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a176b47627f076da2f4f821665f617fa5">&#9670;&nbsp;</a></span>num_arguments_per_3d_tensor_nhw()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_3d_tensor_nhw </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per NHW 3D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueued per NHW 3D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00249">249</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00144">ICLKernel::add_4d_tensor_nhwc_argument()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00109">ClGemmReshapeLhsMatrixKernel::configure()</a>, and <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00115">ClGemmReshapeRhsMatrixKernel::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> no_args_per_3d_tensor_nhw = 7u;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">return</span> no_args_per_3d_tensor_nhw;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a184fdf37587a9314cf12623accea6c73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a184fdf37587a9314cf12623accea6c73">&#9670;&nbsp;</a></span>num_arguments_per_4D_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_4D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 4D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 4D tensor object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00308">308</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, and <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00087">CLStackLayerKernel::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;4&gt;();</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6613ac1df9303071051dbec519fb977b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6613ac1df9303071051dbec519fb977b">&#9670;&nbsp;</a></span>num_arguments_per_4d_tensor_nhwc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr unsigned int num_arguments_per_4d_tensor_nhwc </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per NHWC 4D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueued per NHWC 4D <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00266">266</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> no_args_per_4d_tensor_nhwc = 9u;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">return</span> no_args_per_4d_tensor_nhwc;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a9d5ccb74e06677836b3ca4f30e6962da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d5ccb74e06677836b3ca4f30e6962da">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>queue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue. </p>
<dl class="section note"><dt>Note</dt><dd>The queue is <em>not</em> flushed by this method, and therefore the kernel will not have been executed by the time this method returns.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a valid region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on. ">window()</a>). </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">queue</td><td>Command queue on which to enqueue the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1_c_l_compute_mean_variance.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLComputeMeanVariance</a>, <a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSpaceToBatchLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFuseBatchNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBatchNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBatchToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_deconvolution_reshape_output_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDeconvolutionReshapeOutputKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml#ac8f1ca778b425c6408a93b672b041dd0">CLROIAlignLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLArgMinMaxLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthwiseConvolutionLayerNativeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_stack_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLStackLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBoundingBoxTransformKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLL2NormalizeLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_f_f_t_radix_stage_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFFTRadixStageKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLPadLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLPriorBoxLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLNormalizePlanarYUVLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLReductionOperationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLRangeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_reorg_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLReorgLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMeanStdDevNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_f_f_t_digit_reverse_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFFTDigitReverseKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLTileKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLComparisonKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGatherKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLROIPoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer_normalization_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLQLSTMLayerNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_f_f_t_scale_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFFTScaleKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLComputeAllAnchorsKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_max_unpooling_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMaxUnpoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDeconvolutionLayerUpsampleKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLReverseKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_select_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSelectKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSpaceToDepthLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLChannelShuffleLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLInstanceNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBitwiseKernel</a>, <a class="el" href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">ICLSimple3DKernel</a>, and <a class="el" href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">ICLSimple2DKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00319">319</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler::init()</a>.</p>
<div class="fragment"><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, queue);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11b2791dada6be4d5857a18b0dafb550"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11b2791dada6be4d5857a18b0dafb550">&#9670;&nbsp;</a></span>run_op()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>queue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue. </p>
<dl class="section note"><dt>Note</dt><dd>The queue is <em>not</em> flushed by this method, and therefore the kernel will not have been executed by the time this method returns.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>A vector containing the tensors to operato on. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a valid region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on. ">window()</a>). </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">queue</td><td>Command queue on which to enqueue the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_b_reduction_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixBReductionKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_complex_mul_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClComplexMulKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_matrix_multiply_reshaped_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmMatrixMultiplyReshapedKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_im2_col_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmMatrixMultiplyReshapedOnlyRhsKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">CLFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_weights_reshape_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClWeightsReshapeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_a_reduction_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixAReductionKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_mul_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClMulKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv3d_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClDirectConv3dKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv2d_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClDirectConv2dKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_offset_contribution_output_stage_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpOffsetContributionOutputStageKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_col2_im_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClCol2ImKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_offset_contribution_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpOffsetContributionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">CLStridedSliceKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_multiply_reshaped_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixMultiplyReshapedKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_reshape_rhs_matrix_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmReshapeRhsMatrixKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_matrix_multiply_native_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmMatrixMultiplyNativeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_quantize_down_int32_scale_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpQuantizeDownInt32ScaleKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_indirect_conv2d_address_precalculation_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClIndirectConv2dAddressPrecalculationKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_output_transform_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClWinogradOutputTransformKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_indirect_conv2d_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClIndirectConv2dKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_filter_transform_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClWinogradFilterTransformKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_input_transform_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClWinogradInputTransformKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_lowp_matrix_multiply_native_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmLowpMatrixMultiplyNativeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_gemm_reshape_lhs_matrix_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClGemmReshapeLhsMatrixKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_crop_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClCropKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_permute_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClPermuteKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_quantize_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClQuantizeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_pool2d_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClPool2dKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_pool3d_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClPool3dKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_scale_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClScaleKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_copy_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClCopyKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_element_wise_unary_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClElementWiseUnaryKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_fill_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClFillKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_transposed_convolution_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClTransposedConvolutionKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_dequantize_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClDequantizeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_floor_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClFloorKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_reshape_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClReshapeKernel</a>, <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_transpose_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClTransposeKernel</a>, and <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml#a2563bcc3dcf9406cbf572d206a99d801">ClKernelRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00331">331</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler::init()</a>.</p>
<div class="fragment"><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tensors, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, queue);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad356b88c8f61267d593d9ed99835bde9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad356b88c8f61267d593d9ed99835bde9">&#9670;&nbsp;</a></span>set_lws_hint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_lws_hint </td>
          <td>(</td>
          <td class="paramtype">const cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>lws_hint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the Local-Workgroup-Size hint. </p>
<dl class="section note"><dt>Note</dt><dd>This method should be called after the configuration of the kernel</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lws_hint</td><td>Local-Workgroup-Size to use </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00352">352</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>, and <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00064">CLTuningParams::set_lws()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00093">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>); <span class="comment">// lws_hint will be overwritten by configure()</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">set_lws</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ab9f813c25ed75ea7b7ac2fa3926a8f55"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">arm_compute::ICLKernel::lws_hint</a></div><div class="ttdeci">cl::NDRange lws_hint() const</div><div class="ttdoc">Return the Local-Workgroup-Size hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00362">ICLKernel.h:362</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_ab2d66c6ccbd49d09857ef55c61aa84ea"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">arm_compute::CLTuningParams::set_lws</a></div><div class="ttdeci">void set_lws(cl::NDRange lws)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00064">CLTuningParams.h:64</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad5ba9d34a3a855bf1dd2e36316ff550a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">&#9670;&nbsp;</a></span>set_target() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the targeted GPU architecture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>The targeted GPU architecture </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00407">407</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        _target = target;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a57e5f498fcbfc25c28b8496dfa3fc33c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57e5f498fcbfc25c28b8496dfa3fc33c">&#9670;&nbsp;</a></span>set_target() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype">cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the targeted GPU architecture according to the CL device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00179">179</a> of file <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00223">arm_compute::get_target_from_device()</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    _target = <a class="code" href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">get_target_from_device</a>(device);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a281384aa081efe5819eedd6a7c2a429b"><div class="ttname"><a href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">arm_compute::get_target_from_device</a></div><div class="ttdeci">GPUTarget get_target_from_device(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the GPU target from CL device. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00223">CLHelpers.cpp:223</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48bd4a8a34a8bfa14d8092efd3f3f171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48bd4a8a34a8bfa14d8092efd3f3f171">&#9670;&nbsp;</a></span>set_wbsm_hint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_wbsm_hint </td>
          <td>(</td>
          <td class="paramtype">const cl_int &amp;&#160;</td>
          <td class="paramname"><em>wbsm_hint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the workgroup batch size modifier hint. </p>
<dl class="section note"><dt>Note</dt><dd>This method should be called after the configuration of the kernel</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wbsm_hint</td><td>workgroup batch size modifier value </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00373">373</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>, and <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00074">CLTuningParams::set_wbsm()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00093">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>); <span class="comment">// wbsm_hint will be overwritten by configure()</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">set_wbsm</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a>);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a7ebf899a53f8bdab96eaaf2bb3d41985"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">arm_compute::ICLKernel::wbsm_hint</a></div><div class="ttdeci">cl_int wbsm_hint() const</div><div class="ttdoc">Return the workgroup batch size modifier hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00383">ICLKernel.h:383</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a589c67583be1aca669d760445ec131a1"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">arm_compute::CLTuningParams::set_wbsm</a></div><div class="ttdeci">void set_wbsm(cl_int wbsm)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00074">CLTuningParams.h:74</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3c6588cde16e65529a900be780c4cd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3c6588cde16e65529a900be780c4cd2">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the CL kernel type. </p>
<dl class="section return"><dt>Returns</dt><dd>The CL kernel type </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00142">142</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> _type;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a7ebf899a53f8bdab96eaaf2bb3d41985"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ebf899a53f8bdab96eaaf2bb3d41985">&#9670;&nbsp;</a></span>wbsm_hint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl_int wbsm_hint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the workgroup batch size modifier hint. </p>
<dl class="section return"><dt>Returns</dt><dd>Current wbsm hint </dd></dl>

<p class="definition">Definition at line <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00383">383</a> of file <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00079">CLTuningParams::get_wbsm()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00032">arm_compute::enqueue()</a>.</p>
<div class="fragment"><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">return</span> _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">get_wbsm</a>();</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a911324ec4a6233263cccbea220d2cdb8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">arm_compute::CLTuningParams::get_wbsm</a></div><div class="ttdeci">cl_int get_wbsm() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00079">CLTuningParams.h:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/core/CL/<a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a></li>
<li>src/core/CL/<a class="el" href="_i_c_l_kernel_8cpp_source.xhtml">ICLKernel.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:57 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
