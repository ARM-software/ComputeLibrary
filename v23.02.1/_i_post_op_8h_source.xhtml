<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/experimental/IPostOp.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_post_op_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">IPostOp.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_post_op_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXPERIMENTAL_IPOSTOP</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPERIMENTAL_IPOSTOP</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental.xhtml">   33</a></span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/** Type of Post Op */</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">   36</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">Activation</a>,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">Eltwise_Add</a>,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">Eltwise_PRelu</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;};<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/** An ordered sequence of type of Post Ops */</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">   43</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a> = std::vector&lt;PostOpType&gt;;<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/** An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operators</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> *  It contains:</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> *      1. The attributes of the original operator.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *      2. Any additional tensor argument.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> *      3. The position of the previous op&#39;s dst tensor in its argument list ( @ref prev_dst_pos )</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> *  For example, a series of chained ops:</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> *          div(src1, relu(conv(src0, weights, bias, conv_info), act_info), div_info)</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *      translates to</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *          dst = conv(src0, weights, bias, conv_info)  // main op</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> *          dst = relu(dst, act_info)                   // previous dst is placed in the first (and only) argument</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> *          dst = div(src1, dst, div_info)              // previous dst is placed in the second argument</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> *      which in turn translates to:</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> *          main op: conv(src0, weights, bias, conv_info)</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> *          post op1: relu(act_info, prev_dst_pos = 0)</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> *          post op2: div(div_info, src1, prev_dst_pos = 1)</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> *  @note: On Broadcasting</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> *      For n-ary post ops, the tensor arguments must not &quot;widen&quot; the dst tensor of the main op</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> *      For example, for a dst of shape [14, 1, 34]:</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> *          * post_op_arg1 = [1, 1, 34] is allowed: broadcast in dim 0</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> *          * post_op_arg1 = [14, 1, 34] is allowed: no broadcast</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> *          * post_op_arg1 = [1, 1, 34] is allowed: broadcast in dims 0 and 1</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> *          * post_op_arg1 = [14, 15, 34] is NOT allowed: broadcast widens the dst tensor</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @note: On Data layout</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *      All post ops are data layout agnostic. This means post ops do not have an inherent idea of &quot;width&quot;, &quot;height&quot; and so on.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *      Should we want to perform a post op with 2 tensors of different data layouts (where data layouts are significant to both),</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> *      then we need to perform necessary permutation op beforehand to unify their data layout before they can be fused with a post op</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *      Note although post ops themselves should be able to support any data layout, the main op they fuse to may impose</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *      additional restrictions in the presence of post ops. For example, the implementation of a gemm op may only allow</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *      NHWC data layout if post ops are provided. Such restrictions are main op implementation specific.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> *  @note: PostOps do not own any resources pointed to by TensorRelatedT if it&#39;s a pointer type</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> *  @note: If TensorRelatedT points to a resource, IPostOp assumes that resource is valid throughout its lifetime</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> *        and the lifetime of its copies. This is almost guaranteed as IPostOp is only meant to be used at configure time</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> *        after the ITensor or ITensorInfo objects are already constructed</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorRelatedT&gt;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">   89</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /** Get the arity of the post op</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     * @note: that this is one fewer than the arity of the original op, because we implicitly pass the previous op&#39;s dst</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     *       tensor as one of the arguments</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a250e7d345c2d50bcd57b6ec1154450d3">   95</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a250e7d345c2d50bcd57b6ec1154450d3">arity</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> arguments().size();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /** The position of previous op&#39;s dst in current op&#39;s argument list */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span> prev_dst_pos() <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /** The IPostOp type */</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>() <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /** The argument tensors</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     * The order of the argument tensor is strictly preserved</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">virtual</span> std::vector&lt;TensorRelatedT *&gt;       arguments()       = 0;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">virtual</span> std::vector&lt;const TensorRelatedT *&gt; arguments() <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /** Clone method used in cases where PostOps are owned by unique_ptr</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     * @note: This performs a shallow copy of the TensorRelatedT if TensorRelatedT points to a resource</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt; clone() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#ad838b4b6a05386b4584895ff25709002">  112</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#ad838b4b6a05386b4584895ff25709002">~IPostOp</a>()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/** A sequence of PostOps that can be appended to the end of other operators */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorRelatedT&gt;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">  119</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">    /** Constructor */</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /** Destructor */</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    ~<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab54fb99ba7bce018b8e47c3d9a48494d">  126</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab54fb99ba7bce018b8e47c3d9a48494d">PostOpList</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;other)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;op : other._post_ops)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            this-&gt;_post_ops.push_back(op-&gt;clone());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a5329815852cf14aad3f06740b676126d">  133</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a5329815852cf14aad3f06740b676126d">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;other)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> tmp{ other };</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">std::swap</a>(tmp, *<span class="keyword">this</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>(<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;operator=(<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">    /** Add a new post op at the end of the list */</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OpT, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a9de38052dfbcc0bce1fb5c666a797158">  144</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a9de38052dfbcc0bce1fb5c666a797158">push_back_op</a>(Args &amp;&amp;... <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        _post_ops.push_back(std::make_unique&lt;OpT&gt;(std::forward&lt;Args&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">    /** Number of post ops */</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a259cb5a711406a8c3e5d937eb9350cca">  150</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> _post_ops.size();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /** Total number of post ops */</span></div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a1de3d069f40f7e1cef80aea821389c74">  156</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a1de3d069f40f7e1cef80aea821389c74">total_num_arguments</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(_post_ops.begin(), _post_ops.end(), 0, [](<span class="keywordtype">size_t</span> op1_arity, <span class="keyword">const</span> <span class="keyword">auto</span> &amp; op2)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> op1_arity + op2-&gt;arity();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        });</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">    /** Get the underlying post op list */</span></div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#af66f211b8c6c1cf20b9837e1b0e046f2">  165</a></span>&#160;    std::vector&lt;std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#af66f211b8c6c1cf20b9837e1b0e046f2">get_list</a>()</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> _post_ops;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab8af7fc96d6346323bf891481f6070a9">  169</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab8af7fc96d6346323bf891481f6070a9">get_list</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> _post_ops;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::vector&lt;std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt;&gt; _post_ops{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif //ARM_COMPUTE_EXPERIMENTAL_IPOSTOP</span></div><div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_af66f211b8c6c1cf20b9837e1b0e046f2"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#af66f211b8c6c1cf20b9837e1b0e046f2">arm_compute::experimental::PostOpList::get_list</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; IPostOp&lt; TensorRelatedT &gt; &gt; &gt; &amp; get_list()</div><div class="ttdoc">Get the underlying post op list. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00165">IPostOp.h:165</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_ab54fb99ba7bce018b8e47c3d9a48494d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab54fb99ba7bce018b8e47c3d9a48494d">arm_compute::experimental::PostOpList::PostOpList</a></div><div class="ttdeci">PostOpList(const PostOpList &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00126">IPostOp.h:126</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425ea"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">arm_compute::experimental::PostOpType</a></div><div class="ttdeci">PostOpType</div><div class="ttdoc">Type of Post Op. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00036">IPostOp.h:36</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_i_post_op_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">arm_compute::experimental::IPostOp</a></div><div class="ttdoc">An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00089">IPostOp.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::PostOpType::Eltwise_PRelu</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a51c75906c46ed4b65a031a361e9786f7"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">arm_compute::experimental::PostOpTypeSequence</a></div><div class="ttdeci">std::vector&lt; PostOpType &gt; PostOpTypeSequence</div><div class="ttdoc">An ordered sequence of type of Post Ops. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00043">IPostOp.h:43</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00260">gemm_interleaved.hpp:260</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_a9de38052dfbcc0bce1fb5c666a797158"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a9de38052dfbcc0bce1fb5c666a797158">arm_compute::experimental::PostOpList::push_back_op</a></div><div class="ttdeci">void push_back_op(Args &amp;&amp;... args)</div><div class="ttdoc">Add a new post op at the end of the list. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00144">IPostOp.h:144</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::PostOpType::Activation</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_i_post_op_xhtml_ad838b4b6a05386b4584895ff25709002"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#ad838b4b6a05386b4584895ff25709002">arm_compute::experimental::IPostOp::~IPostOp</a></div><div class="ttdeci">virtual ~IPostOp()</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00112">IPostOp.h:112</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_i_post_op_xhtml_a250e7d345c2d50bcd57b6ec1154450d3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#a250e7d345c2d50bcd57b6ec1154450d3">arm_compute::experimental::IPostOp::arity</a></div><div class="ttdeci">size_t arity() const</div><div class="ttdoc">Get the arity of the post op. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00095">IPostOp.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_a1de3d069f40f7e1cef80aea821389c74"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a1de3d069f40f7e1cef80aea821389c74">arm_compute::experimental::PostOpList::total_num_arguments</a></div><div class="ttdeci">size_t total_num_arguments() const</div><div class="ttdoc">Total number of post ops. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00156">IPostOp.h:156</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_ab8af7fc96d6346323bf891481f6070a9"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#ab8af7fc96d6346323bf891481f6070a9">arm_compute::experimental::PostOpList::get_list</a></div><div class="ttdeci">const std::vector&lt; std::unique_ptr&lt; IPostOp&lt; TensorRelatedT &gt; &gt; &gt; &amp; get_list() const</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00169">IPostOp.h:169</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_a259cb5a711406a8c3e5d937eb9350cca"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a259cb5a711406a8c3e5d937eb9350cca">arm_compute::experimental::PostOpList::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdoc">Number of post ops. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00150">IPostOp.h:150</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::PostOpType::Eltwise_Add</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae70b8de3a0b147a476cabb07b8707d7f"><div class="ttname"><a href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">arm_compute::swap</a></div><div class="ttdeci">void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00304">Window.inl:304</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">arm_compute::experimental::PostOpList</a></div><div class="ttdoc">A sequence of PostOps that can be appended to the end of other operators. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00119">IPostOp.h:119</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml_a5329815852cf14aad3f06740b676126d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#a5329815852cf14aad3f06740b676126d">arm_compute::experimental::PostOpList::operator=</a></div><div class="ttdeci">PostOpList &amp; operator=(const PostOpList &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00133">IPostOp.h:133</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_a0d10d1f11f896cb40f799a595f5f383.xhtml">experimental</a></li><li class="navelem"><a class="el" href="_i_post_op_8h.xhtml">IPostOp.h</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:42 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
