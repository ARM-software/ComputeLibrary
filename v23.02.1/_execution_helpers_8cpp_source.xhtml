<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/detail/ExecutionHelpers.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execution_helpers_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ExecutionHelpers.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_execution_helpers_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_execution_helpers_8h.xhtml">arm_compute/graph/detail/ExecutionHelpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_context_8h.xhtml">arm_compute/graph/GraphContext.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_manager_8h.xhtml">arm_compute/graph/GraphManager.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_registry_8h.xhtml">arm_compute/graph/backends/BackendRegistry.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa1d326a80e16fe0d4034637672d3b122">   39</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa1d326a80e16fe0d4034637672d3b122">validate_all_nodes</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                    assigned_target = node-&gt;assigned_target();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">backends::IDeviceBackend</a> &amp;backend         = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">get_backend</a>(assigned_target);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>                    status          = backend.<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a2ad722cd593bc5300108c8837ce5c980">validate_node</a>(*node);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!<span class="keywordtype">bool</span>(status), status.<a class="code" href="classarm__compute_1_1_status.xhtml#ac8ba59c07d56602367dae64035abb1ef">error_description</a>().c_str());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a68c7ebb89adc0c2b21449cd15f6e8eba">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a68c7ebb89adc0c2b21449cd15f6e8eba">configure_all_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                         target  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc().target;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">backends::IDeviceBackend</a>      &amp;backend = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">get_backend</a>(target);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            std::unique_ptr&lt;ITensorHandle&gt; handle  = backend.<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">create_tensor</a>(*<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!handle, <span class="stringliteral">&quot;Couldn&#39;t create backend handle!&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;set_handle(std::move(handle));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">   73</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>(); ++i)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(i);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#aa3dc08c2e62f20a8fbfbcc46c6b4cb68">bound_edges</a>().empty())</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">   86</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>(); ++i)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(i);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#aa3dc08c2e62f20a8fbfbcc46c6b4cb68">bound_edges</a>().empty())</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a3ef7cb28de6aea7026a1e8572639f300">   99</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a3ef7cb28de6aea7026a1e8572639f300">allocate_const_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>())</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">switch</span>(node-&gt;type())</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">NodeType::Const</a>:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">NodeType::Input</a>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a>(*node);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a>(*node);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a766bb5055ef388455c941869b32981ed">  120</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a766bb5055ef388455c941869b32981ed">allocate_all_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> &amp;&amp; !<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;bound_edges().empty() &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;tensor().info()-&gt;is_resizable() &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;tensor().is_used())</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a82d07d3d612bee8ff703226ff9d5d452">  133</a></span>&#160;<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a82d07d3d612bee8ff703226ff9d5d452">configure_all_nodes</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <span class="keyword">const</span> std::vector&lt;NodeID&gt; &amp;node_order)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> workload;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#a2360aba01fa93c8493ba96683c4fb89c">graph</a> = &amp;g;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#abda8fc9044eb180a388401a256d4ed05">ctx</a>   = &amp;ctx;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Reserve memory for tasks</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">tasks</a>.reserve(node_order.size());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node_id : node_order)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">auto</span> node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(node_id);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                     assigned_target = node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">assigned_target</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">backends::IDeviceBackend</a> &amp;backend         = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">get_backend</a>(assigned_target);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            std::unique_ptr&lt;IFunction&gt; func            = backend.<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af989fb4cdd6783b776e6b3feceb9fdcb">configure_node</a>(*node, ctx);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span>(func != <span class="keyword">nullptr</span> || <a class="code" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a>(node))</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">tasks</a>.emplace_back(<a class="code" href="structarm__compute_1_1graph_1_1_execution_task.xhtml">ExecutionTask</a>(std::move(func), node));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Add inputs and outputs</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>())</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">NodeType::Input</a>)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#aa8479921c38182de22a1a1a4d24481e6">inputs</a>.push_back(node-&gt;output(0));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#af19f4e3beb0cb0a38b9b213d47c813c7">outputs</a>.push_back(node-&gt;input(0));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> workload;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">  176</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>())</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;release_if_unused();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">  187</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!tensor);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a88d65b04d950e6aba147624fcd308b34">call_accessor</a>();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f2e226c8b1e478b0162c3d9327b032e">  193</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f2e226c8b1e478b0162c3d9327b032e">call_all_const_node_accessors</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">NodeType::Const</a> &amp;&amp; node-&gt;num_outputs())</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">if</span>(!node-&gt;output(0)-&gt;bound_edges().empty())</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a>(node-&gt;output(0));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#adff00463fb88bf00a886e0ecef6c0b6a">  209</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#adff00463fb88bf00a886e0ecef6c0b6a">call_all_input_node_accessors</a>(<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#aa8479921c38182de22a1a1a4d24481e6">inputs</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#aa8479921c38182de22a1a1a4d24481e6">inputs</a>), [&amp;](<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> * input_tensor)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        bool valid_input = (input_tensor != nullptr) &amp;&amp; input_tensor-&gt;call_accessor();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        is_valid         = is_valid &amp;&amp; valid_input;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    });</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a17b5e700b317feb19fc3cefd23a1d8bb">  220</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a17b5e700b317feb19fc3cefd23a1d8bb">prepare_all_tasks</a>(<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#a2360aba01fa93c8493ba96683c4fb89c">graph</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">tasks</a>)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        task.prepare();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a>(*workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#a2360aba01fa93c8493ba96683c4fb89c">graph</a>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a7641ee3c6374e97c597ce6ee05545b59">  230</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a7641ee3c6374e97c597ce6ee05545b59">call_all_tasks</a>(<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#abda8fc9044eb180a388401a256d4ed05">ctx</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Acquire memory for the transition buffers</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#abda8fc9044eb180a388401a256d4ed05">ctx</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml#a764b116846c97f7657a86c22583575ac">memory_managers</a>())</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            mm_ctx.second.cross_group-&gt;acquire();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Execute tasks</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">tasks</a>)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        task();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Release memory for the transition buffers</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#abda8fc9044eb180a388401a256d4ed05">ctx</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml#a764b116846c97f7657a86c22583575ac">memory_managers</a>())</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            mm_ctx.second.cross_group-&gt;release();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aaf7f4e1e2142802dd1c5a983ee156e77">  259</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aaf7f4e1e2142802dd1c5a983ee156e77">call_all_output_node_accessors</a>(<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#af19f4e3beb0cb0a38b9b213d47c813c7">outputs</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#af19f4e3beb0cb0a38b9b213d47c813c7">outputs</a>), [&amp;](<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> * output_tensor)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        bool valid_output = (output_tensor != nullptr) &amp;&amp; output_tensor-&gt;call_accessor();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        is_valid          = is_valid &amp;&amp; valid_output;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    });</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">sync_backends</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml_aa8479921c38182de22a1a1a4d24481e6"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#aa8479921c38182de22a1a1a4d24481e6">arm_compute::graph::ExecutionWorkload::inputs</a></div><div class="ttdeci">std::vector&lt; Tensor * &gt; inputs</div><div class="ttdoc">Input handles. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00100">Workload.h:100</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a88d65b04d950e6aba147624fcd308b34"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a88d65b04d950e6aba147624fcd308b34">arm_compute::graph::Tensor::call_accessor</a></div><div class="ttdeci">bool call_accessor()</div><div class="ttdoc">Calls accessor on tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00075">Tensor.cpp:75</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_af989fb4cdd6783b776e6b3feceb9fdcb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af989fb4cdd6783b776e6b3feceb9fdcb">arm_compute::graph::backends::IDeviceBackend::configure_node</a></div><div class="ttdeci">virtual std::unique_ptr&lt; arm_compute::IFunction &gt; configure_node(INode &amp;node, GraphContext &amp;ctx)=0</div><div class="ttdoc">Configure a backend Node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_context_xhtml_a764b116846c97f7657a86c22583575ac"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml#a764b116846c97f7657a86c22583575ac">arm_compute::graph::GraphContext::memory_managers</a></div><div class="ttdeci">std::map&lt; Target, MemoryManagerContext &gt; &amp; memory_managers()</div><div class="ttdoc">Gets the memory managers map. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8cpp_source.xhtml#l00073">GraphContext.cpp:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa2dc91a4b4f5ad19935984344f1b67a1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">arm_compute::graph::detail::call_tensor_accessor</a></div><div class="ttdeci">void call_tensor_accessor(Tensor *tensor)</div><div class="ttdoc">Calls accessor of a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00187">ExecutionHelpers.cpp:187</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_aa26cd423e8fc9233bd2bff46f82f46ab"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">arm_compute::graph::INode::assigned_target</a></div><div class="ttdeci">Target assigned_target() const</div><div class="ttdoc">Returns assigned target for this node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00199">INode.cpp:199</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_adaf571380533c75338da47ba3a68c199"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">arm_compute::graph::is_utility_node</a></div><div class="ttdeci">bool is_utility_node(INode *node)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">Utils.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a75d7c8bdf0059bb235880f8ef8d190bc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const</div><div class="ttdoc">Returns number of outputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00184">INode.cpp:184</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">arm_compute::graph::ExecutionWorkload</a></div><div class="ttdoc">Execution workload. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00098">Workload.h:98</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a766bb5055ef388455c941869b32981ed"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a766bb5055ef388455c941869b32981ed">arm_compute::graph::detail::allocate_all_tensors</a></div><div class="ttdeci">void allocate_all_tensors(Graph &amp;g)</div><div class="ttdoc">Allocates all tensors of a graph. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00120">ExecutionHelpers.cpp:120</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a0e2e9eb7cf2545949ea4130d768bea93"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">arm_compute::graph::backends::BackendRegistry::get_backend</a></div><div class="ttdeci">IDeviceBackend &amp; get_backend(Target target)</div><div class="ttdoc">Get a backend from the registry. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry.cpp:51</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a17b5e700b317feb19fc3cefd23a1d8bb"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a17b5e700b317feb19fc3cefd23a1d8bb">arm_compute::graph::detail::prepare_all_tasks</a></div><div class="ttdeci">void prepare_all_tasks(ExecutionWorkload &amp;workload)</div><div class="ttdoc">Prepares all tasks for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00220">ExecutionHelpers.cpp:220</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00057">GraphContext.h:57</a></div></div>
<div class="ttc" id="_execution_helpers_8h_xhtml"><div class="ttname"><a href="_execution_helpers_8h.xhtml">ExecutionHelpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_a0f46e4fef818b4114b3d09c799944046"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">arm_compute::graph::backends::IDeviceBackend::create_tensor</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; create_tensor(const Tensor &amp;tensor)=0</div><div class="ttdoc">Create a backend Tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a68c7ebb89adc0c2b21449cd15f6e8eba"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a68c7ebb89adc0c2b21449cd15f6e8eba">arm_compute::graph::detail::configure_all_tensors</a></div><div class="ttdeci">void configure_all_tensors(Graph &amp;g)</div><div class="ttdoc">Configures all nodes of a graph. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00056">ExecutionHelpers.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_aabacbdcb2b491b129b119273a813bb67"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">arm_compute::graph::Graph::tensors</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; Tensor &gt; &gt; &amp; tensors()</div><div class="ttdoc">Returns tensors of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00194">Graph.cpp:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a4312e5b00714a9de04fc54d2a5dcc119"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">arm_compute::graph::detail::allocate_all_input_tensors</a></div><div class="ttdeci">void allocate_all_input_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all input tensors of a node. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00073">ExecutionHelpers.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa1d326a80e16fe0d4034637672d3b122"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa1d326a80e16fe0d4034637672d3b122">arm_compute::graph::detail::validate_all_nodes</a></div><div class="ttdeci">void validate_all_nodes(Graph &amp;g)</div><div class="ttdoc">Validates all nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00039">ExecutionHelpers.cpp:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml_ae7d2dcab167d9eba3483a1fa1f330c7f"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">arm_compute::graph::ExecutionWorkload::tasks</a></div><div class="ttdeci">std::vector&lt; ExecutionTask &gt; tasks</div><div class="ttdoc">Execution workload. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00102">Workload.h:102</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa39e0698b2de495c235129b12fa39b08"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">arm_compute::graph::detail::allocate_all_output_tensors</a></div><div class="ttdeci">void allocate_all_output_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all output tensors of a node. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00086">ExecutionHelpers.cpp:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00159">INode.cpp:159</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a28280ac6b0db4c2385ac8c18a4ad8f3c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">arm_compute::graph::detail::release_unused_tensors</a></div><div class="ttdeci">void release_unused_tensors(Graph &amp;g)</div><div class="ttdoc">Release the memory of all unused const nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00176">ExecutionHelpers.cpp:176</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_tensor_handle_xhtml_aa8a4946cd749d482dd996874d295af85"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">arm_compute::graph::ITensorHandle::allocate</a></div><div class="ttdeci">virtual void allocate()=0</div><div class="ttdoc">Allocates backend memory for the handle. </div></div>
<div class="ttc" id="_graph_manager_8h_xhtml"><div class="ttname"><a href="_graph_manager_8h.xhtml">GraphManager.h</a></div></div>
<div class="ttc" id="graph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a6f2e226c8b1e478b0162c3d9327b032e"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f2e226c8b1e478b0162c3d9327b032e">arm_compute::graph::detail::call_all_const_node_accessors</a></div><div class="ttdeci">void call_all_const_node_accessors(Graph &amp;g)</div><div class="ttdoc">Call all const node accessors. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00193">ExecutionHelpers.cpp:193</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_adff00463fb88bf00a886e0ecef6c0b6a"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#adff00463fb88bf00a886e0ecef6c0b6a">arm_compute::graph::detail::call_all_input_node_accessors</a></div><div class="ttdeci">bool call_all_input_node_accessors(ExecutionWorkload &amp;workload)</div><div class="ttdoc">Call all input node accessors. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00209">ExecutionHelpers.cpp:209</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a1f3feffc5bf8a42636b0e5d4f5160041"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">arm_compute::graph::backends::BackendRegistry::get</a></div><div class="ttdeci">static BackendRegistry &amp; get()</div><div class="ttdoc">Gets backend registry instance. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml_a2360aba01fa93c8493ba96683c4fb89c"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#a2360aba01fa93c8493ba96683c4fb89c">arm_compute::graph::ExecutionWorkload::graph</a></div><div class="ttdeci">Graph * graph</div><div class="ttdoc">Graph bound to the workload. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00103">Workload.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_a2ad722cd593bc5300108c8837ce5c980"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a2ad722cd593bc5300108c8837ce5c980">arm_compute::graph::backends::IDeviceBackend::validate_node</a></div><div class="ttdeci">virtual Status validate_node(INode &amp;node)=0</div><div class="ttdoc">Validate a node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00053">Graph.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a82d07d3d612bee8ff703226ff9d5d452"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a82d07d3d612bee8ff703226ff9d5d452">arm_compute::graph::detail::configure_all_nodes</a></div><div class="ttdeci">ExecutionWorkload configure_all_nodes(Graph &amp;g, GraphContext &amp;ctx, const std::vector&lt; NodeID &gt; &amp;node_order)</div><div class="ttdoc">Configures all nodes of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00133">ExecutionHelpers.cpp:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::NodeType::Const</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a8a979250f01a5edba059a02748b10ea3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">const std::vector&lt; NodeID &gt; &amp; nodes(NodeType type)</div><div class="ttdoc">Returns graph input nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00174">Graph.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a3ef7cb28de6aea7026a1e8572639f300"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a3ef7cb28de6aea7026a1e8572639f300">arm_compute::graph::detail::allocate_const_tensors</a></div><div class="ttdeci">void allocate_const_tensors(Graph &amp;g)</div><div class="ttdoc">Allocates const tensor of a given graph. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00099">ExecutionHelpers.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00204">Graph.cpp:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ae8f18192b411ffc62fdd293f908b4c78"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">arm_compute::graph::sync_backends</a></div><div class="ttdeci">void sync_backends()</div><div class="ttdoc">Synchronize kernels execution on the backends. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00119">Utils.cpp:119</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml_abda8fc9044eb180a388401a256d4ed05"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#abda8fc9044eb180a388401a256d4ed05">arm_compute::graph::ExecutionWorkload::ctx</a></div><div class="ttdeci">GraphContext * ctx</div><div class="ttdoc">Graph execution context. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00104">Workload.h:104</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::NodeType::Input</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abe0cb3e4411a1c289e3e40e3f9d79fec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const</div><div class="ttdoc">Returns number of inputs of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00179">INode.cpp:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_aa3dc08c2e62f20a8fbfbcc46c6b4cb68"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#aa3dc08c2e62f20a8fbfbcc46c6b4cb68">arm_compute::graph::Tensor::bound_edges</a></div><div class="ttdeci">std::set&lt; EdgeID &gt; bound_edges() const</div><div class="ttdoc">Accessor the edges that are bound with the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00119">Tensor.cpp:119</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">arm_compute::graph::backends::IDeviceBackend</a></div><div class="ttdoc">Device backend interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_device_backend_8h_source.xhtml#l00048">IDeviceBackend.h:48</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="graph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_task_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_task.xhtml">arm_compute::graph::ExecutionTask</a></div><div class="ttdoc">Execution task. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00070">Workload.h:70</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a7641ee3c6374e97c597ce6ee05545b59"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a7641ee3c6374e97c597ce6ee05545b59">arm_compute::graph::detail::call_all_tasks</a></div><div class="ttdeci">void call_all_tasks(ExecutionWorkload &amp;workload)</div><div class="ttdoc">Executes all tasks of a workload. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00230">ExecutionHelpers.cpp:230</a></div></div>
<div class="ttc" id="_graph_context_8h_xhtml"><div class="ttname"><a href="_graph_context_8h.xhtml">GraphContext.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b1d0df736739f38994ed29f54cffdf3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">arm_compute::test::validation::is_valid</a></div><div class="ttdeci">bool is_valid</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00166">DirectConv2d.cpp:166</a></div></div>
<div class="ttc" id="_backend_registry_8h_xhtml"><div class="ttname"><a href="_backend_registry_8h.xhtml">BackendRegistry.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00151">INode.cpp:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aaf7f4e1e2142802dd1c5a983ee156e77"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aaf7f4e1e2142802dd1c5a983ee156e77">arm_compute::graph::detail::call_all_output_node_accessors</a></div><div class="ttdeci">bool call_all_output_node_accessors(ExecutionWorkload &amp;workload)</div><div class="ttdoc">Call all output node accessors. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00259">ExecutionHelpers.cpp:259</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_workload_xhtml_af19f4e3beb0cb0a38b9b213d47c813c7"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#af19f4e3beb0cb0a38b9b213d47c813c7">arm_compute::graph::ExecutionWorkload::outputs</a></div><div class="ttdeci">std::vector&lt; Tensor * &gt; outputs</div><div class="ttdoc">Output handles. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00101">Workload.h:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml_ac8ba59c07d56602367dae64035abb1ef"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml#ac8ba59c07d56602367dae64035abb1ef">arm_compute::Status::error_description</a></div><div class="ttdeci">std::string error_description() const</div><div class="ttdoc">Gets error description if any. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00097">Error.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_860cb336d74994b1303832ed3557228e.xhtml">detail</a></li><li class="navelem"><a class="el" href="_execution_helpers_8cpp.xhtml">ExecutionHelpers.cpp</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:49 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
