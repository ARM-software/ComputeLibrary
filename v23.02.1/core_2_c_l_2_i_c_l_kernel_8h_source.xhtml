<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/ICLKernel.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('core_2_c_l_2_i_c_l_kernel_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ICLKernel.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_ICLKERNEL_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ICLKERNEL_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_c_l_2_c_l_types_8h.xhtml">arm_compute/core/CL/CLTypes.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_8h.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_p_u_target_8h.xhtml">arm_compute/core/GPUTarget.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_kernel_8h.xhtml">arm_compute/core/IKernel.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_types_8h.xhtml">arm_compute/core/experimental/Types.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuning_params_8h.xhtml">arm_compute/runtime/CL/CLTuningParams.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_default_l_w_s_heuristics_8h.xhtml">src/core/CL/DefaultLWSHeuristics.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">bool</span> is_same_lws(cl::NDRange lws0, cl::NDRange lws1)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span>(lws0.dimensions() != lws1.dimensions())</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lws0.dimensions(); ++i)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">if</span>(lws0.get()[i] != lws1.get()[i])</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">class </span>ICLArray;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">class </span>ICLTensor;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">class </span>Window;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/** Common interface for all the OpenCL kernels */</span></div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml">   67</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per array object.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     * @return The number of arguments enqueued per array object.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        dimension_size&gt;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_arguments_per_array()</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;dimension_size&gt;();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per tensor object.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * @return The number of arguments enqueued per tensor object.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        dimension_size&gt;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_arguments_per_tensor()</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> 2 + 2 * dimension_size;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    cl::NDRange default_lws_tune(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a111c697d8e429d9ad91fdb097ebb7f42">get_default_lws_for_type</a>(_type, <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">gws_from_window</a>(window));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">using</span> IKernel::configure; <span class="comment">//Prevent children from calling IKernel::configure() directly</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">    /** Configure the kernel&#39;s window and local workgroup size hint.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     * @param[in] window    The maximum window which will be returned by window()</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     * @param[in] lws_hint  Local-Workgroup-Size to use.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @param[in] wbsm_hint (Optional) Workgroup-Batch-Size-Modifier to use.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">void</span> configure_internal(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, cl::NDRange <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a>, cl_int <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a> = 0)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        configure_internal(window, <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a>(lws_hint, <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a>));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">    /** Configure the kernel&#39;s window and tuning parameters hints.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     * @param[in] window             The maximum window which will be returned by window()</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * @param[in] tuning_params_hint (Optional) Tuning parameters to use.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> configure_internal(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> tuning_params_hint = <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().default_ndrange(), 0))</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        _tuning_params_hint = tuning_params_hint;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">if</span>(is_same_lws(_tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">get_lws</a>(), <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">default_ndrange</a>()))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">set_lws</a>(default_lws_tune(window));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        IKernel::configure(window);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">    /** Constructor */</span></div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6b10e96ce90bf901d17def86b874b019">  126</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6b10e96ce90bf901d17def86b874b019">ICLKernel</a>()</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        : _kernel(nullptr), _target(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>::<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>), _config_id(<a class="code" href="namespacearm__compute.xhtml">arm_compute</a>::default_config_id), _max_workgroup_size(0), _type(<a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a>::<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>), _tuning_params_hint()</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /** Returns a reference to the OpenCL kernel of this object.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @return A reference to the OpenCL kernel of this object.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">  134</a></span>&#160;    cl::Kernel &amp;<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">kernel</a>()</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> _kernel;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /** Returns the CL kernel type</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * @return The CL kernel type</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab3c6588cde16e65529a900be780c4cd2">  142</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab3c6588cde16e65529a900be780c4cd2">type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> _type;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">    /** Add the passed 1D array&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * @param[in,out] idx            Index at which to start adding the array&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * @param[in]     array          Array to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * @param[in]     strides        @ref Strides object containing stride of each dimension in bytes.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * @param[in]     num_dimensions Number of dimensions of the @p array.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     * @param[in]     window         Window the kernel will be executed on.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9331d385192a50adf74d3af40ce0fa20">  155</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9331d385192a50adf74d3af40ce0fa20">add_1D_array_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray&lt;T&gt;</a> *array, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_dimensions, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        add_array_argument&lt;T, 1&gt;(idx, array, strides, num_dimensions, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">    /** Add the passed 1D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">  165</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">add_1D_tensor_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        add_tensor_argument&lt;1&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">    /** Add the passed 1D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx if the condition is true.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in]     cond   Condition to check</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a25965a58d98e44856da286925792a2f7">  176</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a25965a58d98e44856da286925792a2f7">add_1D_tensor_argument_if</a>(<span class="keywordtype">bool</span> cond, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span>(cond)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">add_1D_tensor_argument</a>(idx, tensor, window);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">    /** Add the passed 2D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">  189</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">add_2D_tensor_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        add_tensor_argument&lt;2&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">    /** Add the passed 2D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx if the condition is true.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     * @param[in]     cond   Condition to check</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2ada6044648832c64532588f75303b44">  200</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2ada6044648832c64532588f75303b44">add_2D_tensor_argument_if</a>(<span class="keywordtype">bool</span> cond, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span>(cond)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">add_2D_tensor_argument</a>(idx, tensor, window);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">    /** Add the passed 3D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a28f5847162f352444c6ac1825d0e99c7">  213</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a28f5847162f352444c6ac1825d0e99c7">add_3D_tensor_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        add_tensor_argument&lt;3&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">    /** Add the passed 4D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a33e09c946b338fbfc780a9d1c66e68ad">  223</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a33e09c946b338fbfc780a9d1c66e68ad">add_4D_tensor_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        add_tensor_argument&lt;4&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /** Add the passed 5D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac8910b901d11e82cfed6de5abea0f1ee">  233</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac8910b901d11e82cfed6de5abea0f1ee">add_5D_tensor_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        add_tensor_argument&lt;5&gt;(idx, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">    /** Add the passed NHW 3D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments by passing strides, dimensions and the offset to the first valid element in bytes.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aaad3259259d5bac3e599cd2fe730ba4b">add_3d_tensor_nhw_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per NHW 3D Tensor object.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * @return The number of arguments enqueued per NHW 3D Tensor object.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a176b47627f076da2f4f821665f617fa5">  249</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a176b47627f076da2f4f821665f617fa5">num_arguments_per_3d_tensor_nhw</a>()</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> no_args_per_3d_tensor_nhw = 7u;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">return</span> no_args_per_3d_tensor_nhw;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">    /** Add the passed NHWC 4D tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments by passing strides, dimensions and the offset to the first valid element in bytes.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a39a1cb16e212d102fb60d77161b40d78">add_4d_tensor_nhwc_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per NHWC 4D Tensor object.</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">     * @return The number of arguments enqueued per NHWC 4D Tensor object.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6613ac1df9303071051dbec519fb977b">  266</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6613ac1df9303071051dbec519fb977b">num_arguments_per_4d_tensor_nhwc</a>()</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> no_args_per_4d_tensor_nhwc = 9u;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">return</span> no_args_per_4d_tensor_nhwc;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per 1D array object.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">     * @return The number of arguments enqueues per 1D array object.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a278f0e6c68ca17e71f4c4ff82f360aa0">  276</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a278f0e6c68ca17e71f4c4ff82f360aa0">num_arguments_per_1D_array</a>()</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_array&lt;1&gt;();</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per 1D tensor object.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">     * @return The number of arguments enqueues per 1D tensor object.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a43b6c5e4b57069c5f61e96dff24c212d">  284</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a43b6c5e4b57069c5f61e96dff24c212d">num_arguments_per_1D_tensor</a>()</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;1&gt;();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per 2D tensor object.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">     * @return The number of arguments enqueues per 2D tensor object.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a45601e0d46621a5b6f2e417d60e5c800">  292</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a45601e0d46621a5b6f2e417d60e5c800">num_arguments_per_2D_tensor</a>()</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;2&gt;();</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per 3D tensor object.</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">     * @return The number of arguments enqueues per 3D tensor object.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c9c1e7a7d96743375ca40847f0f12e2">  300</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c9c1e7a7d96743375ca40847f0f12e2">num_arguments_per_3D_tensor</a>()</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;3&gt;();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">    /** Returns the number of arguments enqueued per 4D tensor object.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     * @return The number of arguments enqueues per 4D tensor object.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a184fdf37587a9314cf12623accea6c73">  308</a></span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a184fdf37587a9314cf12623accea6c73">num_arguments_per_4D_tensor</a>()</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">return</span> num_arguments_per_tensor&lt;4&gt;();</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">    /** Enqueue the OpenCL kernel to process the given window  on the passed OpenCL command queue.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">     * @note The queue is *not* flushed by this method, and therefore the kernel will not have been executed by the time this method returns.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">     * @param[in]     window Region on which to execute the kernel. (Must be a valid region of the window returned by window()).</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">     * @param[in,out] queue  Command queue on which to enqueue the kernel.</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">  319</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, cl::CommandQueue &amp;queue)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(window, queue);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">    /** Enqueue the OpenCL kernel to process the given window  on the passed OpenCL command queue.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">     * @note The queue is *not* flushed by this method, and therefore the kernel will not have been executed by the time this method returns.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">     * @param[in]     tensors A vector containing the tensors to operato on.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     * @param[in]     window  Region on which to execute the kernel. (Must be a valid region of the window returned by window()).</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">     * @param[in,out] queue   Command queue on which to enqueue the kernel.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">  331</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, cl::CommandQueue &amp;queue)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tensors, window, queue);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">    /** Add the passed parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     * @param[in,out] idx   Index at which to start adding the arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * @param[in]     value Value to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a50f427a1d9419800972b9e03c4034311">  341</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a50f427a1d9419800972b9e03c4034311">add_argument</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, T value)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        _kernel.setArg(idx++, value);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">    /** Set the Local-Workgroup-Size hint</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">     * @note This method should be called after the configuration of the kernel</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">     * @param[in] lws_hint Local-Workgroup-Size to use</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">  352</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a>(<span class="keyword">const</span> cl::NDRange &amp;lws_hint)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>); <span class="comment">// lws_hint will be overwritten by configure()</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">set_lws</a>(lws_hint);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">    /** Return the Local-Workgroup-Size hint</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * @return Current lws hint</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">  362</a></span>&#160;    cl::NDRange <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">get_lws</a>();</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">    /** Set the workgroup batch size modifier hint</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">     * @note This method should be called after the configuration of the kernel</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">     * @param[in] wbsm_hint workgroup batch size modifier value</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">  373</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">set_wbsm_hint</a>(<span class="keyword">const</span> cl_int &amp;<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a>)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>); <span class="comment">// wbsm_hint will be overwritten by configure()</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">set_wbsm</a>(wbsm_hint);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">    /** Return the workgroup batch size modifier hint</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     * @return Current wbsm hint</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">  383</a></span>&#160;    cl_int <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">wbsm_hint</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">return</span> _tuning_params_hint.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">get_wbsm</a>();</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">    /** Get the configuration ID</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">     * @note The configuration ID can be used by the caller to distinguish different calls of the same OpenCL kernel</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">     *       In particular, this method can be used by CLScheduler to keep track of the best LWS for each configuration of the same kernel.</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">     *       The configuration ID should be provided only for the kernels potentially affected by the LWS geometry</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">     * @note This method should be called after the configuration of the kernel</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">     * @return configuration id string</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">  398</a></span>&#160;    <span class="keyword">const</span> std::string &amp;<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">return</span> _config_id;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">    /** Set the targeted GPU architecture</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">     * @param[in] target The targeted GPU architecture</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">  407</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a>(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        _target = target;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">    /** Set the targeted GPU architecture according to the CL device</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">     * @param[in] device A CL device</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a>(cl::Device &amp;device);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">    /** Get the targeted GPU architecture</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">     * @return The targeted GPU architecture.</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">  422</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">get_target</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">return</span> _target;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">    /** Get the maximum workgroup size for the device the CLKernelLibrary uses.</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">     * @return The maximum workgroup size value.</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#abca336f832d730e8494049bd714df60a">get_max_workgroup_size</a>();<span class="comment"></span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">    /** Get the global work size given an execution window</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">     * @param[in] window Execution window</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">     * @return Global work size of the given execution window</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">static</span> cl::NDRange <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">gws_from_window</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">    /** Add the passed array&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * @param[in,out] idx            Index at which to start adding the array&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     * @param[in]     array          Array to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">     * @param[in]     strides        @ref Strides object containing stride of each dimension in bytes.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">     * @param[in]     num_dimensions Number of dimensions of the @p array.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">     * @param[in]     window         Window the kernel will be executed on.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension_size&gt;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordtype">void</span> add_array_argument(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray&lt;T&gt;</a> *array, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_dimensions, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);<span class="comment"></span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">    /** Add the passed tensor&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">     * @param[in,out] idx    Index at which to start adding the tensor&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">     * @param[in]     tensor Tensor to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">     * @param[in]     window Window the kernel will be executed on.</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension_size&gt;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordtype">void</span> add_tensor_argument(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    cl::Kernel   _kernel;             <span class="comment">/**&lt; OpenCL kernel to run */</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>    _target;             <span class="comment">/**&lt; The targeted GPU */</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    std::string  _config_id;          <span class="comment">/**&lt; Configuration ID */</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordtype">size_t</span>       _max_workgroup_size; <span class="comment">/**&lt; The maximum workgroup size for this kernel */</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">CLKernelType</a> _type;               <span class="comment">/**&lt; The CL kernel type */</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> _tuning_params_hint; <span class="comment">/**&lt; Tuning parameters hint for the OpenCL kernel */</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;};</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">/** Add the kernel to the command queue with the given window.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"> * @note Depending on the size of the window, this might translate into several jobs being enqueued.</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> * @note If kernel-&gt;kernel() is empty then the function will return without adding anything to the queue.</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> * @param[in,out] queue                OpenCL command queue.</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"> * @param[in]     kernel               Kernel to enqueue</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"> * @param[in]     window               Window the kernel has to process.</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> * @param[in]     lws_hint             (Optional) Local workgroup size requested. Default is based on the device target.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @param[in]     use_dummy_work_items (Optional) Use dummy work items in order to have two dimensional power of two NDRange. Default is false</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> *                                     Note: it is kernel responsibility to check if the work-item is out-of-range</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> * @note If any dimension of the lws is greater than the global workgroup size then no lws will be passed.</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a6e51ab3789678d3e0b0b72178dd6c4c6">enqueue</a>(cl::CommandQueue &amp;queue, <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">kernel</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <span class="keyword">const</span> cl::NDRange &amp;<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">lws_hint</a> = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().default_ndrange(), <span class="keywordtype">bool</span> use_dummy_work_items = <span class="keyword">false</span>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">/** Add the passed array&#39;s parameters to the object&#39;s kernel&#39;s arguments starting from the index idx.</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> * @param[in,out] idx            Index at which to start adding the array&#39;s arguments. Will be incremented by the number of kernel arguments set.</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment"> * @param[in]     array          Array to set as an argument of the object&#39;s kernel.</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"> * @param[in]     strides        @ref Strides object containing stride of each dimension in bytes.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"> * @param[in]     num_dimensions Number of dimensions of the @p array.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"> * @param[in]     window         Window the kernel will be executed on.</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension_size&gt;</div><div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2d7c6b5f3332604ad6a637457f65c342">  496</a></span>&#160;<span class="keywordtype">void</span> ICLKernel::add_array_argument(<span class="keywordtype">unsigned</span> &amp;idx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray&lt;T&gt;</a> *array, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_dimensions, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(array == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="comment">// Calculate offset to the start of the window</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = 0;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; num_dimensions; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        offset_first_element += window[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start() * strides[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>];</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_start = idx;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    _kernel.setArg(idx++, array-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_array.xhtml#a1fb4c50755a0ef424652246838ed91a6">cl_buffer</a>());</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension = 0; dimension &lt; dimension_size; dimension++)</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension]);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension] * window[dimension].step());</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a>(idx_start + num_arguments_per_array&lt;dimension_size&gt;() != idx,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                 <span class="stringliteral">&quot;add_%dD_array_argument() is supposed to add exactly %d arguments to the kernel&quot;</span>, dimension_size, num_arguments_per_array&lt;dimension_size&gt;());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(idx_start);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/*ARM_COMPUTE_ICLKERNEL_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a39a1cb16e212d102fb60d77161b40d78"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a39a1cb16e212d102fb60d77161b40d78">arm_compute::ICLKernel::add_4d_tensor_nhwc_argument</a></div><div class="ttdeci">void add_4d_tensor_nhwc_argument(unsigned int &amp;idx, const ICLTensor *tensor)</div><div class="ttdoc">Add the passed NHWC 4D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments by passing strides...</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00144">ICLKernel.cpp:144</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a43b6c5e4b57069c5f61e96dff24c212d"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a43b6c5e4b57069c5f61e96dff24c212d">arm_compute::ICLKernel::num_arguments_per_1D_tensor</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_1D_tensor()</div><div class="ttdoc">Returns the number of arguments enqueued per 1D tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00284">ICLKernel.h:284</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a6c01790e4e3f22f70f69002f0cb1b913"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c01790e4e3f22f70f69002f0cb1b913">arm_compute::ICLKernel::gws_from_window</a></div><div class="ttdeci">static cl::NDRange gws_from_window(const Window &amp;window)</div><div class="ttdoc">Get the global work size given an execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00193">ICLKernel.cpp:193</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml">arm_compute::IKernel</a></div><div class="ttdoc">Common information for all the kernels. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8h_source.xhtml#l00033">IKernel.h:33</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a25965a58d98e44856da286925792a2f7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a25965a58d98e44856da286925792a2f7">arm_compute::ICLKernel::add_1D_tensor_argument_if</a></div><div class="ttdeci">void add_1D_tensor_argument_if(bool cond, unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 1D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx ...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00176">ICLKernel.h:176</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a278f0e6c68ca17e71f4c4ff82f360aa0"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a278f0e6c68ca17e71f4c4ff82f360aa0">arm_compute::ICLKernel::num_arguments_per_1D_array</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_1D_array()</div><div class="ttdoc">Returns the number of arguments enqueued per 1D array object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00276">ICLKernel.h:276</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a722b1a9a06026623079b291d4a6c752f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">arm_compute::CLTuningParams::get_lws</a></div><div class="ttdeci">cl::NDRange get_lws() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00069">CLTuningParams.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a9d5ccb74e06677836b3ca4f30e6962da"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">arm_compute::ICLKernel::run</a></div><div class="ttdeci">virtual void run(const Window &amp;window, cl::CommandQueue &amp;queue)</div><div class="ttdoc">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00319">ICLKernel.h:319</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a2ada6044648832c64532588f75303b44"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2ada6044648832c64532588f75303b44">arm_compute::ICLKernel::add_2D_tensor_argument_if</a></div><div class="ttdeci">void add_2D_tensor_argument_if(bool cond, unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 2D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx ...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00200">ICLKernel.h:200</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6e51ab3789678d3e0b0b72178dd6c4c6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6e51ab3789678d3e0b0b72178dd6c4c6">arm_compute::enqueue</a></div><div class="ttdeci">void enqueue(cl::CommandQueue &amp;queue, ICLKernel &amp;kernel, const Window &amp;window, const cl::NDRange &amp;lws_hint=CLKernelLibrary::get().default_ndrange(), bool use_dummy_work_items=false)</div><div class="ttdoc">Add the kernel to the command queue with the given window. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00032">ICLKernel.cpp:32</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a176b47627f076da2f4f821665f617fa5"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a176b47627f076da2f4f821665f617fa5">arm_compute::ICLKernel::num_arguments_per_3d_tensor_nhw</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_3d_tensor_nhw()</div><div class="ttdoc">Returns the number of arguments enqueued per NHW 3D Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00249">ICLKernel.h:249</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_aaad3259259d5bac3e599cd2fe730ba4b"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#aaad3259259d5bac3e599cd2fe730ba4b">arm_compute::ICLKernel::add_3d_tensor_nhw_argument</a></div><div class="ttdeci">void add_3d_tensor_nhw_argument(unsigned int &amp;idx, const ICLTensor *tensor)</div><div class="ttdoc">Add the passed NHW 3D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments by passing strides...</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00119">ICLKernel.cpp:119</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ae5121015ab09ece4d470f50c7ffe198e"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">arm_compute::ICLKernel::kernel</a></div><div class="ttdeci">cl::Kernel &amp; kernel()</div><div class="ttdoc">Returns a reference to the OpenCL kernel of this object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00134">ICLKernel.h:134</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ab9f813c25ed75ea7b7ac2fa3926a8f55"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab9f813c25ed75ea7b7ac2fa3926a8f55">arm_compute::ICLKernel::lws_hint</a></div><div class="ttdeci">cl::NDRange lws_hint() const</div><div class="ttdoc">Return the Local-Workgroup-Size hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00362">ICLKernel.h:362</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ad356b88c8f61267d593d9ed99835bde9"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">arm_compute::ICLKernel::set_lws_hint</a></div><div class="ttdeci">void set_lws_hint(const cl::NDRange &amp;lws_hint)</div><div class="ttdoc">Set the Local-Workgroup-Size hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00352">ICLKernel.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a7ebf899a53f8bdab96eaaf2bb3d41985"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a7ebf899a53f8bdab96eaaf2bb3d41985">arm_compute::ICLKernel::wbsm_hint</a></div><div class="ttdeci">cl_int wbsm_hint() const</div><div class="ttdoc">Return the workgroup batch size modifier hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00383">ICLKernel.h:383</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a50f427a1d9419800972b9e03c4034311"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a50f427a1d9419800972b9e03c4034311">arm_compute::ICLKernel::add_argument</a></div><div class="ttdeci">void add_argument(unsigned int &amp;idx, T value)</div><div class="ttdoc">Add the passed parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00341">ICLKernel.h:341</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a9331d385192a50adf74d3af40ce0fa20"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9331d385192a50adf74d3af40ce0fa20">arm_compute::ICLKernel::add_1D_array_argument</a></div><div class="ttdeci">void add_1D_array_argument(unsigned int &amp;idx, const ICLArray&lt; T &gt; *array, const Strides &amp;strides, unsigned int num_dimensions, const Window &amp;window)</div><div class="ttdoc">Add the passed 1D array&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel.h:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a111c697d8e429d9ad91fdb097ebb7f42"><div class="ttname"><a href="namespacearm__compute.xhtml#a111c697d8e429d9ad91fdb097ebb7f42">arm_compute::get_default_lws_for_type</a></div><div class="ttdeci">cl::NDRange get_default_lws_for_type(CLKernelType kernel_type, cl::NDRange gws)</div><div class="ttdef"><b>Definition:</b> <a href="_default_l_w_s_heuristics_8cpp_source.xhtml#l00097">DefaultLWSHeuristics.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="core_2_c_l_2_c_l_types_8h_xhtml"><div class="ttname"><a href="core_2_c_l_2_c_l_types_8h.xhtml">CLTypes.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml">arm_compute::CLTuningParams</a></div><div class="ttdoc">&lt; OpenCL tuner parameters </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00036">CLTuningParams.h:36</a></div></div>
<div class="ttc" id="_error_8h_xhtml_acaa348bf0c7eb9493c72092b7293d45f"><div class="ttname"><a href="_error_8h.xhtml#acaa348bf0c7eb9493c72092b7293d45f">ARM_COMPUTE_ERROR_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG_VAR(cond, msg,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context...</div></div>
<div class="ttc" id="_c_l_tuning_params_8h_xhtml"><div class="ttname"><a href="_c_l_tuning_params_8h.xhtml">CLTuningParams.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2experimental_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_i_kernel_8h_xhtml"><div class="ttname"><a href="_i_kernel_8h.xhtml">IKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml">arm_compute::ICLKernel</a></div><div class="ttdoc">Common interface for all the OpenCL kernels. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00067">ICLKernel.h:67</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a28f5847162f352444c6ac1825d0e99c7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a28f5847162f352444c6ac1825d0e99c7">arm_compute::ICLKernel::add_3D_tensor_argument</a></div><div class="ttdeci">void add_3D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 3D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00213">ICLKernel.h:213</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_ab2d66c6ccbd49d09857ef55c61aa84ea"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">arm_compute::CLTuningParams::set_lws</a></div><div class="ttdeci">void set_lws(cl::NDRange lws)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00064">CLTuningParams.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a8f7f6ab59fc0e601d750b83e75a398eb"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">arm_compute::ICLKernel::config_id</a></div><div class="ttdeci">const std::string &amp; config_id() const</div><div class="ttdoc">Get the configuration ID. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00398">ICLKernel.h:398</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_adb48a1da7dc6b6f3c1a424d21e1ac1f8"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">arm_compute::CLKernelLibrary::default_ndrange</a></div><div class="ttdeci">cl::NDRange default_ndrange() const</div><div class="ttdoc">Return the default NDRange for the device. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00118">CLKernelLibrary.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_array_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_array.xhtml">arm_compute::ICLArray</a></div><div class="ttdoc">Interface for OpenCL Array. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_array_8h_source.xhtml#l00035">ICLArray.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a6c9c1e7a7d96743375ca40847f0f12e2"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6c9c1e7a7d96743375ca40847f0f12e2">arm_compute::ICLKernel::num_arguments_per_3D_tensor</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_3D_tensor()</div><div class="ttdoc">Returns the number of arguments enqueued per 3D tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00300">ICLKernel.h:300</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a911324ec4a6233263cccbea220d2cdb8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">arm_compute::CLTuningParams::get_wbsm</a></div><div class="ttdeci">cl_int get_wbsm() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00079">CLTuningParams.h:79</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_aa550ff0352ff2388e02f7b0a41bf5fe7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">arm_compute::ICLKernel::get_target</a></div><div class="ttdeci">GPUTarget get_target() const</div><div class="ttdoc">Get the targeted GPU architecture. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00422">ICLKernel.h:422</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="_default_l_w_s_heuristics_8h_xhtml"><div class="ttname"><a href="_default_l_w_s_heuristics_8h.xhtml">DefaultLWSHeuristics.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuning_params_xhtml_a589c67583be1aca669d760445ec131a1"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">arm_compute::CLTuningParams::set_wbsm</a></div><div class="ttdeci">void set_wbsm(cl_int wbsm)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00074">CLTuningParams.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a45601e0d46621a5b6f2e417d60e5c800"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a45601e0d46621a5b6f2e417d60e5c800">arm_compute::ICLKernel::num_arguments_per_2D_tensor</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_2D_tensor()</div><div class="ttdoc">Returns the number of arguments enqueued per 2D tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00292">ICLKernel.h:292</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a184fdf37587a9314cf12623accea6c73"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a184fdf37587a9314cf12623accea6c73">arm_compute::ICLKernel::num_arguments_per_4D_tensor</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_4D_tensor()</div><div class="ttdoc">Returns the number of arguments enqueued per 4D tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00308">ICLKernel.h:308</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428e"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428e">arm_compute::CLKernelType</a></div><div class="ttdeci">CLKernelType</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00080">CLTypes.h:80</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a6613ac1df9303071051dbec519fb977b"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6613ac1df9303071051dbec519fb977b">arm_compute::ICLKernel::num_arguments_per_4d_tensor_nhwc</a></div><div class="ttdeci">static constexpr unsigned int num_arguments_per_4d_tensor_nhwc()</div><div class="ttdoc">Returns the number of arguments enqueued per NHWC 4D Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00266">ICLKernel.h:266</a></div></div>
<div class="ttc" id="_g_p_u_target_8h_xhtml"><div class="ttname"><a href="_g_p_u_target_8h.xhtml">GPUTarget.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ac74dad3e61f79334f5e73f3c3ac603cb"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">arm_compute::ICLKernel::add_2D_tensor_argument</a></div><div class="ttdeci">void add_2D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 2D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00189">ICLKernel.h:189</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00042">ICLTensor.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a6b10e96ce90bf901d17def86b874b019"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6b10e96ce90bf901d17def86b874b019">arm_compute::ICLKernel::ICLKernel</a></div><div class="ttdeci">ICLKernel()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00126">ICLKernel.h:126</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets. </div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div></div>
<div class="ttc" id="_open_c_l_8h_xhtml"><div class="ttname"><a href="_open_c_l_8h.xhtml">OpenCL.h</a></div><div class="ttdoc">Wrapper to configure the Khronos OpenCL C++ header. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_abca336f832d730e8494049bd714df60a"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#abca336f832d730e8494049bd714df60a">arm_compute::ICLKernel::get_max_workgroup_size</a></div><div class="ttdeci">size_t get_max_workgroup_size()</div><div class="ttdoc">Get the maximum workgroup size for the device the CLKernelLibrary uses. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8cpp_source.xhtml#l00184">ICLKernel.cpp:184</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ad5ba9d34a3a855bf1dd2e36316ff550a"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">arm_compute::ICLKernel::set_target</a></div><div class="ttdeci">void set_target(GPUTarget target)</div><div class="ttdoc">Set the targeted GPU architecture. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00407">ICLKernel.h:407</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a479e7043e65dc87de35d374e108510f7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">arm_compute::ICLKernel::add_1D_tensor_argument</a></div><div class="ttdeci">void add_1D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 1D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00165">ICLKernel.h:165</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ac8910b901d11e82cfed6de5abea0f1ee"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac8910b901d11e82cfed6de5abea0f1ee">arm_compute::ICLKernel::add_5D_tensor_argument</a></div><div class="ttdeci">void add_5D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 5D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00233">ICLKernel.h:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a33e09c946b338fbfc780a9d1c66e68ad"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a33e09c946b338fbfc780a9d1c66e68ad">arm_compute::ICLKernel::add_4D_tensor_argument</a></div><div class="ttdeci">void add_4D_tensor_argument(unsigned int &amp;idx, const ICLTensor *tensor, const Window &amp;window)</div><div class="ttdoc">Add the passed 4D tensor&amp;#39;s parameters to the object&amp;#39;s kernel&amp;#39;s arguments starting from the index idx...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00223">ICLKernel.h:223</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_ab3c6588cde16e65529a900be780c4cd2"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ab3c6588cde16e65529a900be780c4cd2">arm_compute::ICLKernel::type</a></div><div class="ttdeci">CLKernelType type() const</div><div class="ttdoc">Returns the CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00142">ICLKernel.h:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_array_xhtml_a1fb4c50755a0ef424652246838ed91a6"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_array.xhtml#a1fb4c50755a0ef424652246838ed91a6">arm_compute::ICLArray::cl_buffer</a></div><div class="ttdeci">virtual const cl::Buffer &amp; cl_buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a reference to the OpenCL buffer containing ...</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a48bd4a8a34a8bfa14d8092efd3f3f171"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">arm_compute::ICLKernel::set_wbsm_hint</a></div><div class="ttdeci">void set_wbsm_hint(const cl_int &amp;wbsm_hint)</div><div class="ttdoc">Set the workgroup batch size modifier hint. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00373">ICLKernel.h:373</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a11b2791dada6be4d5857a18b0dafb550"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">arm_compute::ICLKernel::run_op</a></div><div class="ttdeci">virtual void run_op(ITensorPack &amp;tensors, const Window &amp;window, cl::CommandQueue &amp;queue)</div><div class="ttdoc">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00331">ICLKernel.h:331</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:44 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
