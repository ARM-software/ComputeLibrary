<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/pooling/pooling_depthfirst_cache_oblivious.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('pooling__depthfirst__cache__oblivious_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">pooling_depthfirst_cache_oblivious.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pooling__depthfirst__cache__oblivious_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;pool_common.hpp&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> strategy&gt;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">   35</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">PoolingDepthfirstCacheOblivious</a> : <span class="keyword">public</span> PoolingCommon&lt;typename strategy::operand_type, typename strategy::return_type&gt;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">using</span> TInput = <span class="keyword">typename</span> strategy::operand_type;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">using</span> TOutput = <span class="keyword">typename</span> strategy::return_type;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">const</span> PoolingArgs m_args;  <span class="comment">// Copy of arguments</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_rows(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> (strategy::out_rows() - 1)*strategy::stride_rows() + strategy::pool_rows();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_cols(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> (strategy::out_cols() - 1)*strategy::stride_cols() + strategy::pool_cols();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordtype">size_t</span> sizeof_input_buffer(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(TInput) * m_args.n_channels;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordtype">size_t</span> sizeof_output_buffer(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(TOutput) * m_args.n_channels;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a346b9dc3221cbd6a9c04c30a9fc03ba7">   63</a></span>&#160;  <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a346b9dc3221cbd6a9c04c30a9fc03ba7">PoolingDepthfirstCacheOblivious</a>(<span class="keyword">const</span> PoolingArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) : m_args(args)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a346b9dc3221cbd6a9c04c30a9fc03ba7">PoolingDepthfirstCacheOblivious</a>(<a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">PoolingDepthfirstCacheOblivious</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">PoolingDepthfirstCacheOblivious</a> &amp;<a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a6d7293e9ead5883194b80115244f7917">operator=</a>(<a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">PoolingDepthfirstCacheOblivious</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ac88b38a3fbd2ef6f7d8abc566bf96b3c">   70</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ac88b38a3fbd2ef6f7d8abc566bf96b3c">get_working_size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// We require an array of pointers for the inputs and outputs, a</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// channel-length vector in which to dump surplus output, and a</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// channel-length vector of padding values.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> sizeof_input_buffer() + sizeof_output_buffer();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">   78</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">execute</a>(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> output,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> working_space</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  )<span class="keyword"> const override</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_col = m_args.n_channels;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_row = ld_input_col * m_args.input_cols;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_batch = ld_input_row * m_args.input_rows;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_col = ld_input_col;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_row = ld_output_col * m_args.output_cols;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_batch = ld_output_row * m_args.output_rows;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">execute</a>(</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      input, ld_input_col, ld_input_row, ld_input_batch,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      output, ld_output_col, ld_output_row, ld_output_batch,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      working_space</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    );</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a18e4e61adbbd0e7bf35c237dbbcdc71f">   98</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a18e4e61adbbd0e7bf35c237dbbcdc71f">execute</a>(</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">size_t</span> ld_input_col,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">size_t</span> ld_input_row,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">size_t</span> ld_input_batch,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> output,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">size_t</span> ld_output_col,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">size_t</span> ld_output_row,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">size_t</span> ld_output_batch,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> working_space</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  )<span class="keyword"> const override</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">execute</a>(</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      m_args.n_batches, m_args.input_rows, m_args.input_cols,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      m_args.n_channels,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      input, ld_input_col, ld_input_row, ld_input_batch,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      m_args.padding,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      m_args.output_rows, m_args.output_cols,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      output, ld_output_col, ld_output_row, ld_output_batch,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      working_space</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    );</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ae08cf3cd42d4935c584f2327e81be5a7">  121</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ae08cf3cd42d4935c584f2327e81be5a7">execute</a>(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> _input,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">size_t</span> ld_input_col,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">size_t</span> ld_input_row,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">size_t</span> ld_input_batch,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> PaddingValues &amp;padding,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> _output,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">size_t</span> ld_output_col,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">size_t</span> ld_output_row,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">size_t</span> ld_output_batch,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> _working_space</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  )<span class="keyword"> const override</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(m_args.cpu_info);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    arm_gemm::profiler prof;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#endif // CYCLE_PROFILING</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Cast input and output pointers into the right types</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> TInput *<span class="keyword">const</span> inptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TInput *<span class="keyword">&gt;</span>(_input);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    TOutput *<span class="keyword">const</span> outptr = <span class="keyword">static_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(_output);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Allocate portions of the working space</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    uint8_t *<span class="keyword">const</span> working_space = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_working_space);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    TOutput *<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#aa752c08d57c8280def8035a0611d52b0">output_buffer</a> = <span class="keyword">reinterpret_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    TInput *<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#a520a1bc5c3a52a280c28c9b8326d7514">input_buffer</a> = <span class="keyword">reinterpret_cast&lt;</span>TInput *<span class="keyword">&gt;</span>(working_space + sizeof_output_buffer());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Fill the input buffer</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> TInput pad_value = (m_args.pool_type == PoolingType::AVERAGE)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                           ? static_cast&lt;TInput&gt;(0)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                           : (std::numeric_limits&lt;TInput&gt;::has_infinity</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                              ? -std::numeric_limits&lt;TInput&gt;::infinity()</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                              : <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;TInput&gt;::lowest</a>());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; channels; i++)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      input_buffer[i] = pad_value;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Keep subdividing the output plane across the longest dimension until we</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// reach the size of the tile. Queue items for later processing. Note - we</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// can determine the largest size of the queue a priori from the input</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// tensor size, this would allow us to allocate memory within the working</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// space and improve performance.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">struct </span>WorkItem</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_i, output_j;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height, output_width;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      WorkItem(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        : output_i(i), output_j(j), output_height(height), output_width(width) {}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">execute</a> = [&amp;] (<span class="keyword">const</span> WorkItem &amp;item) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      <span class="comment">// Create an array for the output pointers</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      TOutput * _outptr_array[strategy::out_rows() * strategy::out_cols()];</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      TOutput **<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#a790736ad1b8b128e7fc4ba58334af4d2">outptr_array</a> = _outptr_array;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <span class="comment">// Construct the output pointer array</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_pad_right = strategy::out_rows() - item.output_width;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">auto</span> outptr_element = <a class="code" href="working__space_8hpp.xhtml#a790736ad1b8b128e7fc4ba58334af4d2">outptr_array</a>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">auto</span> outptr_row = outptr + item.output_i * ld_output_row + item.output_j * ld_output_col;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">// Fill the array with pointers to the output buffer</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; strategy::out_rows() * strategy::out_cols(); i++)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;          outptr_array[i] = <a class="code" href="working__space_8hpp.xhtml#aa752c08d57c8280def8035a0611d52b0">output_buffer</a>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">// Fill in the valid portion of the array</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; item.output_height; i++)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;          <span class="keyword">auto</span> outptr_col = outptr_row;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; item.output_width; j++)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            *(outptr_element++) = outptr_col;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            outptr_col += ld_output_col;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;          }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;          outptr_element += output_pad_right;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;          outptr_row += ld_output_row;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> start_i = item.output_i * strategy::stride_rows() - padding.top;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> end_i = start_i + input_rows();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top = std::max(0, 0 - start_i);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom = std::max(0, end_i - static_cast&lt;int&gt;(input_height));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> start_j = item.output_j * strategy::stride_cols() - padding.left;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> end_j = start_j + input_cols();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left = std::max(0, 0 - start_j);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right = std::max(0, end_j - static_cast&lt;int&gt;(input_width));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="comment">// Create an array for the input pointers</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      <span class="keyword">const</span> TInput * _inptr_array[input_rows() * input_cols()];</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keyword">const</span> TInput **<span class="keyword">const</span> inptr_array = _inptr_array;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row_padding = pad_top + pad_bottom;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows = input_rows() - row_padding;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col_padding = pad_left + pad_right;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols = input_cols() - col_padding;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// Fill the array with pointers to the input buffer</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; input_rows() * input_cols(); i++)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;          inptr_array[i] = <a class="code" href="working__space_8hpp.xhtml#a520a1bc5c3a52a280c28c9b8326d7514">input_buffer</a>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="comment">// Compute valid initial pointer</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">auto</span> inptr_row = inptr + std::max(start_i, 0) * ld_input_row + std::max(start_j, 0) * ld_input_col;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="comment">// Fill in the valid portion of the input array</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">auto</span> inptr_element = inptr_array + pad_top * input_cols() + pad_left;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; valid_rows; i++)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;          <span class="keyword">auto</span> inptr_col = inptr_row;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; valid_cols; j++)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;          {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            *(inptr_element++) = inptr_col;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            inptr_col += ld_input_col;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;          }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;          inptr_row += ld_input_row;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;          inptr_element += col_padding;  <span class="comment">// Skip the padding elements</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="comment">// Call the kernel</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="comment">// TODO Work number</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(item.output_height * item.output_width * strategy::pool_rows() * strategy::pool_cols()));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">#endif // CYCLE_PROFILING</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      strat.kernel(channels, inptr_array, outptr_array,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                   pad_left, pad_top, pad_right, pad_bottom);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    };</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Add the initial work item to the stack of work.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::stack&lt;WorkItem, std::vector&lt;WorkItem&gt;&gt; stack;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    stack.push(WorkItem(0, 0, output_height, output_width));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">while</span> (!stack.empty())</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="comment">// Pop an item from the stack, bisect the largest dimension and either</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      <span class="comment">// execute the resulting tiles or add them to the stack if they are too</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="comment">// large.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      <span class="keyword">const</span> WorkItem item(stack.top());</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      stack.pop();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      <span class="keywordflow">if</span> (item.output_height &lt;= strategy::out_rows() &amp;&amp;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          item.output_width &lt;= strategy::out_cols())</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">execute</a>(item);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="comment">// Split the largest dimension, such that we get an exact number of</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// tiles in the first partition.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">if</span> (item.output_height &gt;= item.output_width)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_in_tiles = (item.output_height + strategy::out_rows() - 1) / strategy::out_rows();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tiles_first = height_in_tiles - height_in_tiles / 2;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_first = tiles_first * strategy::out_rows();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_second = item.output_height - height_first;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;          stack.push(WorkItem(item.output_i + height_first, item.output_j, height_second, item.output_width));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;          stack.push(WorkItem(item.output_i, item.output_j, height_first, item.output_width));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_in_tiles = item.output_width / strategy::out_cols();</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tiles_first = width_in_tiles - width_in_tiles / 2;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_first = tiles_first * strategy::out_cols();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_second = item.output_width - width_first;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;          stack.push(WorkItem(item.output_i, item.output_j + width_first, item.output_height, width_second));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;          stack.push(WorkItem(item.output_i, item.output_j, item.output_height, width_first));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;};</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}  <span class="comment">// namespace pooling</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}  <span class="comment">// namespace arm_conv</span></div><div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_a6d7293e9ead5883194b80115244f7917"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a6d7293e9ead5883194b80115244f7917">arm_conv::pooling::PoolingDepthfirstCacheOblivious::operator=</a></div><div class="ttdeci">PoolingDepthfirstCacheOblivious &amp; operator=(PoolingDepthfirstCacheOblivious &amp;)=delete</div></div>
<div class="ttc" id="namespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00029">addressing.cpp:29</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a520a1bc5c3a52a280c28c9b8326d7514"><div class="ttname"><a href="working__space_8hpp.xhtml#a520a1bc5c3a52a280c28c9b8326d7514">input_buffer</a></div><div class="ttdeci">T * input_buffer</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00214">working_space.hpp:214</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_aa752c08d57c8280def8035a0611d52b0"><div class="ttname"><a href="working__space_8hpp.xhtml#aa752c08d57c8280def8035a0611d52b0">output_buffer</a></div><div class="ttdeci">T * output_buffer</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00243">working_space.hpp:243</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">arm_conv::pooling::PoolingDepthfirstCacheOblivious</a></div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00035">pooling_depthfirst_cache_oblivious.hpp:35</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00062">impl.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__conv_1_1pooling_xhtml_a2dbb9d67088387c8cb61b8d7d063afd1"><div class="ttname"><a href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">arm_conv::pooling::pooling</a></div><div class="ttdeci">template UniquePoolingCommon&lt; float, float &gt; pooling(const PoolingArgs &amp;, const Nothing &amp;)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_ae08cf3cd42d4935c584f2327e81be5a7"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ae08cf3cd42d4935c584f2327e81be5a7">arm_conv::pooling::PoolingDepthfirstCacheOblivious::execute</a></div><div class="ttdeci">void execute(unsigned int batches, unsigned int input_height, unsigned int input_width, unsigned int channels, const void *const _input, size_t ld_input_col, size_t ld_input_row, size_t ld_input_batch, const PaddingValues &amp;padding, unsigned int output_height, unsigned int output_width, void *const _output, size_t ld_output_col, size_t ld_output_row, size_t ld_output_batch, void *const _working_space) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00121">pooling_depthfirst_cache_oblivious.hpp:121</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_ac88b38a3fbd2ef6f7d8abc566bf96b3c"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#ac88b38a3fbd2ef6f7d8abc566bf96b3c">arm_conv::pooling::PoolingDepthfirstCacheOblivious::get_working_size</a></div><div class="ttdeci">size_t get_working_size(void) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00070">pooling_depthfirst_cache_oblivious.hpp:70</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_a18e4e61adbbd0e7bf35c237dbbcdc71f"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a18e4e61adbbd0e7bf35c237dbbcdc71f">arm_conv::pooling::PoolingDepthfirstCacheOblivious::execute</a></div><div class="ttdeci">void execute(const void *const input, size_t ld_input_col, size_t ld_input_row, size_t ld_input_batch, void *const output, size_t ld_output_col, size_t ld_output_row, size_t ld_output_batch, void *const working_space) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00098">pooling_depthfirst_cache_oblivious.hpp:98</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_a346b9dc3221cbd6a9c04c30a9fc03ba7"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a346b9dc3221cbd6a9c04c30a9fc03ba7">arm_conv::pooling::PoolingDepthfirstCacheOblivious::PoolingDepthfirstCacheOblivious</a></div><div class="ttdeci">PoolingDepthfirstCacheOblivious(const PoolingArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00063">pooling_depthfirst_cache_oblivious.hpp:63</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00058">CpuGemmAssemblyDispatch.cpp:58</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious_xhtml_a7e841522f8050fefe8234ab7c0402457"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml#a7e841522f8050fefe8234ab7c0402457">arm_conv::pooling::PoolingDepthfirstCacheOblivious::execute</a></div><div class="ttdeci">void execute(const void *const input, void *const output, void *const working_space) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00078">pooling_depthfirst_cache_oblivious.hpp:78</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a790736ad1b8b128e7fc4ba58334af4d2"><div class="ttname"><a href="working__space_8hpp.xhtml#a790736ad1b8b128e7fc4ba58334af4d2">outptr_array</a></div><div class="ttdeci">T ** outptr_array</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00242">working_space.hpp:242</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="dir_0478b45d7abe353b326d807ccde1ebbc.xhtml">pooling</a></li><li class="navelem"><a class="el" href="pooling__depthfirst__cache__oblivious_8hpp.xhtml">pooling_depthfirst_cache_oblivious.hpp</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
