<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/Window.inl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_window_8inl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Window.inl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_window_8inl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2020, 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ae65e2546322a23806510364033bc8fcd">   26</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window::Window</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    : _dims(), _is_broadcasted(utility::generate_array&lt;bool, <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>::num_max_dimensions, false&gt;::value)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">set</span>(i, src[i]);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        _is_broadcasted[i] = src.<a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a>(i);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">   36</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">Window::operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> &amp;rhs)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> tmp(rhs);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">swap</a>(*<span class="keyword">this</span>, tmp);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">   43</a></span>&#160;<span class="keyword">inline</span> constexpr <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">Window::operator[]</a>(<span class="keywordtype">size_t</span> dimension)<span class="keyword"> const</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> _dims.at(dimension);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">   49</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">Window::set</a>(<span class="keywordtype">size_t</span> dimension, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;dim)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    _dims[dimension] = dim;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">   55</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">Window::set_broadcasted</a>(<span class="keywordtype">size_t</span> dimension)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">set</span>(dimension, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    _is_broadcasted[dimension] = <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">   62</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">Window::is_broadcasted</a>(<span class="keywordtype">size_t</span> dimension)<span class="keyword"> const</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> _is_broadcasted[dimension];</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">   68</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">Window::collapse_if_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, <span class="keyword">const</span> <span class="keywordtype">size_t</span> first,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">size_t</span> last, <span class="keywordtype">bool</span> *has_collapsed)<span class="keyword"> const</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> collapsed(*<span class="keyword">this</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">bool</span> is_collapsable = <span class="keyword">true</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">int</span>  collapsed_end  = _dims[first].end();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = first + 1; is_collapsable &amp;&amp; (d &lt; last); ++d)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// The _dims&#39;s dimension must match the full _dims dimension to be collapsable:</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        is_collapsable = (_dims[d].start() == 0) &amp;&amp; (full_window[d].start() == 0) &amp;&amp; (_dims[d].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() &lt;= 1)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                         &amp;&amp; (full_window[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() == _dims[d].end());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        collapsed_end *= _dims[d].end();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span>(is_collapsable)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        collapsed._dims.at(first).set_end(collapsed_end);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = first + 1; is_collapsable &amp;&amp; (d &lt; last); ++d)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            collapsed.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span>(has_collapsed != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        *has_collapsed = is_collapsable;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> collapsed;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a02d0a4c2898a6eb2ca7706c811b0ce81">  101</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a02d0a4c2898a6eb2ca7706c811b0ce81">Window::shift_dimensions</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shift_value)<span class="keyword"> const</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> shifted_window;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a> - shift_value); <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>++)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        shifted_window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>, _dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> + shift_value]);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> shifted_window;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">  111</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">Window::collapse</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, <span class="keyword">const</span> <span class="keywordtype">size_t</span> first, <span class="keyword">const</span> <span class="keywordtype">size_t</span> last)<span class="keyword"> const</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordtype">bool</span>   has_collapsed = <span class="keyword">false</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> collapsed     = <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(full_window, first, last, &amp;has_collapsed);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Make sure that the window has collapsed</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!has_collapsed);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> collapsed;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">  120</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">Window::broadcast_if_dimension_le_one</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> broadcastWin(*<span class="keyword">this</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span>(shape[d] &lt;= 1)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            broadcastWin.<a class="code" href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">set_broadcasted</a>(d);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> broadcastWin;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">  133</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">Window::shift</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> shift_value)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;d = _dims[dimension];</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    d                    = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() + shift_value, d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() + shift_value, d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>());</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">  140</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">Window::adjust</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> adjust_value, <span class="keywordtype">bool</span> is_at_start)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;d = _dims[dimension];</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span>(is_at_start)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        d = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() + adjust_value, d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>());</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        d = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() + adjust_value, d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>());</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">  155</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">Window::scale</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">float</span> scale_value)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp;d            = _dims[dimension];</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_step  = d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * scale_value;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_start = d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * scale_value;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_diff  = (d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - d.<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()) * scale_value;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_end   = scaled_start + <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(scaled_diff, scaled_step);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    d = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(scaled_start, scaled_end, scaled_step);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">  167</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">Window::set_dimension_step</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    _dims[dimension].set_step(step);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">  173</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">Window::validate</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_dims[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() &lt; _dims[i].start());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((_dims[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() != 0) &amp;&amp; (((_dims[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - _dims[i].start()) % _dims[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>()) != 0));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">  182</a></span>&#160;<span class="keyword">inline</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">Window::num_iterations</a>(<span class="keywordtype">size_t</span> dimension)<span class="keyword"> const</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Precondition: (end - start) % step == 0</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> (_dims.at(dimension).end() - _dims.at(dimension).start()) / _dims.at(dimension).step();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">  189</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">Window::split_window</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">size_t</span> <span class="keywordtype">id</span>, <span class="keywordtype">size_t</span> total)<span class="keyword"> const</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keywordtype">id</span> &gt;= total);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> out;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">if</span>(d == dimension)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordtype">int</span>       start = _dims[d].start();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = _dims[d].end();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>  = _dims[d].step();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_it = <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(d);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> rem    = num_it % total;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordtype">int</span>       work   = num_it / total;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordtype">int</span> it_start = work * id;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">int</span>(<span class="keywordtype">id</span>) &lt; rem)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                ++work;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                it_start += id;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                it_start += rem;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            start += it_start * <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            end = std::min(end, start + work * step);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>(start, end, step));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, _dims[d]);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_dimension&gt;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> Window::slide_window_slice(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = window_dimension; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="comment">// Did we reach the end of this dimension?</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> v = slice._dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start() + 1;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">if</span>(v &lt; _dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>())</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="comment">// No: increment</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            slice._dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>] = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>(v, v + 1, 1);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="comment">// Reset lower dimensions:</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lower = window_dimension; lower &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>; ++lower)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                slice._dims[lower] = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>(_dims[lower].start(), _dims[lower].start() + 1, 1);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// It was the last slice</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">// Iteration over</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_dimension&gt;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>          Window::first_slice_window()<span class="keyword"> const</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::copy_n(_dims.begin(), window_dimension, slice._dims.begin());</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">//Initialise higher dimensions to be the first slice.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = window_dimension; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        slice._dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>] = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>(_dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start(), _dims[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>].start() + 1, 1);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">  276</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">Window::use_tensor_dimensions</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>, <span class="keywordtype">size_t</span> first_dimension)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = first_dimension; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keyword">set</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, std::max(shape[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>], static_cast&lt;size_t&gt;(1))));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">  284</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">Window::shape</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(d, (_dims[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - _dims[d].start()) / _dims[d].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>());</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">  294</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">Window::num_iterations_total</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">size_t</span> total = 1;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        total *= <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(d);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> total;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">  304</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">swap</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    lhs._dims.swap(rhs._dims);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6219039d80bc268a78900b9edb6381f2">  309</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">return</span> (lhs._dims == rhs._dims) &amp;&amp; (lhs._is_broadcasted == rhs._is_broadcasted);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_window_xhtml_a5e8e5ab06329702df09ab7eb07e9b84d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">arm_compute::Window::scale</a></div><div class="ttdeci">void scale(size_t dimension, float scale_value)</div><div class="ttdoc">Scale the values of a given dimension by the given scale_value. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00155">Window.inl:155</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ae688f3eb6c2673216d12d5490e1e88dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">arm_compute::Window::shift</a></div><div class="ttdeci">void shift(size_t dimension, int shift_value)</div><div class="ttdoc">Shift the values of a given dimension by the given shift_value. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00133">Window.inl:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00107">Window.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ae181d6e147a7230d02611fb9077959f0"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">arm_compute::Window::swap</a></div><div class="ttdeci">friend void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdoc">Friend function that swaps the contents of two windows. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00304">Window.inl:304</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a97b2f08fa5b45ffc8dcde9c01adee28f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">arm_compute::Window::operator==</a></div><div class="ttdeci">friend bool operator==(const Window &amp;lhs, const Window &amp;rhs)</div><div class="ttdoc">Check whether two Windows are equal. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00309">Window.inl:309</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad82ac0dcf7e7a862a3b73f1be3ca98f1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">arm_compute::Window::split_window</a></div><div class="ttdeci">Window split_window(size_t dimension, size_t id, size_t total) const</div><div class="ttdoc">Split a window into a set of sub windows along a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00189">Window.inl:189</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">arm_compute::Window::validate</a></div><div class="ttdeci">void validate() const</div><div class="ttdoc">Will validate all the window&amp;#39;s dimensions&amp;#39; values when asserts are enabled. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00173">Window.inl:173</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00182">Window.inl:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor&amp;#39;s dimensions to fill the window dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00276">Window.inl:276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_af6303f954929d2bdac13a4712ecf9711"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">arm_compute::Window::collapse</a></div><div class="ttdeci">Window collapse(const Window &amp;full_window, size_t first, size_t last=Coordinates::num_max_dimensions) const</div><div class="ttdoc">Collapse the dimensions between first and last. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00111">Window.inl:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a663ce71e1992366180fcb85b0a874e2f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions between first and last if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00068">Window.inl:68</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00071">Utils.h:71</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a920f28ad2a867b3a6c0fa538a5183e11"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">arm_compute::Window::operator=</a></div><div class="ttdeci">Window &amp; operator=(const Window &amp;rhs)</div><div class="ttdoc">Copy assignment operator. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00036">Window.inl:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ac13b9cd31178cde1e6b25302d619ea05"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">arm_compute::Window::operator[]</a></div><div class="ttdeci">constexpr const Dimension &amp; operator[](size_t dimension) const</div><div class="ttdoc">Read only access to a given dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00043">Window.inl:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ab242a9d3683ac8f480f7944ff6f40534"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">arm_compute::Window::Window</a></div><div class="ttdeci">constexpr Window()</div><div class="ttdoc">Default constructor: create a window containing a single element. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00054">Window.h:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ae20ec28555d4473419cae37cf120f35d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const TensorShape &amp;shape) const</div><div class="ttdoc">Don&amp;#39;t advance in the dimension where shape is less equal to 1. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00120">Window.inl:120</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a6e77b72655c2e465435a83497961bdcb"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">arm_compute::Window::is_broadcasted</a></div><div class="ttdeci">bool is_broadcasted(size_t dimension) const</div><div class="ttdoc">Return whether a dimension has been broadcasted. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00062">Window.inl:62</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a55ed4ad2395fd25ba847cbf6c54b85e4"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">arm_compute::Window::set_dimension_step</a></div><div class="ttdeci">void set_dimension_step(size_t dimension, int step)</div><div class="ttdoc">Set the step of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00167">Window.inl:167</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_abfa164a379c0c401a662792d7d0ccfba"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">arm_compute::Window::shape</a></div><div class="ttdeci">TensorShape shape() const</div><div class="ttdoc">Return the shape of the window in number of steps. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00284">Window.inl:284</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00102">Window.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a69496c7cb46a4101813d7456a6bd097b"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">arm_compute::Window::adjust</a></div><div class="ttdeci">void adjust(size_t dimension, int adjust_value, bool is_at_start)</div><div class="ttdoc">Adjust the start or end of a given dimension by the given value. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00140">Window.inl:140</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a29b98c579478c77b57c0f75c92bd647e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">arm_compute::Window::set_broadcasted</a></div><div class="ttdeci">void set_broadcasted(size_t dimension)</div><div class="ttdoc">Set the dimension as broadcasted dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00055">Window.inl:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a0654fca130488c15b4b66a9b7131c142"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">arm_compute::Window::num_iterations_total</a></div><div class="ttdeci">size_t num_iterations_total() const</div><div class="ttdoc">Return the total number of iterations needed to iterate through the entire window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00294">Window.inl:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00079">TensorShape.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a02d0a4c2898a6eb2ca7706c811b0ce81"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a02d0a4c2898a6eb2ca7706c811b0ce81">arm_compute::Window::shift_dimensions</a></div><div class="ttdeci">Window shift_dimensions(unsigned int shift_value) const</div><div class="ttdoc">Shift down all the dimensions of a window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00101">Window.inl:101</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a548131b3d37da47a2e9d32111c88dfe1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">arm_compute::test::validation::reference::slice</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; slice(const SimpleTensor&lt; T &gt; &amp;src, Coordinates starts, Coordinates ends)</div><div class="ttdef"><b>Definition:</b> <a href="_slice_operations_8cpp_source.xhtml#l00038">SliceOperations.cpp:38</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="_window_8inl.xhtml">Window.inl</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:42 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
