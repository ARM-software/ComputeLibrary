<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::graph::detail Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1graph_1_1detail.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::graph::detail Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa94e771d284b85d820f94b797eecee98"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa94e771d284b85d820f94b797eecee98">configure_transition_manager</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:aa94e771d284b85d820f94b797eecee98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures transition manager and execution workload.  <a href="#aa94e771d284b85d820f94b797eecee98">More...</a><br /></td></tr>
<tr class="separator:aa94e771d284b85d820f94b797eecee98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1d326a80e16fe0d4034637672d3b122"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa1d326a80e16fe0d4034637672d3b122">validate_all_nodes</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:aa1d326a80e16fe0d4034637672d3b122"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates all nodes.  <a href="#aa1d326a80e16fe0d4034637672d3b122">More...</a><br /></td></tr>
<tr class="separator:aa1d326a80e16fe0d4034637672d3b122"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a68c7ebb89adc0c2b21449cd15f6e8eba">configure_all_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures all nodes of a graph.  <a href="#a68c7ebb89adc0c2b21449cd15f6e8eba">More...</a><br /></td></tr>
<tr class="separator:a68c7ebb89adc0c2b21449cd15f6e8eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4312e5b00714a9de04fc54d2a5dcc119"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:a4312e5b00714a9de04fc54d2a5dcc119"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all input tensors of a node.  <a href="#a4312e5b00714a9de04fc54d2a5dcc119">More...</a><br /></td></tr>
<tr class="separator:a4312e5b00714a9de04fc54d2a5dcc119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa39e0698b2de495c235129b12fa39b08"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:aa39e0698b2de495c235129b12fa39b08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all output tensors of a node.  <a href="#aa39e0698b2de495c235129b12fa39b08">More...</a><br /></td></tr>
<tr class="separator:aa39e0698b2de495c235129b12fa39b08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef7cb28de6aea7026a1e8572639f300"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a3ef7cb28de6aea7026a1e8572639f300">allocate_const_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a3ef7cb28de6aea7026a1e8572639f300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates const tensor of a given graph.  <a href="#a3ef7cb28de6aea7026a1e8572639f300">More...</a><br /></td></tr>
<tr class="separator:a3ef7cb28de6aea7026a1e8572639f300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a766bb5055ef388455c941869b32981ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a766bb5055ef388455c941869b32981ed">allocate_all_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a766bb5055ef388455c941869b32981ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates all tensors of a graph.  <a href="#a766bb5055ef388455c941869b32981ed">More...</a><br /></td></tr>
<tr class="separator:a766bb5055ef388455c941869b32981ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82d07d3d612bee8ff703226ff9d5d452"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a82d07d3d612bee8ff703226ff9d5d452">configure_all_nodes</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;node_order)</td></tr>
<tr class="memdesc:a82d07d3d612bee8ff703226ff9d5d452"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures all nodes of graph.  <a href="#a82d07d3d612bee8ff703226ff9d5d452">More...</a><br /></td></tr>
<tr class="separator:a82d07d3d612bee8ff703226ff9d5d452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Release the memory of all unused const nodes.  <a href="#a28280ac6b0db4c2385ac8c18a4ad8f3c">More...</a><br /></td></tr>
<tr class="separator:a28280ac6b0db4c2385ac8c18a4ad8f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls accessor of a given tensor.  <a href="#aa2dc91a4b4f5ad19935984344f1b67a1">More...</a><br /></td></tr>
<tr class="separator:aa2dc91a4b4f5ad19935984344f1b67a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f2e226c8b1e478b0162c3d9327b032e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f2e226c8b1e478b0162c3d9327b032e">call_all_const_node_accessors</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a6f2e226c8b1e478b0162c3d9327b032e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all const node accessors.  <a href="#a6f2e226c8b1e478b0162c3d9327b032e">More...</a><br /></td></tr>
<tr class="separator:a6f2e226c8b1e478b0162c3d9327b032e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff00463fb88bf00a886e0ecef6c0b6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#adff00463fb88bf00a886e0ecef6c0b6a">call_all_input_node_accessors</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:adff00463fb88bf00a886e0ecef6c0b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all input node accessors.  <a href="#adff00463fb88bf00a886e0ecef6c0b6a">More...</a><br /></td></tr>
<tr class="separator:adff00463fb88bf00a886e0ecef6c0b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aaf7f4e1e2142802dd1c5a983ee156e77">call_all_output_node_accessors</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all output node accessors.  <a href="#aaf7f4e1e2142802dd1c5a983ee156e77">More...</a><br /></td></tr>
<tr class="separator:aaf7f4e1e2142802dd1c5a983ee156e77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a17b5e700b317feb19fc3cefd23a1d8bb">prepare_all_tasks</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares all tasks for execution.  <a href="#a17b5e700b317feb19fc3cefd23a1d8bb">More...</a><br /></td></tr>
<tr class="separator:a17b5e700b317feb19fc3cefd23a1d8bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7641ee3c6374e97c597ce6ee05545b59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a7641ee3c6374e97c597ce6ee05545b59">call_all_tasks</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</td></tr>
<tr class="memdesc:a7641ee3c6374e97c597ce6ee05545b59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes all tasks of a workload.  <a href="#a7641ee3c6374e97c597ce6ee05545b59">More...</a><br /></td></tr>
<tr class="separator:a7641ee3c6374e97c597ce6ee05545b59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae668406fdc43b21e5dcb3904fa683ea0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">all_inputs_are_visited</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node, const std::vector&lt; bool &gt; &amp;visited)</td></tr>
<tr class="memdesc:ae668406fdc43b21e5dcb3904fa683ea0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if all the input dependencies of a node have been visited.  <a href="#ae668406fdc43b21e5dcb3904fa683ea0">More...</a><br /></td></tr>
<tr class="separator:ae668406fdc43b21e5dcb3904fa683ea0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ca8a59006fbe004a4c2e9267c14263"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *new_node, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *old_node, bool add_output_tensor)</td></tr>
<tr class="separator:ad8ca8a59006fbe004a4c2e9267c14263"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501484d2b5f0213bbede4f44471c148b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">fuse_convolution_with_batch_normalization</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</td></tr>
<tr class="separator:a501484d2b5f0213bbede4f44471c148b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07811ee0f5c19da2658a647e6d7dc2fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">fuse_depthwise_convolution_with_batch_normalization</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</td></tr>
<tr class="separator:a07811ee0f5c19da2658a647e6d7dc2fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memTemplParams" colspan="2">template&lt;typename N &gt; </td></tr>
<tr class="memitem:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a36b5b67e26dfdfbedf39e6703ef059bd">fuse_node_with_activation</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;supported_fused_activations)</td></tr>
<tr class="separator:a36b5b67e26dfdfbedf39e6703ef059bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace556aabec6b58080b5faec2e0afb885"><td class="memTemplParams" colspan="2">template&lt;typename N &gt; </td></tr>
<tr class="memitem:ace556aabec6b58080b5faec2e0afb885"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ace556aabec6b58080b5faec2e0afb885">fuse_pad_with_convolution</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</td></tr>
<tr class="separator:ace556aabec6b58080b5faec2e0afb885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9900d626af4230ff61f851e8d5eab5"><td class="memTemplParams" colspan="2">template&lt;typename N1 , typename N2 , typename F , typename... Args&gt; </td></tr>
<tr class="memitem:a1f9900d626af4230ff61f851e8d5eab5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">fuse_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;prec, const F fuse_fcn, Args &amp;&amp;... optional_arguments)</td></tr>
<tr class="separator:a1f9900d626af4230ff61f851e8d5eab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f095b69d7dacb7ea9faab4c9dcc0126"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">check_post_op_type</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> *post_op_type, int len)</td></tr>
<tr class="separator:a6f095b69d7dacb7ea9faab4c9dcc0126"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf519e224ead91674501c93418dfb674"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#acf519e224ead91674501c93418dfb674">fuse_convolution_with_post_op</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *fused_node, std::list&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&gt; post_op_node_list, int prev_op_dst_pos)</td></tr>
<tr class="separator:acf519e224ead91674501c93418dfb674"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac30f73c1ed95e75d4ff1e68b3f0bdbbe"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, int &amp;eltwise_operand_id, int &amp;prev_op_dst_pos, unsigned int conv_node_id, const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;supported_fused_activations)</td></tr>
<tr class="separator:ac30f73c1ed95e75d4ff1e68b3f0bdbbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7fd3d9360e3103b4d73957882171edf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac7fd3d9360e3103b4d73957882171edf">fuse_convolution_with_post_ops</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, unsigned int conv_node_id, const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;supported_fused_activations)</td></tr>
<tr class="memdesc:ac7fd3d9360e3103b4d73957882171edf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fuse below operators:  <a href="#ac7fd3d9360e3103b4d73957882171edf">More...</a><br /></td></tr>
<tr class="separator:ac7fd3d9360e3103b4d73957882171edf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b1901e17bde1eedfd8fb289dffe66d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a0b1901e17bde1eedfd8fb289dffe66d6">fuse_convolution_batch_normalization_with_post_ops</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, unsigned int conv_node_id, const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;supported_fused_activations)</td></tr>
<tr class="separator:a0b1901e17bde1eedfd8fb289dffe66d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e3001563d5668f924ef151fc1606357"><td class="memTemplParams" colspan="2">template&lt;typename N1 , typename F , typename... Args&gt; </td></tr>
<tr class="memitem:a5e3001563d5668f924ef151fc1606357"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5e3001563d5668f924ef151fc1606357">fuse_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;prec, const F fuse_fcn, Args &amp;&amp;... optional_arguments)</td></tr>
<tr class="separator:a5e3001563d5668f924ef151fc1606357"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a5821263ab45591eb3b83e3ca3bb1f7ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">valide_post_op_type</a> [4][3]</td></tr>
<tr class="separator:a5821263ab45591eb3b83e3ca3bb1f7ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ae668406fdc43b21e5dcb3904fa683ea0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae668406fdc43b21e5dcb3904fa683ea0">&#9670;&nbsp;</a></span>all_inputs_are_visited()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::graph::detail::all_inputs_are_visited </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>visited</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if all the input dependencies of a node have been visited. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">visited</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> that contains the visited information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all inputs dependencies have been visited else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_topological_sort_8cpp_source.xhtml">TopologicalSort.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00113">INode::graph()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00128">INode::input_edges()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, and <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, and <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">arm_compute::graph::dfs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> Graph *graph = node-&gt;graph();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(graph == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">bool</span> are_all_visited = <span class="keyword">true</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;input_edge_id : node-&gt;input_edges())</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span>(input_edge_id != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">const</span> Edge *input_edge = graph-&gt;edge(input_edge_id);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge-&gt;producer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">if</span>(!visited[input_edge-&gt;producer_id()])</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                are_all_visited = <span class="keyword">false</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> are_all_visited;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4312e5b00714a9de04fc54d2a5dcc119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4312e5b00714a9de04fc54d2a5dcc119">&#9670;&nbsp;</a></span>allocate_all_input_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_input_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all input tensors of a node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to allocate the input tensor of </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">ITensorHandle::allocate()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00119">Tensor::bound_edges()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00151">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00179">INode::num_inputs()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">allocate_const_tensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_inputs(); ++i)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = node.input(i);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;bound_edges().empty())</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;handle(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            tensor-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa39e0698b2de495c235129b12fa39b08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa39e0698b2de495c235129b12fa39b08">&#9670;&nbsp;</a></span>allocate_all_output_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_output_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all output tensors of a node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to allocate the output tensor of </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#aa8a4946cd749d482dd996874d295af85">ITensorHandle::allocate()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00119">Tensor::bound_edges()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00184">INode::num_outputs()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00159">INode::output()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">allocate_const_tensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_outputs(); ++i)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = node.output(i);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; !tensor-&gt;bound_edges().empty())</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!tensor-&gt;handle(), <span class="stringliteral">&quot;Tensor handle is not configured!&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            tensor-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a766bb5055ef388455c941869b32981ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a766bb5055ef388455c941869b32981ed">&#9670;&nbsp;</a></span>allocate_all_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_all_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates all tensors of a graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to allocate the tensors </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.tensors();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> &amp;&amp; !<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;bound_edges().empty() &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;tensor().info()-&gt;is_resizable() &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;tensor().is_used())</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;allocate();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3ef7cb28de6aea7026a1e8572639f300"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ef7cb28de6aea7026a1e8572639f300">&#9670;&nbsp;</a></span>allocate_const_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void allocate_const_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates const tensor of a given graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to allocate the tensors </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00073">allocate_all_input_tensors()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00086">allocate_all_output_tensors()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::Const</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::Input</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.nodes())</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">switch</span>(node-&gt;type())</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> NodeType::Const:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">case</span> NodeType::Input:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">allocate_all_output_tensors</a>(*node);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">case</span> NodeType::Output:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">allocate_all_input_tensors</a>(*node);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a4312e5b00714a9de04fc54d2a5dcc119"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a4312e5b00714a9de04fc54d2a5dcc119">arm_compute::graph::detail::allocate_all_input_tensors</a></div><div class="ttdeci">void allocate_all_input_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all input tensors of a node. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00073">ExecutionHelpers.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa39e0698b2de495c235129b12fa39b08"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa39e0698b2de495c235129b12fa39b08">arm_compute::graph::detail::allocate_all_output_tensors</a></div><div class="ttdeci">void allocate_all_output_tensors(INode &amp;node)</div><div class="ttdoc">Allocates all output tensors of a node. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00086">ExecutionHelpers.cpp:86</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f2e226c8b1e478b0162c3d9327b032e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f2e226c8b1e478b0162c3d9327b032e">&#9670;&nbsp;</a></span>call_all_const_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_all_const_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all const node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> containing the const nodes </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00187">call_tensor_accessor()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::Const</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Const &amp;&amp; node-&gt;num_outputs())</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">if</span>(!node-&gt;output(0)-&gt;bound_edges().empty())</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">call_tensor_accessor</a>(node-&gt;output(0));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_aa2dc91a4b4f5ad19935984344f1b67a1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa2dc91a4b4f5ad19935984344f1b67a1">arm_compute::graph::detail::call_tensor_accessor</a></div><div class="ttdeci">void call_tensor_accessor(Tensor *tensor)</div><div class="ttdoc">Calls accessor of a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00187">ExecutionHelpers.cpp:187</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adff00463fb88bf00a886e0ecef6c0b6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adff00463fb88bf00a886e0ecef6c0b6a">&#9670;&nbsp;</a></span>call_all_input_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool call_all_input_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all input node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all the accesses were valid </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>, <a class="el" href="_workload_8h_source.xhtml#l00100">ExecutionWorkload::inputs</a>, and <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00166">arm_compute::test::validation::is_valid</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00125">GraphManager::execute_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.inputs), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(workload.inputs), [&amp;](Tensor * input_tensor)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        bool valid_input = (input_tensor != nullptr) &amp;&amp; input_tensor-&gt;call_accessor();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        is_valid         = is_valid &amp;&amp; valid_input;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    });</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b1d0df736739f38994ed29f54cffdf3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">arm_compute::test::validation::is_valid</a></div><div class="ttdeci">bool is_valid</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00166">DirectConv2d.cpp:166</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaf7f4e1e2142802dd1c5a983ee156e77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf7f4e1e2142802dd1c5a983ee156e77">&#9670;&nbsp;</a></span>call_all_output_node_accessors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool call_all_output_node_accessors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call all output node accessors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if all the accessors expect more data </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00259">259</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00166">arm_compute::test::validation::is_valid</a>, <a class="el" href="_workload_8h_source.xhtml#l00101">ExecutionWorkload::outputs</a>, and <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00119">arm_compute::graph::sync_backends()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00125">GraphManager::execute_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(workload.outputs), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(workload.outputs), [&amp;](Tensor * output_tensor)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        bool valid_output = (output_tensor != nullptr) &amp;&amp; output_tensor-&gt;call_accessor();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        is_valid          = is_valid &amp;&amp; valid_output;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    });</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">sync_backends</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ae8f18192b411ffc62fdd293f908b4c78"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">arm_compute::graph::sync_backends</a></div><div class="ttdeci">void sync_backends()</div><div class="ttdoc">Synchronize kernels execution on the backends. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00119">Utils.cpp:119</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b1d0df736739f38994ed29f54cffdf3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">arm_compute::test::validation::is_valid</a></div><div class="ttdeci">bool is_valid</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00166">DirectConv2d.cpp:166</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7641ee3c6374e97c597ce6ee05545b59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7641ee3c6374e97c597ce6ee05545b59">&#9670;&nbsp;</a></span>call_all_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_all_tasks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes all tasks of a workload. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to execute </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00230">230</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_workload_8h_source.xhtml#l00104">ExecutionWorkload::ctx</a>, <a class="el" href="_graph_context_8cpp_source.xhtml#l00073">GraphContext::memory_managers()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00125">GraphManager::execute_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.ctx == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Acquire memory for the transition buffers</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.ctx-&gt;memory_managers())</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            mm_ctx.second.cross_group-&gt;acquire();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Execute tasks</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        task();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Release memory for the transition buffers</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;mm_ctx : workload.ctx-&gt;memory_managers())</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span>(mm_ctx.second.cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            mm_ctx.second.cross_group-&gt;release();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2dc91a4b4f5ad19935984344f1b67a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2dc91a4b4f5ad19935984344f1b67a1">&#9670;&nbsp;</a></span>call_tensor_accessor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void call_tensor_accessor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calls accessor of a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The tensor of which the accessor should be called </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00187">187</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00075">Tensor::call_accessor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00193">call_all_const_node_accessors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;call_accessor();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f095b69d7dacb7ea9faab4c9dcc0126"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f095b69d7dacb7ea9faab4c9dcc0126">&#9670;&nbsp;</a></span>check_post_op_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::graph::detail::check_post_op_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> *&#160;</td>
          <td class="paramname"><em>post_op_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00353">353</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00346">MAX_POST_OP_NUM</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00345">MAX_VALIDE_COMBINATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00424">get_post_op_list()</a>.</p>
<div class="fragment"><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span>(len &gt; <a class="code" href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">MAX_POST_OP_NUM</a> || len &lt;= 0)</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">MAX_VALIDE_COMBINATION</a>; ++i)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; len; ++j)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="keywordflow">if</span>(post_op_type[j] != <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">valide_post_op_type</a>[i][j])</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                found = <span class="keyword">false</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            found = <span class="keyword">true</span>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">if</span>(found)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> found;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a5821263ab45591eb3b83e3ca3bb1f7ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">arm_compute::graph::detail::valide_post_op_type</a></div><div class="ttdeci">NodeType valide_post_op_type[4][3]</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00347">NodeFusionMutator.cpp:347</a></div></div>
<div class="ttc" id="_node_fusion_mutator_8cpp_xhtml_a55a63cf1075ff030f88b9df317adf315"><div class="ttname"><a href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">MAX_POST_OP_NUM</a></div><div class="ttdeci">#define MAX_POST_OP_NUM</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00346">NodeFusionMutator.cpp:346</a></div></div>
<div class="ttc" id="_node_fusion_mutator_8cpp_xhtml_a84e62cde71a052f7bac9f037b20a77d7"><div class="ttname"><a href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">MAX_VALIDE_COMBINATION</a></div><div class="ttdeci">#define MAX_VALIDE_COMBINATION</div><div class="ttdoc">Check valid combinations: </div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00345">NodeFusionMutator.cpp:345</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a82d07d3d612bee8ff703226ff9d5d452"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82d07d3d612bee8ff703226ff9d5d452">&#9670;&nbsp;</a></span>configure_all_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> configure_all_nodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>node_order</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures all nodes of graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to configure the nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> context to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">node_order</td><td>The order to configure the nodes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The execution workload </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_i_node_8cpp_source.xhtml#l00199">INode::assigned_target()</a>, <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af989fb4cdd6783b776e6b3feceb9fdcb">IDeviceBackend::configure_node()</a>, <a class="el" href="_workload_8h_source.xhtml#l00104">ExecutionWorkload::ctx</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="_workload_8h_source.xhtml#l00103">ExecutionWorkload::graph</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::Input</a>, <a class="el" href="_workload_8h_source.xhtml#l00100">ExecutionWorkload::inputs</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">arm_compute::graph::is_utility_node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::Output</a>, <a class="el" href="_workload_8h_source.xhtml#l00101">ExecutionWorkload::outputs</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ExecutionWorkload workload;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    workload.graph = &amp;g;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    workload.ctx   = &amp;ctx;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Reserve memory for tasks</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    workload.tasks.reserve(node_order.size());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node_id : node_order)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">auto</span> node = g.node(node_id);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                     assigned_target = node-&gt;assigned_target();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            backends::IDeviceBackend &amp;backend         = backends::BackendRegistry::get().get_backend(assigned_target);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            std::unique_ptr&lt;IFunction&gt; func            = backend.configure_node(*node, ctx);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span>(func != <span class="keyword">nullptr</span> || <a class="code" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a>(node))</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                workload.tasks.emplace_back(ExecutionTask(std::move(func), node));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Add inputs and outputs</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : g.nodes())</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Input)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            workload.inputs.push_back(node-&gt;output(0));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;type() == NodeType::Output)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            workload.outputs.push_back(node-&gt;input(0));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> workload;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_adaf571380533c75338da47ba3a68c199"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">arm_compute::graph::is_utility_node</a></div><div class="ttdeci">bool is_utility_node(INode *node)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">Utils.h:37</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a68c7ebb89adc0c2b21449cd15f6e8eba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c7ebb89adc0c2b21449cd15f6e8eba">&#9670;&nbsp;</a></span>configure_all_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure_all_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures all nodes of a graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">IDeviceBackend::create_tensor()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.tensors();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                         target  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc().target;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            backends::IDeviceBackend      &amp;backend = backends::BackendRegistry::get().get_backend(target);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            std::unique_ptr&lt;ITensorHandle&gt; handle  = backend.create_tensor(*<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!handle, <span class="stringliteral">&quot;Couldn&#39;t create backend handle!&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;set_handle(std::move(handle));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa94e771d284b85d820f94b797eecee98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa94e771d284b85d820f94b797eecee98">&#9670;&nbsp;</a></span>configure_transition_manager()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure_transition_manager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures transition manager and execution workload. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to configure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> context </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml">CrossLayerMemoryManagerHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_context_8h_source.xhtml#l00045">MemoryManagerContext::cross_group</a>, <a class="el" href="_graph_context_8h_source.xhtml#l00044">MemoryManagerContext::cross_mm</a>, <a class="el" href="_graph_context_8cpp_source.xhtml#l00068">GraphContext::memory_management_ctx()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Get const tensors (un-managed)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    std::set&lt;ITensorHandle *&gt; const_tensors = get_const_handles(g);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::vector&lt;TaskHandles&gt; tasks_handles;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    TargetHandleCounter      target_handle_count;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Count handles</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// Populates IO handles</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        tasks_handles.push_back(get_transition_handles(ctx, task, const_tensors));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// Count handles</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        count_input_handles_per_target(tasks_handles.back(), target_handle_count);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Setup memory managers</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;hc : target_handle_count)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        MemoryManagerContext *mm_ctx = ctx.memory_management_ctx(hc.first);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span>(mm_ctx != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span>(mm_ctx-&gt;cross_mm != <span class="keyword">nullptr</span> &amp;&amp; mm_ctx-&gt;cross_group != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="comment">// Manage and allocate tensors</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                configure_handle_lifetime(tasks_handles, hc.second);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0b1901e17bde1eedfd8fb289dffe66d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b1901e17bde1eedfd8fb289dffe66d6">&#9670;&nbsp;</a></span>fuse_convolution_batch_normalization_with_post_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_convolution_batch_normalization_with_post_ops </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conv_node_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>supported_fused_activations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">640</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">arm_compute::test::validation::conv_info</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">arm_compute::test::validation::data_layout</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00110">TensorDescriptor::data_type</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">arm_compute::test::validation::data_type</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">arm_compute::graph::EltwiseLayer</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">arm_compute::quantization::epsilon</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00379">fuse_convolution_with_post_op()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::GEMM</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00424">get_post_op_list()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">arm_compute::is_data_type_float()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor::layout</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">arm_compute::N1</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00272">NodeParams::name</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">arm_compute::test::validation::num_groups</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00072">INode::set_assigned_target()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor::shape</a>, <a class="el" href="_edge_8h_source.xhtml#l00116">Edge::tensor()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00092">Dimensions&lt; T &gt;::y()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00097">Dimensions&lt; T &gt;::z()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00805">NodeFusionMutator::mutate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;FusedConvolutionBatchNormalizationNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(conv_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm != <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">ConvolutionMethod::GEMM</a>)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    {</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="comment">// If data type is FP32/FP16, data layout is NHWC, and filter size is 1x1, fuse convolution with post op, as Conv1x1 always leads to GEMM.</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keyword">const</span> Edge *input_edge = conv_node-&gt;input_edge(1);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;tensor() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>  = input_edge-&gt;tensor()-&gt;desc().layout;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>    = input_edge-&gt;tensor()-&gt;desc().data_type;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            <span class="keyword">const</span> TensorShape tensor_shape = input_edge-&gt;tensor()-&gt;desc().shape;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keywordflow">if</span>((data_layout != DataLayout::NHWC) || (<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(data_type) == <span class="keyword">false</span>) || (tensor_shape.y() != 1) || (tensor_shape.z() != 1))</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="comment">// Get post op list</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <span class="keywordtype">int</span>                eltwise_operand_id = 0;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordtype">int</span>                prev_op_dst_pos    = 0; <span class="comment">// Previous operator dst&#39;s postion in current operator</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        std::list&lt;INode *&gt; post_op_node_list  = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a>(g, eltwise_operand_id, prev_op_dst_pos, conv_node_id, supported_fused_activations);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">if</span>(post_op_node_list.size() == 0)</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        {</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">else</span> <span class="comment">// Do convolution fusion with post op if there&#39;re one(elementwise), two or more operators</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   bn_mean_id      = conv_node-&gt;input_edge(3)-&gt;producer_id();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   bn_var_id       = conv_node-&gt;input_edge(4)-&gt;producer_id();</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>  <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>  = conv_node-&gt;epsilon();</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedConvolutionBatchNormalizationWithPostOpsNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing FusedConvolutionBatchNormalization node with ID : &quot;</span> &lt;&lt; conv_node-&gt;id());</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            <span class="comment">// Add connections from the conv inputs to the fused node</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            g.add_connection(conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            {</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            g.add_connection(bn_mean_id, 0, fused_id, 3);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            g.add_connection(bn_var_id, 0, fused_id, 4);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="comment">// Move connections of old FusedConvolutionBatchNormalization to the fused node</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(5) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id = conv_node-&gt;input_edge(5)-&gt;producer_id();</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                g.add_connection(bn_beta_id, 0, fused_id, 5);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            }</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(6) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = conv_node-&gt;input_edge(6)-&gt;producer_id();</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                g.add_connection(bn_gamma_id, 0, fused_id, 6);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="comment">// Adding the Element wise operand in case the post op is element wise operation</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keyword">auto</span> it = std::find_if(post_op_node_list.begin(),</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                                   post_op_node_list.end(),</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                   [&amp;](<span class="keyword">const</span> INode * nd)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                <span class="keywordflow">return</span> (nd-&gt;type() == graph::NodeType::EltwiseLayer);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            });</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">if</span>(it != post_op_node_list.end())</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                g.add_connection(eltwise_operand_id, 0, fused_id, 7);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keyword">auto</span> fused_node = g.node(fused_id);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keyword">auto</span> conv_node_name = conv_node-&gt;name();</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="comment">// collect the post ops names</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            std::string post_ops_name = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;post_op : post_op_node_list)</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                post_ops_name += post_op-&gt;name();</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            fused_node-&gt;set_common_node_parameters(NodeParams{ conv_node-&gt;name() + <span class="stringliteral">&quot;+&quot;</span> + post_ops_name, assigned_target });</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <span class="comment">// Fuse convolution with post op</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#acf519e224ead91674501c93418dfb674">fuse_convolution_with_post_op</a>(g, fused_node, post_op_node_list, prev_op_dst_pos);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            post_op_node_list.clear();</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            g.remove_node(conv_node-&gt;id());</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(std::endl);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        }</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    }</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00485">Acl.hpp:485</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ac30f73c1ed95e75d4ff1e68b3f0bdbbe"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">arm_compute::graph::detail::get_post_op_list</a></div><div class="ttdeci">std::list&lt; INode * &gt; get_post_op_list(Graph &amp;g, int &amp;eltwise_operand_id, int &amp;prev_op_dst_pos, unsigned int conv_node_id, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00424">NodeFusionMutator.cpp:424</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00143">Types.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdoc">GEMM CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_acf519e224ead91674501c93418dfb674"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#acf519e224ead91674501c93418dfb674">arm_compute::graph::detail::fuse_convolution_with_post_op</a></div><div class="ttdeci">void fuse_convolution_with_post_op(Graph &amp;g, INode *fused_node, std::list&lt; INode *&gt; post_op_node_list, int prev_op_dst_pos)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00379">NodeFusionMutator.cpp:379</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">Utils.h:1010</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a501484d2b5f0213bbede4f44471c148b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501484d2b5f0213bbede4f44471c148b">&#9670;&nbsp;</a></span>fuse_convolution_with_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_convolution_with_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00082">82</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">arm_compute::test::validation::conv_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">arm_compute::quantization::epsilon</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00172">INode::input_edge()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00108">INode::name()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00272">NodeParams::name</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">arm_compute::test::validation::num_groups</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">transfer_driving_nodes_and_remove_old_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00805">NodeFusionMutator::mutate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">auto</span> *bn_node   = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Not fusing if number of groups is greater than 1</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;num_groups() &gt; 1)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>        = bn_node-&gt;fused_activation();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// Extract bn inputs</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id = bn_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id  = bn_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = bn_node-&gt;epsilon();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedConvolutionBatchNormalizationNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        g.add_connection(conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        g.add_connection(bn_mean_id, 0, fused_id, 3);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        g.add_connection(bn_var_id, 0, fused_id, 4);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(3) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id = bn_node-&gt;input_edge(3)-&gt;producer_id();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            g.add_connection(bn_beta_id, 0, fused_id, 5);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(4) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            g.add_connection(bn_gamma_id, 0, fused_id, 6);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">auto</span> fused_node   = g.node(fused_id);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">auto</span> bn_node_name = bn_node-&gt;name();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, bn_node, <span class="keyword">true</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        fused_node-&gt;set_common_node_parameters(NodeParams{ conv_node-&gt;name() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Remove convolution node</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        g.remove_node(conv_node-&gt;id());</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ad8ca8a59006fbe004a4c2e9267c14263"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node</a></div><div class="ttdeci">void transfer_driving_nodes_and_remove_old_node(Graph &amp;g, INode *new_node, INode *old_node, bool add_output_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00048">NodeFusionMutator.cpp:48</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00143">Types.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acf519e224ead91674501c93418dfb674"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf519e224ead91674501c93418dfb674">&#9670;&nbsp;</a></span>fuse_convolution_with_post_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_convolution_with_post_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>fused_node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&gt;&#160;</td>
          <td class="paramname"><em>post_op_node_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev_op_dst_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00379">379</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_activation_layer_node_8h_source.xhtml#l00057">ActivationLayerNode::node_type</a>, <a class="el" href="_eltwise_layer_node_8h_source.xhtml#l00084">EltwiseLayerNode::node_type</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00204">INode::post_op_info_list()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">transfer_driving_nodes_and_remove_old_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">fuse_convolution_batch_normalization_with_post_ops()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00541">fuse_convolution_with_post_ops()</a>.</p>
<div class="fragment"><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;{</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> op_idx = 0;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// Fuse post operators with conv</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op : post_op_node_list)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">switch</span>(post_op-&gt;type())</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">case</span> EltwiseLayerNode::node_type:</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keyword">auto</span> *eltwise_node = arm_compute::utils::cast::polymorphic_downcast&lt;EltwiseLayerNode *&gt;(post_op);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(eltwise_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                fused_node-&gt;post_op_info_list().push_back(std::make_unique&lt;ConvPostOpInfoEltwiseAdd&gt;(prev_op_dst_pos, eltwise_node-&gt;convert_policy()));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot; with Elementwise Layer node with ID : &quot;</span> &lt;&lt; post_op-&gt;id());</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">case</span> ActivationLayerNode::node_type:</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(post_op);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                fused_node-&gt;post_op_info_list().push_back(std::make_unique&lt;ConvPostOpInfoActivation&gt;(act_node-&gt;activation_info()));</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot; with Activation Layer node with ID : &quot;</span> &lt;&lt; post_op-&gt;id());</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">if</span>(op_idx == post_op_node_list.size() - 1) <span class="comment">// last fusable node</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, post_op, <span class="keyword">true</span>);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="comment">// Remove node</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            g.remove_node(post_op-&gt;id());</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        op_idx++;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ad8ca8a59006fbe004a4c2e9267c14263"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node</a></div><div class="ttdeci">void transfer_driving_nodes_and_remove_old_node(Graph &amp;g, INode *new_node, INode *old_node, bool add_output_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00048">NodeFusionMutator.cpp:48</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac7fd3d9360e3103b4d73957882171edf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7fd3d9360e3103b4d73957882171edf">&#9670;&nbsp;</a></span>fuse_convolution_with_post_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_convolution_with_post_ops </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conv_node_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>supported_fused_activations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fuse below operators: </p>
<table class="doxtable">
<tr>
<th align="left">Main operator </th><th align="left">Post operators  </th></tr>
<tr>
<td align="left">conv </td><td align="left">add </td></tr>
<tr>
<td align="left">conv </td><td align="left">act + add </td></tr>
<tr>
<td align="left">conv </td><td align="left">add + act </td></tr>
<tr>
<td align="left">conv </td><td align="left">act + add + act </td></tr>
</table>
<p>Notes: currently, only GEMM supports fusion with post operator </p>

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00541">541</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">arm_compute::test::validation::conv_info</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">arm_compute::test::validation::data_layout</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00110">TensorDescriptor::data_type</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">arm_compute::test::validation::data_type</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">arm_compute::graph::EltwiseLayer</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00379">fuse_convolution_with_post_op()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::GEMM</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00424">get_post_op_list()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">arm_compute::is_data_type_float()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor::layout</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">arm_compute::test::validation::num_groups</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00072">INode::set_assigned_target()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor::shape</a>, <a class="el" href="_edge_8h_source.xhtml#l00116">Edge::tensor()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00092">Dimensions&lt; T &gt;::y()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00097">Dimensions&lt; T &gt;::z()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00805">NodeFusionMutator::mutate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;{</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(conv_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm != <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">ConvolutionMethod::GEMM</a>)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="comment">// If data type is FP32/FP16, data layout is NHWC, and filter size is 1x1, fuse convolution with post op, as Conv1x1 always leads to GEMM.</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keyword">const</span> Edge *input_edge = conv_node-&gt;input_edge(1);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;tensor() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        {</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>  = input_edge-&gt;tensor()-&gt;desc().layout;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>    = input_edge-&gt;tensor()-&gt;desc().data_type;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keyword">const</span> TensorShape tensor_shape = input_edge-&gt;tensor()-&gt;desc().shape;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">if</span>((data_layout != DataLayout::NHWC) || (<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(data_type) == <span class="keyword">false</span>) || (tensor_shape.y() != 1) || (tensor_shape.z() != 1))</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        {</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="comment">// Get post op list</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordtype">int</span>                eltwise_operand_id = 0;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordtype">int</span>                prev_op_dst_pos    = 0; <span class="comment">// Previous operator dst&#39;s postion in current operator</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        std::list&lt;INode *&gt; post_op_node_list  = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a>(g, eltwise_operand_id, prev_op_dst_pos, conv_node_id, supported_fused_activations);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">if</span>(post_op_node_list.size() == 0)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="keywordflow">else</span> <span class="comment">// Do convolution fusion with post op if there&#39;re one(elementwise), two or more operators</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        {</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedConvolutionWithPostOpNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing convolution node with ID : &quot;</span> &lt;&lt; conv_node-&gt;id());</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="comment">// Add connections from the conv inputs to the fused node</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            g.add_connection(conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="comment">// Adding the Element wise operand in case the post op is element wise operation</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keyword">auto</span> it = std::find_if(post_op_node_list.begin(),</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                   post_op_node_list.end(),</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                   [&amp;](<span class="keyword">const</span> INode * nd)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                <span class="keywordflow">return</span> (nd-&gt;type() == graph::NodeType::EltwiseLayer);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            });</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <span class="keywordflow">if</span>(it != post_op_node_list.end())</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                g.add_connection(eltwise_operand_id, 0, fused_id, 3);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            }</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            g.remove_node(conv_node-&gt;id());</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keyword">auto</span> fused_node = g.node(fused_id);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="comment">// Fuse convolution with post op</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#acf519e224ead91674501c93418dfb674">fuse_convolution_with_post_op</a>(g, fused_node, post_op_node_list, prev_op_dst_pos);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            post_op_node_list.clear();</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(std::endl);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    }</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00485">Acl.hpp:485</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ac30f73c1ed95e75d4ff1e68b3f0bdbbe"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">arm_compute::graph::detail::get_post_op_list</a></div><div class="ttdeci">std::list&lt; INode * &gt; get_post_op_list(Graph &amp;g, int &amp;eltwise_operand_id, int &amp;prev_op_dst_pos, unsigned int conv_node_id, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00424">NodeFusionMutator.cpp:424</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00143">Types.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdoc">GEMM CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_acf519e224ead91674501c93418dfb674"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#acf519e224ead91674501c93418dfb674">arm_compute::graph::detail::fuse_convolution_with_post_op</a></div><div class="ttdeci">void fuse_convolution_with_post_op(Graph &amp;g, INode *fused_node, std::list&lt; INode *&gt; post_op_node_list, int prev_op_dst_pos)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00379">NodeFusionMutator.cpp:379</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">Utils.h:1010</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a07811ee0f5c19da2658a647e6d7dc2fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07811ee0f5c19da2658a647e6d7dc2fa">&#9670;&nbsp;</a></span>fuse_depthwise_convolution_with_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00162">162</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00235">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">arm_compute::test::validation::conv_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">arm_compute::quantization::epsilon</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00172">INode::input_edge()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00108">INode::name()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00272">NodeParams::name</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">transfer_driving_nodes_and_remove_old_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00805">NodeFusionMutator::mutate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">auto</span> *depth_conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;DepthwiseConvolutionLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">auto</span> *bn_node         = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing depthwise convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>(depth_conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = depth_conv_node-&gt;assigned_target();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// Extract conv inputs</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_input_id = depth_conv_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv_weights_id     = depth_conv_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>           = depth_conv_node-&gt;convolution_info();</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_method   = depth_conv_node-&gt;depthwise_convolution_method();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_multiplier    = depth_conv_node-&gt;depth_multiplier();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>            = bn_node-&gt;fused_activation();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="comment">// Extract bn inputs</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id  = bn_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id   = bn_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id  = bn_node-&gt;input_edge(3)-&gt;producer_id();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>     = bn_node-&gt;epsilon();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">// Create the fused node</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.add_node&lt;FusedDepthwiseConvolutionBatchNormalizationNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, depth_conv_method, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span>(depth_conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> conv_bias_id = depth_conv_node-&gt;input_edge(2)-&gt;producer_id();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            g.add_connection(conv_bias_id, 0, fused_id, 2);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        g.add_connection(depth_conv_input_id, 0, fused_id, 0);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        g.add_connection(conv_weights_id, 0, fused_id, 1);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        g.add_connection(bn_mean_id, 0, fused_id, 3);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        g.add_connection(bn_var_id, 0, fused_id, 4);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        g.add_connection(bn_beta_id, 0, fused_id, 5);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        g.add_connection(bn_gamma_id, 0, fused_id, 6);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keyword">auto</span> fused_node   = g.node(fused_id);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keyword">auto</span> bn_node_name = bn_node-&gt;name();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, bn_node, <span class="keyword">true</span>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        fused_node-&gt;set_common_node_parameters(NodeParams{ depth_conv_node-&gt;name() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Remove convolution node</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        g.remove_node(depth_conv_node-&gt;id());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of depthwise convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ad8ca8a59006fbe004a4c2e9267c14263"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node</a></div><div class="ttdeci">void transfer_driving_nodes_and_remove_old_node(Graph &amp;g, INode *new_node, INode *old_node, bool add_output_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00048">NodeFusionMutator.cpp:48</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f9900d626af4230ff61f851e8d5eab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f9900d626af4230ff61f851e8d5eab5">&#9670;&nbsp;</a></span>fuse_layer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const F&#160;</td>
          <td class="paramname"><em>fuse_fcn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>optional_arguments</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00312">312</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>.</p>
<div class="fragment"><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// Note that fused nodes may be added to the end of the node list.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="comment">// Instead of only looping over the original list of nodes, we loop over the current node list which could be growing.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// This is intentional as it probes the newly added fused nodes for further fusing opportunities.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; g.nodes().size(); ++i)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keyword">auto</span> node = g.node(i);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="comment">// Check if the node is of type N1 and not a branching node</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">if</span>(node &amp;&amp; node-&gt;type() == N1::node_type &amp;&amp; node-&gt;output_edges().size() == 1)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *node-&gt;output_edges().begin();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.edge(output_edge_id);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="comment">// Check if following node is a type N2 node</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">if</span>((output_edge != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer() != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer()-&gt;type() == N2::node_type) &amp;&amp; prec(*output_edge-&gt;producer()))</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                fuse_fcn(g, output_edge, optional_arguments...);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5e3001563d5668f924ef151fc1606357"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e3001563d5668f924ef151fc1606357">&#9670;&nbsp;</a></span>fuse_layer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; const &amp;&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const F&#160;</td>
          <td class="paramname"><em>fuse_fcn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>optional_arguments</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00771">771</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="comment">// Note that fused nodes may be added to the end of the node list.</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="comment">// Instead of only looping over the original list of nodes, we loop over the current node list which could be growing.</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="comment">// This is intentional as it probes the newly added fused nodes for further fusing opportunities.</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; g.nodes().size(); ++i)</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    {</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keyword">auto</span> node = g.node(i);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="comment">// Check if the node is of type N1 and not a branching node</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="keywordflow">if</span>(node &amp;&amp; node-&gt;type() == N1::node_type &amp;&amp; node-&gt;output_edges().size() == 1)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        {</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *node-&gt;output_edges().begin();</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.edge(output_edge_id);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <span class="comment">// Check if it&#39;s the correct target</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            <span class="keywordflow">if</span>((output_edge != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer() != <span class="keyword">nullptr</span>) &amp;&amp; prec(*output_edge-&gt;producer()))</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                fuse_fcn(g, output_edge, i, optional_arguments...);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    }</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a36b5b67e26dfdfbedf39e6703ef059bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b5b67e26dfdfbedf39e6703ef059bd">&#9670;&nbsp;</a></span>fuse_node_with_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_node_with_activation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>supported_fused_activations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00227">227</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">arm_compute::graph::EltwiseLayer</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">arm_compute::is_data_type_float()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">transfer_driving_nodes_and_remove_old_node()</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">auto</span> *n_node   = arm_compute::utils::cast::polymorphic_downcast&lt;N *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span> || n_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Check if activation is supported for fusion</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span>(supported_fused_activations.count(act_node-&gt;activation_info().activation()) == 0)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// EltwiseLayerNode can only be fused when dataype is float</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span>(n_node-&gt;type() == NodeType::EltwiseLayer &amp;&amp; !<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(n_node-&gt;output(0)-&gt;desc().data_type))</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing node with ID : &quot;</span> &lt;&lt; output_edge-&gt;producer_id()</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with Activation Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;consumer_id() &lt;&lt; std::endl);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">if</span>(n_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="comment">// Set activation info to fused node</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        n_node-&gt;set_fused_activation(act_node-&gt;activation_info());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, n_node, act_node, <span class="keyword">false</span>);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of node with activation due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ad8ca8a59006fbe004a4c2e9267c14263"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node</a></div><div class="ttdeci">void transfer_driving_nodes_and_remove_old_node(Graph &amp;g, INode *new_node, INode *old_node, bool add_output_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00048">NodeFusionMutator.cpp:48</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01010">Utils.h:1010</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ace556aabec6b58080b5faec2e0afb885"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace556aabec6b58080b5faec2e0afb885">&#9670;&nbsp;</a></span>fuse_pad_with_convolution()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::fuse_pad_with_convolution </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td>
          <td class="paramname"><em>output_edge</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00266">266</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">arm_compute::test::validation::conv_info</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00148">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00197">arm_compute::graph::get_driver_nodes()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_mutator_utils_8cpp_source.xhtml#l00030">arm_compute::graph::is_padding_in_height_or_width()</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">arm_compute::N1</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00760">PadStrideInfo::pad_bottom()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00745">PadStrideInfo::pad_left()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00750">PadStrideInfo::pad_right()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00755">PadStrideInfo::pad_top()</a>, <a class="el" href="_edge_8h_source.xhtml#l00084">Edge::producer()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00766">PadStrideInfo::round()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00719">PadStrideInfo::stride()</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>
<div class="fragment"><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> *pad_node  = arm_compute::utils::cast::polymorphic_downcast&lt;PadLayerNode *&gt;(output_edge-&gt;producer());</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;N *&gt;(output_edge-&gt;consumer());</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> Edge *input_edge = pad_node-&gt;input_edge(0);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;tensor() != <span class="keyword">nullptr</span> &amp;&amp; pad_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;       &amp;&amp; pad_node-&gt;pad_value().get&lt;<span class="keywordtype">float</span>&gt;() == 0.0)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  layout       = input_edge-&gt;tensor()-&gt;desc().layout;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> padding_list = pad_node-&gt;padding();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_index = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_index  = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> pad_w = width_index &lt; padding_list.size() ? padding_list[width_index] : <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>(0, 0);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> pad_h = height_index &lt; padding_list.size() ? padding_list[height_index] : <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>(0, 0);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#aa3f58c337d128b2d530251c422b05f69">is_padding_in_height_or_width</a>(layout, padding_list))</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="comment">// Add paddings to the convolution node</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> PadStrideInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a> = conv_node-&gt;convolution_info();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> PadStrideInfo new_conv_info(</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                conv_info.stride().first,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                conv_info.stride().second,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                conv_info.pad_left() + pad_w.first,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                conv_info.pad_right() + pad_w.second,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                conv_info.pad_top() + pad_h.first,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                conv_info.pad_bottom() + pad_h.second,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                conv_info.round());</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            conv_node-&gt;set_convolution_info(new_conv_info);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="comment">// Update drivers of the convolution node</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            std::vector&lt;NodeIdxPair&gt; pad_driver_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">get_driver_nodes</a>(*pad_node);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            g.remove_node(pad_node-&gt;id());</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="comment">// Update fused node inputs</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driver_node : pad_driver_nodes)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                g.add_connection(driver_node.node_id, driver_node.index, conv_node-&gt;id(), 0);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa3f58c337d128b2d530251c422b05f69"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa3f58c337d128b2d530251c422b05f69">arm_compute::graph::is_padding_in_height_or_width</a></div><div class="ttdeci">bool is_padding_in_height_or_width(const DataLayout &amp;layout, const PaddingList &amp;padding_list)</div><div class="ttdoc">Check if padding is in height and/or width dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_mutator_utils_8cpp_source.xhtml#l00030">MutatorUtils.cpp:30</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ad17fa352dabb4482cb996a9f8f7f3ba3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">arm_compute::graph::get_driver_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driver_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driver nodes of a given node. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00197">Utils.cpp:197</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a669b5d3c5994f9ae3be31df9a1014297"><div class="ttname"><a href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">arm_compute::PaddingInfo</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; PaddingInfo</div><div class="ttdoc">Padding information as a pair of unsigned int start/end. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00452">Types.h:452</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor&amp;#39;s given dimension depending on its layout. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac30f73c1ed95e75d4ff1e68b3f0bdbbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">&#9670;&nbsp;</a></span>get_post_op_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&gt; arm_compute::graph::detail::get_post_op_list </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>eltwise_operand_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>prev_op_dst_pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conv_node_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>supported_fused_activations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00424">424</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="graph_2_logger_8h_source.xhtml#l00050">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00353">check_post_op_type()</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">arm_compute::graph::Dummy</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_activation_layer_node_8h_source.xhtml#l00057">ActivationLayerNode::node_type</a>, <a class="el" href="_eltwise_layer_node_8h_source.xhtml#l00084">EltwiseLayerNode::node_type</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">fuse_convolution_batch_normalization_with_post_ops()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00541">fuse_convolution_with_post_ops()</a>.</p>
<div class="fragment"><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    std::list&lt;INode *&gt; post_op_node_list    = {};</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>             prev_op_dst_id       = conv_node_id;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a>           post_op_type_list[3] = { NodeType::Dummy, NodeType::Dummy, NodeType::Dummy };</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordtype">int</span>                post_op_idx          = 0;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// Get list of the connected nodes</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">auto</span> current_node = g.node(conv_node_id);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">while</span>(post_op_node_list.size() &lt; 3)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="comment">// This convolution node must have only one output edge, otherwise this function would not have been called</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keyword">auto</span> current_output_edge_id = current_node-&gt;output_edges().begin();</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keyword">auto</span> current_output_edge    = g.edge(*current_output_edge_id);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">auto</span> post_op_node           = current_output_edge-&gt;consumer();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordtype">bool</span> fusable_post_op = <span class="keyword">false</span>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordflow">if</span>(post_op_node != <span class="keyword">nullptr</span> &amp;&amp; post_op_node-&gt;output_edges().size() &gt; 0)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">switch</span>(post_op_node-&gt;type())</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                <span class="keywordflow">case</span> EltwiseLayerNode::node_type:</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                {</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    <span class="keyword">auto</span> *eltwise_node = arm_compute::utils::cast::polymorphic_downcast&lt;EltwiseLayerNode *&gt;(post_op_node);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(eltwise_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keywordflow">if</span>(eltwise_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        post_op_node_list.push_back(post_op_node);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        fusable_post_op                  = <span class="keyword">true</span>;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        post_op_type_list[post_op_idx++] = eltwise_node-&gt;type();</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="comment">// Extract elementwise inputs</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_input_id_0 = eltwise_node-&gt;input_edge(0)-&gt;producer_id();</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_input_id_1 = eltwise_node-&gt;input_edge(1)-&gt;producer_id();</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        <span class="keywordflow">if</span>(eltwise_input_id_0 == prev_op_dst_id)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            eltwise_operand_id = eltwise_input_id_1;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                            prev_op_dst_pos    = 0;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_input_id_1 == prev_op_dst_id)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                        {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                            eltwise_operand_id = eltwise_input_id_0;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                            prev_op_dst_pos    = 1;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with elementwise due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                <span class="keywordflow">case</span> ActivationLayerNode::node_type:</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(post_op_node);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="comment">// Check if activation is supported for fusion</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="keywordflow">if</span>(supported_fused_activations.count(act_node-&gt;activation_info().activation()) == 0)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    <span class="keywordflow">if</span>(act_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                    {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                        post_op_node_list.push_back(post_op_node);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                        fusable_post_op                  = <span class="keyword">true</span>;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        post_op_type_list[post_op_idx++] = act_node-&gt;type();</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                        prev_op_dst_id                   = act_node-&gt;id();</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                    }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="comment">// Check if the node is not a branching node and current node is fusable</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">if</span>(post_op_node-&gt;output_edges().size() == 1 &amp;&amp; fusable_post_op == <span class="keyword">true</span>)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                current_node = post_op_node;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="comment">// Check whether it&#39;s valid post op list</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">if</span>(post_op_node_list.size() &gt; 0)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordtype">bool</span> fuse_with_post_op = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">check_post_op_type</a>(post_op_type_list, post_op_node_list.size());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordflow">if</span>(!fuse_with_post_op)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        {</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            post_op_node_list.clear();</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">return</span> post_op_node_list;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00199">Types.h:199</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a6f095b69d7dacb7ea9faab4c9dcc0126"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">arm_compute::graph::detail::check_post_op_type</a></div><div class="ttdeci">bool check_post_op_type(NodeType *post_op_type, int len)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00353">NodeFusionMutator.cpp:353</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17b5e700b317feb19fc3cefd23a1d8bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17b5e700b317feb19fc3cefd23a1d8bb">&#9670;&nbsp;</a></span>prepare_all_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void prepare_all_tasks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;&#160;</td>
          <td class="paramname"><em>workload</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prepares all tasks for execution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workload</td><td>Workload to prepare </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00220">220</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_workload_8h_source.xhtml#l00103">ExecutionWorkload::graph</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00176">release_unused_tensors()</a>, and <a class="el" href="_workload_8h_source.xhtml#l00102">ExecutionWorkload::tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload.graph == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;task : workload.tasks)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        task.prepare();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">release_unused_tensors</a>(*workload.graph);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_a28280ac6b0db4c2385ac8c18a4ad8f3c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a28280ac6b0db4c2385ac8c18a4ad8f3c">arm_compute::graph::detail::release_unused_tensors</a></div><div class="ttdeci">void release_unused_tensors(Graph &amp;g)</div><div class="ttdoc">Release the memory of all unused const nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_execution_helpers_8cpp_source.xhtml#l00176">ExecutionHelpers.cpp:176</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28280ac6b0db4c2385ac8c18a4ad8f3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28280ac6b0db4c2385ac8c18a4ad8f3c">&#9670;&nbsp;</a></span>release_unused_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void release_unused_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Release the memory of all unused const nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to release the memory from </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00220">prepare_all_tasks()</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : g.tensors())</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle()-&gt;release_if_unused();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad8ca8a59006fbe004a4c2e9267c14263"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8ca8a59006fbe004a4c2e9267c14263">&#9670;&nbsp;</a></span>transfer_driving_nodes_and_remove_old_node()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>new_node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>old_node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>add_output_tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00217">arm_compute::graph::configure_tensor()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00070">Tensor::extract_accessor()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00177">arm_compute::graph::get_driving_nodes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00103">INode::id()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00159">INode::output()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>, and <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00060">Tensor::set_accessor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00082">fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00379">fuse_convolution_with_post_op()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00162">fuse_depthwise_convolution_with_batch_normalization()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00227">fuse_node_with_activation()</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span>(new_node == <span class="keyword">nullptr</span> || old_node == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Get driving nodes of last fusable node</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;NodeIdxPair&gt; last_driving_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(*old_node);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Extract last fusable node accessor if any</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(old_node-&gt;output(0) == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> old_node_accessor = old_node-&gt;output(0)-&gt;extract_accessor();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Remove node</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    g.remove_node(old_node-&gt;id());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Update fused node outputs</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driving_node : last_driving_nodes)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        g.add_connection(new_node-&gt;id(), 0, driving_node.node_id, driving_node.index);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span>(add_output_tensor)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(new_node-&gt;output(0));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Update accessor to fused node</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    new_node-&gt;output(0)-&gt;set_accessor(std::move(old_node_accessor));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00217">Utils.cpp:217</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00177">Utils.cpp:177</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa1d326a80e16fe0d4034637672d3b122"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1d326a80e16fe0d4034637672d3b122">&#9670;&nbsp;</a></span>validate_all_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate_all_nodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validates all nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to validate </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_execution_helpers_8cpp_source.xhtml">ExecutionHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00097">Status::error_description()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a2ad722cd593bc5300108c8837ce5c980">IDeviceBackend::validate_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Create tasks</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span>(node != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                    assigned_target = node-&gt;assigned_target();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            backends::IDeviceBackend &amp;backend         = backends::BackendRegistry::get().get_backend(assigned_target);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            Status                    status          = backend.validate_node(*node);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!<span class="keywordtype">bool</span>(status), status.error_description().c_str());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5821263ab45591eb3b83e3ca3bb1f7ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5821263ab45591eb3b83e3ca3bb1f7ca">&#9670;&nbsp;</a></span>valide_post_op_type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> valide_post_op_type[4][3]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= { { EltwiseLayerNode::node_type },</div><div class="line">    { EltwiseLayerNode::node_type, ActivationLayerNode::node_type },</div><div class="line">    { ActivationLayerNode::node_type, EltwiseLayerNode::node_type },</div><div class="line">    { ActivationLayerNode::node_type, EltwiseLayerNode::node_type, ActivationLayerNode::node_type }</div><div class="line">}</div></div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00347">347</a> of file <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml">NodeFusionMutator.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml">detail</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:25:01 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
