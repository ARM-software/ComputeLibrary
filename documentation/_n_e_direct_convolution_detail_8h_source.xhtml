<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_n_e_direct_convolution_detail_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEDirectConvolutionDetail.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_direct_convolution_detail_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H__</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_access_window_static_8h.xhtml">arm_compute/core/AccessWindowStatic.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_fixed_point_8h.xhtml">arm_compute/core/NEON/NEFixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a5db34f1ae85326efebbe1dadb65f0301">   44</a></span>&#160;<span class="keyword">inline</span> float32x4x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(weights_offset);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> float32x4x3_t r =</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            vld1q_dup_f32(ptr),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            vld1q_dup_f32(1 + ptr),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            vld1q_dup_f32(2 + ptr)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#ae45ede86aac420e1c4f6a0e4ef22bf89">   65</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(weights_offset);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> r =</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ada853a8e19c80626633d95392d2b4a8b">vld1_dup_qs8</a>(ptr),</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ada853a8e19c80626633d95392d2b4a8b">vld1_dup_qs8</a>(1 + ptr),</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ada853a8e19c80626633d95392d2b4a8b">vld1_dup_qs8</a>(2 + ptr)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    };</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a8b01a1b2b7bd61029dfaa8601b23b4fc">   88</a></span>&#160;<span class="keyword">inline</span> int32x4x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> uint8_t *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> int32x4_t v_weights_offset = vdupq_n_s32(weights_offset);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    int32x4x3_t r =</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*ptr)),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 1))),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 2)))</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;float32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac064ba58efa26ec2599bc8f50d3e0851">convolve_3x3</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_top, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_mid, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_low,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                           <span class="keyword">const</span> float32x4x3_t &amp;m0, <span class="keyword">const</span> float32x4x3_t &amp;m1, <span class="keyword">const</span> float32x4x3_t &amp;m2,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                           <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset = 0);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#afbf7e212aac5f240183cd299bf7605b2">  123</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_top, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_mid, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_low,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                     <span class="keyword">const</span> float32x4x3_t &amp;m0, <span class="keyword">const</span> float32x4x3_t &amp;m1, <span class="keyword">const</span> float32x4x3_t &amp;m2,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop =</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            vld1q_f32(in_top),</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            vld1q_f32(in_top + 4),</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            vld1q_f32(in_top + 8)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    };</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid =</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            vld1q_f32(in_mid),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            vld1q_f32(in_mid + 4),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            vld1q_f32(in_mid + 8)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow =</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            vld1q_f32(in_low),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            vld1q_f32(in_low + 4),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            vld1q_f32(in_low + 8)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    };</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    float32x4x2_t out =</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            vmulq_f32(vtop.val[0], m0.val[0]),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            vmulq_f32(vtop.val[1], m0.val[0])</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    };</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a48faa5e09999f604e60861f61280cccb">  186</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac5a80612d739ca7ab7db7e26c05796e1">convolve_3x3&lt;2&gt;</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_top, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_mid, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_low,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                     <span class="keyword">const</span> float32x4x3_t &amp;m0, <span class="keyword">const</span> float32x4x3_t &amp;m1, <span class="keyword">const</span> float32x4x3_t &amp;m2,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a805b176e69c0dc16a074178cc7696f90">  200</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#adb5abdd9cafbff3bdfc6a5a9ec6bbe5c">convolve_3x3&lt;3&gt;</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *in_top, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_mid, <span class="keyword">const</span> <span class="keywordtype">float</span> *in_low,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                     <span class="keyword">const</span> float32x4x3_t &amp;m0, <span class="keyword">const</span> float32x4x3_t &amp;m1, <span class="keyword">const</span> float32x4x3_t &amp;m2,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac064ba58efa26ec2599bc8f50d3e0851">convolve_3x3</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_top, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_mid, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_low,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m0, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m2,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                          <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset = 0);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#aa6d04df9ad4e5614804f1d2b024bf9c0">  229</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_top, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_mid, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_low,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m0, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m2,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                    <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> vtop =</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_top),</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_top + 8),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_top + 16)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    };</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> vmid =</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_mid),</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_mid + 8),</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_mid + 16)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    };</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> vlow =</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_low),</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_low + 8),</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">vld1_qs8</a>(in_low + 16)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> out =</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a3e959a9add1078033f3a27725323df13">vmull_qs8</a>(vtop.val[0], m0.val[0], fixed_point_position),</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a3e959a9add1078033f3a27725323df13">vmull_qs8</a>(vtop.val[1], m0.val[0], fixed_point_position)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    };</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vtop.val[0], vtop.val[1], 1), m0.val[1], fixed_point_position);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vtop.val[0], vtop.val[1], 2), m0.val[2], fixed_point_position);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vmid.val[0], m1.val[0], fixed_point_position);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vmid.val[0], vmid.val[1], 1), m1.val[1], fixed_point_position);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vmid.val[0], vmid.val[1], 2), m1.val[2], fixed_point_position);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vlow.val[0], m2.val[0], fixed_point_position);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vlow.val[0], vlow.val[1], 1), m2.val[1], fixed_point_position);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[0], vext_s8(vlow.val[0], vlow.val[1], 2), m2.val[2], fixed_point_position);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vtop.val[1], vtop.val[2], 1), m0.val[1], fixed_point_position);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vtop.val[1], vtop.val[2], 2), m0.val[2], fixed_point_position);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vmid.val[1], m1.val[0], fixed_point_position);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vmid.val[1], vmid.val[2], 1), m1.val[1], fixed_point_position);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vmid.val[1], vmid.val[2], 2), m1.val[2], fixed_point_position);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vlow.val[1], m2.val[0], fixed_point_position);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vlow.val[1], vlow.val[2], 1), m2.val[1], fixed_point_position);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">vqmlal_qs8</a>(out.val[1], vext_s8(vlow.val[1], vlow.val[2], 2), m2.val[2], fixed_point_position);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a4c4333bff8c8b0273fe4fb8edfda519f">  287</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac5a80612d739ca7ab7db7e26c05796e1">convolve_3x3&lt;2&gt;</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_top, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_mid, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_low,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m0, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m2,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                    <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[0], 4), out.val[0], 2);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[0], 6), out.val[0], 3);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[1], 0), out.val[0], 4);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[1], 2), out.val[0], 5);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[1], 4), out.val[0], 6);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[1], 6), out.val[0], 7);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a390907972bb44c81928789c7041b833f">  305</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> <a class="code" href="namespacearm__compute_1_1detail.xhtml#adb5abdd9cafbff3bdfc6a5a9ec6bbe5c">convolve_3x3&lt;3&gt;</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_top, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_mid, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">qint8_t</a> *in_low,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m0, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> &amp;m2,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                    <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[0], 6), out.val[0], 2);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    out.val[0]       = vsetq_lane_s16(vgetq_lane_s16(out.val[1], 1), out.val[0], 3);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;int32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac064ba58efa26ec2599bc8f50d3e0851">convolve_3x3</a>(<span class="keyword">const</span> uint8_t *in_top, <span class="keyword">const</span> uint8_t *in_mid, <span class="keyword">const</span> uint8_t *in_low,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                         <span class="keyword">const</span> int32x4x3_t &amp;m0, <span class="keyword">const</span> int32x4x3_t &amp;m1, <span class="keyword">const</span> int32x4x3_t &amp;m2,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                         <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#af083008ad8a1e68fcc677c9186cc5f15">  336</a></span>&#160;<span class="keyword">inline</span> int32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(<span class="keyword">const</span> uint8_t *in_top, <span class="keyword">const</span> uint8_t *in_mid, <span class="keyword">const</span> uint8_t *in_low, <span class="keyword">const</span> int32x4x3_t &amp;m0, <span class="keyword">const</span> int32x4x3_t &amp;m1, <span class="keyword">const</span> int32x4x3_t &amp;m2,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                   <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = vdupq_n_s32(input_offset);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vtop =</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            vld1_u8(in_top),</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            vld1_u8(in_top + 8)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    };</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vmid =</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            vld1_u8(in_mid),</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            vld1_u8(in_mid + 8)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    };</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vlow =</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            vld1_u8(in_low),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            vld1_u8(in_low + 8)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    };</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 =</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[0])))),</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vtop.val[0])))),</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[1])))),</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 =</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[0])))),</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vmid.val[0])))),</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[1])))),</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    };</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 =</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[0])))),</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vlow.val[0])))),</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[1])))),</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    };</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    int32x4x2_t out</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            vdupq_n_s32(0),</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            vdupq_n_s32(0),</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    };</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// 0</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vtop_s32.val[0], m0.val[0]);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vtop_s32.val[0], vtop_s32.val[1], 1), m0.val[1]);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vtop_s32.val[0], vtop_s32.val[1], 2), m0.val[2]);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vmid_s32.val[0], m1.val[0]);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vmid_s32.val[0], vmid_s32.val[1], 1), m1.val[1]);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vmid_s32.val[0], vmid_s32.val[1], 2), m1.val[2]);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vlow_s32.val[0], m2.val[0]);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vlow_s32.val[0], vlow_s32.val[1], 1), m2.val[1]);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vlow_s32.val[0], vlow_s32.val[1], 2), m2.val[2]);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// 1</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vtop_s32.val[1], m0.val[0]);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vtop_s32.val[1], vtop_s32.val[2], 1), m0.val[1]);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vtop_s32.val[1], vtop_s32.val[2], 2), m0.val[2]);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vmid_s32.val[1], m1.val[0]);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vmid_s32.val[1], vmid_s32.val[2], 1), m1.val[1]);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vmid_s32.val[1], vmid_s32.val[2], 2), m1.val[2]);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vlow_s32.val[1], m2.val[0]);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vlow_s32.val[1], vlow_s32.val[2], 1), m2.val[1]);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vlow_s32.val[1], vlow_s32.val[2], 2), m2.val[2]);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a525f0d09eeeccc1778a884db12bba80e">  428</a></span>&#160;<span class="keyword">inline</span> int32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac5a80612d739ca7ab7db7e26c05796e1">convolve_3x3&lt;2&gt;</a>(<span class="keyword">const</span> uint8_t *in_top, <span class="keyword">const</span> uint8_t *in_mid, <span class="keyword">const</span> uint8_t *in_low,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                   <span class="keyword">const</span> int32x4x3_t &amp;m0, <span class="keyword">const</span> int32x4x3_t &amp;m1, <span class="keyword">const</span> int32x4x3_t &amp;m2,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                   <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a3c0180b145520c851e8e3f1dcd921290">  442</a></span>&#160;<span class="keyword">inline</span> int32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#adb5abdd9cafbff3bdfc6a5a9ec6bbe5c">convolve_3x3&lt;3&gt;</a>(<span class="keyword">const</span> uint8_t *in_top, <span class="keyword">const</span> uint8_t *in_mid, <span class="keyword">const</span> uint8_t *in_low,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                   <span class="keyword">const</span> int32x4x3_t &amp;m0, <span class="keyword">const</span> int32x4x3_t &amp;m1, <span class="keyword">const</span> int32x4x3_t &amp;m2,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                   <span class="keywordtype">int</span> fixed_point_position, <span class="keywordtype">int</span> input_offset)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position, input_offset);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keywordtype">float</span> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float32x4x2_t &amp;values);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(<span class="keywordtype">float</span> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    vst1q_f32(buffer, values.val[0]);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    vst1q_f32(buffer + 4, values.val[1]);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;}</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(<span class="keywordtype">float</span> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    vst1q_f32(buffer, values.val[0]);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(<span class="keywordtype">float</span> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float32x4x2_t &amp;values)</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;{</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    vst1_f32(buffer, vget_low_f32(values.val[0]));</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<a class="code" href="namespacearm__compute.xhtml#a1521eea74b97de8f2df9304e44179400">qint16_t</a> *buffer, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> &amp;values);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a0426b57561ac359fddb7bb711c573210">  490</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(<a class="code" href="namespacearm__compute.xhtml#a1521eea74b97de8f2df9304e44179400">qint16_t</a> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> &amp;values)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8bb5f297efd64b941f5022ea3cd7ee9a">vst1q_qs16</a>(buffer, values.val[0]);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8bb5f297efd64b941f5022ea3cd7ee9a">vst1q_qs16</a>(buffer + 8, values.val[1]);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00497"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#af06cb49ec09ef6d1d425970434086d0a">  497</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(<a class="code" href="namespacearm__compute.xhtml#a1521eea74b97de8f2df9304e44179400">qint16_t</a> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> &amp;values)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;{</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a8bb5f297efd64b941f5022ea3cd7ee9a">vst1q_qs16</a>(buffer, values.val[0]);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#abd70ac1509d341ca206da7d421a0b7a9">  503</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(<a class="code" href="namespacearm__compute.xhtml#a1521eea74b97de8f2df9304e44179400">qint16_t</a> *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> &amp;values)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1d54a1ef0078902b2334d2fddba74ca6">vst1_qs16</a>(buffer, vget_low_s16(values.val[0]));</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a143f43b1fb56a8d806145e95d4c3995e">  518</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(int32_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> int32x4x2_t &amp;values)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    vst1q_s32(buffer, values.val[0]);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    vst1q_s32(buffer + 4, values.val[1]);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00525"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#af63e34203346681c35b68fcca2026a06">  525</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(int32_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> int32x4x2_t &amp;values)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;{</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    vst1q_s32(buffer, values.val[0]);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a991bde46f2841422fb98258127305050">  531</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(int32_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> int32x4x2_t &amp;values)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;{</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    vst1_s32(buffer, vget_low_s32(values.val[0]));</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="keyword">inline</span> float16x8x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> float16_t *ptr)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;{</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keyword">const</span> float16x8x3_t r =</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        {</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            vld1q_dup_f16(ptr),</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            vld1q_dup_f16(1 + ptr),</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            vld1q_dup_f16(2 + ptr)</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    };</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;}</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;float16x8x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac064ba58efa26ec2599bc8f50d3e0851">convolve_3x3</a>(<span class="keyword">const</span> float16_t *in_top, <span class="keyword">const</span> float16_t *in_mid, <span class="keyword">const</span> float16_t *in_low, <span class="keyword">const</span> float16x8x3_t &amp;m0, <span class="keyword">const</span> float16x8x3_t &amp;m1, <span class="keyword">const</span> float16x8x3_t &amp;m2,</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                           <span class="keywordtype">int</span> fixed_point_position);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keyword">inline</span> float16x8x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(<span class="keyword">const</span> float16_t *in_top, <span class="keyword">const</span> float16_t *in_mid, <span class="keyword">const</span> float16_t *in_low, <span class="keyword">const</span> float16x8x3_t &amp;m0, <span class="keyword">const</span> float16x8x3_t &amp;m1, <span class="keyword">const</span> float16x8x3_t &amp;m2,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;{</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(fixed_point_position);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keyword">const</span> float16x8x3_t vtop =</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    {</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            vld1q_f16(in_top),</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            vld1q_f16(in_top + 8),</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            vld1q_f16(in_top + 16)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    };</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keyword">const</span> float16x8x3_t vmid =</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            vld1q_f16(in_mid),</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            vld1q_f16(in_mid + 8),</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            vld1q_f16(in_mid + 16)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        }</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    };</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> float16x8x3_t vlow =</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    {</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            vld1q_f16(in_low),</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            vld1q_f16(in_low + 8),</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            vld1q_f16(in_low + 16)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    };</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    float16x8x2_t out =</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    {</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            vmulq_f16(vtop.val[0], m0.val[0]),</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            vmulq_f16(vtop.val[1], m0.val[0])</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    };</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vtop.val[0], vtop.val[1], 1), m0.val[1]));</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vtop.val[0], vtop.val[1], 2), m0.val[2]));</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vmid.val[0], m1.val[0]));</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vmid.val[0], vmid.val[1], 1), m1.val[1]));</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vmid.val[0], vmid.val[1], 2), m1.val[2]));</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vlow.val[0], m2.val[0]));</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vlow.val[0], vlow.val[1], 1), m2.val[1]));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    out.val[0] = vaddq_f16(out.val[0], vmulq_f16(vextq_f16(vlow.val[0], vlow.val[1], 2), m2.val[2]));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vtop.val[1], vtop.val[2], 1), m0.val[1]));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vtop.val[1], vtop.val[2], 2), m0.val[2]));</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vmid.val[1], m1.val[0]));</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vmid.val[1], vmid.val[2], 1), m1.val[1]));</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vmid.val[1], vmid.val[2], 2), m1.val[2]));</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vlow.val[1], m2.val[0]));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vlow.val[1], vlow.val[2], 1), m2.val[1]));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    out.val[1] = vaddq_f16(out.val[1], vmulq_f16(vextq_f16(vlow.val[1], vlow.val[2], 2), m2.val[2]));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="keyword">inline</span> float16x8x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#ac5a80612d739ca7ab7db7e26c05796e1">convolve_3x3&lt;2&gt;</a>(<span class="keyword">const</span> float16_t *in_top, <span class="keyword">const</span> float16_t *in_mid, <span class="keyword">const</span> float16_t *in_low, <span class="keyword">const</span> float16x8x3_t &amp;m0, <span class="keyword">const</span> float16x8x3_t &amp;m1, <span class="keyword">const</span> float16x8x3_t &amp;m2,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;{</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    float16x8x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    out.val[0]        = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    out.val[0]        = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    out.val[0]        = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="keyword">inline</span> float16x8x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#adb5abdd9cafbff3bdfc6a5a9ec6bbe5c">convolve_3x3&lt;3&gt;</a>(<span class="keyword">const</span> float16_t *in_top, <span class="keyword">const</span> float16_t *in_mid, <span class="keyword">const</span> float16_t *in_low, <span class="keyword">const</span> float16x8x3_t &amp;m0, <span class="keyword">const</span> float16x8x3_t &amp;m1, <span class="keyword">const</span> float16x8x3_t &amp;m2,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                     <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;{</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    float16x8x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, fixed_point_position);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    out.val[0]        = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(float16_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    vst1q_f16(buffer, values.val[0]);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    vst1q_f16(buffer + 8, values.val[1]);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(float16_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    vst1q_f16(buffer, values.val[0]);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(float16_t *<a class="code" href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a>, <span class="keyword">const</span> float16x8x2_t &amp;values)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    vst1_f16(buffer, vget_low_f16(values.val[0]));</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">get_input_num_elems_processed&lt;1&gt;</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;{</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;}</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">get_input_num_elems_processed&lt;2&gt;</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration)</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;{</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration &lt;&lt; 1;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">get_input_num_elems_processed&lt;3&gt;</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration * 3;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div><div class="line"><a name="l00704"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a17a8ccb1f281296a0ee7eb00693febbd">  704</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stridex)</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;{</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordflow">switch</span>(stridex)</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    {</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">get_input_num_elems_processed&lt;1&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">get_input_num_elems_processed&lt;2&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">get_input_num_elems_processed&lt;3&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;stridex not supported&quot;</span>);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    }</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ac5a80612d739ca7ab7db7e26c05796e1"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ac5a80612d739ca7ab7db7e26c05796e1">arm_compute::detail::convolve_3x3&lt; 2 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 2 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00111">NEDirectConvolution3x3.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a77ef79482edac98140bbdfaeffb78b8f"><div class="ttname"><a href="namespacearm__compute.xhtml#a77ef79482edac98140bbdfaeffb78b8f">arm_compute::vld1_qs8</a></div><div class="ttdeci">qint8x8_t vld1_qs8(const qint8_t *addr)</div><div class="ttdoc">Load a single 8 bit fixed point vector from memory (8 elements) </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00153">NEFixedPoint.inl:153</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3c4099e91913f28017e1f57b8e5cbf9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">arm_compute::qint16x8x2_t</a></div><div class="ttdeci">int16x8x2_t qint16x8x2_t</div><div class="ttdoc">16 bit fixed point vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8h_source.xhtml#l00046">NEFixedPoint.h:46</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a911de09a48692b72af064c8b23aefcd0"><div class="ttname"><a href="hwc_8hpp.xhtml#a911de09a48692b72af064c8b23aefcd0">buffer</a></div><div class="ttdeci">kbase_pointer buffer</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00285">hwc.hpp:285</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00238">Error.h:238</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aedfa26202753ca9db96ae3bcb51b14b0"><div class="ttname"><a href="namespacearm__compute.xhtml#aedfa26202753ca9db96ae3bcb51b14b0">arm_compute::vqmlal_qs8</a></div><div class="ttdeci">qint16x8_t vqmlal_qs8(qint16x8_t a, qint8x8_t b, qint8x8_t c, int fixed_point_position)</div><div class="ttdoc">8 bit fixed point vector saturating multiply-accumulate long (8 elements). </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00834">NEFixedPoint.inl:834</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a60ec1bb53624bf71d2b0bd885e3234d7"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a60ec1bb53624bf71d2b0bd885e3234d7">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 1 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">NEDirectConvolution3x3.h:51</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a4103adbb45806b2f2002d44b91d0d206"><div class="ttname"><a href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(var)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00147">Error.h:147</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae2a6fee9c18f26a5fab56c2d14289705"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">arm_compute::detail::get_input_num_elems_processed&lt; 3 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 3 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00166">NEDirectConvolution3x3.h:166</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_adbdb2272e2409d0c249ba467eaac81ea"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">arm_compute::detail::get_input_num_elems_processed&lt; 2 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 2 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00160">NEDirectConvolution3x3.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a1ac67082e6f68cb7ed1939240fb6bdb5"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a></div><div class="ttdeci">void store_results(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdoc">Stores a float32x4x2_t array into a memory location. </div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_adb5abdd9cafbff3bdfc6a5a9ec6bbe5c"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#adb5abdd9cafbff3bdfc6a5a9ec6bbe5c">arm_compute::detail::convolve_3x3&lt; 3 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 3 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00121">NEDirectConvolution3x3.h:121</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1521eea74b97de8f2df9304e44179400"><div class="ttname"><a href="namespacearm__compute.xhtml#a1521eea74b97de8f2df9304e44179400">arm_compute::qint16_t</a></div><div class="ttdeci">int16_t qint16_t</div><div class="ttdoc">16 bit fixed point scalar value </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_fixed_point_8h_source.xhtml#l00030">FixedPoint.h:30</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a208468ac4ffbfe19d7fb03402ca927f6"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">arm_compute::detail::store_results&lt; 3 &gt;</a></div><div class="ttdeci">void store_results&lt; 3 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00145">NEDirectConvolution3x3.h:145</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ac064ba58efa26ec2599bc8f50d3e0851"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ac064ba58efa26ec2599bc8f50d3e0851">arm_compute::detail::convolve_3x3</a></div><div class="ttdeci">float32x4x2_t convolve_3x3(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int fixed_point_position)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a8bb5f297efd64b941f5022ea3cd7ee9a"><div class="ttname"><a href="namespacearm__compute.xhtml#a8bb5f297efd64b941f5022ea3cd7ee9a">arm_compute::vst1q_qs16</a></div><div class="ttdeci">void vst1q_qs16(qint16_t *addr, qint16x8_t b)</div><div class="ttdoc">Store a single 16 bit fixed point vector to memory (8 elements) </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00213">NEFixedPoint.inl:213</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4c3f681c30c9398c45bc3cd5dc4f038a"><div class="ttname"><a href="namespacearm__compute.xhtml#a4c3f681c30c9398c45bc3cd5dc4f038a">arm_compute::qint8_t</a></div><div class="ttdeci">int8_t qint8_t</div><div class="ttdoc">8 bit fixed point scalar value </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_fixed_point_8h_source.xhtml#l00029">FixedPoint.h:29</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ad61a01ef06cc3c41e4bb5006d9307687"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">arm_compute::detail::store_results&lt; 1 &gt;</a></div><div class="ttdeci">void store_results&lt; 1 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00132">NEDirectConvolution3x3.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_afaba543670e99c2483e0bd1996201ba3"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">arm_compute::detail::load_matrix_row</a></div><div class="ttdeci">float32x4x3_t load_matrix_row(const float *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00034">NEDirectConvolution3x3.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e959a9add1078033f3a27725323df13"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e959a9add1078033f3a27725323df13">arm_compute::vmull_qs8</a></div><div class="ttdeci">qint16x8_t vmull_qs8(qint8x8_t a, qint8x8_t b, int fixed_point_position)</div><div class="ttdoc">8 bit fixed point vector long multiply (8 elements) </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00627">NEFixedPoint.inl:627</a></div></div>
<div class="ttc" id="_access_window_static_8h_xhtml"><div class="ttname"><a href="_access_window_static_8h.xhtml">AccessWindowStatic.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1d54a1ef0078902b2334d2fddba74ca6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1d54a1ef0078902b2334d2fddba74ca6">arm_compute::vst1_qs16</a></div><div class="ttdeci">void vst1_qs16(qint16_t *addr, qint16x4_t b)</div><div class="ttdoc">Store a single 16 bit fixed point vector to memory (4 elements) </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00203">NEFixedPoint.inl:203</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ada853a8e19c80626633d95392d2b4a8b"><div class="ttname"><a href="namespacearm__compute.xhtml#ada853a8e19c80626633d95392d2b4a8b">arm_compute::vld1_dup_qs8</a></div><div class="ttdeci">qint8x8_t vld1_dup_qs8(const qint8_t *addr)</div><div class="ttdoc">Load all lanes of 8 bit fixed point vector with same value from memory (8 elements) ...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8inl_source.xhtml#l00173">NEFixedPoint.inl:173</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a30f6368deaea5f10f9dd1bbaa28c24e6"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">arm_compute::detail::get_input_num_elems_processed</a></div><div class="ttdeci">int get_input_num_elems_processed(unsigned int num_elems_written_per_iteration)</div><div class="ttdoc">Get the number of elements processed on 3x3 convolution. </div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a7a08a003e6ce7ea86cb7d8f4523c0eb5"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">arm_compute::detail::get_input_num_elems_processed&lt; 1 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 1 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00154">NEDirectConvolution3x3.h:154</a></div></div>
<div class="ttc" id="_n_e_fixed_point_8h_xhtml"><div class="ttname"><a href="_n_e_fixed_point_8h.xhtml">NEFixedPoint.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_abaf3037739c190361ad3f827d73440a1"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">arm_compute::detail::store_results&lt; 2 &gt;</a></div><div class="ttdeci">void store_results&lt; 2 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00139">NEDirectConvolution3x3.h:139</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a252c74fae9a9238ef7c23d306e670706"><div class="ttname"><a href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">arm_compute::qint8x8x3_t</a></div><div class="ttdeci">int8x8x3_t qint8x8x3_t</div><div class="ttdoc">8 bit fixed point vector with 24 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fixed_point_8h_source.xhtml#l00035">NEFixedPoint.h:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_315f6cf1ec0b2df3ae747ff8286a19f5.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_2c3c4cb85e732569e2614ad40a451d53.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_6b58bd0be07bddcf3022ab9b026cbf38.xhtml">detail</a></li><li class="navelem"><a class="el" href="_n_e_direct_convolution_detail_8h.xhtml">NEDirectConvolutionDetail.h</a></li>
    <li class="footer">Generated on Fri Mar 2 2018 12:37:52 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
