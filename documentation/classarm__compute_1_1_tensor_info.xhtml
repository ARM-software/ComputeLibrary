<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: TensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">TensorInfo Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for TensorInfo:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_tensor_info__coll__graph.svg" width="206" height="279"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a21c2ae9fa438faf42669dadda628080c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a> ()</td></tr>
<tr class="memdesc:a21c2ae9fa438faf42669dadda628080c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a21c2ae9fa438faf42669dadda628080c">More...</a><br /></td></tr>
<tr class="separator:a21c2ae9fa438faf42669dadda628080c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4eb5913c3ce5fe2bcbaafd8c9224d384">~TensorInfo</a> ()=default</td></tr>
<tr class="memdesc:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a4eb5913c3ce5fe2bcbaafd8c9224d384">More...</a><br /></td></tr>
<tr class="separator:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57911f186d22f552382d39010c09097d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a57911f186d22f552382d39010c09097d">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a57911f186d22f552382d39010c09097d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="#a57911f186d22f552382d39010c09097d">More...</a><br /></td></tr>
<tr class="separator:a57911f186d22f552382d39010c09097d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a494e9aa78ff5dde1788e0f9a8ba2213a">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)=default</td></tr>
<tr class="memdesc:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="#a494e9aa78ff5dde1788e0f9a8ba2213a">More...</a><br /></td></tr>
<tr class="separator:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf156ba30ff118c28690671e83ea06b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#adcf156ba30ff118c28690671e83ea06b">operator=</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)=default</td></tr>
<tr class="memdesc:adcf156ba30ff118c28690671e83ea06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="#adcf156ba30ff118c28690671e83ea06b">More...</a><br /></td></tr>
<tr class="separator:adcf156ba30ff118c28690671e83ea06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134dfebc14c0e971f8df850846764f8e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a134dfebc14c0e971f8df850846764f8e">TensorInfo</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a134dfebc14c0e971f8df850846764f8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="#a134dfebc14c0e971f8df850846764f8e">More...</a><br /></td></tr>
<tr class="separator:a134dfebc14c0e971f8df850846764f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">operator=</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">More...</a><br /></td></tr>
<tr class="separator:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6762d60a00d7d09087ea5cb41d4392a8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6762d60a00d7d09087ea5cb41d4392a8">TensorInfo</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a6762d60a00d7d09087ea5cb41d4392a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a tensor info with a format.  <a href="#a6762d60a00d7d09087ea5cb41d4392a8">More...</a><br /></td></tr>
<tr class="separator:a6762d60a00d7d09087ea5cb41d4392a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac307dc31ce68e3cf1273ffbc86e57646">TensorInfo</a> (unsigned int width, unsigned int height, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:ac307dc31ce68e3cf1273ffbc86e57646"><td class="mdescLeft">&#160;</td><td class="mdescRight">2D tensor constructor  <a href="#ac307dc31ce68e3cf1273ffbc86e57646">More...</a><br /></td></tr>
<tr class="separator:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9fa5acc4d8fd911b9b2fece99d3d5a8d">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a9fa5acc4d8fd911b9b2fece99d3d5a8d">More...</a><br /></td></tr>
<tr class="separator:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548b5b5c72f04c581933670098a1050f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a548b5b5c72f04c581933670098a1050f">TensorInfo</a> (size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:a548b5b5c72f04c581933670098a1050f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a tensor info with a data type and number of channels.  <a href="#a548b5b5c72f04c581933670098a1050f">More...</a><br /></td></tr>
<tr class="separator:a548b5b5c72f04c581933670098a1050f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95aaadcca549fc310c8e6dddb2ab78d7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a95aaadcca549fc310c8e6dddb2ab78d7">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:a95aaadcca549fc310c8e6dddb2ab78d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a95aaadcca549fc310c8e6dddb2ab78d7">More...</a><br /></td></tr>
<tr class="separator:a95aaadcca549fc310c8e6dddb2ab78d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3017dc3990baec97aa09599b82c63b1b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3017dc3990baec97aa09599b82c63b1b">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, <a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>)</td></tr>
<tr class="memdesc:a3017dc3990baec97aa09599b82c63b1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a3017dc3990baec97aa09599b82c63b1b">More...</a><br /></td></tr>
<tr class="separator:a3017dc3990baec97aa09599b82c63b1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3e249a7d8f329aa470d6903c9e415fe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad3e249a7d8f329aa470d6903c9e415fe">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:ad3e249a7d8f329aa470d6903c9e415fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#ad3e249a7d8f329aa470d6903c9e415fe">More...</a><br /></td></tr>
<tr class="separator:ad3e249a7d8f329aa470d6903c9e415fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the tensor info with just a format.  <a href="#ad6b64f33be1e66dcf7612483ffb8fd63">More...</a><br /></td></tr>
<tr class="separator:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0ae7d318c02e56a3daa9e5e4f9dab117">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#a0ae7d318c02e56a3daa9e5e4f9dab117">More...</a><br /></td></tr>
<tr class="separator:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad4b6171ddcf854de5d1226cd4d0b0439">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>, size_t total_size_in_bytes)</td></tr>
<tr class="memdesc:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#ad4b6171ddcf854de5d1226cd4d0b0439">More...</a><br /></td></tr>
<tr class="separator:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d75a4cba474685a8a6fa2ea97b2505"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa4d75a4cba474685a8a6fa2ea97b2505">init</a> (size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:aa4d75a4cba474685a8a6fa2ea97b2505"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the tensor info with just a format.  <a href="#aa4d75a4cba474685a8a6fa2ea97b2505">More...</a><br /></td></tr>
<tr class="separator:aa4d75a4cba474685a8a6fa2ea97b2505"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad535a8a10fae9fca925ae45c7931b9d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad535a8a10fae9fca925ae45c7931b9d6">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:ad535a8a10fae9fca925ae45c7931b9d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#ad535a8a10fae9fca925ae45c7931b9d6">More...</a><br /></td></tr>
<tr class="separator:ad535a8a10fae9fca925ae45c7931b9d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab12220b6863064c5dd4742fd0f3f0080"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab12220b6863064c5dd4742fd0f3f0080">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>, size_t total_size_in_bytes, int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:ab12220b6863064c5dd4742fd0f3f0080"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#ab12220b6863064c5dd4742fd0f3f0080">More...</a><br /></td></tr>
<tr class="separator:ab12220b6863064c5dd4742fd0f3f0080"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4eaa68a1707f4ff3983c6dddd21794ea">init</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata.  <a href="#a4eaa68a1707f4ff3983c6dddd21794ea">More...</a><br /></td></tr>
<tr class="separator:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b7391b7025befbe44b743723feb4a9b"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a4b7391b7025befbe44b743723feb4a9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated)  <a href="#a4b7391b7025befbe44b743723feb4a9b">More...</a><br /></td></tr>
<tr class="separator:a4b7391b7025befbe44b743723feb4a9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a316bb82020031b46ad452a7ad0d4b461"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a316bb82020031b46ad452a7ad0d4b461">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:a316bb82020031b46ad452a7ad0d4b461"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape, number of channels, data type and fixed point position.  <a href="#a316bb82020031b46ad452a7ad0d4b461">More...</a><br /></td></tr>
<tr class="separator:a316bb82020031b46ad452a7ad0d4b461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a30265f100a459de985a9f3f91db76c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a30265f100a459de985a9f3f91db76c">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:a9a30265f100a459de985a9f3f91db76c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata.  <a href="#a9a30265f100a459de985a9f3f91db76c">More...</a><br /></td></tr>
<tr class="separator:a9a30265f100a459de985a9f3f91db76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c066d42d665fafb8cfe80b99411e4fb"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4c066d42d665fafb8cfe80b99411e4fb">clone</a> () const override</td></tr>
<tr class="memdesc:a4c066d42d665fafb8cfe80b99411e4fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a clone of the current object of class T.  <a href="#a4c066d42d665fafb8cfe80b99411e4fb">More...</a><br /></td></tr>
<tr class="separator:a4c066d42d665fafb8cfe80b99411e4fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a613528bd0feb15ee8d6df06cbdb629f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a613528bd0feb15ee8d6df06cbdb629f8">set_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>) override</td></tr>
<tr class="memdesc:a613528bd0feb15ee8d6df06cbdb629f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type to the specified value.  <a href="#a613528bd0feb15ee8d6df06cbdb629f8">More...</a><br /></td></tr>
<tr class="separator:a613528bd0feb15ee8d6df06cbdb629f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b0a9fd674f8748506b6944c030bc47e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5b0a9fd674f8748506b6944c030bc47e">set_num_channels</a> (int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>) override</td></tr>
<tr class="memdesc:a5b0a9fd674f8748506b6944c030bc47e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the number of channels to the specified value.  <a href="#a5b0a9fd674f8748506b6944c030bc47e">More...</a><br /></td></tr>
<tr class="separator:a5b0a9fd674f8748506b6944c030bc47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af501bc12f51874e786b0f28016a99ff7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af501bc12f51874e786b0f28016a99ff7">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>) override</td></tr>
<tr class="memdesc:af501bc12f51874e786b0f28016a99ff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="#af501bc12f51874e786b0f28016a99ff7">More...</a><br /></td></tr>
<tr class="separator:af501bc12f51874e786b0f28016a99ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e8ce43ba86fece3400cf79d0978811"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a73e8ce43ba86fece3400cf79d0978811">set_tensor_shape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape) override</td></tr>
<tr class="memdesc:a73e8ce43ba86fece3400cf79d0978811"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape of an already initialized tensor.  <a href="#a73e8ce43ba86fece3400cf79d0978811">More...</a><br /></td></tr>
<tr class="separator:a73e8ce43ba86fece3400cf79d0978811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2732b9eab657cad69807adb815b97c9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a2732b9eab657cad69807adb815b97c9f">set_fixed_point_position</a> (int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>) override</td></tr>
<tr class="memdesc:a2732b9eab657cad69807adb815b97c9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the fixed point position to the specified value.  <a href="#a2732b9eab657cad69807adb815b97c9f">More...</a><br /></td></tr>
<tr class="separator:a2732b9eab657cad69807adb815b97c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3099a4be4777389b60712f43e065403"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ae3099a4be4777389b60712f43e065403">set_quantization_info</a> (<a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>) override</td></tr>
<tr class="memdesc:ae3099a4be4777389b60712f43e065403"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the quantization settings (scale and offset) of the tensor.  <a href="#ae3099a4be4777389b60712f43e065403">More...</a><br /></td></tr>
<tr class="separator:ae3099a4be4777389b60712f43e065403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29c039b6f3c4534928ed99aa9f53027"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad29c039b6f3c4534928ed99aa9f53027">reset_padding</a> () override</td></tr>
<tr class="memdesc:ad29c039b6f3c4534928ed99aa9f53027"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the padding settings of the tensor.  <a href="#ad29c039b6f3c4534928ed99aa9f53027">More...</a><br /></td></tr>
<tr class="separator:ad29c039b6f3c4534928ed99aa9f53027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a907f837b924945ad1981c8fe8eca61e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">auto_padding</a> () override</td></tr>
<tr class="memdesc:a907f837b924945ad1981c8fe8eca61e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="#a907f837b924945ad1981c8fe8eca61e4">More...</a><br /></td></tr>
<tr class="separator:a907f837b924945ad1981c8fe8eca61e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53d8203ecc37896ca4579d1ee3fdffc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>) override</td></tr>
<tr class="memdesc:af53d8203ecc37896ca4579d1ee3fdffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="#af53d8203ecc37896ca4579d1ee3fdffc">More...</a><br /></td></tr>
<tr class="separator:af53d8203ecc37896ca4579d1ee3fdffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8813441b655b97c00139c6a5a6390e97"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a> (size_t index) const override</td></tr>
<tr class="memdesc:a8813441b655b97c00139c6a5a6390e97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="#a8813441b655b97c00139c6a5a6390e97">More...</a><br /></td></tr>
<tr class="separator:a8813441b655b97c00139c6a5a6390e97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a> () const override</td></tr>
<tr class="memdesc:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="#a5f1ca9d674346287cae57a6c5b5c24ec">More...</a><br /></td></tr>
<tr class="separator:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab54246abe670b06f5624add7e7022904"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a> () const override</td></tr>
<tr class="memdesc:ab54246abe670b06f5624add7e7022904"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="#ab54246abe670b06f5624add7e7022904">More...</a><br /></td></tr>
<tr class="separator:ab54246abe670b06f5624add7e7022904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a147790358ccd40f61dcd618cd4edd688"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a147790358ccd40f61dcd618cd4edd688">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const override</td></tr>
<tr class="memdesc:a147790358ccd40f61dcd618cd4edd688"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="#a147790358ccd40f61dcd618cd4edd688">More...</a><br /></td></tr>
<tr class="separator:a147790358ccd40f61dcd618cd4edd688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ccf2eb0c18a15feab2db98b307b78b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a> () const override</td></tr>
<tr class="memdesc:a35ccf2eb0c18a15feab2db98b307b78b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fixed point position used when the tensor data type is QS8 or QS16.  <a href="#a35ccf2eb0c18a15feab2db98b307b78b">More...</a><br /></td></tr>
<tr class="separator:a35ccf2eb0c18a15feab2db98b307b78b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b67b578f684c4d516843c9dea86a23"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a> () const override</td></tr>
<tr class="memdesc:a62b67b578f684c4d516843c9dea86a23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c" title="The number of channels for each tensor element. ">num_channels()</a>  <a href="#a62b67b578f684c4d516843c9dea86a23">More...</a><br /></td></tr>
<tr class="separator:a62b67b578f684c4d516843c9dea86a23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13622133d9b41900a6a3e8f89e59a78b"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">num_dimensions</a> () const override</td></tr>
<tr class="memdesc:a13622133d9b41900a6a3e8f89e59a78b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="#a13622133d9b41900a6a3e8f89e59a78b">More...</a><br /></td></tr>
<tr class="separator:a13622133d9b41900a6a3e8f89e59a78b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f13b974eeb528acde66de8d9b3fd95c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> () const override</td></tr>
<tr class="memdesc:a6f13b974eeb528acde66de8d9b3fd95c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="#a6f13b974eeb528acde66de8d9b3fd95c">More...</a><br /></td></tr>
<tr class="separator:a6f13b974eeb528acde66de8d9b3fd95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a269b19ce3f357ac65f41f9951906e38e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a> () const override</td></tr>
<tr class="memdesc:a269b19ce3f357ac65f41f9951906e38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="#a269b19ce3f357ac65f41f9951906e38e">More...</a><br /></td></tr>
<tr class="separator:a269b19ce3f357ac65f41f9951906e38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a3e72153aeb3ed212e9c3698774e881"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a> () const override</td></tr>
<tr class="memdesc:a9a3e72153aeb3ed212e9c3698774e881"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="#a9a3e72153aeb3ed212e9c3698774e881">More...</a><br /></td></tr>
<tr class="separator:a9a3e72153aeb3ed212e9c3698774e881"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a> () const override</td></tr>
<tr class="memdesc:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="#ac4b36cc1e56b0b7e579bb4b7196490db">More...</a><br /></td></tr>
<tr class="separator:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af398466b602a02b42d8df19fb66a6c60"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a> () const override</td></tr>
<tr class="memdesc:af398466b602a02b42d8df19fb66a6c60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="#af398466b602a02b42d8df19fb66a6c60">More...</a><br /></td></tr>
<tr class="separator:af398466b602a02b42d8df19fb66a6c60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e20eacb1e963e24a21ebd7369effd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a> () const override</td></tr>
<tr class="memdesc:a79e20eacb1e963e24a21ebd7369effd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="#a79e20eacb1e963e24a21ebd7369effd7">More...</a><br /></td></tr>
<tr class="separator:a79e20eacb1e963e24a21ebd7369effd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ca251f99c56767719e991a26371603"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">has_padding</a> () const override</td></tr>
<tr class="memdesc:aa2ca251f99c56767719e991a26371603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="#aa2ca251f99c56767719e991a26371603">More...</a><br /></td></tr>
<tr class="separator:aa2ca251f99c56767719e991a26371603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee6555ace43b03173844b1a228a3fc3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a> () const override</td></tr>
<tr class="memdesc:aaee6555ace43b03173844b1a228a3fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="#aaee6555ace43b03173844b1a228a3fc3">More...</a><br /></td></tr>
<tr class="separator:aaee6555ace43b03173844b1a228a3fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78bf77b2d9b959259f77a32b9a412184"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>) override</td></tr>
<tr class="memdesc:a78bf77b2d9b959259f77a32b9a412184"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="#a78bf77b2d9b959259f77a32b9a412184">More...</a><br /></td></tr>
<tr class="separator:a78bf77b2d9b959259f77a32b9a412184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c20d908342087484d883574d55dd482"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a> () const override</td></tr>
<tr class="memdesc:a3c20d908342087484d883574d55dd482"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="#a3c20d908342087484d883574d55dd482">More...</a><br /></td></tr>
<tr class="separator:a3c20d908342087484d883574d55dd482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cbba4e45a4a1e389606493af3814415"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0cbba4e45a4a1e389606493af3814415">set_valid_region</a> (<a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>) override</td></tr>
<tr class="memdesc:a0cbba4e45a4a1e389606493af3814415"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="#a0cbba4e45a4a1e389606493af3814415">More...</a><br /></td></tr>
<tr class="separator:a0cbba4e45a4a1e389606493af3814415"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74736e3863207232a23b7181c1d0f44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a> () const override</td></tr>
<tr class="memdesc:ac74736e3863207232a23b7181c1d0f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the quantization settings (scale and offset) of the tensor.  <a href="#ac74736e3863207232a23b7181c1d0f44">More...</a><br /></td></tr>
<tr class="separator:ac74736e3863207232a23b7181c1d0f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_tensor_info"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_tensor_info')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memitem:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">~ITensorInfo</a> ()=default</td></tr>
<tr class="memdesc:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="#ad998b50febf68540277e121a9c670bfa">More...</a><br /></td></tr>
<tr class="separator:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1misc_1_1_i_cloneable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml">ICloneable&lt; ITensorInfo &gt;</a></td></tr>
<tr class="memitem:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">~ICloneable</a> ()=default</td></tr>
<tr class="memdesc:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual desctructor.  <a href="#a711fa7a27557369760fc1fd236deb51c">More...</a><br /></td></tr>
<tr class="separator:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a21c2ae9fa438faf42669dadda628080c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a4eb5913c3ce5fe2bcbaafd8c9224d384"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<a class="anchor" id="a57911f186d22f552382d39010c09097d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a class="anchor" id="a494e9aa78ff5dde1788e0f9a8ba2213a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a class="anchor" id="a134dfebc14c0e971f8df850846764f8e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a class="anchor" id="a6762d60a00d7d09087ea5cb41d4392a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a tensor info with a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac307dc31ce68e3cf1273ffbc86e57646"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>2D tensor constructor </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9fa5acc4d8fd911b9b2fece99d3d5a8d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a548b5b5c72f04c581933670098a1050f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a tensor info with a data type and number of channels. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) It specifies the fixed point position when the tensor data type is QS8, QS16 or QS32. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a95aaadcca549fc310c8e6dddb2ab78d7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Fixed point position that expresses the number of bits for the fractional part of the number when the tensor's data type is QS8 or QS16. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3017dc3990baec97aa09599b82c63b1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>The quantization settings for the tensor data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3e249a7d8f329aa470d6903c9e415fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a907f837b924945ad1981c8fe8eca61e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">ITensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="a4c066d42d665fafb8cfe80b99411e4fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&gt; clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provide a clone of the current object of class T. </p>
<dl class="section return"><dt>Returns</dt><dd>Clone object of class T </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">ICloneable&lt; ITensorInfo &gt;</a>.</p>

<p>Referenced by <a class="el" href="_tensor_info_8cpp_source.xhtml#l00087">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a class="anchor" id="a9a3e72153aeb3ed212e9c3698774e881"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> data type </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00259">259</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00105">CLAccessor::data_type()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00103">GCAccessor::data_type()</a>, <a class="el" href="_tensor_info_8cpp_source.xhtml#l00087">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_type_printer_8h_source.xhtml#l00595">arm_compute::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> _data_type;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8813441b655b97c00139c6a5a6390e97"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00226">226</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="cl__events_8cpp_source.xhtml#l00036">main_cl_events()</a>, and <a class="el" href="neoncl__scale__median__gaussian_8cpp_source.xhtml#l00042">main_neoncl_scale_median_gaussian()</a>.</p>
<div class="fragment"><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> _tensor_shape[index];</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a62b67b578f684c4d516843c9dea86a23"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c" title="The number of channels for each tensor element. ">num_channels()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00243">243</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00089">arm_compute::data_size_from_type()</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00090">CLAccessor::element_size()</a>, and <a class="el" href="_g_c_accessor_8h_source.xhtml#l00088">GCAccessor::element_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(_data_type) * _num_channels;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af53d8203ecc37896ca4579d1ee3fdffc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>.</p>

</div>
</div>
<a class="anchor" id="a35ccf2eb0c18a15feab2db98b307b78b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int fixed_point_position </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fixed point position used when the tensor data type is QS8 or QS16. </p>
<dl class="section return"><dt>Returns</dt><dd>The fixed point position that expresses the number of bits for the fractional part of the number </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ab21a362740e892b6e913bd8db03b0e67">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00239">239</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00125">CLAccessor::fixed_point_position()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00123">GCAccessor::fixed_point_position()</a>, <a class="el" href="_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_type_printer_8h_source.xhtml#l00595">arm_compute::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> _fixed_point_position;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac4b36cc1e56b0b7e579bb4b7196490db"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00263">263</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00100">CLAccessor::format()</a>, and <a class="el" href="_g_c_accessor_8h_source.xhtml#l00098">GCAccessor::format()</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">return</span> _format;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa2ca251f99c56767719e991a26371603"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00275">275</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00225">BorderSize::empty()</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">return</span> !_padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#adffbf97e7b8b64e7cf32f0254cddf3c4">empty</a>();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_adffbf97e7b8b64e7cf32f0254cddf3c4"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#adffbf97e7b8b64e7cf32f0254cddf3c4">arm_compute::BorderSize::empty</a></div><div class="ttdeci">constexpr bool empty() const </div><div class="ttdoc">Check if the entire border is zero. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00225">Types.h:225</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad6b64f33be1e66dcf7612483ffb8fd63"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the tensor info with just a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0ae7d318c02e56a3daa9e5e4f9dab117"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad4b6171ddcf854de5d1226cd4d0b0439"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa4d75a4cba474685a8a6fa2ea97b2505"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the tensor info with just a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Fixed point position when the tensor data type is QS8, QS16 or QS32. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad535a8a10fae9fca925ae45c7931b9d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Fixed point position that expresses the number of bits for the fractional part of the number when the tensor's data type is QS8 or QS16. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab12220b6863064c5dd4742fd0f3f0080"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Fixed point position that expresses the number of bits for the fractional part of the number when the tensor's data type is QS8 or QS16. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4eaa68a1707f4ff3983c6dddd21794ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4b7391b7025befbe44b743723feb4a9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated) </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="a316bb82020031b46ad452a7ad0d4b461"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape, number of channels, data type and fixed point position. </p>
<p>(Padding is automatically calculated)</p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Fixed point position that expresses the number of bits for the fractional part of the number when the tensor's data type is QS8 or QS16.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="a9a30265f100a459de985a9f3f91db76c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata. </p>
<dl class="section note"><dt>Note</dt><dd>init_auto_padding will be used for the tensor initialization.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaee6555ace43b03173844b1a228a3fc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00279">279</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2_c_l_2_activation_layer_8cpp_source.xhtml#l00114">arm_compute::test::validation::DATA_TEST_CASE()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00283">TensorInfo::set_is_resizable()</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">return</span> _is_resizable;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6f13b974eeb528acde66de8d9b3fd95c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00251">251</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00110">CLAccessor::num_channels()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00108">GCAccessor::num_channels()</a>, <a class="el" href="_tensor_info_8cpp_source.xhtml#l00087">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_type_printer_8h_source.xhtml#l00595">arm_compute::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">return</span> _num_channels;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a13622133d9b41900a6a3e8f89e59a78b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00247">247</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00122">Dimensions.h:122</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a147790358ccd40f61dcd618cd4edd688"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a8a5312c9a822d27a3b38dc238c1c7de3">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_tensor_info_8h_source.xhtml#l00234">TensorInfo::offset_first_element_in_bytes()</a>.</p>

</div>
</div>
<a class="anchor" id="ab54246abe670b06f5624add7e7022904"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00234">234</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a147790358ccd40f61dcd618cd4edd688">TensorInfo::offset_element_in_bytes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">return</span> _offset_first_element_in_bytes;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adcf156ba30ff118c28690671e83ea06b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a class="anchor" id="a532c27f6bf3cd9275cb7fc9a0d0bbf6e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a class="anchor" id="a79e20eacb1e963e24a21ebd7369effd7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00271">271</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2_c_l_2_activation_layer_8cpp_source.xhtml#l00114">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_2_accumulate_8cpp_source.xhtml#l00131">arm_compute::test::validation::FIXTURE_DATA_TEST_CASE()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00118">GCAccessor::padding()</a>, and <a class="el" href="_c_l_accessor_8h_source.xhtml#l00120">CLAccessor::padding()</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">return</span> _padding;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac74736e3863207232a23b7181c1d0f44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the quantization settings (scale and offset) of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="structarm__compute_1_1_quantization_info.xhtml" title="Quantization settings (used for QASYMM8 data type) ">QuantizationInfo</a> containing the scale and offset. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00296">296</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00066">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00130">CLAccessor::quantization_info()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00128">GCAccessor::quantization_info()</a>, and <a class="el" href="_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">return</span> _quantization_info;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad29c039b6f3c4534928ed99aa9f53027"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; reset_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resets the padding settings of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc135290818a7ae02d2195c013796fdd">ITensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="a613528bd0feb15ee8d6df06cbdb629f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The new data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a class="anchor" id="a2732b9eab657cad69807adb815b97c9f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_fixed_point_position </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the fixed point position to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>The fixed point position must be set once the data type has been configured</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>The new fixed point position</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a8d9488caf817e12132f0ca2a4c30deba">ITensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="af501bc12f51874e786b0f28016a99ff7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>If the data type has already been configured (i.e. not UNKNOWN) it must match the new format. If data type hasn't been configured it will be based on the format.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a17394f0f7aea22d9b2d4c6f33bfa69ca">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_c_l_2_harris_corners_8cpp_source.xhtml#l00057">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_2_min_max_location_8cpp_source.xhtml#l00104">arm_compute::test::validation::FIXTURE_DATA_TEST_CASE()</a>, and <a class="el" href="_c_l_2_min_max_location_8cpp_source.xhtml#l00045">arm_compute::test::validation::validate_configuration()</a>.</p>

</div>
</div>
<a class="anchor" id="a78bf77b2d9b959259f77a32b9a412184"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_resizable</td><td>Flag that marks the tensor if it can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9273842d8e5dc1a3c7fab727176fd7fe">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00283">283</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="_tensor_info_8h_source.xhtml#l00279">TensorInfo::is_resizable()</a>.</p>
<div class="fragment"><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        _is_resizable = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_aaee6555ace43b03173844b1a228a3fc3"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">arm_compute::TensorInfo::is_resizable</a></div><div class="ttdeci">bool is_resizable() const override</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00279">TensorInfo.h:279</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5b0a9fd674f8748506b6944c030bc47e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_num_channels </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the number of channels to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">ITensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="ae3099a4be4777389b60712f43e065403"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_quantization_info </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the quantization settings (scale and offset) of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td><a class="el" href="structarm__compute_1_1_quantization_info.xhtml" title="Quantization settings (used for QASYMM8 data type) ">QuantizationInfo</a> containing the scale and offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ab64a0374b9e2292ed2b55f4f18c98423">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00455">arm_compute::test::create_tensor()</a>, and <a class="el" href="validation_2_c_l_2_g_e_m_m_lowp_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>.</p>

</div>
</div>
<a class="anchor" id="a73e8ce43ba86fece3400cf79d0978811"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_tensor_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape of an already initialized tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>Changing the shape requires to recompute the strides and is therefore only possible if the tensor hasn't been allocated yet.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New tensor shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf359cee0fc728e7c7fb8b692979994b">ITensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a class="anchor" id="a0cbba4e45a4a1e389606493af3814415"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_valid_region </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region to set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#acea00276098762fd0e83a3c25d9f88cb">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00292">292</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        _valid_region = std::move(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a3c20d908342087484d883574d55dd482"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">arm_compute::TensorInfo::valid_region</a></div><div class="ttdeci">ValidRegion valid_region() const override</div><div class="ttdoc">Valid region of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00288">TensorInfo.h:288</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5f1ca9d674346287cae57a6c5b5c24ec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes. ">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00230">230</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">return</span> _strides_in_bytes;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a269b19ce3f357ac65f41f9951906e38e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00255">255</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00115">CLAccessor::num_elements()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00113">GCAccessor::num_elements()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00085">CLAccessor::shape()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00083">GCAccessor::shape()</a>, <a class="el" href="_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_type_printer_8h_source.xhtml#l00595">arm_compute::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> _tensor_shape;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af398466b602a02b42d8df19fb66a6c60"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00267">267</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="cl__sgemm_8cpp_source.xhtml#l00039">main_cl_sgemm()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00095">CLAccessor::size()</a>, <a class="el" href="_g_c_accessor_8h_source.xhtml#l00093">GCAccessor::size()</a>, and <a class="el" href="_tensor_allocator_8cpp_source.xhtml#l00042">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">return</span> _total_size;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3c20d908342087484d883574d55dd482"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo</a>.</p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00288">288</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2_c_l_2_activation_layer_8cpp_source.xhtml#l00114">arm_compute::test::validation::DATA_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">return</span> _valid_region;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
