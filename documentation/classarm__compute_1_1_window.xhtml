<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Window Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_window.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">Window Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Describe a multidimensional execution window.  
 <a href="classarm__compute_1_1_window.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_window_8h_source.xhtml">Window.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe one of the image's dimensions with a start, end and step.  <a href="classarm__compute_1_1_window_1_1_dimension.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab242a9d3683ac8f480f7944ff6f40534"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> ()</td></tr>
<tr class="memdesc:ab242a9d3683ac8f480f7944ff6f40534"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor: create a window containing a single element.  <a href="#ab242a9d3683ac8f480f7944ff6f40534">More...</a><br /></td></tr>
<tr class="separator:ab242a9d3683ac8f480f7944ff6f40534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65e2546322a23806510364033bc8fcd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae65e2546322a23806510364033bc8fcd">Window</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;src)</td></tr>
<tr class="memdesc:ae65e2546322a23806510364033bc8fcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#ae65e2546322a23806510364033bc8fcd">More...</a><br /></td></tr>
<tr class="separator:ae65e2546322a23806510364033bc8fcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a677b385d536f4f81706f729e9b1c91da"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a677b385d536f4f81706f729e9b1c91da">operator[]</a> (size_t dimension) const </td></tr>
<tr class="memdesc:a677b385d536f4f81706f729e9b1c91da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to a given dimension of the window.  <a href="#a677b385d536f4f81706f729e9b1c91da">More...</a><br /></td></tr>
<tr class="separator:a677b385d536f4f81706f729e9b1c91da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade63ce331b49eb66d330aab444e57ca9"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ade63ce331b49eb66d330aab444e57ca9">x</a> () const </td></tr>
<tr class="memdesc:ade63ce331b49eb66d330aab444e57ca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the first dimension of the window.  <a href="#ade63ce331b49eb66d330aab444e57ca9">More...</a><br /></td></tr>
<tr class="separator:ade63ce331b49eb66d330aab444e57ca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd49c804f269c0e2c251c4efd44a275"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aedd49c804f269c0e2c251c4efd44a275">y</a> () const </td></tr>
<tr class="memdesc:aedd49c804f269c0e2c251c4efd44a275"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the second dimension of the window.  <a href="#aedd49c804f269c0e2c251c4efd44a275">More...</a><br /></td></tr>
<tr class="separator:aedd49c804f269c0e2c251c4efd44a275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6a04ff1f61b38e07ddb8ef741c996b"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ade6a04ff1f61b38e07ddb8ef741c996b">z</a> () const </td></tr>
<tr class="memdesc:ade6a04ff1f61b38e07ddb8ef741c996b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the third dimension of the window.  <a href="#ade6a04ff1f61b38e07ddb8ef741c996b">More...</a><br /></td></tr>
<tr class="separator:ade6a04ff1f61b38e07ddb8ef741c996b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a> (size_t dimension, const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;dim)</td></tr>
<tr class="memdesc:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the values of a given dimension.  <a href="#acd3d2bba51cb84d34dd7656ad2375a6e">More...</a><br /></td></tr>
<tr class="separator:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, size_t first_dimension=<a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)</td></tr>
<tr class="memdesc:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the tensor's dimensions to fill the window dimensions.  <a href="#a14470b4cb59140a1b6ff3b8f16c89ab6">More...</a><br /></td></tr>
<tr class="separator:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae688f3eb6c2673216d12d5490e1e88dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">shift</a> (size_t dimension, int shift_value)</td></tr>
<tr class="memdesc:ae688f3eb6c2673216d12d5490e1e88dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shift the values of a given dimension by the given shift_value.  <a href="#ae688f3eb6c2673216d12d5490e1e88dc">More...</a><br /></td></tr>
<tr class="separator:ae688f3eb6c2673216d12d5490e1e88dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69496c7cb46a4101813d7456a6bd097b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">adjust</a> (size_t dimension, int adjust_value, bool is_at_start)</td></tr>
<tr class="memdesc:a69496c7cb46a4101813d7456a6bd097b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the start or end of a given dimension by the given value.  <a href="#a69496c7cb46a4101813d7456a6bd097b">More...</a><br /></td></tr>
<tr class="separator:a69496c7cb46a4101813d7456a6bd097b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">scale</a> (size_t dimension, float scale_value)</td></tr>
<tr class="memdesc:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the values of a given dimension by the given scale_value.  <a href="#a5e8e5ab06329702df09ab7eb07e9b84d">More...</a><br /></td></tr>
<tr class="separator:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">set_dimension_step</a> (size_t dimension, int step)</td></tr>
<tr class="memdesc:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the step of a given dimension.  <a href="#a55ed4ad2395fd25ba847cbf6c54b85e4">More...</a><br /></td></tr>
<tr class="separator:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048aaadf42ac725952523dd9546e96b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a048aaadf42ac725952523dd9546e96b5">validate</a> () const </td></tr>
<tr class="memdesc:a048aaadf42ac725952523dd9546e96b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will validate all the window's dimensions' values when asserts are enabled.  <a href="#a048aaadf42ac725952523dd9546e96b5">More...</a><br /></td></tr>
<tr class="separator:a048aaadf42ac725952523dd9546e96b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b83048403721ed7e90d402e7cf3999b"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a7b83048403721ed7e90d402e7cf3999b">num_iterations</a> (size_t dimension) const </td></tr>
<tr class="memdesc:a7b83048403721ed7e90d402e7cf3999b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of iterations needed to iterate through a given dimension.  <a href="#a7b83048403721ed7e90d402e7cf3999b">More...</a><br /></td></tr>
<tr class="separator:a7b83048403721ed7e90d402e7cf3999b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4ce41fc0f8c3203753a4fbee8211f5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aa4ce41fc0f8c3203753a4fbee8211f5a">split_window</a> (size_t dimension, size_t <a class="el" href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a>, size_t total) const </td></tr>
<tr class="memdesc:aa4ce41fc0f8c3203753a4fbee8211f5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split a window into a set of sub windows along a given dimension.  <a href="#aa4ce41fc0f8c3203753a4fbee8211f5a">More...</a><br /></td></tr>
<tr class="separator:aa4ce41fc0f8c3203753a4fbee8211f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3676505cf898acf69de5cd1724ae9330"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a3676505cf898acf69de5cd1724ae9330">first_slice_window_1D</a> () const </td></tr>
<tr class="memdesc:a3676505cf898acf69de5cd1724ae9330"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 1D slice of the window.  <a href="#a3676505cf898acf69de5cd1724ae9330">More...</a><br /></td></tr>
<tr class="separator:a3676505cf898acf69de5cd1724ae9330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade2fffd59eaeb4db72526174f504f209"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ade2fffd59eaeb4db72526174f504f209">first_slice_window_2D</a> () const </td></tr>
<tr class="memdesc:ade2fffd59eaeb4db72526174f504f209"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 2D slice of the window.  <a href="#ade2fffd59eaeb4db72526174f504f209">More...</a><br /></td></tr>
<tr class="separator:ade2fffd59eaeb4db72526174f504f209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76441f1deaa44bcc1a3b402680ed646b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a76441f1deaa44bcc1a3b402680ed646b">first_slice_window_3D</a> () const </td></tr>
<tr class="memdesc:a76441f1deaa44bcc1a3b402680ed646b"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 3D slice of the window.  <a href="#a76441f1deaa44bcc1a3b402680ed646b">More...</a><br /></td></tr>
<tr class="separator:a76441f1deaa44bcc1a3b402680ed646b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cdf746368c9cfe7b07f1ebbb43810af"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a5cdf746368c9cfe7b07f1ebbb43810af">slide_window_slice_1D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const </td></tr>
<tr class="memdesc:a5cdf746368c9cfe7b07f1ebbb43810af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 1D window slice.  <a href="#a5cdf746368c9cfe7b07f1ebbb43810af">More...</a><br /></td></tr>
<tr class="separator:a5cdf746368c9cfe7b07f1ebbb43810af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25e4deca6ce9a7b258e791851eec3f05"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a25e4deca6ce9a7b258e791851eec3f05">slide_window_slice_2D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const </td></tr>
<tr class="memdesc:a25e4deca6ce9a7b258e791851eec3f05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 2D window slice.  <a href="#a25e4deca6ce9a7b258e791851eec3f05">More...</a><br /></td></tr>
<tr class="separator:a25e4deca6ce9a7b258e791851eec3f05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96febcbb5f48b24a562ae60353665654"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a96febcbb5f48b24a562ae60353665654">slide_window_slice_3D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const </td></tr>
<tr class="memdesc:a96febcbb5f48b24a562ae60353665654"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 3D window slice.  <a href="#a96febcbb5f48b24a562ae60353665654">More...</a><br /></td></tr>
<tr class="separator:a96febcbb5f48b24a562ae60353665654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af17a73ce230dc8ff4df86c5730781783"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#af17a73ce230dc8ff4df86c5730781783">slide_window_slice_4D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const </td></tr>
<tr class="memdesc:af17a73ce230dc8ff4df86c5730781783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 4D window slice.  <a href="#af17a73ce230dc8ff4df86c5730781783">More...</a><br /></td></tr>
<tr class="separator:af17a73ce230dc8ff4df86c5730781783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03aa33569ab65de2634d1b71af53674d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a03aa33569ab65de2634d1b71af53674d">collapse_if_possible</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, size_t first) const </td></tr>
<tr class="separator:a03aa33569ab65de2634d1b71af53674d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:aa96e81276ee4f87ab386cd05a5539a7d"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">DimX</a> = 0</td></tr>
<tr class="memdesc:aa96e81276ee4f87ab386cd05a5539a7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 0 also known as X dimension.  <a href="#aa96e81276ee4f87ab386cd05a5539a7d">More...</a><br /></td></tr>
<tr class="separator:aa96e81276ee4f87ab386cd05a5539a7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d402364fa822b0b7775081291eeca9"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">DimY</a> = 1</td></tr>
<tr class="memdesc:ad2d402364fa822b0b7775081291eeca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 1 also known as Y dimension.  <a href="#ad2d402364fa822b0b7775081291eeca9">More...</a><br /></td></tr>
<tr class="separator:ad2d402364fa822b0b7775081291eeca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">DimZ</a> = 2</td></tr>
<tr class="memdesc:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 2 also known as Z dimension.  <a href="#a893d17b56b9abc4423ce26e9a24ac5dc">More...</a><br /></td></tr>
<tr class="separator:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Describe a multidimensional execution window. </p>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab242a9d3683ac8f480f7944ff6f40534"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor: create a window containing a single element. </p>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        : _dims()</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae65e2546322a23806510364033bc8fcd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Copy the values from src to a new object </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00026">26</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    : _dims()</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">set</span>(i, src[i]);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a69496c7cb46a4101813d7456a6bd097b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void adjust </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>adjust_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_at_start</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adjust the start or end of a given dimension by the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to adjust </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">adjust_value</td><td>The adjusted value. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_at_start</td><td>The flag to indicate whether adjust the start or end of the dimension. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00082">82</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00090">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8h_source.xhtml#l00085">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00095">Window::Dimension::step()</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    Window::Dimension &amp;d = _dims[dimension];</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span>(is_at_start)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        d = Window::Dimension(d.start() + adjust_value, d.end(), d.step());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        d = Window::Dimension(d.start(), d.end() + adjust_value, d.step());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a03aa33569ab65de2634d1b71af53674d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> collapse_if_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full_window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00046">46</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="_window_8inl_source.xhtml#l00040">Window::set()</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00292">Window::slide_window_slice_4D()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">bool</span>   is_collapsable = <span class="keyword">false</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> collapsed;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span>(is_collapsable)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            collapsed.set(first, Window::Dimension(collapsed[first].end() * _dims[d].start(), collapsed[first].end() * _dims[d].end()));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            collapsed.set(d, _dims[d]);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">if</span>(is_collapsable || d == first) <span class="comment">// Try to start collapsing from this dimension</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="comment">// The _dims&#39;s dimension must match the full _dims dimension to be collapsable:</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            is_collapsable = _dims[d].start() == 0 &amp;&amp; _dims[d].start() == full_window[d].start()</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                             &amp;&amp; full_window[d].end() == _dims[d].end();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            is_collapsable = <span class="keyword">false</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> collapsed;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_window_xhtml_ab242a9d3683ac8f480f7944ff6f40534"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">arm_compute::Window::Window</a></div><div class="ttdeci">constexpr Window()</div><div class="ttdoc">Default constructor: create a window containing a single element. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00050">Window.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3676505cf898acf69de5cd1724ae9330"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_1D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 1D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00228">228</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;1&gt;();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ade2fffd59eaeb4db72526174f504f209"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_2D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 2D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00236">236</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;2&gt;();</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a76441f1deaa44bcc1a3b402680ed646b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 3D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00244">244</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;3&gt;();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7b83048403721ed7e90d402e7cf3999b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t num_iterations </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of iterations needed to iterate through a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The requested dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of iterations </dd></dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00122">122</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>Referenced by <a class="el" href="_window_8inl_source.xhtml#l00129">Window::split_window()</a>, and <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Precondition: (end - start) % step == 0</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> (_dims.at(dimension).end() - _dims.at(dimension).start()) / _dims.at(dimension).step();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a677b385d536f4f81706f729e9b1c91da"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read only access to a given dimension of the window. </p>
<dl class="section note"><dt>Note</dt><dd>Precondition: dimension &lt; <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc" title="Number of dimensions the tensor has. ">Coordinates::num_max_dimensions</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested dimension </dd></dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00035">35</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00103">Window::Dimension::set_step()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> _dims.at(dimension);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5e8e5ab06329702df09ab7eb07e9b84d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scale </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale the values of a given dimension by the given scale_value. </p>
<dl class="section note"><dt>Note</dt><dd>The end of the window is rounded up to be a multiple of step after the scaling.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to scale </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_value</td><td>Value to scale the start, end and step values of. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00097">97</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00045">arm_compute::ceil_to_multiple()</a>, <a class="el" href="_window_8h_source.xhtml#l00090">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="_window_8h_source.xhtml#l00095">Window::Dimension::step()</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    Window::Dimension &amp;d           = _dims[dimension];</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_step = d.step() * scale_value;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_end  = <a class="code" href="namespacearm__compute.xhtml#adf0c6059174045f80af46a0f1fb57bc6">ceil_to_multiple</a>(d.end() * scale_value, scaled_step);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    d                              = Window::Dimension(d.start() * scale_value, scaled_end, scaled_step);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_adf0c6059174045f80af46a0f1fb57bc6"><div class="ttname"><a href="namespacearm__compute.xhtml#adf0c6059174045f80af46a0f1fb57bc6">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor-1)/divisor)*divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00045">Utils.h:45</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acd3d2bba51cb84d34dd7656ad2375a6e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the values of a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to set </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The values to set the dimension to </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00040">40</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p>Referenced by <a class="el" href="_window_8inl_source.xhtml#l00046">Window::collapse_if_possible()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00406">AssetsLibrary::fill()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00377">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00296">PPMLoader::fill_image()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00383">PPMLoader::fill_planar_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00839">arm_compute::utils::fill_random_tensor()</a>, <a class="el" href="_le_net5_network_8h_source.xhtml#l00161">LeNet5Network&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, FullyConnectedLayerFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_mobile_net_network_8h_source.xhtml#l00170">MobileNetNetwork&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, DepthwiseConvolutionLayerFunction, ReshapeFunction, PoolingLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_mobile_net_v1_network_8h_source.xhtml#l00205">MobileNetV1Network&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, BatchNormalizationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, DepthwiseConvolutionFunction, ReshapeFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_alex_net_network_8h_source.xhtml#l00422">AlexNetNetwork&lt; ITensorType, TensorType, SubTensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, FullyConnectedLayerFunction, NormalizationLayerFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00792">arm_compute::utils::load_trained_data()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00032">arm_compute::pixel_area_c1u8_clamp()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00720">arm_compute::utils::save_to_npy()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00639">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="_dequantization_layer_fixture_8h_source.xhtml#l00050">DequantizationValidationFixedPointFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00129">Window::split_window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    _dims[dimension] = dim;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a55ed4ad2395fd25ba847cbf6c54b85e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_dimension_step </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the step of a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step. ">Dimension</a> to update </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>The new dimension's step value </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00106">106</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    _dims[dimension].set_step(step);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae688f3eb6c2673216d12d5490e1e88dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void shift </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>shift_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shift the values of a given dimension by the given shift_value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to shift </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift_value</td><td>Value to shift the start and end values of. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00075">75</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00090">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8h_source.xhtml#l00085">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00095">Window::Dimension::step()</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    Window::Dimension &amp;d = _dims[dimension];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    d                    = Window::Dimension(d.start() + shift_value, d.end() + shift_value, d.step());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5cdf746368c9cfe7b07f1ebbb43810af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_1D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 1D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00256">256</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;1&gt;(slice);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a25e4deca6ce9a7b258e791851eec3f05"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_2D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 2D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00268">268</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;2&gt;(slice);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a96febcbb5f48b24a562ae60353665654"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_3D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 3D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00280">280</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;3&gt;(slice);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af17a73ce230dc8ff4df86c5730781783"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_4D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 4D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00292">292</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>References <a class="el" href="_window_8inl_source.xhtml#l00046">Window::collapse_if_possible()</a>.</p>
<div class="fragment"><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;4&gt;(slice);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa4ce41fc0f8c3203753a4fbee8211f5a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> split_window </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Split a window into a set of sub windows along a given dimension. </p>
<p>For example to split a window into 3 sub-windows along the Y axis, you would have to do:<br />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> sub0 = window.split_window( 1, 0, 3);<br />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> sub1 = window.split_window( 1, 1, 3);<br />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> sub2 = window.split_window( 1, 2, 3);<br />
</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step. ">Dimension</a> along which the split will be performed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Id of the sub-window to return. Must be in the range (0, total-1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total</td><td>Total number of sub-windows the window will be split into.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The subwindow "id" out of "total" </dd></dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00129">129</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8inl_source.xhtml#l00122">Window::num_iterations()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="_window_8inl_source.xhtml#l00040">Window::set()</a>.</p>

<p>Referenced by <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keywordtype">id</span> &gt;= total);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> out;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">if</span>(d == dimension)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordtype">int</span> start          = _dims[d].start();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordtype">int</span> end            = _dims[d].end();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">int</span> per_sub_window = (<a class="code" href="classarm__compute_1_1_window.xhtml#a7b83048403721ed7e90d402e7cf3999b">num_iterations</a>(d) / total) * _dims[d].step();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            start += <span class="keywordtype">id</span> * per_sub_window;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">id</span> != total - 1)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                end = start + per_sub_window;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            out.set(d, Dimension(start, end, _dims[d].step()));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            out.set(d, _dims[d]);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a7b83048403721ed7e90d402e7cf3999b"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a7b83048403721ed7e90d402e7cf3999b">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const </div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00122">Window.inl:122</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ab242a9d3683ac8f480f7944ff6f40534"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">arm_compute::Window::Window</a></div><div class="ttdeci">constexpr Window()</div><div class="ttdoc">Default constructor: create a window containing a single element. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00050">Window.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a14470b4cb59140a1b6ff3b8f16c89ab6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void use_tensor_dimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first_dimension</em> = <code><a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the tensor's dimensions to fill the window dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> to copy the dimensions from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first_dimension</td><td>Only copy dimensions which are greater or equal to this value. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00204">204</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00889">arm_compute::test::fixed_point_arithmetic::detail::max()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00088">PPMAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00296">NumPyBinLoader::access_tensor()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00661">AssetsLibrary::fill_layer_data()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00545">NPYLoader::fill_tensor()</a>, <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00181">RandomAccessor::RandomAccessor()</a>, and <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = first_dimension; n &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions(); ++n)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">set</span>(n, Window::Dimension(0, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[n], static_cast&lt;size_t&gt;(1))));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_min_max_location_8cpp_source.xhtml#l00089">MinMaxLocation.cpp:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00889">FixedPoint.h:889</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a048aaadf42ac725952523dd9546e96b5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will validate all the window's dimensions' values when asserts are enabled. </p>
<p>No-op when asserts are disabled </p>

<p>Definition at line <a class="el" href="_window_8inl_source.xhtml#l00112">112</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00862">arm_compute::colorconvert_rgb_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00127">arm_compute::execute_window_loop()</a>, and <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_dims[i].step() == 0);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_dims[i].end() &lt; _dims[i].start());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((_dims[i].end() - _dims[i].start()) % _dims[i].step());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00045">Dimensions.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ade63ce331b49eb66d330aab444e57ca9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the first dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>First dimension of the window </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00128">128</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, and <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aedd49c804f269c0e2c251c4efd44a275"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the second dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Second dimension of the window </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>References <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, and <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ade6a04ff1f61b38e07ddb8ef741c996b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the third dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Third dimension of the window </dd></dl>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00146">146</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>References <a class="el" href="_window_8inl_source.xhtml#l00082">Window::adjust()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8inl_source.xhtml#l00122">Window::num_iterations()</a>, <a class="el" href="_window_8inl_source.xhtml#l00097">Window::scale()</a>, <a class="el" href="_window_8inl_source.xhtml#l00106">Window::set_dimension_step()</a>, <a class="el" href="_c_l_2_min_max_location_8cpp_source.xhtml#l00089">arm_compute::test::validation::shape</a>, <a class="el" href="_window_8inl_source.xhtml#l00075">Window::shift()</a>, <a class="el" href="_window_8inl_source.xhtml#l00129">Window::split_window()</a>, <a class="el" href="_window_8h_source.xhtml#l00095">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00204">Window::use_tensor_dimensions()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00112">Window::validate()</a>.</p>

<p>Referenced by <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a class="anchor" id="aa96e81276ee4f87ab386cd05a5539a7d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimX = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 0 also known as X dimension. </p>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_c_l_2_dequantization_layer_8cpp_source.xhtml#l00054">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00296">PPMLoader::fill_image()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00383">PPMLoader::fill_planar_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00839">arm_compute::utils::fill_random_tensor()</a>, <a class="el" href="_le_net5_network_8h_source.xhtml#l00161">LeNet5Network&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, FullyConnectedLayerFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_mobile_net_network_8h_source.xhtml#l00170">MobileNetNetwork&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, DepthwiseConvolutionLayerFunction, ReshapeFunction, PoolingLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_mobile_net_v1_network_8h_source.xhtml#l00205">MobileNetV1Network&lt; TensorType, arm_compute::test::Accessor, ActivationLayerFunction, BatchNormalizationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, DepthwiseConvolutionFunction, ReshapeFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="_alex_net_network_8h_source.xhtml#l00422">AlexNetNetwork&lt; ITensorType, TensorType, SubTensorType, arm_compute::test::Accessor, ActivationLayerFunction, ConvolutionLayerFunction, DirectConvolutionLayerFunction, FullyConnectedLayerFunction, NormalizationLayerFunction, PoolingLayerFunction, SoftmaxLayerFunction &gt;::get_classifications()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00792">arm_compute::utils::load_trained_data()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00720">arm_compute::utils::save_to_npy()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00639">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="_dequantization_layer_fixture_8h_source.xhtml#l00050">DequantizationValidationFixedPointFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, <a class="el" href="_window_8h_source.xhtml#l00128">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>

</div>
</div>
<a class="anchor" id="ad2d402364fa822b0b7775081291eeca9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimY = 1</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 1 also known as Y dimension. </p>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00550">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00737">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00591">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00686">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00825">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00789">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00633">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00502">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00103">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00296">PPMLoader::fill_image()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00383">PPMLoader::fill_planar_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00839">arm_compute::utils::fill_random_tensor()</a>, <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00720">arm_compute::utils::save_to_npy()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00639">arm_compute::utils::save_to_ppm()</a>, and <a class="el" href="_window_8h_source.xhtml#l00137">Window::y()</a>.</p>

</div>
</div>
<a class="anchor" id="a893d17b56b9abc4423ce26e9a24ac5dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimZ = 2</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 2 also known as Z dimension. </p>

<p>Definition at line <a class="el" href="_window_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p>Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00383">PPMLoader::fill_planar_tensor()</a>, and <a class="el" href="_window_8h_source.xhtml#l00146">Window::z()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/<a class="el" href="_window_8h_source.xhtml">Window.h</a></li>
<li>arm_compute/core/<a class="el" href="_window_8inl_source.xhtml">Window.inl</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
