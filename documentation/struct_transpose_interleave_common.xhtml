<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('struct_transpose_interleave_common.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ad40e856da5c9d8272b3370cf0e7a4ca6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transpose_interleave_common.xhtml#ad40e856da5c9d8272b3370cf0e7a4ca6">moveblock_1x1</a> (const TIn *&amp;in0, TOut *out)</td></tr>
<tr class="separator:ad40e856da5c9d8272b3370cf0e7a4ca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29fa7590a592651d46ac0f7fffe782a9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transpose_interleave_common.xhtml#a29fa7590a592651d46ac0f7fffe782a9">moveblock_1x2</a> (const TIn *&amp;in0, const TIn *&amp;in1, TOut *out)</td></tr>
<tr class="separator:a29fa7590a592651d46ac0f7fffe782a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecb18b3a50a5ad95347415c651236df6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transpose_interleave_common.xhtml#aecb18b3a50a5ad95347415c651236df6">moveblock_1x4</a> (const TIn *&amp;in0, const TIn *&amp;in1, const TIn *&amp;in2, const TIn *&amp;in3, TOut *out)</td></tr>
<tr class="separator:aecb18b3a50a5ad95347415c651236df6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01a4063744a2a3facb06389427638d2a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transpose_interleave_common.xhtml#a01a4063744a2a3facb06389427638d2a">Transform</a> (TOut *out, const TIn *in, const int stride, const int x0, const int xmax, const int k0, const int kmax)</td></tr>
<tr class="separator:a01a4063744a2a3facb06389427638d2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;unsigned int IntBy, typename TIn, typename TOut&gt;<br />
struct TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;</h3>


<p>Definition at line <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad40e856da5c9d8272b3370cf0e7a4ca6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void moveblock_1x1 </td>
          <td>(</td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TOut *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>.</p>

<p>Referenced by <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00059">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::Transform()</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                               {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in0++);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a29fa7590a592651d46ac0f7fffe782a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void moveblock_1x2 </td>
          <td>(</td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TOut *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>.</p>

<p>Referenced by <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00059">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::Transform()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                                                {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in0++);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in1++);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aecb18b3a50a5ad95347415c651236df6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void moveblock_1x4 </td>
          <td>(</td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const TIn *&amp;&#160;</td>
          <td class="paramname"><em>in3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TOut *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>.</p>

<p>Referenced by <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00059">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::Transform()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                                                                                  {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in0++);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in1++);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in2++);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; IntBy; i++) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      *out++ = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(*in3++);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a01a4063744a2a3facb06389427638d2a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Transform </td>
          <td>(</td>
          <td class="paramtype">TOut *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const TIn *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>xmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>k0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>kmax</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00059">59</a> of file <a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a>.</p>

<p>References <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00029">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::moveblock_1x1()</a>, <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00035">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::moveblock_1x2()</a>, and <a class="el" href="transpose__interleave__common_8hpp_source.xhtml#l00044">TransposeInterleaveCommon&lt; IntBy, TIn, TOut &gt;::moveblock_1x4()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                                                                                                       {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ldin = stride;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    TOut *outarray = out;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> TIn *inarray = in;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    TOut *outptr_base = outarray;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> TIn *inptr_base = inarray + x0 + (k0 * ldin);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">int</span> ldout = (kmax - k0) * IntBy;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">int</span> k=(kmax-k0);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> ( ; k&gt;3; k-=4) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        TOut *outptr = outptr_base;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> TIn *inptr = inptr_base;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> TIn *inptr1 = inptr + ldin;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> TIn *inptr2 = inptr1 + ldin;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> TIn *inptr3 = inptr2 + ldin;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        prefetch_3x(inptr);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        prefetch_3x(inptr1);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        prefetch_3x(inptr2);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        prefetch_3x(inptr3);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        outptr_base += IntBy * 4;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        inptr_base += ldin * 4;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = (xmax-x0) / IntBy; x &gt; 0 ; x--) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="struct_transpose_interleave_common.xhtml#aecb18b3a50a5ad95347415c651236df6">moveblock_1x4</a>(inptr, inptr1, inptr2, inptr3, outptr);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            outptr += ldout;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> (k) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        TOut *outptr = outptr_base;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> TIn *inptr = inptr_base;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">const</span> TIn *inptr1 = inptr + ldin;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">const</span> TIn *inptr2 = inptr1 + ldin;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        prefetch_3x(inptr);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        prefetch_3x(inptr1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        prefetch_3x(inptr2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = (xmax-x0) / IntBy; x &gt; 0 ; x--) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">switch</span>(k) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <a class="code" href="struct_transpose_interleave_common.xhtml#a29fa7590a592651d46ac0f7fffe782a9">moveblock_1x2</a>(inptr, inptr1, outptr);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <a class="code" href="struct_transpose_interleave_common.xhtml#ad40e856da5c9d8272b3370cf0e7a4ca6">moveblock_1x1</a>(inptr2, outptr + IntBy * 2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <a class="code" href="struct_transpose_interleave_common.xhtml#a29fa7590a592651d46ac0f7fffe782a9">moveblock_1x2</a>(inptr, inptr1, outptr);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <a class="code" href="struct_transpose_interleave_common.xhtml#ad40e856da5c9d8272b3370cf0e7a4ca6">moveblock_1x1</a>(inptr, outptr);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            outptr  += ldout;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Cope with ragged X cases</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> overflow = (xmax - x0) % IntBy;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (overflow) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">const</span> TIn *inptr_base = inarray + (xmax - overflow) + (k0 * ldin);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        TOut *outptr = outarray + ((xmax - x0) / IntBy) * ldout;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=(kmax-k0); k&gt;0; k--) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keyword">const</span> TIn *inptr = inptr_base;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            inptr_base += ldin;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x=0; x &lt; IntBy; x++) {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                TOut val = (x &lt; overflow) ? static_cast&lt;TOut&gt;(*inptr++) : static_cast&lt;TOut&gt;(0);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                *outptr++ = val;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="ttc" id="struct_transpose_interleave_common_xhtml_a29fa7590a592651d46ac0f7fffe782a9"><div class="ttname"><a href="struct_transpose_interleave_common.xhtml#a29fa7590a592651d46ac0f7fffe782a9">TransposeInterleaveCommon::moveblock_1x2</a></div><div class="ttdeci">static void moveblock_1x2(const TIn *&amp;in0, const TIn *&amp;in1, TOut *out)</div><div class="ttdef"><b>Definition:</b> <a href="transpose__interleave__common_8hpp_source.xhtml#l00035">transpose_interleave_common.hpp:35</a></div></div>
<div class="ttc" id="struct_transpose_interleave_common_xhtml_aecb18b3a50a5ad95347415c651236df6"><div class="ttname"><a href="struct_transpose_interleave_common.xhtml#aecb18b3a50a5ad95347415c651236df6">TransposeInterleaveCommon::moveblock_1x4</a></div><div class="ttdeci">static void moveblock_1x4(const TIn *&amp;in0, const TIn *&amp;in1, const TIn *&amp;in2, const TIn *&amp;in3, TOut *out)</div><div class="ttdef"><b>Definition:</b> <a href="transpose__interleave__common_8hpp_source.xhtml#l00044">transpose_interleave_common.hpp:44</a></div></div>
<div class="ttc" id="struct_transpose_interleave_common_xhtml_ad40e856da5c9d8272b3370cf0e7a4ca6"><div class="ttname"><a href="struct_transpose_interleave_common.xhtml#ad40e856da5c9d8272b3370cf0e7a4ca6">TransposeInterleaveCommon::moveblock_1x1</a></div><div class="ttdeci">static void moveblock_1x1(const TIn *&amp;in0, TOut *out)</div><div class="ttdef"><b>Definition:</b> <a href="transpose__interleave__common_8hpp_source.xhtml#l00029">transpose_interleave_common.hpp:29</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>arm_compute/core/NEON/kernels/assembly/transforms/<a class="el" href="transpose__interleave__common_8hpp_source.xhtml">transpose_interleave_common.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="struct_transpose_interleave_common.xhtml">TransposeInterleaveCommon</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
