<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/Asserts.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_asserts_8h.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Asserts.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_exceptions_8h_source.xhtml">Exceptions.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_framework_8h_source.xhtml">Framework.h</a>&quot;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;type_traits&gt;</code><br />
</div>
<p><a href="_asserts_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">This file contains all available output stages for GEMMLowp on OpenCL. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1framework"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">arm_compute::test::framework</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1framework_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml">arm_compute::test::framework::detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ac498e3dc31f8819519a9497b2d5789c1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(INFO)</td></tr>
<tr class="separator:ac498e3dc31f8819519a9497b2d5789c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b1013d9828dd87c5ea4a43c31db18cc"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a>(SEVERITY,  SEVERITY_NAME,  COMP,  COMP_NAME,  ERROR_CALL)</td></tr>
<tr class="separator:a9b1013d9828dd87c5ea4a43c31db18cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1f0ff429c8ce509e55250fa125d883"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#aea1f0ff429c8ce509e55250fa125d883">ARM_COMPUTE_ASSERT_NOT_EQUAL</a>(X,  Y)&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL</a>(X, Y, #X, #Y, LogLevel::ERRORS)</td></tr>
<tr class="separator:aea1f0ff429c8ce509e55250fa125d883"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc547cbd8b525edcf4895a961e03cfd0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#afc547cbd8b525edcf4895a961e03cfd0">ARM_COMPUTE_ASSERT_EQUAL</a>(X,  Y)&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#af78c3c4f8aca44d2ba3de3af92cd0f96">arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_EQUAL_IMPL</a>(X, Y, #X, #Y, LogLevel::ERRORS)</td></tr>
<tr class="separator:afc547cbd8b525edcf4895a961e03cfd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac057d80e0c27881ee453299d98a878f4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(X,  Y,  LEVEL)&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#ae9bc925970822e824eb1f740d46f2e8a">arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_EQUAL_IMPL</a>(X, Y, #X, #Y, LEVEL)</td></tr>
<tr class="separator:ac057d80e0c27881ee453299d98a878f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a375312dd537df40cc86ffdbe7e024385"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#a375312dd537df40cc86ffdbe7e024385">ARM_COMPUTE_EXPECT_NOT_EQUAL</a>(X,  Y,  LEVEL)&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#a8d2500614dd09dd9edf7df40934e7a77">arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_NOT_EQUAL_IMPL</a>(X, Y, #X, #Y, LEVEL)</td></tr>
<tr class="separator:a375312dd537df40cc86ffdbe7e024385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83bf33add9b97f6897b7b3db2766dd27"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#a83bf33add9b97f6897b7b3db2766dd27">ARM_COMPUTE_ASSERT</a>(X)</td></tr>
<tr class="separator:a83bf33add9b97f6897b7b3db2766dd27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc60af942e951dc93e22b97b41809b51"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(X,  LEVEL)</td></tr>
<tr class="separator:adc60af942e951dc93e22b97b41809b51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a774d3fd18bd9c1856a965a35a432f2d4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#a774d3fd18bd9c1856a965a35a432f2d4">ARM_COMPUTE_ASSERT_FAIL</a>(MSG)</td></tr>
<tr class="separator:a774d3fd18bd9c1856a965a35a432f2d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c196704614e365ae4be76e3867c4e53"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_asserts_8h.xhtml#a5c196704614e365ae4be76e3867c4e53">ARM_COMPUTE_EXPECT_FAIL</a>(MSG,  LEVEL)</td></tr>
<tr class="separator:a5c196704614e365ae4be76e3867c4e53"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac82666ff37e69696e3945d175a50e363"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">make_printable</a> (int8_t <a class="el" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</td></tr>
<tr class="separator:ac82666ff37e69696e3945d175a50e363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2abe3b2eae7dbf37ba0370baf7b8608d"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2abe3b2eae7dbf37ba0370baf7b8608d">make_printable</a> (uint8_t <a class="el" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</td></tr>
<tr class="separator:a2abe3b2eae7dbf37ba0370baf7b8608d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5acaca5463f6a0958c7bc243adda0e14"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5acaca5463f6a0958c7bc243adda0e14"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a5acaca5463f6a0958c7bc243adda0e14">make_printable</a> (T &amp;&amp;<a class="el" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</td></tr>
<tr class="separator:a5acaca5463f6a0958c7bc243adda0e14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7457955ed1c49b6478071caa7b5c5be2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">ARM_COMPUTE_PRINT_INFO</a> ()</td></tr>
<tr class="separator:a7457955ed1c49b6478071caa7b5c5be2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9bc925970822e824eb1f740d46f2e8a"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:ae9bc925970822e824eb1f740d46f2e8a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#ae9bc925970822e824eb1f740d46f2e8a">ARM_COMPUTE_EXPECT_EQUAL_IMPL</a> (T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level)</td></tr>
<tr class="separator:ae9bc925970822e824eb1f740d46f2e8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d2500614dd09dd9edf7df40934e7a77"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:a8d2500614dd09dd9edf7df40934e7a77"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#a8d2500614dd09dd9edf7df40934e7a77">ARM_COMPUTE_EXPECT_NOT_EQUAL_IMPL</a> (T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level)</td></tr>
<tr class="separator:a8d2500614dd09dd9edf7df40934e7a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af78c3c4f8aca44d2ba3de3af92cd0f96"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:af78c3c4f8aca44d2ba3de3af92cd0f96"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#af78c3c4f8aca44d2ba3de3af92cd0f96">ARM_COMPUTE_ASSERT_EQUAL_IMPL</a> (T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level)</td></tr>
<tr class="separator:af78c3c4f8aca44d2ba3de3af92cd0f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa05b2025b37c285ce6e9edfb437fc06"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:aaa05b2025b37c285ce6e9edfb437fc06"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL</a> (T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level)</td></tr>
<tr class="separator:aaa05b2025b37c285ce6e9edfb437fc06"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="a83bf33add9b97f6897b7b3db2766dd27"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span>                                                                                                                \</div><div class="line">    {                                                                                                                 \</div><div class="line">        const <span class="keyword">auto</span> &amp;x = X;                                                                                            \</div><div class="line">        if(!x)                                                                                                        \</div><div class="line">        {                                                                                                             \</div><div class="line">            std::stringstream msg;                                                                                    \</div><div class="line">            msg &lt;&lt; <span class="stringliteral">&quot;Assertion &#39;&quot;</span> #X <span class="stringliteral">&quot;&#39; failed.\n&quot;</span>;                                                                    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">            arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);                                      \</div><div class="line">            throw <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a>); \</div><div class="line">        }                                                                                                             <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();                                             \</div><div class="line">    } <span class="keywordflow">while</span>(<span class="keyword">false</span>)</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_error_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a></div><div class="ttdoc">Error class for failures during test execution. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00078">Exceptions.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00110">110</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2reference_2_convolution_layer_8cpp_source.xhtml#l00221">arm_compute::test::validation::reference::convolution_layer()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00173">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<a class="anchor" id="afc547cbd8b525edcf4895a961e03cfd0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_ASSERT_EQUAL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">Y&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#af78c3c4f8aca44d2ba3de3af92cd0f96">arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_EQUAL_IMPL</a>(X, Y, #X, #Y, LogLevel::ERRORS)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00101">101</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="a774d3fd18bd9c1856a965a35a432f2d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_ASSERT_FAIL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">MSG</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span>                                                                                                            \</div><div class="line">    {                                                                                                             \</div><div class="line">        std::stringstream msg;                                                                                    \</div><div class="line">        msg &lt;&lt; <span class="stringliteral">&quot;Assertion &#39;&quot;</span> &lt;&lt; MSG &lt;&lt; <span class="stringliteral">&quot;&#39; failed.\n&quot;</span>;                                                             <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);                                      \</div><div class="line">        throw <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a>); <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();                                         \</div><div class="line">    } <span class="keywordflow">while</span>(<span class="keyword">false</span>)</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_error_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a></div><div class="ttdoc">Error class for failures during test execution. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00078">Exceptions.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00138">138</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="aea1f0ff429c8ce509e55250fa125d883"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_ASSERT_NOT_EQUAL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">Y&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL</a>(X, Y, #X, #Y, LogLevel::ERRORS)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00098">98</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="adc60af942e951dc93e22b97b41809b51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_EXPECT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">LEVEL&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span>                                                                                                                                        \</div><div class="line">    {                                                                                                                                         \</div><div class="line">        const <span class="keyword">auto</span> &amp;x = X;                                                                                                                    \</div><div class="line">        if(!x)                                                                                                                                \</div><div class="line">        {                                                                                                                                     \</div><div class="line">            std::stringstream msg;                                                                                                            \</div><div class="line">            msg &lt;&lt; <span class="stringliteral">&quot;Expectation &#39;&quot;</span> #X <span class="stringliteral">&quot;&#39; failed.\n&quot;</span>;                                                                                          <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">            arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);                                                              <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">            arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">log_failed_expectation</a>(<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), LEVEL)); \</div><div class="line">        }                                                                                                                                     <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();                                                                     \</div><div class="line">    } <span class="keywordflow">while</span>(<span class="keyword">false</span>)</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a0128e62cd67888b56078dac05dd59761"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">arm_compute::test::framework::Framework::log_failed_expectation</a></div><div class="ttdeci">void log_failed_expectation(const TestError &amp;error)</div><div class="ttdoc">Tell the framework that the currently running test case failed a non-fatal expectation. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00196">Framework.cpp:196</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_error_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a></div><div class="ttdoc">Error class for failures during test execution. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00078">Exceptions.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00124">124</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

<p>Referenced by <a class="el" href="benchmark_2fixtures_2_softmax_layer_fixture_8h_source.xhtml#l00051">SoftmaxLayerFixture&lt; TensorType, Function, Accessor &gt;::setup()</a>.</p>

</div>
</div>
<a class="anchor" id="ac057d80e0c27881ee453299d98a878f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_EXPECT_EQUAL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">Y, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">LEVEL&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#ae9bc925970822e824eb1f740d46f2e8a">arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_EQUAL_IMPL</a>(X, Y, #X, #Y, LEVEL)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00104">104</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

<p>Referenced by <a class="el" href="_validation_8cpp_source.xhtml#l00149">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00620">arm_compute::test::validation::validate_min_max_loc()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a class="anchor" id="a5c196704614e365ae4be76e3867c4e53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_EXPECT_FAIL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">MSG, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">LEVEL&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span>                                                                                                                                    \</div><div class="line">    {                                                                                                                                     \</div><div class="line">        std::stringstream msg;                                                                                                            \</div><div class="line">        msg &lt;&lt; <span class="stringliteral">&quot;Expectation &#39;&quot;</span> &lt;&lt; MSG &lt;&lt; <span class="stringliteral">&quot;&#39; failed.\n&quot;</span>;                                                                                   <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);                                                              <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">log_failed_expectation</a>(<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), LEVEL)); <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();                                                                 \</div><div class="line">    } <span class="keywordflow">while</span>(<span class="keyword">false</span>)</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a0128e62cd67888b56078dac05dd59761"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">arm_compute::test::framework::Framework::log_failed_expectation</a></div><div class="ttdeci">void log_failed_expectation(const TestError &amp;error)</div><div class="ttdoc">Tell the framework that the currently running test case failed a non-fatal expectation. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00196">Framework.cpp:196</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_error_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a></div><div class="ttdoc">Error class for failures during test execution. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00078">Exceptions.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00148">148</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="a375312dd537df40cc86ffdbe7e024385"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_EXPECT_NOT_EQUAL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">X, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">Y, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">LEVEL&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#a8d2500614dd09dd9edf7df40934e7a77">arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_NOT_EQUAL_IMPL</a>(X, Y, #X, #Y, LEVEL)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00107">107</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9b1013d9828dd87c5ea4a43c31db18cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_TEST_COMP_FACTORY</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">SEVERITY, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">SEVERITY_NAME, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">COMP, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">COMP_NAME, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ERROR_CALL&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;                                                                                                  \</div><div class="line">    void ARM_COMPUTE_##SEVERITY##_##COMP_NAME##_IMPL(T &amp;&amp;x, U &amp;&amp;y, <span class="keyword">const</span> std::string &amp;x_str, <span class="keyword">const</span> std::string &amp;y_str, <a class="code" href="namespacearm__compute_1_1logging.xhtml#a7a38c7496c92835c0d835ecb2f8135c1">LogLevel</a> level) \</div><div class="line">    {                                                                                                                                  \</div><div class="line">        if(!(x COMP y))                                                                                                                \</div><div class="line">        {                                                                                                                              \</div><div class="line">            std::stringstream msg;                                                                                                     \</div><div class="line">            msg &lt;&lt; #SEVERITY_NAME <span class="stringliteral">&quot; &#39;&quot;</span> &lt;&lt; x_str &lt;&lt; <span class="stringliteral">&quot; &quot;</span> #COMP <span class="stringliteral">&quot; &quot;</span> &lt;&lt; y_str &lt;&lt; <span class="stringliteral">&quot;&#39; failed. [&quot;</span>                                             \</div><div class="line">                &lt;&lt; std::boolalpha &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a>(x)                                                   \</div><div class="line">                &lt;&lt; <span class="stringliteral">&quot; &quot;</span> #COMP <span class="stringliteral">&quot; &quot;</span>                                                                                                       \</div><div class="line">                &lt;&lt; std::boolalpha &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a>(y)                                                   \</div><div class="line">                &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;                                                                                                              <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">            arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);                                                       \</div><div class="line">            ERROR_CALL                                                                                                                 \</div><div class="line">        }                                                                                                                              <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();                                                              \</div><div class="line">    }</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ac82666ff37e69696e3945d175a50e363"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a></div><div class="ttdeci">int make_printable(int8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00040">Asserts.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1logging_xhtml_a7a38c7496c92835c0d835ecb2f8135c1"><div class="ttname"><a href="namespacearm__compute_1_1logging.xhtml#a7a38c7496c92835c0d835ecb2f8135c1">arm_compute::logging::LogLevel</a></div><div class="ttdeci">LogLevel</div><div class="ttdoc">Logging level enumeration. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2logging_2_types_8h_source.xhtml#l00034">Types.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00074">74</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac498e3dc31f8819519a9497b2d5789c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARM_COMPUTE_TEST_INFO</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">INFO</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">{                                                                             \</div><div class="line">        std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">\</a></div><div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">        info</a> &lt;&lt; <a class="code" href="namespacearm__compute_1_1logging.xhtml#a7a38c7496c92835c0d835ecb2f8135c1a551b723eafd6a31d444fcb2f5920fbd3">INFO</a>;                                                             <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">\</a></div><div class="line"><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">        arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab5eae10e0a4067cff9e87fdcb186eca8">add_test_info</a>(info.str()); \</div><div class="line">    }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_ab5eae10e0a4067cff9e87fdcb186eca8"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab5eae10e0a4067cff9e87fdcb186eca8">arm_compute::test::framework::Framework::add_test_info</a></div><div class="ttdeci">void add_test_info(std::string info)</div><div class="ttdoc">Add info string for the next expectation/assertion. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00127">Framework.cpp:127</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1logging_xhtml_a7a38c7496c92835c0d835ecb2f8135c1a551b723eafd6a31d444fcb2f5920fbd3"><div class="ttname"><a href="namespacearm__compute_1_1logging.xhtml#a7a38c7496c92835c0d835ecb2f8135c1a551b723eafd6a31d444fcb2f5920fbd3">arm_compute::logging::LogLevel::INFO</a></div><div class="ttdoc">Information log level. </div></div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="_asserts_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_asserts_8h_source.xhtml">Asserts.h</a>.</p>

<p>Referenced by <a class="el" href="_validation_8h_source.xhtml#l00472">arm_compute::test::validation::compare_keypoints()</a>, <a class="el" href="_u_n_i_t_2_fixed_point_8cpp_source.xhtml#l00109">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_validation_8cpp_source.xhtml#l00173">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00506">arm_compute::test::validation::validate_keypoints()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="_asserts_8h.xhtml">Asserts.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
