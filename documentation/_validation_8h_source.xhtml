<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/Validation.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_validation_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Validation.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_validation_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_VALIDATION_H__</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ARM_COMPUTE_TEST_VALIDATION_H__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_fixed_point_8h.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_array_8h.xhtml">arm_compute/core/IArray.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_accessor_8h.xhtml">tests/IAccessor.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_simple_tensor_8h.xhtml">tests/SimpleTensor.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_types_8h.xhtml">tests/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asserts_8h.xhtml">tests/framework/Asserts.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8h.xhtml">tests/framework/Exceptions.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_type_printer_8h.xhtml">utils/TypePrinter.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;ios&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>arm_compute</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>test</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>validation</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">   50</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance</a></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">   54</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = T;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">/* Default constructor.</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * Initialises the tolerance to 0.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a98a801b3455152020b7543995eeb3224">AbsoluteTolerance</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">   66</a></span>&#160;    <span class="keyword">explicit</span> constexpr <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">AbsoluteTolerance</a>(T <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        : _value{ value }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#ac4031afb73b83c703b45136263f3d38c">   72</a></span>&#160;    constexpr <span class="keyword">operator</span> T()<span class="keyword"> const</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> _value;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    T _value{ std::numeric_limits&lt;T&gt;::epsilon() };</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;};</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">   83</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">RelativeTolerance</a></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">   87</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = T;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">/* Default constructor.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     * Initialises the tolerance to 0.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afba8d635945ce2a2787199919de28572">RelativeTolerance</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">   99</a></span>&#160;    <span class="keyword">explicit</span> constexpr <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">RelativeTolerance</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        : _value{ value }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#aa32031050812b305a8db5fc4fa334754">  105</a></span>&#160;    constexpr <span class="keyword">operator</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> _value;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> _value{ std::numeric_limits&lt;T&gt;::epsilon() };</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;};</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab6d7586446a24baaa269c5f9a65ecd7f">  116</a></span>&#160;inline ::std::ostream &amp;operator&lt;&lt;(::std::ostream &amp;os, const AbsoluteTolerance&lt;T&gt; &amp;tolerance)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    os &lt;&lt; static_cast&lt;typename AbsoluteTolerance&lt;T&gt;::value_type&gt;(tolerance);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5e05c35e20ad8ca67a4fbdd57e33ac8c">  125</a></span>&#160;inline ::std::ostream &amp;operator&lt;&lt;(::std::ostream &amp;os, const RelativeTolerance&lt;T&gt; &amp;tolerance)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    os &lt;&lt; static_cast&lt;typename RelativeTolerance&lt;T&gt;::value_type&gt;(tolerance);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45ccb6e2ccc0be8a60e694a6b75e4679">  133</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45ccb6e2ccc0be8a60e694a6b75e4679">compare_dimensions</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions2)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>(dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() != dimensions2.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>())</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; dimensions1.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++i)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span>(dimensions1[i] != dimensions2[i])</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;region, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;reference);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;<a class="code" href="hwc_8hpp.xhtml#ad487ce76e40f524a7f5e350763b91ae5">padding</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">arm_compute::PaddingSize</a> &amp;reference);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, U tolerance_value = <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>(), <span class="keywordtype">float</span> tolerance_number = 0.f);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, U tolerance_value = <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>(), <span class="keywordtype">float</span> tolerance_number = 0.f);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <span class="keywordtype">void</span> *reference_value);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;border_mode, <span class="keyword">const</span> <span class="keywordtype">void</span> *border_value);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(std::vector&lt;unsigned int&gt; classified_labels, std::vector&lt;unsigned int&gt; expected_labels);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = AbsoluteTolerance&lt;T&gt;&gt;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(T target, T reference, U tolerance = AbsoluteTolerance&lt;T&gt;());</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V = AbsoluteTolerance&lt;<span class="keywordtype">float</span>&gt;&gt;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a57d896840ba5d9a4cf57131b6ba02667">validate_keypoints</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance = AbsoluteTolerance&lt;float&gt;());</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">  223</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">  225</a></span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">compare_base</a>(<span class="keyword">typename</span> T::value_type target, <span class="keyword">typename</span> T::value_type reference, T tolerance = T(0))</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        : <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">_target</a>{ target }, <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">_reference</a>{ reference }, <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">_tolerance</a>{ tolerance }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">  230</a></span>&#160;    <span class="keyword">typename</span> T::value_type <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">_target</a>{};</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">  231</a></span>&#160;    <span class="keyword">typename</span> T::value_type <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">_reference</a>{};</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">  232</a></span>&#160;    T                      <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">_tolerance</a>{};</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;};</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">  236</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.xhtml">  239</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">AbsoluteTolerance</a>&lt;<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>&gt;&gt; : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a>&lt;AbsoluteTolerance&lt;U&gt;&gt;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base&lt;AbsoluteTolerance&lt;U&gt;</a>&gt;<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">::compare_base</a>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.xhtml#aa385aa18f5e42db5a415c25a90f4193d">  243</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">if</span>(!std::isfinite(this-&gt;_target) || !std::isfinite(this-&gt;_reference))</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(this-&gt;_target == this-&gt;_reference)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keyword">using</span> comparison_type = <span class="keyword">typename</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::conditional&lt;std::is_integral&lt;U&gt;::value</a>, int64_t, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>&gt;<a class="code" href="namespacemali__userspace.xhtml#ad44b615021ed3ccb734fcaf583ef4a03">::type</a>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keyword">const</span> comparison_type abs_difference(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;comparison_type&gt;(this-&gt;_target) - static_cast&lt;comparison_type&gt;(this-&gt;_reference)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">return</span> abs_difference &lt;= static_cast&lt;comparison_type&gt;(this-&gt;_tolerance);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;};</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.xhtml">  263</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare</a>&lt;<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">RelativeTolerance</a>&lt;<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>&gt;&gt; : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base</a>&lt;RelativeTolerance&lt;U&gt;&gt;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">compare_base&lt;RelativeTolerance&lt;U&gt;</a>&gt;<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">::compare_base</a>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.xhtml#aa385aa18f5e42db5a415c25a90f4193d">  267</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span>(!std::isfinite(this-&gt;_target) || !std::isfinite(this-&gt;_reference))</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(this-&gt;_target == this-&gt;_reference)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a> epsilon = (<a class="code" href="namespacemali__userspace.xhtml#ad44b615021ed3ccb734fcaf583ef4a03">std::is_same&lt;half, typename std::remove_cv&lt;U&gt;::type</a>&gt;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">::value</a> || (this-&gt;_reference == 0)) ? <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a><span class="keyword">&gt;</span>(0.01) : <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a><span class="keyword">&gt;</span>(1e-05);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;double&gt;(this-&gt;_reference) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(this-&gt;_target)) &lt;= epsilon)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">if</span>(static_cast&lt;double&gt;(this-&gt;_reference) == 0.0f) <span class="comment">// We have checked whether _reference and _target is closing. If _reference is 0 but not closed to _target, it should return false</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> relative_change = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;double&gt;(this-&gt;_target) - static_cast&lt;double&gt;(this-&gt;_reference)) / this-&gt;_reference;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">return</span> relative_change &lt;= static_cast&lt;U&gt;(this-&gt;_tolerance);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;};</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a27e76d60382474c13acf9d3efef67d53">  299</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, U tolerance_value, <span class="keywordtype">float</span> tolerance_number)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// Validate with valid region covering the entire shape</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(tensor, reference, <a class="code" href="namespacearm__compute_1_1test.xhtml#a4c9ad143c34306817986409ffb1dbd40">shape_to_valid_region</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">shape</a>()), tolerance_value, tolerance_number);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6b80f915b260d6ddba72b9068f80e0a5">  306</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;reference, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, U tolerance_value, <span class="keywordtype">float</span> tolerance_number)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    int64_t num_mismatches = 0;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    int64_t num_elements   = 0;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>() != <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45ccb6e2ccc0be8a60e694a6b75e4679">compare_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">shape</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_elements = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">num_elements</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>());</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_channels = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">num_channels</a>(), reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Iterate over all elements within valid region, e.g. U8, S16, RGB888, ...</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; min_elements; ++element_idx)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(reference.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), element_idx);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a>(valid_region, <span class="keywordtype">id</span>))</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">// Iterate over all channels within one element</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; min_channels; ++c)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keyword">const</span> T &amp;target_value    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>))[c];</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keyword">const</span> T &amp;reference_value = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(reference(<span class="keywordtype">id</span>))[c];</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keywordflow">if</span>(!<a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target_value, reference_value, tolerance_value))</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;id = &quot;</span> &lt;&lt; <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;channel = &quot;</span> &lt;&lt; c);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target_value));</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference_value));</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance_value)));</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">framework::ARM_COMPUTE_PRINT_INFO</a>();</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    ++num_mismatches;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                ++num_elements;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span>(num_elements &gt; 0)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keyword">const</span> int64_t absolute_tolerance_number = tolerance_number * num_elements;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>   percent_mismatches        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements * 100.f;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                              &lt;&lt; <span class="stringliteral">&quot;%) mismatched (maximum tolerated &quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; tolerance_number &lt;&lt; <span class="stringliteral">&quot;%)&quot;</span>);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(num_mismatches &lt;= absolute_tolerance_number, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad9d72a667b386098e095317fd50501fb">  368</a></span>&#160;std::pair&lt;int64_t, int64_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad9d72a667b386098e095317fd50501fb">compare_keypoints</a>(T first1, T last1, U first2, U last2, V tolerance)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    int64_t num_missing    = 0;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    int64_t num_mismatches = 0;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">while</span>(first1 != last1)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> point = std::find_if(first2, last2, [&amp;](<a class="code" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> point)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keywordflow">return</span> point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a> == first1-&gt;x &amp;&amp; point.<a class="code" href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a> == first1-&gt;y;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        });</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">if</span>(point == last2)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            ++num_missing;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint1 = &quot;</span> &lt;&lt; *first1)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <a class="code" href="_asserts_8h.xhtml#a5c196704614e365ae4be76e3867c4e53">ARM_COMPUTE_EXPECT_FAIL</a>(<span class="stringliteral">&quot;Key point not found&quot;</span>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">framework::LogLevel::DEBUG</a>);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        }</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(point-&gt;<a class="code" href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">tracking_status</a>, first1-&gt;tracking_status) || !<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(point-&gt;<a class="code" href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">strength</a>, first1-&gt;strength, tolerance) || !<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(point-&gt;<a class="code" href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>, first1-&gt;scale)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                || !<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(point-&gt;<a class="code" href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">orientation</a>, first1-&gt;orientation) || !<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(point-&gt;<a class="code" href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">error</a>, first1-&gt;error))</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            ++num_mismatches;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint1 = &quot;</span> &lt;&lt; *first1)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;keypoint2 = &quot;</span> &lt;&lt; *point)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <a class="code" href="_asserts_8h.xhtml#a5c196704614e365ae4be76e3867c4e53">ARM_COMPUTE_EXPECT_FAIL</a>(<span class="stringliteral">&quot;Mismatching keypoint&quot;</span>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">framework::LogLevel::DEBUG</a>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        ++first1;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">return</span> std::make_pair(num_missing, num_mismatches);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;}</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div>
<div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a57d896840ba5d9a4cf57131b6ba02667">  402</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a57d896840ba5d9a4cf57131b6ba02667">validate_keypoints</a>(T target_first, T target_last, U reference_first, U reference_last, V tolerance)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">const</span> int64_t num_elements_target    = std::distance(target_first, target_last);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">const</span> int64_t num_elements_reference = std::distance(reference_first, reference_last);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(num_elements_target, num_elements_reference, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    int64_t num_missing    = 0;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    int64_t num_mismatches = 0;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">if</span>(num_elements_reference &gt; 0)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad9d72a667b386098e095317fd50501fb">compare_keypoints</a>(reference_first, reference_last, target_first, target_last, tolerance);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_missing) / num_elements_reference * 100.f;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_mismatches = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements_reference * 100.f;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) are missing in target&quot;</span>);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(num_missing, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_mismatches &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches &lt;&lt; <span class="stringliteral">&quot;%) mismatched&quot;</span>);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(num_mismatches, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">if</span>(num_elements_target &gt; 0)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        std::tie(num_missing, num_mismatches) = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad9d72a667b386098e095317fd50501fb">compare_keypoints</a>(target_first, target_last, reference_first, reference_last, tolerance);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> percent_missing = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_missing) / num_elements_target * 100.f;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(num_missing &lt;&lt; <span class="stringliteral">&quot; keypoints (&quot;</span> &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; percent_missing &lt;&lt; <span class="stringliteral">&quot;%) are not part of target&quot;</span>);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(num_missing, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6c19347e16069660a1a3ae62e1d607ee">  438</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(T target, T reference, U tolerance)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(reference));</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(target));</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a>(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">framework::make_printable</a>(static_cast&lt;typename U::value_type&gt;(tolerance)));</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> equal = <a class="code" href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">compare&lt;U&gt;</a>(target, reference, tolerance);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(equal, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">return</span> equal;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">  452</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">validate_min_max_loc</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml">MinMaxLocationValues&lt;T&gt;</a> &amp;target, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml">MinMaxLocationValues&lt;U&gt;</a> &amp;reference)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">min</a>, reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">min</a>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">max</a>, reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">max</a>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a>(target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">for</span>(uint32_t i = 0; i &lt; target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.size(); ++i)</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> same_coords = std::find_if(reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.begin(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.end(), [&amp;target, i](<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> coord)</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keywordflow">return</span> coord.x == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.at(i).x &amp;&amp; coord.y == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.at(i).y;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        });</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(same_coords != reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">min_loc</a>.end(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">for</span>(uint32_t i = 0; i &lt; target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.size(); ++i)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> same_coords = std::find_if(reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.begin(), reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.end(), [&amp;target, i](<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> coord)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">return</span> coord.x == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.at(i).x &amp;&amp; coord.y == target.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.at(i).y;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        });</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <a class="code" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a>(same_coords != reference.<a class="code" href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">max_loc</a>.end(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;} <span class="comment">// namespace validation</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;} <span class="comment">// namespace test</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_TEST_REFERENCE_VALIDATION_H__ */</span><span class="preprocessor"></span></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_a0856d709c655f740d93b50e9121a7aa3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a0856d709c655f740d93b50e9121a7aa3">arm_compute::test::validation::AbsoluteTolerance::AbsoluteTolerance</a></div><div class="ttdeci">constexpr AbsoluteTolerance(T value)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00066">Validation.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00128">Types.h:128</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::validation::RelativeTolerance&lt; U &gt;::value_type</a></div><div class="ttdeci">U value_type</div><div class="ttdoc">Underlying type. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00087">Validation.h:87</a></div></div>
<div class="ttc" id="_i_accessor_8h_xhtml"><div class="ttname"><a href="_i_accessor_8h.xhtml">IAccessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45ccb6e2ccc0be8a60e694a6b75e4679"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45ccb6e2ccc0be8a60e694a6b75e4679">arm_compute::test::validation::compare_dimensions</a></div><div class="ttdeci">bool compare_dimensions(const Dimensions&lt; T &gt; &amp;dimensions1, const Dimensions&lt; T &gt; &amp;dimensions2)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00133">Validation.h:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00884">FixedPoint.h:884</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00240">SimpleTensor.h:240</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a4b7ee8a31f634f28eb1d4d97f6159ccd"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a4b7ee8a31f634f28eb1d4d97f6159ccd">arm_compute::MinMaxLocationValues::max</a></div><div class="ttdeci">MinMaxType max</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::KeyPoint::scale</a></div><div class="ttdeci">float scale</div><div class="ttdoc">Scale initialized to 0 by the corner detector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00276">Types.h:276</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">arm_compute::test::validation::AbsoluteTolerance</a></div><div class="ttdoc">Class reprensenting an absolute tolerance value. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00050">Validation.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4c9ad143c34306817986409ffb1dbd40"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4c9ad143c34306817986409ffb1dbd40">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(TensorShape shape, bool border_undefined=false, BorderSize border_size=BorderSize(0))</div><div class="ttdoc">Create a valid region based on tensor shape, border mode and border size. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00193">Utils.h:193</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml">arm_compute::test::validation::compare_base</a></div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00223">Validation.h:223</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_ab589f4342adb62f0b4605785e4812750"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#ab589f4342adb62f0b4605785e4812750">arm_compute::MinMaxLocationValues::min_loc</a></div><div class="ttdeci">std::vector&lt; Coordinates2D &gt; min_loc</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="tests_2_types_8h_xhtml"><div class="ttname"><a href="tests_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a57360dd9ca408834c0ea1a8ef70a11f4"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">arm_compute::test::IAccessor::format</a></div><div class="ttdeci">virtual Format format() const =0</div><div class="ttdoc">Image format of the tensor. </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00136">Types.h:136</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::KeyPoint::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00273">Types.h:273</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a0e3266fc15309697502533db62b682af"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a0e3266fc15309697502533db62b682af">arm_compute::KeyPoint::orientation</a></div><div class="ttdeci">float orientation</div><div class="ttdoc">Orientation initialized to 0 by the corner detector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00277">Types.h:277</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ac82666ff37e69696e3945d175a50e363"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a></div><div class="ttdeci">int make_printable(int8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00040">Asserts.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a8ca2aae59762685dd38143e5f8267147"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a8ca2aae59762685dd38143e5f8267147">arm_compute::KeyPoint::tracking_status</a></div><div class="ttdeci">int32_t tracking_status</div><div class="ttdoc">Status initialized to 1 by the corner detector, set to 0 when the point is lost. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00278">Types.h:278</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::test::SimpleTensor::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Image format of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00259">SimpleTensor.h:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00265">SimpleTensor.h:265</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a9cdfbe0f92ba33d9d5c84bc06600640c"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a9cdfbe0f92ba33d9d5c84bc06600640c">arm_compute::test::validation::compare_base::_reference</a></div><div class="ttdeci">T::value_type _reference</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00231">Validation.h:231</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a42c8a61b86fc900746fef0f1f70a9430"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a42c8a61b86fc900746fef0f1f70a9430">arm_compute::test::validation::compare_base::compare_base</a></div><div class="ttdeci">compare_base(typename T::value_type target, typename T::value_type reference, T tolerance=T(0))</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00225">Validation.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00234">SimpleTensor.h:234</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare.xhtml">arm_compute::test::validation::compare</a></div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00236">Validation.h:236</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_a5c196704614e365ae4be76e3867c4e53"><div class="ttname"><a href="_asserts_8h.xhtml#a5c196704614e365ae4be76e3867c4e53">ARM_COMPUTE_EXPECT_FAIL</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT_FAIL(MSG, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00148">Asserts.h:148</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_ac057d80e0c27881ee453299d98a878f4"><div class="ttname"><a href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">ARM_COMPUTE_EXPECT_EQUAL</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT_EQUAL(X, Y, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00104">Asserts.h:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a1c5e120ea2712b21296aa8f62421d3c1"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">arm_compute::test::IAccessor::shape</a></div><div class="ttdeci">virtual TensorShape shape() const =0</div><div class="ttdoc">Shape of the tensor. </div></div>
<div class="ttc" id="_asserts_8h_xhtml_ac498e3dc31f8819519a9497b2d5789c1"><div class="ttname"><a href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">ARM_COMPUTE_TEST_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_TEST_INFO(INFO)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00065">Asserts.h:65</a></div></div>
<div class="ttc" id="_i_array_8h_xhtml"><div class="ttname"><a href="_i_array_8h.xhtml">IArray.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml">arm_compute::KeyPoint</a></div><div class="ttdoc">Keypoint type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00271">Types.h:271</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::validation::AbsoluteTolerance&lt; U &gt;::value_type</a></div><div class="ttdeci">U value_type</div><div class="ttdoc">Underlying type. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00054">Validation.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a2c1c8f9331368f38bfc3eaee260b59a6"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a2c1c8f9331368f38bfc3eaee260b59a6">arm_compute::KeyPoint::strength</a></div><div class="ttdeci">float strength</div><div class="ttdoc">Strength of the point. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00275">Types.h:275</a></div></div>
<div class="ttc" id="_simple_tensor_8h_xhtml"><div class="ttname"><a href="_simple_tensor_8h.xhtml">SimpleTensor.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_aa4fd55d362930310365e320208784ede"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#aa4fd55d362930310365e320208784ede">arm_compute::test::validation::compare_base::_tolerance</a></div><div class="ttdeci">T _tolerance</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00232">Validation.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a57d896840ba5d9a4cf57131b6ba02667"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a57d896840ba5d9a4cf57131b6ba02667">arm_compute::test::validation::validate_keypoints</a></div><div class="ttdeci">void validate_keypoints(T target_first, T target_last, U reference_first, U reference_last, V tolerance=AbsoluteTolerance&lt; float &gt;())</div><div class="ttdoc">Validate key points. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00402">Validation.h:402</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5c338bd61fcc9acab23cf1bb8bb57539"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5c338bd61fcc9acab23cf1bb8bb57539">arm_compute::test::validation::validate_min_max_loc</a></div><div class="ttdeci">void validate_min_max_loc(const MinMaxLocationValues&lt; T &gt; &amp;target, const MinMaxLocationValues&lt; U &gt; &amp;reference)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00452">Validation.h:452</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_afba8d635945ce2a2787199919de28572"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#afba8d635945ce2a2787199919de28572">arm_compute::test::validation::RelativeTolerance::RelativeTolerance</a></div><div class="ttdeci">RelativeTolerance()=default</div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_a7cfd13d282af770aaa971755fa092fca"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#a7cfd13d282af770aaa971755fa092fca">arm_compute::KeyPoint::error</a></div><div class="ttdeci">float error</div><div class="ttdoc">Tracking error initialized to 0 by the corner detector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00279">Types.h:279</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a856b55fc20ddcbdbeb84c35ae27bedac"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, Coordinates coord)</div><div class="ttdoc">Check if a coordinate is within a valid region. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00355">Utils.h:355</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="_type_printer_8h_xhtml"><div class="ttname"><a href="_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_fixed_point_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_fixed_point_8h.xhtml">FixedPoint.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml">arm_compute::Dimensions</a></div><div class="ttdoc">Dimensions with dimensionality. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00041">Dimensions.h:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml">arm_compute::MinMaxLocationValues&lt; T &gt;</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a7596bc2928432a0ac2271bc9184d692e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">arm_compute::test::IAccessor::num_elements</a></div><div class="ttdeci">virtual int num_elements() const =0</div><div class="ttdoc">Number of elements of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00308">Utils.h:308</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad9d72a667b386098e095317fd50501fb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad9d72a667b386098e095317fd50501fb">arm_compute::test::validation::compare_keypoints</a></div><div class="ttdeci">std::pair&lt; int64_t, int64_t &gt; compare_keypoints(T first1, T last1, U first2, U last2, V tolerance)</div><div class="ttdoc">Check which keypoints from [first1, last1) are missing in [first2, last2) </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00368">Validation.h:368</a></div></div>
<div class="ttc" id="structarm__compute_1_1_key_point_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_key_point.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::KeyPoint::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00274">Types.h:274</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7457955ed1c49b6478071caa7b5c5be2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO</a></div><div class="ttdeci">void ARM_COMPUTE_PRINT_INFO()</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00057">Asserts.h:57</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_ad487ce76e40f524a7f5e350763b91ae5"><div class="ttname"><a href="hwc_8hpp.xhtml#ad487ce76e40f524a7f5e350763b91ae5">padding</a></div><div class="ttdeci">uint8_t padding[4]</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00265">hwc.hpp:265</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="namespacemali__userspace_xhtml_ad44b615021ed3ccb734fcaf583ef4a03"><div class="ttname"><a href="namespacemali__userspace.xhtml#ad44b615021ed3ccb734fcaf583ef4a03">mali_userspace::type</a></div><div class="ttdeci">uint32_t type</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00204">hwc.hpp:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00278">SimpleTensor.h:278</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates2_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml">arm_compute::Coordinates2D</a></div><div class="ttdoc">Coordinate type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00294">Types.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00109">Dimensions.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1compare__base_xhtml_a43df64dda9f48ddc325ea5ee5cce504c"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1compare__base.xhtml#a43df64dda9f48ddc325ea5ee5cce504c">arm_compute::test::validation::compare_base::_target</a></div><div class="ttdeci">T::value_type _target</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00230">Validation.h:230</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">arm_compute::test::validation::RelativeTolerance</a></div><div class="ttdoc">Class reprensenting a relative tolerance value. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00083">Validation.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::test::IAccessor::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml">arm_compute::test::IAccessor</a></div><div class="ttdoc">Common interface to provide information and access to tensor like structures. </div><div class="ttdef"><b>Definition:</b> <a href="_i_accessor_8h_source.xhtml#l00037">IAccessor.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::LogLevel::DEBUG</a></div></div>
<div class="ttc" id="_exceptions_8h_xhtml"><div class="ttname"><a href="_exceptions_8h.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7730e17dc901bdffefcf45b08bab135f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">arm_compute::test::validation::validate</a></div><div class="ttdeci">void validate(const arm_compute::ValidRegion &amp;region, const arm_compute::ValidRegion &amp;reference)</div><div class="ttdoc">Validate valid regions. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8cpp_source.xhtml#l00149">Validation.cpp:149</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00299">SimpleTensor.h:299</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::test::IAccessor::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Size of each element in the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml_a646bf2ba26847ea66d436ae933883c73"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml#a646bf2ba26847ea66d436ae933883c73">arm_compute::test::validation::RelativeTolerance::RelativeTolerance</a></div><div class="ttdeci">constexpr RelativeTolerance(value_type value)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00099">Validation.h:99</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_adc60af942e951dc93e22b97b41809b51"><div class="ttname"><a href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">ARM_COMPUTE_EXPECT</a></div><div class="ttdeci">#define ARM_COMPUTE_EXPECT(X, LEVEL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00124">Asserts.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00914">FixedPoint.h:914</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00093">Types.h:93</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a21e09e76b74538cd95089523f48468b0"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a21e09e76b74538cd95089523f48468b0">arm_compute::MinMaxLocationValues::min</a></div><div class="ttdeci">MinMaxType min</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_i_accessor_xhtml_ac492280ef2d7889f1226d34743b74459"><div class="ttname"><a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">arm_compute::test::IAccessor::num_channels</a></div><div class="ttdeci">virtual int num_channels() const =0</div><div class="ttdoc">Number of channels of the tensor. </div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml"><div class="ttname"><a href="_asserts_8h.xhtml">Asserts.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_min_max_location_values_xhtml_a8b94c8b6d3de3d741f81429f0565af49"><div class="ttname"><a href="structarm__compute_1_1_min_max_location_values.xhtml#a8b94c8b6d3de3d741f81429f0565af49">arm_compute::MinMaxLocationValues::max_loc</a></div><div class="ttdeci">std::vector&lt; Coordinates2D &gt; max_loc</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml_a98a801b3455152020b7543995eeb3224"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml#a98a801b3455152020b7543995eeb3224">arm_compute::test::validation::AbsoluteTolerance::AbsoluteTolerance</a></div><div class="ttdeci">AbsoluteTolerance()=default</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_3b4cc335dce0408d77b688e575522aa5.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_a54a3db5b521d39f12dbe18362fe1216.xhtml">validation</a></li><li class="navelem"><a class="el" href="_validation_8h.xhtml">Validation.h</a></li>
    <li class="footer">Generated on Thu Sep 28 2017 14:37:52 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.6 </li>
  </ul>
</div>
</body>
</html>
