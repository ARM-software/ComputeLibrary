<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/instruments/Measurement.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_measurement_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Measurement.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_measurement_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_MEASUREMENT</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_MEASUREMENT</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;../Utils.h&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>framework</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">   41</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">   43</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab037372802cee601adeb0ee97dc0c0f3">   49</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab037372802cee601adeb0ee97dc0c0f3">Value</a>(<span class="keywordtype">bool</span> is_floating)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            : <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>{ 0 }, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>(is_floating)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a7a4338759c5836029ef531ae45f57007">   56</a></span>&#160;        <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a7a4338759c5836029ef531ae45f57007">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a5a69ff08e2ead1fb8b4dbb15cbdf6a09">value</a>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">if</span>(value.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">arithmetic_to_string</a>(value.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>, 4);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">arithmetic_to_string</a>(value.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aa48c39f92bc04eded742f5310c74aafe">   70</a></span>&#160;        std::string <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aa48c39f92bc04eded742f5310c74aafe">to_string</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            std::stringstream ss;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            ss &lt;&lt; *<span class="keyword">this</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> ss.str();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a2903dc3c6e35d8a56a6e68793977a07c">   82</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a2903dc3c6e35d8a56a6e68793977a07c">operator+</a>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a> += <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a> += <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a89cf6169f9a2acb466b29792bbb0c56b">  101</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a89cf6169f9a2acb466b29792bbb0c56b">operator-</a>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a> -= <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a> -= <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a72c4d5b79897a1aa4d456c06c47c6723">  120</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a72c4d5b79897a1aa4d456c06c47c6723">operator*</a>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a> *= <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a> *= <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a530633427f42ea2a64ff8ea5732abf29">  139</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a530633427f42ea2a64ff8ea5732abf29">operator/</a>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> res(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                res.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a> = <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                res.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a> = <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a6cb5526035904ad08a9d5ba9fff9a942">  159</a></span>&#160;        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a6cb5526035904ad08a9d5ba9fff9a942">operator-=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point -= b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer -= b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a3dcbcb89cd357c53b70fb4bef3291b7c">  178</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a3dcbcb89cd357c53b70fb4bef3291b7c">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.floating_point &lt; b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.integer &lt; b.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a9666a65078cee68787a9aad555ad0793">  190</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a9666a65078cee68787a9aad555ad0793">relative_standard_deviation</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;variance, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;mean)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">if</span>(variance.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">return</span> 100.0 * sqrt(variance.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>) / mean.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">return</span> 100.0 * sqrt(static_cast&lt;double&gt;(variance.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>)) / mean.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keyword">union</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            {</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">  205</a></span>&#160;                <span class="keywordtype">double</span>        <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">floating_point</a>;</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">  206</a></span>&#160;                <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">integer</a>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            } <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">  208</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">is_floating_point</a>; </div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#ae0068ee19905d634193a92821067606c">  215</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">inline</span> std::ostream &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#ae0068ee19905d634193a92821067606c">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a> &amp;measurement)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        os &lt;&lt; measurement._value &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; measurement._unit;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt; typename Floating, typename std::enable_if &lt; !std::is_integral&lt;Floating&gt;::value</a>, <span class="keywordtype">int</span> &gt;<a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a> = 0 &gt;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a2ccc04c46bf09fcd434dc103f8ca9b2b">  228</a></span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a2ccc04c46bf09fcd434dc103f8ca9b2b">Measurement</a>(Floating <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>, std::string <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a17407369cfeffaf5df87ff044e43af82">unit</a>, std::list&lt;std::string&gt; raw = {})</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        : _unit(unit), _raw_data(std::move(raw)), _value(<span class="keyword">true</span>)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        _value.v.floating_point = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">if</span>(_raw_data.empty())</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            _raw_data = { _value.to_string() };</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename Integer, typename std::enable_if&lt;std::is_integral&lt;Integer&gt;::value</a>, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#aed021625a622269b23e2916fc1e06dac">  245</a></span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#aed021625a622269b23e2916fc1e06dac">Measurement</a>(Integer v, std::string unit, std::list&lt;std::string&gt; raw = {})</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        : _unit(unit), _raw_data(std::move(raw)), _value(<span class="keyword">false</span>)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        _value.v.integer = <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">v</a>);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">if</span>(_raw_data.empty())</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            _raw_data = { _value.to_string() };</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a17407369cfeffaf5df87ff044e43af82">  259</a></span>&#160;    <span class="keyword">const</span> std::string &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a17407369cfeffaf5df87ff044e43af82">unit</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> _unit;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a0623ef2a13ff9b6728dff006ae6cbc47">  268</a></span>&#160;    <span class="keyword">const</span> std::list&lt;std::string&gt; &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a0623ef2a13ff9b6728dff006ae6cbc47">raw_data</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> _raw_data;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a5a69ff08e2ead1fb8b4dbb15cbdf6a09">  277</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a> &amp;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a5a69ff08e2ead1fb8b4dbb15cbdf6a09">value</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">return</span> _value;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    std::string            _unit;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    std::list&lt;std::string&gt; _raw_data;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">Value</a>                  _value;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;};</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;} <span class="comment">// namespace framework</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_MEASUREMENT */</span><span class="preprocessor"></span></div><div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a2903dc3c6e35d8a56a6e68793977a07c"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a2903dc3c6e35d8a56a6e68793977a07c">arm_compute::test::framework::Measurement::Value::operator+</a></div><div class="ttdeci">Value operator+(Value b) const </div><div class="ttdoc">Add with another value and return the sum. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00082">Measurement.h:82</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_ab32110eb040749e72f53d1a7ee30c25b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab32110eb040749e72f53d1a7ee30c25b">arm_compute::test::framework::Measurement::Value::floating_point</a></div><div class="ttdeci">double floating_point</div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00205">Measurement.h:205</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a9666a65078cee68787a9aad555ad0793"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a9666a65078cee68787a9aad555ad0793">arm_compute::test::framework::Measurement::Value::relative_standard_deviation</a></div><div class="ttdeci">static double relative_standard_deviation(const Value &amp;variance, const Value &amp;mean)</div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00190">Measurement.h:190</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml"><div class="ttname"><a href="core_2_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_a5a69ff08e2ead1fb8b4dbb15cbdf6a09"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a5a69ff08e2ead1fb8b4dbb15cbdf6a09">arm_compute::test::framework::Measurement::value</a></div><div class="ttdeci">const Value &amp; value() const </div><div class="ttdoc">Accessor for the stored value. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00277">Measurement.h:277</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">arm_compute::test::framework::Measurement</a></div><div class="ttdoc">Generic measurement that stores values as either double or long long int. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00041">Measurement.h:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a63d8879fa76962b7d0e6cb0364be2e34"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a63d8879fa76962b7d0e6cb0364be2e34">arm_compute::test::framework::Measurement::Value::v</a></div><div class="ttdeci">union arm_compute::test::framework::Measurement::Value::@8 v</div><div class="ttdoc">Stored value. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml">arm_compute::test::framework::Measurement::Value</a></div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00043">Measurement.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a530633427f42ea2a64ff8ea5732abf29"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a530633427f42ea2a64ff8ea5732abf29">arm_compute::test::framework::Measurement::Value::operator/</a></div><div class="ttdeci">Value operator/(int b) const </div><div class="ttdoc">Return the stored value divided by an integer. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00139">Measurement.h:139</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_ae0068ee19905d634193a92821067606c"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#ae0068ee19905d634193a92821067606c">arm_compute::test::framework::Measurement::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Measurement &amp;measurement)</div><div class="ttdoc">Stream output operator to print the measurement. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00215">Measurement.h:215</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a6cb5526035904ad08a9d5ba9fff9a942"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a6cb5526035904ad08a9d5ba9fff9a942">arm_compute::test::framework::Measurement::Value::operator-=</a></div><div class="ttdeci">Value &amp; operator-=(const Value &amp;b)</div><div class="ttdoc">Subtract another value and return the updated stored value. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00159">Measurement.h:159</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a5283f2dae5da803262f8deb3c71525f0"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a5283f2dae5da803262f8deb3c71525f0">arm_compute::test::framework::Measurement::Value::integer</a></div><div class="ttdeci">long long int integer</div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00206">Measurement.h:206</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a7a4338759c5836029ef531ae45f57007"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a7a4338759c5836029ef531ae45f57007">arm_compute::test::framework::Measurement::Value::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Value &amp;value)</div><div class="ttdoc">Add the value stored to the stream as a string. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00056">Measurement.h:56</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_a0623ef2a13ff9b6728dff006ae6cbc47"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a0623ef2a13ff9b6728dff006ae6cbc47">arm_compute::test::framework::Measurement::raw_data</a></div><div class="ttdeci">const std::list&lt; std::string &gt; &amp; raw_data() const </div><div class="ttdoc">Accessor for the raw data. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00268">Measurement.h:268</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_aea625d488d9eafbc023001f74f15f7af"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aea625d488d9eafbc023001f74f15f7af">arm_compute::test::framework::Measurement::Value::is_floating_point</a></div><div class="ttdeci">bool is_floating_point</div><div class="ttdoc">Is the stored value floating point or integer ? </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00208">Measurement.h:208</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_aa48c39f92bc04eded742f5310c74aafe"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#aa48c39f92bc04eded742f5310c74aafe">arm_compute::test::framework::Measurement::Value::to_string</a></div><div class="ttdeci">std::string to_string() const </div><div class="ttdoc">Convert the value stored to string. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00070">Measurement.h:70</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a89cf6169f9a2acb466b29792bbb0c56b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a89cf6169f9a2acb466b29792bbb0c56b">arm_compute::test::framework::Measurement::Value::operator-</a></div><div class="ttdeci">Value operator-(Value b) const </div><div class="ttdoc">Subtract with another value and return the result. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00101">Measurement.h:101</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_a2ccc04c46bf09fcd434dc103f8ca9b2b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a2ccc04c46bf09fcd434dc103f8ca9b2b">arm_compute::test::framework::Measurement::Measurement</a></div><div class="ttdeci">Measurement(Floating v, std::string unit, std::list&lt; std::string &gt; raw={})</div><div class="ttdoc">Constructor to store a floating point value. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00228">Measurement.h:228</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">caffe_data_extractor.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a3dcbcb89cd357c53b70fb4bef3291b7c"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a3dcbcb89cd357c53b70fb4bef3291b7c">arm_compute::test::framework::Measurement::Value::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const Value &amp;b) const </div><div class="ttdoc">Compare the stored value with another value. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00178">Measurement.h:178</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b8004eef325a40dd43eb80755610fff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">arm_compute::test::validation::b</a></div><div class="ttdeci">Tensor b</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00116">GEMM.cpp:116</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_a17407369cfeffaf5df87ff044e43af82"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#a17407369cfeffaf5df87ff044e43af82">arm_compute::test::framework::Measurement::unit</a></div><div class="ttdeci">const std::string &amp; unit() const </div><div class="ttdoc">Accessor for the unit of the measurement. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00259">Measurement.h:259</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_a72c4d5b79897a1aa4d456c06c47c6723"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#a72c4d5b79897a1aa4d456c06c47c6723">arm_compute::test::framework::Measurement::Value::operator*</a></div><div class="ttdeci">Value operator*(Value b) const </div><div class="ttdoc">Multiple with another value and return the result. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00120">Measurement.h:120</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a93690f80f7fb88ea733fdc6f9f3b3ada"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">arm_compute::test::arithmetic_to_string</a></div><div class="ttdeci">std::string arithmetic_to_string(T val, int decimal_places=0)</div><div class="ttdoc">Create a string with the arithmetic value in full precision. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00164">Utils.h:164</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_xhtml_aed021625a622269b23e2916fc1e06dac"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml#aed021625a622269b23e2916fc1e06dac">arm_compute::test::framework::Measurement::Measurement</a></div><div class="ttdeci">Measurement(Integer v, std::string unit, std::list&lt; std::string &gt; raw={})</div><div class="ttdoc">Constructor to store an integer value. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00245">Measurement.h:245</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value_xhtml_ab037372802cee601adeb0ee97dc0c0f3"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.xhtml#ab037372802cee601adeb0ee97dc0c0f3">arm_compute::test::framework::Measurement::Value::Value</a></div><div class="ttdeci">Value(bool is_floating)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00049">Measurement.h:49</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="dir_4efd0ee2ecda32567e74991b08d544ea.xhtml">instruments</a></li><li class="navelem"><a class="el" href="_measurement_8h.xhtml">Measurement.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
