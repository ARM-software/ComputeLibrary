<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/fixtures/ConvolutionLayerFixture.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ConvolutionLayerFixture.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="validation_2fixtures_2_convolution_layer_fixture_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_CONVOLUTION_LAYER_FIXTURE</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_CONVOLUTION_LAYER_FIXTURE</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_scheduler_8h.xhtml">arm_compute/runtime/NEON/NEScheduler.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_assets_library_8h.xhtml">tests/AssetsLibrary.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_globals_8h.xhtml">tests/Globals.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_accessor_8h.xhtml">tests/IAccessor.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asserts_8h.xhtml">tests/framework/Asserts.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fixture_8h.xhtml">tests/framework/Fixture.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_helpers_8h.xhtml">tests/validation/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_convolution_layer_8h.xhtml">tests/validation/reference/ConvolutionLayer.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_utils_8h.xhtml">tests/validation/reference/Utils.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">class </span>NEConvolutionLayer;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorType, <span class="keyword">typename</span> AccessorType, <span class="keyword">typename</span> FunctionType, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">   50</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">ConvolutionValidationGenericFixture</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml">framework::Fixture</a></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#ad6dc80aa0e6af9b0ab649540c58995a8">   53</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#ad6dc80aa0e6af9b0ab649540c58995a8">TBias</a> = <span class="keyword">typename</span> <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">std::conditional&lt;std::is_same&lt;typename std::decay&lt;T&gt;::type</a>, uint8_t&gt;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">::value</a>, int32_t, T&gt;<a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#aa9182978cc803ad27df1459661e5661d">   57</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#aa9182978cc803ad27df1459661e5661d">setup</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> bias_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>, <span class="keywordtype">bool</span> reshape_weights,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;               <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>, <span class="keywordtype">int</span> fractional_bits, <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        _data_type         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        _is_quantized      = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(data_type);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        _bias_data_type    = _is_quantized ? <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        _fractional_bits   = fractional_bits;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        _quantization_info = quantization_info;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        _target    = compute_target(input_shape, weights_shape, bias_shape, output_shape, info, reshape_weights);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        _reference = compute_reference(input_shape, weights_shape, bias_shape, output_shape, info);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> fill(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a> &amp;&amp;tensor, <span class="keywordtype">int</span> i)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                std::uniform_int_distribution&lt;uint8_t&gt; distribution(0, 3);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(tensor, distribution, i);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                std::uniform_int_distribution&lt;int32_t&gt; distribution(-100, 100);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(tensor, distribution, i);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                std::uniform_real_distribution&lt;&gt; distribution(-1.0f, 1.0f);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(tensor, distribution, i);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill_tensor_uniform(tensor, i);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    TensorType compute_target(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;bias_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                              <span class="keywordtype">bool</span> reshape_weights)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> weights_info(!reshape_weights, weights_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(), weights_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>(), weights_shape[3]);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> reshaped_weights_shape(weights_shape);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(!reshape_weights)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="comment">// Check if its a &quot;fully connected&quot; convolution</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> is_fully_connected_convolution = (output_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>() == 1 &amp;&amp; output_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() == 1);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordtype">bool</span>       is_optimised                   = <span class="keyword">false</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#if defined(__arm__)</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            is_optimised = <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;FunctionType, NEConvolutionLayer&gt;::value</a> &amp;&amp; <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a671307bb78c1d64435708feead8c04da">cpu_info</a>().<a class="code" href="structarm__compute_1_1_c_p_u_info.xhtml#a6446992b5303784eb509ecaf4fc4f8e6">CPU</a> == <a class="code" href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853da45a830a4c6240ac27c392266589a630c">CPUTarget::ARMV7</a> &amp;&amp; _data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#elif defined(__aarch64__)</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            is_optimised = <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;FunctionType, NEConvolutionLayer&gt;::value</a> &amp;&amp; <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a671307bb78c1d64435708feead8c04da">cpu_info</a>().<a class="code" href="structarm__compute_1_1_c_p_u_info.xhtml#a6446992b5303784eb509ecaf4fc4f8e6">CPU</a> &gt;= <a class="code" href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853dae756f50f85aff43114661560586b0cdd">CPUTarget::ARMV8</a> &amp;&amp; _data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__arm__) || defined(__aarch64__) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            reshaped_weights_shape.collapse(3);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">if</span>(bias_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>() &gt; 0 &amp;&amp; !_is_quantized)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="comment">// Add bias to the weights reshaped matrix</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                reshaped_weights_shape.set(0, reshaped_weights_shape.x() + 1);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">if</span>(is_fully_connected_convolution || is_optimised)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> shape_x = reshaped_weights_shape.x();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                reshaped_weights_shape.set(0, reshaped_weights_shape.y());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                reshaped_weights_shape.set(1, shape_x);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> interleave_width = 16 / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(_data_type);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                reshaped_weights_shape.set(0, reshaped_weights_shape.x() * interleave_width);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                reshaped_weights_shape.set(1, static_cast&lt;unsigned int&gt;(std::ceil(reshaped_weights_shape.y() / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(interleave_width))));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Create tensors</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        TensorType src     = create_tensor&lt;TensorType&gt;(input_shape, _data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        TensorType weights = create_tensor&lt;TensorType&gt;(reshaped_weights_shape, _data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        TensorType bias    = create_tensor&lt;TensorType&gt;(bias_shape, _bias_data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        TensorType <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = create_tensor&lt;TensorType&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, _data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        FunctionType conv;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        conv.configure(&amp;src, &amp;weights, &amp;bias, &amp;dst, info, weights_info);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(src.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(weights.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(bias.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(dst.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Allocate tensors</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        src.allocator()-&gt;allocate();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        weights.allocator()-&gt;allocate();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        dst.allocator()-&gt;allocate();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(!src.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(!weights.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(!bias.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">ARM_COMPUTE_EXPECT</a>(!dst.info()-&gt;is_resizable(), <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">framework::LogLevel::ERRORS</a>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// Fill tensors</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        fill(AccessorType(src), 0);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span>(!reshape_weights)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> is_fully_connected_convolution = (output_shape.x() == 1 &amp;&amp; output_shape.y() == 1);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordtype">bool</span>       is_optimised                   = <span class="keyword">false</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">#if defined(__arm__)</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            is_optimised = <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;FunctionType, NEConvolutionLayer&gt;::value</a> &amp;&amp; <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a671307bb78c1d64435708feead8c04da">cpu_info</a>().<a class="code" href="structarm__compute_1_1_c_p_u_info.xhtml#a6446992b5303784eb509ecaf4fc4f8e6">CPU</a> == <a class="code" href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853da45a830a4c6240ac27c392266589a630c">CPUTarget::ARMV7</a> &amp;&amp; _data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#elif defined(__aarch64__)</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            is_optimised = <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;FunctionType, NEConvolutionLayer&gt;::value</a> &amp;&amp; <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a671307bb78c1d64435708feead8c04da">cpu_info</a>().<a class="code" href="structarm__compute_1_1_c_p_u_info.xhtml#a6446992b5303784eb509ecaf4fc4f8e6">CPU</a> &gt;= <a class="code" href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853dae756f50f85aff43114661560586b0cdd">CPUTarget::ARMV8</a> &amp;&amp; _data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__arm__) || defined(__aarch64__) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>     tmp_weights_shape(weights_shape);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> tmp_weights(tmp_weights_shape, _data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="comment">// Fill with original shape</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            fill(tmp_weights, 1);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">if</span>(_is_quantized)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                fill(AccessorType(bias), 2);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                tmp_weights = linearise_weights(tmp_weights);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> tmp_bias(bias_shape, _bias_data_type, 1, _fractional_bits, _quantization_info);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                fill(tmp_bias, 2);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                tmp_weights = linearise_weights(tmp_weights, &amp;tmp_bias);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">if</span>(!is_fully_connected_convolution &amp;&amp; !is_optimised)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="comment">// Transpose with interleave</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> interleave_size = 16 / tmp_weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                tmp_weights               = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3bb27cb73ac0ecd83cbb28d01b5edc2c">transpose</a>(std::move(tmp_weights), interleave_size);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            AccessorType weights_accessor(weights);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; tmp_weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++i)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(tmp_weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), i);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                std::copy_n(static_cast&lt;const T *&gt;(tmp_weights(coord)), 1, static_cast&lt;T *&gt;(weights_accessor(coord)));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            fill(AccessorType(weights), 1);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            fill(AccessorType(bias), 2);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Compute NEConvolutionLayer function</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        conv.run();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> compute_reference(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;bias_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;output_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;info)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="comment">// Create reference</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>     src{ input_shape, _data_type, 1, _fractional_bits, _quantization_info };</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>     weights{ weights_shape, _data_type, 1, _fractional_bits, _quantization_info };</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TBias&gt;</a> bias{ bias_shape, _bias_data_type, 1, _fractional_bits, _quantization_info };</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// Fill reference</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        fill(src, 0);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        fill(weights, 1);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        fill(bias, 2);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> reference::convolution_layer&lt;T&gt;(src, weights, bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    TensorType       _target{};</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a>  _reference{};</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>         _data_type{};</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>         _bias_data_type{};</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">int</span>              _fractional_bits{};</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _quantization_info{};</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">bool</span>             _is_quantized = <span class="keyword">false</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;U&gt;</a> linearise_weights(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;U&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;U&gt;</a> *biases = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> dst_shape(weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>());</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        dst_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a>(3);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span>(biases != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            dst_shape.set(0, dst_shape.x() + 1);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> shape_x = dst_shape.x();</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        dst_shape.set(0, dst_shape.y());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        dst_shape.set(1, shape_x);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;U&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(dst_shape, weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>());</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="comment">// Don&#39;t iterate over biases yet</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> weights_idx = 0; weights_idx &lt; weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++weights_idx)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> weights_coord = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), weights_idx);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>   dst_row       = weights_idx % weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().total_size_lower(3);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ weights_coord[3], dst_row, weights_coord[4] };</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>   dst_idx = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape(), dst_coord);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[dst_idx] = weights[weights_idx];</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">if</span>(biases != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">// Fill last row with biases</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> bias_idx = 0; bias_idx &lt; biases-&gt;num_elements(); ++bias_idx)</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> bias_coord = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(biases-&gt;shape(), bias_idx);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> dst_coord{ bias_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape().y()) - 1, bias_coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() };</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                <span class="keywordtype">int</span>         dst_idx = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape(), dst_coord);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[dst_idx] = (*biases)[bias_idx];</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;};</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorType, <span class="keyword">typename</span> AccessorType, <span class="keyword">typename</span> FunctionType, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml">  292</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml">ConvolutionValidationFixture</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">ConvolutionValidationGenericFixture</a>&lt;TensorType, AccessorType, FunctionType, T&gt;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml#ace91f7c17f96d3462da663858964be58">  296</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml#ace91f7c17f96d3462da663858964be58">setup</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> bias_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>, <span class="keywordtype">bool</span> reshape_weights, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml#a4fc01d736fe50cf5b977f755b675f11d">ConvolutionValidationGenericFixture&lt;TensorType, AccessorType, FunctionType, T&gt;::setup</a>(input_shape, weights_shape, bias_shape, output_shape, info, reshape_weights, data_type, 0, <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;};</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorType, <span class="keyword">typename</span> AccessorType, <span class="keyword">typename</span> FunctionType, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml">  303</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml">ConvolutionValidationFixedPointFixture</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">ConvolutionValidationGenericFixture&lt;TensorType, AccessorType, FunctionType, T&gt;</a></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt;</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml#a75f5c0acd9be0f4e0fedac8f08565326">  307</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml#a75f5c0acd9be0f4e0fedac8f08565326">setup</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> bias_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>, <span class="keywordtype">bool</span> reshape_weights, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>, <span class="keywordtype">int</span> fractional_bits)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml#a4fc01d736fe50cf5b977f755b675f11d">ConvolutionValidationGenericFixture&lt;TensorType, AccessorType, FunctionType, T&gt;::setup</a>(input_shape, weights_shape, bias_shape, output_shape, info, reshape_weights, data_type, fractional_bits,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                                                              <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>());</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;};</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorType, <span class="keyword">typename</span> AccessorType, <span class="keyword">typename</span> FunctionType, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml">  315</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml">ConvolutionValidationQuantizedFixture</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">ConvolutionValidationGenericFixture&lt;TensorType, AccessorType, FunctionType, T&gt;</a></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt;</div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml#afdaaca1ad611cdf5943caf5f823a723c">  319</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml#afdaaca1ad611cdf5943caf5f823a723c">setup</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> weights_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> bias_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>, <span class="keywordtype">bool</span> reshape_weights, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;               <a class="code" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml#a4fc01d736fe50cf5b977f755b675f11d">ConvolutionValidationGenericFixture&lt;TensorType, AccessorType, FunctionType, T&gt;::setup</a>(input_shape, weights_shape, bias_shape, output_shape, info, reshape_weights, data_type, 0, quantization_info);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;};</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_CONVOLUTION_LAYER_FIXTURE */</span><span class="preprocessor"></span></div><div class="ttc" id="_i_accessor_8h_xhtml"><div class="ttname"><a href="_i_accessor_8h.xhtml">IAccessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5bc939238e1f14a4c39aaee8186a853da45a830a4c6240ac27c392266589a630c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853da45a830a4c6240ac27c392266589a630c">arm_compute::CPUTarget::ARMV7</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml">arm_compute::test::validation::ConvolutionValidationFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00292">ConvolutionLayerFixture.h:292</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="tests_2validation_2reference_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml">arm_compute::test::validation::ConvolutionValidationQuantizedFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00315">ConvolutionLayerFixture.h:315</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a09b036c709fc72912ee5fdb2231faca2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a09b036c709fc72912ee5fdb2231faca2">arm_compute::test::validation::ARM_COMPUTE_EXPECT</a></div><div class="ttdeci">ARM_COMPUTE_EXPECT(a.info() -&gt;is_resizable(), framework::LogLevel::ERRORS)</div></div>
<div class="ttc" id="tests_2validation_2reference_2_convolution_layer_8h_xhtml"><div class="ttname"><a href="tests_2validation_2reference_2_convolution_layer_8h.xhtml">ConvolutionLayer.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00281">SimpleTensor.h:281</a></div></div>
<div class="ttc" id="tests_2validation_2_helpers_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00244">SimpleTensor.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture_xhtml_ace91f7c17f96d3462da663858964be58"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixture.xhtml#ace91f7c17f96d3462da663858964be58">arm_compute::test::validation::ConvolutionValidationFixture::setup</a></div><div class="ttdeci">void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, bool reshape_weights, DataType data_type)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00296">ConvolutionLayerFixture.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00413">Utils.h:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture_xhtml_aa9182978cc803ad27df1459661e5661d"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#aa9182978cc803ad27df1459661e5661d">arm_compute::test::validation::ConvolutionValidationGenericFixture::setup</a></div><div class="ttdeci">void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, bool reshape_weights, DataType data_type, int fractional_bits, QuantizationInfo quantization_info)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00057">ConvolutionLayerFixture.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00768">Types.h:768</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3bb27cb73ac0ecd83cbb28d01b5edc2c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3bb27cb73ac0ecd83cbb28d01b5edc2c">arm_compute::test::validation::transpose</a></div><div class="ttdeci">RawTensor transpose(const RawTensor &amp;src, int chunk_width)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00069">Utils.cpp:69</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_fixture_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml">arm_compute::test::framework::Fixture</a></div><div class="ttdoc">Abstract fixture class. </div><div class="ttdef"><b>Definition:</b> <a href="_fixture_8h_source.xhtml#l00037">Fixture.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2ad7f431e3446fddcd9b6b9f93c4c14"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_min_max_location_8cpp_source.xhtml#l00090">MinMaxLocation.cpp:90</a></div></div>
<div class="ttc" id="_globals_8h_xhtml"><div class="ttname"><a href="_globals_8h.xhtml">Globals.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00058">main.cpp:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_fixture_xhtml_a4fc01d736fe50cf5b977f755b675f11d"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_fixture.xhtml#a4fc01d736fe50cf5b977f755b675f11d">arm_compute::test::framework::Fixture::setup</a></div><div class="ttdeci">void setup()</div><div class="ttdoc">Setup function. </div><div class="ttdef"><b>Definition:</b> <a href="_fixture_8h_source.xhtml#l00048">Fixture.h:48</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00109">GEMM.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="_assets_library_8h_xhtml"><div class="ttname"><a href="_assets_library_8h.xhtml">AssetsLibrary.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture_xhtml_a75f5c0acd9be0f4e0fedac8f08565326"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml#a75f5c0acd9be0f4e0fedac8f08565326">arm_compute::test::validation::ConvolutionValidationFixedPointFixture::setup</a></div><div class="ttdeci">void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, bool reshape_weights, DataType data_type, int fractional_bits)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00307">ConvolutionLayerFixture.h:307</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00460">Types.h:460</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture_xhtml_ad6dc80aa0e6af9b0ab649540c58995a8"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml#ad6dc80aa0e6af9b0ab649540c58995a8">arm_compute::test::validation::ConvolutionValidationGenericFixture::TBias</a></div><div class="ttdeci">typename std::conditional&lt; std::is_same&lt; typename std::decay&lt; T &gt;::type, uint8_t &gt;::value, int32_t, T &gt;::type TBias</div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00053">ConvolutionLayerFixture.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">Tensor dst</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">GEMM.cpp:118</a></div></div>
<div class="ttc" id="_n_e_scheduler_8h_xhtml"><div class="ttname"><a href="_n_e_scheduler_8h.xhtml">NEScheduler.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00384">Utils.h:384</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5bc939238e1f14a4c39aaee8186a853dae756f50f85aff43114661560586b0cdd"><div class="ttname"><a href="namespacearm__compute.xhtml#a5bc939238e1f14a4c39aaee8186a853dae756f50f85aff43114661560586b0cdd">arm_compute::CPUTarget::ARMV8</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00796">Utils.h:796</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">caffe_data_extractor.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_generic_fixture.xhtml">arm_compute::test::validation::ConvolutionValidationGenericFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00050">ConvolutionLayerFixture.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_fixed_point_fixture.xhtml">arm_compute::test::validation::ConvolutionValidationFixedPointFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00303">ConvolutionLayerFixture.h:303</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00135">TensorShape.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="structarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization settings (used for QASYMM8 data type) </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00109">Types.h:109</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture_xhtml_afdaaca1ad611cdf5943caf5f823a723c"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_convolution_validation_quantized_fixture.xhtml#afdaaca1ad611cdf5943caf5f823a723c">arm_compute::test::validation::ConvolutionValidationQuantizedFixture::setup</a></div><div class="ttdeci">void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, bool reshape_weights, DataType data_type, QuantizationInfo quantization_info)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00319">ConvolutionLayerFixture.h:319</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a8e15e87871211f98c2b566137e38ef99"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">arm_compute::TensorShape::collapse</a></div><div class="ttdeci">void collapse(size_t n, size_t first=0)</div><div class="ttdoc">Collapse the first n dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00123">TensorShape.h:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a671307bb78c1d64435708feead8c04da"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a671307bb78c1d64435708feead8c04da">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo cpu_info() const </div><div class="ttdoc">Get CPU info. </div></div>
<div class="ttc" id="structarm__compute_1_1_c_p_u_info_xhtml_a6446992b5303784eb509ecaf4fc4f8e6"><div class="ttname"><a href="structarm__compute_1_1_c_p_u_info.xhtml#a6446992b5303784eb509ecaf4fc4f8e6">arm_compute::CPUInfo::CPU</a></div><div class="ttdeci">CPUTarget CPU</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00053">CPPTypes.h:53</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml"><div class="ttname"><a href="_asserts_8h.xhtml">Asserts.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_acb4f87f1831680d8d1b70e1bef06bb81"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div></div>
<div class="ttc" id="_fixture_8h_xhtml"><div class="ttname"><a href="_fixture_8h.xhtml">Fixture.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_043de5624456f8ee1a676650b1e35f53.xhtml">fixtures</a></li><li class="navelem"><a class="el" href="validation_2fixtures_2_convolution_layer_fixture_8h.xhtml">ConvolutionLayerFixture.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
