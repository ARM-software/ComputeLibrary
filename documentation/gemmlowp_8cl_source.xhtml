<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/gemmlowp.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemmlowp_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemmlowp.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemmlowp_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers__asymm_8h.xhtml">helpers_asymm.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(COLS_B)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_interleaved_transposed(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// src_addr.s0 = address of matrix A</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// src_addr.s1 = address of matrix B</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Compute address for matrix A and B</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                                                        (src1_stride_y));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Add offset_first_element_in_bytes</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Compute end row address for matrix B</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Reset accumulators</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    int16 c00 = 0;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    int16 c10 = 0;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    int16 c20 = 0;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    int16 c30 = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 32); src_addr += (int2)(8, 32))</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        int8 a0  = convert_int8(vload8(0, ((__global uchar *)src0_ptr) + src_addr.s0));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        int16 b0 = convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        c00 += (int16)a0.s0 * b0;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        c10 += (int16)a0.s1 * b0;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        c20 += (int16)a0.s2 * b0;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        c30 += (int16)a0.s3 * b0;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        int16 b1 = convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1 + 16));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        c00 += (int16)a0.s4 * b1;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        c10 += (int16)a0.s5 * b1;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        c20 += (int16)a0.s6 * b1;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        c30 += (int16)a0.s7 * b1;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt; end_row_mtx_b; src_addr += (int2)(4, 16))</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        int4 a0  = convert_int4(vload4(0, ((__global uchar *)src0_ptr) + src_addr.s0));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        int16 b0 = convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        c00 += (int16)a0.s0 * b0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        c10 += (int16)a0.s1 * b0;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        c20 += (int16)a0.s2 * b0;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        c30 += (int16)a0.s3 * b0;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Store 4x16 block</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    vstore16(c00, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    vstore16(c10, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    vstore16(c20, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    vstore16(c30, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#endif // defined(COLS_B)</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#if defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_Y) &amp;&amp; defined(COLS_A)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#define VECTOR_UCHAR VEC_DATA_TYPE(uchar, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#define VECTOR_UINT VEC_DATA_TYPE(uint, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#define VECTOR_INT VEC_DATA_TYPE(int, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Update address for the matrix A</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Update address for the matrix B</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    src_addr.s1 += idx;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + COLS_A;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    VECTOR_UINT acc0 = 0;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    VECTOR_UINT acc1 = 0;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    VECTOR_UINT acc2 = 0;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    VECTOR_UINT acc3 = 0;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2); src_addr += (int2)(2, 2 * src1_stride_y))</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        uchar2 a0 = vload2(0, src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        uchar2 a1 = vload2(0, src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        uchar2 a2 = vload2(0, src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        uchar2 a3 = vload2(0, src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        VECTOR_UCHAR b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        VECTOR_UCHAR b1 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1 + src1_stride_y);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Accumulate</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a0.s0;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a0.s1;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a1.s0;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a1.s1;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a2.s0;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a2.s1;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a3.s0;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a3.s1;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(1, src1_stride_y))</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        uchar a0 = *(src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        uchar a1 = *(src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        uchar a2 = *(src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        uchar a3 = *(src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        VECTOR_UCHAR b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="comment">// Accumulate</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a0;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a1;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a2;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a3;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc0, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc1, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc2, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc3, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">#endif // defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_Y) &amp;&amp; defined(COLS_A)</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#if defined(COLS_A)</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_a_reduction(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    uint4 sum_row_u32 = (uint4)0;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    uint  sum_row     = 0;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    __global <span class="keyword">const</span> uchar *matrix_a = (__global <span class="keyword">const</span> uchar *)(src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(0) * src_stride_y + get_global_id(1) * src_stride_z);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// This for loop performs 16 accumulations</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)COLS_A - 16); i += 16)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">const</span> uchar16 a0_u8 = vload16(0, matrix_a + i);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        sum_row_u32 += convert_uint4(a0_u8.s0123) + convert_uint4(a0_u8.s4567) + convert_uint4(a0_u8.s89AB) + convert_uint4(a0_u8.sCDEF);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">// This for loop performs the leftover accumulations</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">for</span>(; i &lt; COLS_A; ++i)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        sum_row += matrix_a[i];</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    sum_row += sum_row_u32.s0 + sum_row_u32.s1 + sum_row_u32.s2 + sum_row_u32.s3;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    *((__global <span class="keywordtype">int</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) = (int)sum_row;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif // defined(COLS_A)</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">#if defined(COLS_B) &amp;&amp; defined(ROWS_B)</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_b_reduction(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    uint16 sum_col_u32 = (uint16)0;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    __global <span class="keyword">const</span> uchar *matrix_b = (__global <span class="keyword">const</span> uchar *)(src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(1) * src_stride_z);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// This for loop performs 4 accumulations</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)ROWS_B - 4); i += 4)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keyword">const</span> uchar16 b0_u8 = vload16(0, matrix_b + 0 * src_stride_y);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> uchar16 b1_u8 = vload16(0, matrix_b + 1 * src_stride_y);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keyword">const</span> uchar16 b2_u8 = vload16(0, matrix_b + 2 * src_stride_y);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keyword">const</span> uchar16 b3_u8 = vload16(0, matrix_b + 3 * src_stride_y);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        sum_col_u32 += convert_uint16(b0_u8) + convert_uint16(b1_u8) + convert_uint16(b2_u8) + convert_uint16(b3_u8);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        matrix_b += 4 * src_stride_y;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">// This for loop perfoms the leftover accumulations</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">for</span>(; i &lt; (int)ROWS_B; ++i)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keyword">const</span> uchar16 b0_u8 = vload16(0, matrix_b);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        sum_col_u32 += convert_uint16(b0_u8);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        matrix_b += src_stride_y;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    vstore16(convert_int16(sum_col_u32), 0, (__global <span class="keywordtype">int</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#endif // defined(COLS_B) &amp;&amp; defined(ROWS_B)</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">#if defined(K_OFFSET)</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">/* OpenCL kernel used to add the offset contribution after @ref CLGEMMLowpMatrixMultiplyKernel. The computation is performed in-place</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of @CLGEMMLowpMatrixMultiplyKernel),</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"> * and adds to it the offset contribution of matrix A and matrix B in-place.</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"> * The final result is:</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment"> * mm_result[i][k] = mm_result[i][k] +</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment"> *                   (sum_col[k] * A_OFFSET) +</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment"> *                   (sum_row[i] * B_OFFSET) +</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment"> *                   (K_OFFSET)</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment"> * @param[in] mm_result_ptr                                Pointer to the source tensor. Supported data type: S32</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment"> * @param[in] mm_result_stride_x                           Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"> * @param[in] mm_result_step_x                             mm_result_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"> * @param[in] mm_result_stride_y                           Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"> * @param[in] mm_result_step_y                             mm_result_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"> * @param[in] mm_result_stride_z                           Stride of the source tensor in Z dimension (in bytes)</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"> * @param[in] mm_result_step_z                             mm_result_stride_z * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"> * @param[in] mm_result_offset_first_element_in_bytes      The offset of the first element in the source tensor</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"> * @param[in] sum_col_result_ptr                           Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"> * @param[in] sum_col_result_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> * @param[in] sum_col_result_step_x                        sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"> * @param[in] sum_col_result_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> * @param[in] sum_col_result_step_y                        sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> * @param[in] sum_col_result_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"> * @param[in] sum_row_result_ptr                           Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"> * @param[in] sum_row_result_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"> * @param[in] sum_row_result_step_x                        sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"> * @param[in] sum_row_result_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment"> * @param[in] sum_row_result_step_y                        sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"> * @param[in] sum_row_result_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_offset_contribution(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(mm_result)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                           ,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                           ,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                          )</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> mm_result = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(mm_result);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    int16 a_offset_s32 = (int16)0;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    int16 b_offset_s32 = (int16)0;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="preprocessor">#if defined(A_OFFSET)</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> sum_col = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(sum_col);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Compute the offset contribution due to A_OFFSET</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="preprocessor">#if defined(SUM_COL_HAS_BATCHES)</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    a_offset_s32 = vload16(0, (__global <span class="keywordtype">int</span> *)(sum_col.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * sum_col_stride_y));</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_HAS_BATCHES)</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    a_offset_s32 = vload16(0, (__global <span class="keywordtype">int</span> *)(sum_col.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_HAS_BATCHES)</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    a_offset_s32 *= (int16)A_OFFSET;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> sum_row = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(sum_row);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="comment">// Compute the offset contribution due to B_OFFSET</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    b_offset_s32 = (int16) * (((__global <span class="keywordtype">int</span> *)(sum_row.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * sum_row_stride_y)) + get_global_id(1));</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    b_offset_s32 *= (int16)B_OFFSET;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="preprocessor">#endif // defined(B_OFFSET)</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> int16 offset_term_s32 = (int16)K_OFFSET + a_offset_s32 + b_offset_s32;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    int16 in_s32 = vload16(0, (__global <span class="keywordtype">int</span> *)mm_result.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    in_s32 += offset_term_s32;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="comment">// Store the result with the offset contribution</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    vstore16(in_s32, 0, (__global <span class="keywordtype">int</span> *)mm_result.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">#endif // defined(K_OFFSET)</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">#if defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULT_INT) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> dst = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(dst);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    int16 input_values = vload16(0, (__global <span class="keywordtype">int</span> *)src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    input_values += (int16)RESULT_OFFSET;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> int16 biases_values = vload16(0, (__global <span class="keywordtype">int</span> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    input_values += (int16)biases_values;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    input_values *= RESULT_MULT_INT;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    input_values &gt;&gt;= RESULT_SHIFT;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    uchar16 res = convert_uchar16_sat(input_values);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(res, (uchar16)MIN_BOUND);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>(res, (uchar16)MAX_BOUND);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    vstore16(res, 0, dst.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor">#endif // defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULT_INT) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">#if defined(RESULT_OFFSET_AFTER_SHIFT) &amp;&amp; defined(RESULT_FIXEDPOINT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down_fixedpoint(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                                             <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                                                             <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;{</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> dst = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(dst);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    int16 input_values = vload16(0, (__global <span class="keywordtype">int</span> *)src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keyword">const</span> int16 biases_values = vload16(0, (__global <span class="keywordtype">int</span> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    input_values += (int16)biases_values;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, 16);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    input_values += (int16)RESULT_OFFSET_AFTER_SHIFT;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    uchar16 res = convert_uchar16_sat(input_values);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(res, (uchar16)MIN_BOUND);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>(res, (uchar16)MAX_BOUND);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    vstore16(res, 0, dst.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;}</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor">#endif // defined(RESULT_OFFSET_AFTER_SHIFT) &amp;&amp; defined(RESULT_FIXEDPOINT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00132">helpers.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00884">FixedPoint.h:884</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00098">fixed_point.h:98</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00040">helpers.h:40</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00117">helpers.h:117</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a527bfdf5eeb306f1cf01c4a8e29f38e0"><div class="ttname"><a href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00096">helpers.h:96</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00066">helpers.h:66</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00149">helpers.h:149</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00043">helpers.h:43</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00102">helpers.h:102</a></div></div>
<div class="ttc" id="struct_vector_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">Vector::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00134">helpers.h:134</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00060">helpers.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">Tensor dst</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">GEMM.cpp:118</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00140">helpers.h:140</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00074">helpers.h:74</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00142">helpers.h:142</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml"><div class="ttname"><a href="helpers__asymm_8h.xhtml">helpers_asymm.h</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a86de0ffca367bfcf27a8ae5dd1fdef2d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a></div><div class="ttdeci">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE(x, quantized_multiplier, right_shift, size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00090">helpers_asymm.h:90</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">Tensor3D::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00151">helpers.h:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00889">FixedPoint.h:889</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="gemmlowp_8cl.xhtml">gemmlowp.cl</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:31 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
