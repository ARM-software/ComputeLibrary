<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/gemmlowp.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemmlowp_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemmlowp.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemmlowp_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers__asymm_8h.xhtml">helpers_asymm.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(COLS_B) &amp;&amp; defined(MULT_INTERLEAVE4X4_HEIGHT) &amp;&amp; defined(TRANSPOSE1XW_WIDTH_STEP)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_interleaved_transposed_midgard(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">int</span> x = get_global_id(0) / TRANSPOSE1XW_WIDTH_STEP;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1) / MULT_INTERLEAVE4X4_HEIGHT;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Offset</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_row_a = (get_global_id(1) % MULT_INTERLEAVE4X4_HEIGHT) * 4;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_row_b = (get_global_id(0) % TRANSPOSE1XW_WIDTH_STEP) * 4;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// src_addr_a = address of matrix A</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// src_addr_b = address of matrix B</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    __global uchar *src_addr_a = (__global uchar *)(src0_ptr + y * src0_stride_y + src0_offset_first_element_in_bytes);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    __global uchar *src_addr_b = (__global uchar *)(src1_ptr + x * src1_stride_y + src1_offset_first_element_in_bytes);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Compute end row address for matrix B</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    __global uchar *src_end_addr_b = src_addr_b + COLS_B;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    src_addr_a += offset_row_a;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    src_addr_b += offset_row_b;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Reset accumulators</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    int4 c00 = 0;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    int4 c10 = 0;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    int4 c20 = 0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    int4 c30 = 0;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt;= (src_end_addr_b - (int)(8 * TRANSPOSE1XW_WIDTH_STEP)); src_addr_a += 8 * MULT_INTERLEAVE4X4_HEIGHT, src_addr_b += 8 * TRANSPOSE1XW_WIDTH_STEP)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        int4 a0 = convert_int4(vload4(0, src_addr_a));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        int4 b0 = convert_int4(vload4(0, src_addr_b));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        c00 += (int4)a0.s0 * b0;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        c10 += (int4)a0.s1 * b0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        c20 += (int4)a0.s2 * b0;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        c30 += (int4)a0.s3 * b0;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        a0 = convert_int4(vload4(0, src_addr_a + 4 * MULT_INTERLEAVE4X4_HEIGHT));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        b0 = convert_int4(vload4(0, src_addr_b + 4 * TRANSPOSE1XW_WIDTH_STEP));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        c00 += (int4)a0.s0 * b0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        c10 += (int4)a0.s1 * b0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        c20 += (int4)a0.s2 * b0;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        c30 += (int4)a0.s3 * b0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt; src_end_addr_b; src_addr_a += (4 * MULT_INTERLEAVE4X4_HEIGHT), src_addr_b += (4 * TRANSPOSE1XW_WIDTH_STEP))</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        int4 a0 = convert_int4(vload4(0, src_addr_a));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        int4 b0 = convert_int4(vload4(0, src_addr_b));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        c00 += (int4)a0.s0 * b0;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        c10 += (int4)a0.s1 * b0;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        c20 += (int4)a0.s2 * b0;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        c30 += (int4)a0.s3 * b0;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Store 4x4 block</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    vstore4(c00, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    vstore4(c10, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    vstore4(c20, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    vstore4(c30, 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_interleaved_transposed_bifrost(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">int</span> x = get_global_id(0) / TRANSPOSE1XW_WIDTH_STEP;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1) / MULT_INTERLEAVE4X4_HEIGHT;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Offset</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_row_a = (get_global_id(1) % MULT_INTERLEAVE4X4_HEIGHT) * 4;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_row_b = (get_global_id(0) % TRANSPOSE1XW_WIDTH_STEP) * 4;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// src_addr_a = address of matrix A</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// src_addr_b = address of matrix B</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    __global uchar *src_addr_a = (__global uchar *)(src0_ptr + y * src0_stride_y + src0_offset_first_element_in_bytes);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    __global uchar *src_addr_b = (__global uchar *)(src1_ptr + x * src1_stride_y + src1_offset_first_element_in_bytes);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// Compute end row address for matrix B</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    __global uchar *src_end_addr_b = src_addr_b + COLS_B;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    src_addr_a += offset_row_a;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    src_addr_b += offset_row_b;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Reset accumulators</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    uint c00 = 0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    uint c01 = 0;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    uint c02 = 0;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    uint c03 = 0;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    uint c10 = 0;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    uint c11 = 0;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    uint c12 = 0;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    uint c13 = 0;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    uint c20 = 0;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    uint c21 = 0;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    uint c22 = 0;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    uint c23 = 0;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    uint c30 = 0;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    uint c31 = 0;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    uint c32 = 0;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    uint c33 = 0;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#if MULT_INTERLEAVE4X4_HEIGHT == 1</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt;= (src_end_addr_b - (int)(32 * TRANSPOSE1XW_WIDTH_STEP)); src_addr_a += (32 * MULT_INTERLEAVE4X4_HEIGHT), src_addr_b += (32 * TRANSPOSE1XW_WIDTH_STEP))</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        uchar16 a0 = vload16(0, src_addr_a);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        uchar4  b0 = vload4(0, src_addr_b);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        c00 += (ushort)a0.s0 * b0.s0;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        c01 += (ushort)a0.s0 * b0.s1;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        c02 += (ushort)a0.s0 * b0.s2;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        c03 += (ushort)a0.s0 * b0.s3;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        c10 += (ushort)a0.s1 * b0.s0;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        c11 += (ushort)a0.s1 * b0.s1;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        c12 += (ushort)a0.s1 * b0.s2;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        c13 += (ushort)a0.s1 * b0.s3;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        c20 += (ushort)a0.s2 * b0.s0;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        c21 += (ushort)a0.s2 * b0.s1;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        c22 += (ushort)a0.s2 * b0.s2;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        c23 += (ushort)a0.s2 * b0.s3;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        c30 += (ushort)a0.s3 * b0.s0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        c31 += (ushort)a0.s3 * b0.s1;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        c32 += (ushort)a0.s3 * b0.s2;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        c33 += (ushort)a0.s3 * b0.s3;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        b0 = vload4(0, src_addr_b + 4 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        c00 += (ushort)a0.s4 * b0.s0;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        c01 += (ushort)a0.s4 * b0.s1;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        c02 += (ushort)a0.s4 * b0.s2;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        c03 += (ushort)a0.s4 * b0.s3;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        c10 += (ushort)a0.s5 * b0.s0;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        c11 += (ushort)a0.s5 * b0.s1;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        c12 += (ushort)a0.s5 * b0.s2;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        c13 += (ushort)a0.s5 * b0.s3;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        c20 += (ushort)a0.s6 * b0.s0;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        c21 += (ushort)a0.s6 * b0.s1;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        c22 += (ushort)a0.s6 * b0.s2;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        c23 += (ushort)a0.s6 * b0.s3;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        c30 += (ushort)a0.s7 * b0.s0;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        c31 += (ushort)a0.s7 * b0.s1;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        c32 += (ushort)a0.s7 * b0.s2;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        c33 += (ushort)a0.s7 * b0.s3;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        b0 = vload4(0, src_addr_b + 8 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        c00 += (ushort)a0.s8 * b0.s0;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        c01 += (ushort)a0.s8 * b0.s1;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        c02 += (ushort)a0.s8 * b0.s2;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        c03 += (ushort)a0.s8 * b0.s3;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        c10 += (ushort)a0.s9 * b0.s0;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        c11 += (ushort)a0.s9 * b0.s1;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        c12 += (ushort)a0.s9 * b0.s2;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        c13 += (ushort)a0.s9 * b0.s3;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        c20 += (ushort)a0.sA * b0.s0;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        c21 += (ushort)a0.sA * b0.s1;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        c22 += (ushort)a0.sA * b0.s2;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        c23 += (ushort)a0.sA * b0.s3;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        c30 += (ushort)a0.sB * b0.s0;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        c31 += (ushort)a0.sB * b0.s1;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        c32 += (ushort)a0.sB * b0.s2;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        c33 += (ushort)a0.sB * b0.s3;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        b0 = vload4(0, src_addr_b + 12 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        c00 += (ushort)a0.sC * b0.s0;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        c01 += (ushort)a0.sC * b0.s1;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        c02 += (ushort)a0.sC * b0.s2;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        c03 += (ushort)a0.sC * b0.s3;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        c10 += (ushort)a0.sD * b0.s0;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        c11 += (ushort)a0.sD * b0.s1;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        c12 += (ushort)a0.sD * b0.s2;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        c13 += (ushort)a0.sD * b0.s3;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        c20 += (ushort)a0.sE * b0.s0;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        c21 += (ushort)a0.sE * b0.s1;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        c22 += (ushort)a0.sE * b0.s2;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        c23 += (ushort)a0.sE * b0.s3;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        c30 += (ushort)a0.sF * b0.s0;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        c31 += (ushort)a0.sF * b0.s1;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        c32 += (ushort)a0.sF * b0.s2;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        c33 += (ushort)a0.sF * b0.s3;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        a0 = vload16(0, src_addr_a + 16);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        b0 = vload4(0, src_addr_b + 16 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        c00 += (ushort)a0.s0 * b0.s0;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        c01 += (ushort)a0.s0 * b0.s1;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        c02 += (ushort)a0.s0 * b0.s2;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        c03 += (ushort)a0.s0 * b0.s3;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        c10 += (ushort)a0.s1 * b0.s0;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        c11 += (ushort)a0.s1 * b0.s1;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        c12 += (ushort)a0.s1 * b0.s2;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        c13 += (ushort)a0.s1 * b0.s3;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        c20 += (ushort)a0.s2 * b0.s0;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        c21 += (ushort)a0.s2 * b0.s1;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        c22 += (ushort)a0.s2 * b0.s2;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        c23 += (ushort)a0.s2 * b0.s3;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        c30 += (ushort)a0.s3 * b0.s0;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        c31 += (ushort)a0.s3 * b0.s1;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        c32 += (ushort)a0.s3 * b0.s2;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        c33 += (ushort)a0.s3 * b0.s3;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        b0 = vload4(0, src_addr_b + 20 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        c00 += (ushort)a0.s4 * b0.s0;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        c01 += (ushort)a0.s4 * b0.s1;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        c02 += (ushort)a0.s4 * b0.s2;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        c03 += (ushort)a0.s4 * b0.s3;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        c10 += (ushort)a0.s5 * b0.s0;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        c11 += (ushort)a0.s5 * b0.s1;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        c12 += (ushort)a0.s5 * b0.s2;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        c13 += (ushort)a0.s5 * b0.s3;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        c20 += (ushort)a0.s6 * b0.s0;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        c21 += (ushort)a0.s6 * b0.s1;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        c22 += (ushort)a0.s6 * b0.s2;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        c23 += (ushort)a0.s6 * b0.s3;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        c30 += (ushort)a0.s7 * b0.s0;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        c31 += (ushort)a0.s7 * b0.s1;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        c32 += (ushort)a0.s7 * b0.s2;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        c33 += (ushort)a0.s7 * b0.s3;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        b0 = vload4(0, src_addr_b + 24 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        c00 += (ushort)a0.s8 * b0.s0;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        c01 += (ushort)a0.s8 * b0.s1;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        c02 += (ushort)a0.s8 * b0.s2;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        c03 += (ushort)a0.s8 * b0.s3;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        c10 += (ushort)a0.s9 * b0.s0;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        c11 += (ushort)a0.s9 * b0.s1;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        c12 += (ushort)a0.s9 * b0.s2;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        c13 += (ushort)a0.s9 * b0.s3;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        c20 += (ushort)a0.sA * b0.s0;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        c21 += (ushort)a0.sA * b0.s1;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        c22 += (ushort)a0.sA * b0.s2;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        c23 += (ushort)a0.sA * b0.s3;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        c30 += (ushort)a0.sB * b0.s0;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        c31 += (ushort)a0.sB * b0.s1;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        c32 += (ushort)a0.sB * b0.s2;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        c33 += (ushort)a0.sB * b0.s3;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment">// Load values from matrix B (transposed)</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        b0 = vload4(0, src_addr_b + 28 * TRANSPOSE1XW_WIDTH_STEP);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        c00 += (ushort)a0.sC * b0.s0;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        c01 += (ushort)a0.sC * b0.s1;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        c02 += (ushort)a0.sC * b0.s2;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        c03 += (ushort)a0.sC * b0.s3;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        c10 += (ushort)a0.sD * b0.s0;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        c11 += (ushort)a0.sD * b0.s1;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        c12 += (ushort)a0.sD * b0.s2;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        c13 += (ushort)a0.sD * b0.s3;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        c20 += (ushort)a0.sE * b0.s0;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        c21 += (ushort)a0.sE * b0.s1;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        c22 += (ushort)a0.sE * b0.s2;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        c23 += (ushort)a0.sE * b0.s3;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        c30 += (ushort)a0.sF * b0.s0;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        c31 += (ushort)a0.sF * b0.s1;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        c32 += (ushort)a0.sF * b0.s2;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        c33 += (ushort)a0.sF * b0.s3;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#endif // MULT_INTERLEAVE4X4_HEIGHT == 1</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt; src_end_addr_b; src_addr_a += (4 * MULT_INTERLEAVE4X4_HEIGHT), src_addr_b += (4 * TRANSPOSE1XW_WIDTH_STEP))</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        uchar4 a0 = vload4(0, src_addr_a);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        uchar4 b0 = vload4(0, src_addr_b);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        c00 += (ushort)a0.s0 * b0.s0;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        c01 += (ushort)a0.s0 * b0.s1;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        c02 += (ushort)a0.s0 * b0.s2;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        c03 += (ushort)a0.s0 * b0.s3;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        c10 += (ushort)a0.s1 * b0.s0;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        c11 += (ushort)a0.s1 * b0.s1;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        c12 += (ushort)a0.s1 * b0.s2;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        c13 += (ushort)a0.s1 * b0.s3;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        c20 += (ushort)a0.s2 * b0.s0;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        c21 += (ushort)a0.s2 * b0.s1;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        c22 += (ushort)a0.s2 * b0.s2;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        c23 += (ushort)a0.s2 * b0.s3;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        c30 += (ushort)a0.s3 * b0.s0;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        c31 += (ushort)a0.s3 * b0.s1;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        c32 += (ushort)a0.s3 * b0.s2;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        c33 += (ushort)a0.s3 * b0.s3;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// Store 4x4 block</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    vstore4((int4)(c00, c01, c02, c03), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    vstore4((int4)(c10, c11, c12, c13), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    vstore4((int4)(c20, c21, c22, c23), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    vstore4((int4)(c30, c31, c32, c33), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="preprocessor">#endif // defined(COLS_B) &amp;&amp; defined(MULT_INTERLEAVE4X4_HEIGHT) &amp;&amp; defined(TRANSPOSE1XW_WIDTH_STEP)</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="preprocessor">#if defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_Y) &amp;&amp; defined(COLS_A)</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="preprocessor">#define VECTOR_UCHAR VEC_DATA_TYPE(uchar, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="preprocessor">#define VECTOR_UINT VEC_DATA_TYPE(uint, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="preprocessor">#define VECTOR_INT VEC_DATA_TYPE(int, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_midgard(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="comment">// Update address for the matrix A</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// Update address for the matrix B</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    src_addr.s1 += idx;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + COLS_A;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    VECTOR_UINT acc0 = 0;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    VECTOR_UINT acc1 = 0;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    VECTOR_UINT acc2 = 0;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    VECTOR_UINT acc3 = 0;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    VECTOR_UINT acc4 = 0;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2); src_addr += (int2)(2, 2 * src1_stride_y))</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        uchar2 a0 = vload2(0, src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        uchar2 a1 = vload2(0, src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        uchar2 a2 = vload2(0, src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        uchar2 a3 = vload2(0, src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        uchar2 a4 = vload2(0, src0_ptr + src_addr.s0 + 4 * src0_stride_y);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        VECTOR_UCHAR b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        VECTOR_UCHAR b1 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1 + src1_stride_y);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="comment">// Accumulate</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a0.s0;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a0.s1;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a1.s0;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a1.s1;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a2.s0;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a2.s1;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a3.s0;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a3.s1;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;#<span class="keywordflow">if</span> NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        acc4 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a4.s0;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        acc4 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, VECTOR_UINT) * (VECTOR_UINT)a4.s1;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;#endif <span class="comment">// NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(1, src1_stride_y))</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        uchar a0 = *(src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        uchar a1 = *(src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        uchar a2 = *(src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        uchar a3 = *(src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        uchar a4 = *(src0_ptr + src_addr.s0 + 4 * src0_stride_y);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        VECTOR_UCHAR b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, src1_ptr + src_addr.s1);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="comment">// Accumulate</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        acc0 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a0;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        acc1 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a1;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        acc2 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a2;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        acc3 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a3;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        acc4 += <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, VECTOR_UINT) * (VECTOR_UINT)a4;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc0, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc1, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc2, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc3, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    (<a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(acc4, VECTOR_INT), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 4)));</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_bifrost(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;{</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="comment">// Update address for the matrix A</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="comment">// Update address for the matrix B</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    src_addr.s1 += idx;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + COLS_A;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    uint acc00 = 0;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    uint acc01 = 0;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    uint acc02 = 0;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    uint acc03 = 0;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    uint acc10 = 0;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    uint acc11 = 0;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    uint acc12 = 0;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    uint acc13 = 0;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    uint acc20 = 0;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    uint acc21 = 0;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    uint acc22 = 0;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    uint acc23 = 0;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    uint acc30 = 0;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    uint acc31 = 0;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    uint acc32 = 0;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    uint acc33 = 0;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    uint acc40 = 0;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    uint acc41 = 0;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    uint acc42 = 0;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    uint acc43 = 0;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 4); src_addr += (int2)(4, 4 * src1_stride_y))</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        uchar4 a0 = vload4(0, src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        uchar4 a1 = vload4(0, src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        uchar4 a2 = vload4(0, src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        uchar4 a3 = vload4(0, src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        uchar4 a4 = vload4(0, src0_ptr + src_addr.s0 + 4 * src0_stride_y);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        uchar4 b0 = vload4(0, src1_ptr + src_addr.s1 + 0 * src1_stride_y);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        uchar4 b1 = vload4(0, src1_ptr + src_addr.s1 + 1 * src1_stride_y);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        uchar4 b2 = vload4(0, src1_ptr + src_addr.s1 + 2 * src1_stride_y);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        uchar4 b3 = vload4(0, src1_ptr + src_addr.s1 + 3 * src1_stride_y);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        {</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a0.s0;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a0.s0;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a0.s0;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a0.s0;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            ushort tmp4 = (ushort)b1.s0 * (ushort)a0.s1;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            ushort tmp5 = (ushort)b1.s1 * (ushort)a0.s1;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            ushort tmp6 = (ushort)b1.s2 * (ushort)a0.s1;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            ushort tmp7 = (ushort)b1.s3 * (ushort)a0.s1;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            ushort tmp8 = (ushort)b2.s0 * (ushort)a0.s2;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            ushort tmp9 = (ushort)b2.s1 * (ushort)a0.s2;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            ushort tmpA = (ushort)b2.s2 * (ushort)a0.s2;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            ushort tmpB = (ushort)b2.s3 * (ushort)a0.s2;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            ushort tmpC = (ushort)b3.s0 * (ushort)a0.s3;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            ushort tmpD = (ushort)b3.s1 * (ushort)a0.s3;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            ushort tmpE = (ushort)b3.s2 * (ushort)a0.s3;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            ushort tmpF = (ushort)b3.s3 * (ushort)a0.s3;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            acc00 += ((uint)tmp0 + (uint)tmp4 + (uint)tmp8 + (uint)tmpC);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            acc01 += ((uint)tmp1 + (uint)tmp5 + (uint)tmp9 + (uint)tmpD);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            acc02 += ((uint)tmp2 + (uint)tmp6 + (uint)tmpA + (uint)tmpE);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            acc03 += ((uint)tmp3 + (uint)tmp7 + (uint)tmpB + (uint)tmpF);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        }</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        {</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a1.s0;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a1.s0;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a1.s0;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a1.s0;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            ushort tmp4 = (ushort)b1.s0 * (ushort)a1.s1;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            ushort tmp5 = (ushort)b1.s1 * (ushort)a1.s1;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            ushort tmp6 = (ushort)b1.s2 * (ushort)a1.s1;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            ushort tmp7 = (ushort)b1.s3 * (ushort)a1.s1;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            ushort tmp8 = (ushort)b2.s0 * (ushort)a1.s2;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            ushort tmp9 = (ushort)b2.s1 * (ushort)a1.s2;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            ushort tmpA = (ushort)b2.s2 * (ushort)a1.s2;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            ushort tmpB = (ushort)b2.s3 * (ushort)a1.s2;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            ushort tmpC = (ushort)b3.s0 * (ushort)a1.s3;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            ushort tmpD = (ushort)b3.s1 * (ushort)a1.s3;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            ushort tmpE = (ushort)b3.s2 * (ushort)a1.s3;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            ushort tmpF = (ushort)b3.s3 * (ushort)a1.s3;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            acc10 += ((uint)tmp0 + (uint)tmp4 + (uint)tmp8 + (uint)tmpC);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            acc11 += ((uint)tmp1 + (uint)tmp5 + (uint)tmp9 + (uint)tmpD);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            acc12 += ((uint)tmp2 + (uint)tmp6 + (uint)tmpA + (uint)tmpE);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            acc13 += ((uint)tmp3 + (uint)tmp7 + (uint)tmpB + (uint)tmpF);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        }</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a2.s0;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a2.s0;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a2.s0;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a2.s0;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            ushort tmp4 = (ushort)b1.s0 * (ushort)a2.s1;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            ushort tmp5 = (ushort)b1.s1 * (ushort)a2.s1;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            ushort tmp6 = (ushort)b1.s2 * (ushort)a2.s1;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            ushort tmp7 = (ushort)b1.s3 * (ushort)a2.s1;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            ushort tmp8 = (ushort)b2.s0 * (ushort)a2.s2;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            ushort tmp9 = (ushort)b2.s1 * (ushort)a2.s2;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            ushort tmpA = (ushort)b2.s2 * (ushort)a2.s2;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            ushort tmpB = (ushort)b2.s3 * (ushort)a2.s2;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            ushort tmpC = (ushort)b3.s0 * (ushort)a2.s3;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            ushort tmpD = (ushort)b3.s1 * (ushort)a2.s3;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            ushort tmpE = (ushort)b3.s2 * (ushort)a2.s3;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            ushort tmpF = (ushort)b3.s3 * (ushort)a2.s3;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            acc20 += ((uint)tmp0 + (uint)tmp4 + (uint)tmp8 + (uint)tmpC);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            acc21 += ((uint)tmp1 + (uint)tmp5 + (uint)tmp9 + (uint)tmpD);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            acc22 += ((uint)tmp2 + (uint)tmp6 + (uint)tmpA + (uint)tmpE);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            acc23 += ((uint)tmp3 + (uint)tmp7 + (uint)tmpB + (uint)tmpF);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        }</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a3.s0;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a3.s0;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a3.s0;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a3.s0;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            ushort tmp4 = (ushort)b1.s0 * (ushort)a3.s1;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            ushort tmp5 = (ushort)b1.s1 * (ushort)a3.s1;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            ushort tmp6 = (ushort)b1.s2 * (ushort)a3.s1;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            ushort tmp7 = (ushort)b1.s3 * (ushort)a3.s1;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            ushort tmp8 = (ushort)b2.s0 * (ushort)a3.s2;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            ushort tmp9 = (ushort)b2.s1 * (ushort)a3.s2;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            ushort tmpA = (ushort)b2.s2 * (ushort)a3.s2;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            ushort tmpB = (ushort)b2.s3 * (ushort)a3.s2;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            ushort tmpC = (ushort)b3.s0 * (ushort)a3.s3;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            ushort tmpD = (ushort)b3.s1 * (ushort)a3.s3;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            ushort tmpE = (ushort)b3.s2 * (ushort)a3.s3;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            ushort tmpF = (ushort)b3.s3 * (ushort)a3.s3;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            acc30 += ((uint)tmp0 + (uint)tmp4 + (uint)tmp8 + (uint)tmpC);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            acc31 += ((uint)tmp1 + (uint)tmp5 + (uint)tmp9 + (uint)tmpD);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            acc32 += ((uint)tmp2 + (uint)tmp6 + (uint)tmpA + (uint)tmpE);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            acc33 += ((uint)tmp3 + (uint)tmp7 + (uint)tmpB + (uint)tmpF);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        }</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        {</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a4.s0;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a4.s0;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a4.s0;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a4.s0;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            ushort tmp4 = (ushort)b1.s0 * (ushort)a4.s1;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            ushort tmp5 = (ushort)b1.s1 * (ushort)a4.s1;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            ushort tmp6 = (ushort)b1.s2 * (ushort)a4.s1;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            ushort tmp7 = (ushort)b1.s3 * (ushort)a4.s1;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            ushort tmp8 = (ushort)b2.s0 * (ushort)a4.s2;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            ushort tmp9 = (ushort)b2.s1 * (ushort)a4.s2;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            ushort tmpA = (ushort)b2.s2 * (ushort)a4.s2;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            ushort tmpB = (ushort)b2.s3 * (ushort)a4.s2;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            ushort tmpC = (ushort)b3.s0 * (ushort)a4.s3;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            ushort tmpD = (ushort)b3.s1 * (ushort)a4.s3;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            ushort tmpE = (ushort)b3.s2 * (ushort)a4.s3;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            ushort tmpF = (ushort)b3.s3 * (ushort)a4.s3;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            acc40 += ((uint)tmp0 + (uint)tmp4 + (uint)tmp8 + (uint)tmpC);</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            acc41 += ((uint)tmp1 + (uint)tmp5 + (uint)tmp9 + (uint)tmpD);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            acc42 += ((uint)tmp2 + (uint)tmp6 + (uint)tmpA + (uint)tmpE);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            acc43 += ((uint)tmp3 + (uint)tmp7 + (uint)tmpB + (uint)tmpF);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        }</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(1, src1_stride_y))</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    {</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        <span class="comment">// Load values from matrix A</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        uchar a0 = *(src0_ptr + src_addr.s0 + 0 * src0_stride_y);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        uchar a1 = *(src0_ptr + src_addr.s0 + 1 * src0_stride_y);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        uchar a2 = *(src0_ptr + src_addr.s0 + 2 * src0_stride_y);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        uchar a3 = *(src0_ptr + src_addr.s0 + 3 * src0_stride_y);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        uchar a4 = *(src0_ptr + src_addr.s0 + 4 * src0_stride_y);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="comment">// Load values from matrix B</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        uchar4 b0 = vload4(0, src1_ptr + src_addr.s1);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="comment">// Accumulate</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a0;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a0;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a0;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a0;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            acc00 += ((uint)tmp0);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            acc01 += ((uint)tmp1);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            acc02 += ((uint)tmp2);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            acc03 += ((uint)tmp3);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        }</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        {</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a1;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a1;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a1;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a1;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            acc10 += ((uint)tmp0);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            acc11 += ((uint)tmp1);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            acc12 += ((uint)tmp2);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            acc13 += ((uint)tmp3);</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        }</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        {</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a2;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a2;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a2;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a2;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            acc20 += ((uint)tmp0);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            acc21 += ((uint)tmp1);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            acc22 += ((uint)tmp2);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            acc23 += ((uint)tmp3);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        }</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        {</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a3;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a3;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a3;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a3;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            acc30 += ((uint)tmp0);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            acc31 += ((uint)tmp1);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            acc32 += ((uint)tmp2);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            acc33 += ((uint)tmp3);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        }</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        {</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;            <span class="comment">// Accumulate</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;            ushort tmp0 = (ushort)b0.s0 * (ushort)a4;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            ushort tmp1 = (ushort)b0.s1 * (ushort)a4;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            ushort tmp2 = (ushort)b0.s2 * (ushort)a4;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            ushort tmp3 = (ushort)b0.s3 * (ushort)a4;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            acc40 += ((uint)tmp0);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            acc41 += ((uint)tmp1);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            acc42 += ((uint)tmp2);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            acc43 += ((uint)tmp3);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        }</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    }</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="comment">// Compute destination address</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    vstore4((int4)(acc00, acc01, acc02, acc03), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    vstore4((int4)(acc10, acc11, acc12, acc13), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    vstore4((int4)(acc20, acc21, acc22, acc23), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    vstore4((int4)(acc30, acc31, acc32, acc33), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    vstore4((int4)(acc40, acc41, acc42, acc43), 0, (__global <span class="keywordtype">int</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 4)));</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 4</span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="preprocessor">#endif // defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_Y) &amp;&amp; defined(COLS_A)</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="preprocessor">#if defined(COLS_A)</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_a_reduction(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;{</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a> = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    uint4 sum_row_u32 = (uint4)0;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    uint  sum_row     = 0;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    __global <span class="keyword">const</span> uchar *matrix_a = (__global <span class="keyword">const</span> uchar *)(src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(0) * src_stride_y + get_global_id(1) * src_stride_z);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="comment">// This for loop performs 16 accumulations</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)COLS_A - 16); i += 16)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    {</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keyword">const</span> uchar16 a0_u8 = vload16(0, matrix_a + i);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        sum_row_u32 += convert_uint4(a0_u8.s0123) + convert_uint4(a0_u8.s4567) + convert_uint4(a0_u8.s89AB) + convert_uint4(a0_u8.sCDEF);</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="comment">// This for loop performs the leftover accumulations</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keywordflow">for</span>(; i &lt; COLS_A; ++i)</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    {</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        sum_row += matrix_a[i];</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    }</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    sum_row += sum_row_u32.s0 + sum_row_u32.s1 + sum_row_u32.s2 + sum_row_u32.s3;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    *((__global <span class="keywordtype">int</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) = (int)sum_row;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;}</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="preprocessor">#endif // defined(COLS_A)</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="preprocessor">#if defined(COLS_B) &amp;&amp; defined(ROWS_B)</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_b_reduction(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;{</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    uint16 sum_col_u32 = (uint16)0;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    __global <span class="keyword">const</span> uchar *matrix_b = (__global <span class="keyword">const</span> uchar *)(src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(1) * src_stride_z);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="comment">// This for loop performs 4 accumulations</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)ROWS_B - 4); i += 4)</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    {</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keyword">const</span> uchar16 b0_u8 = vload16(0, matrix_b + 0 * src_stride_y);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        <span class="keyword">const</span> uchar16 b1_u8 = vload16(0, matrix_b + 1 * src_stride_y);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="keyword">const</span> uchar16 b2_u8 = vload16(0, matrix_b + 2 * src_stride_y);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="keyword">const</span> uchar16 b3_u8 = vload16(0, matrix_b + 3 * src_stride_y);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        sum_col_u32 += convert_uint16(b0_u8) + convert_uint16(b1_u8) + convert_uint16(b2_u8) + convert_uint16(b3_u8);</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        matrix_b += 4 * src_stride_y;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    }</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="comment">// This for loop perfoms the leftover accumulations</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="keywordflow">for</span>(; i &lt; (int)ROWS_B; ++i)</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    {</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="keyword">const</span> uchar16 b0_u8 = vload16(0, matrix_b);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        sum_col_u32 += convert_uint16(b0_u8);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        matrix_b += src_stride_y;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    }</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    vstore16(convert_int16(sum_col_u32), 0, (__global <span class="keywordtype">int</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;}</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="preprocessor">#endif // defined(COLS_B) &amp;&amp; defined(ROWS_B)</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="preprocessor">#if defined(K_OFFSET)</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="comment">/* OpenCL kernel used to add the offset contribution after @ref CLGEMMLowpMatrixMultiplyKernel. The computation is performed in-place</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of @CLGEMMLowpMatrixMultiplyKernel),</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment"> * and adds to it the offset contribution of matrix A and matrix B in-place.</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="comment"> * The final result is:</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment"> * mm_result[i][k] = mm_result[i][k] +</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment"> *                   (sum_col[k] * A_OFFSET) +</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment"> *                   (sum_row[i] * B_OFFSET) +</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment"> *                   (K_OFFSET)</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment"> * @param[in] mm_result_ptr                                Pointer to the source tensor. Supported data type: S32</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment"> * @param[in] mm_result_stride_x                           Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment"> * @param[in] mm_result_step_x                             mm_result_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment"> * @param[in] mm_result_stride_y                           Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="comment"> * @param[in] mm_result_step_y                             mm_result_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="comment"> * @param[in] mm_result_stride_z                           Stride of the source tensor in Z dimension (in bytes)</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="comment"> * @param[in] mm_result_step_z                             mm_result_stride_z * number of elements along Z processed per workitem(in bytes)</span></div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="comment"> * @param[in] mm_result_offset_first_element_in_bytes      The offset of the first element in the source tensor</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="comment"> * @param[in] sum_col_result_ptr                           Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="comment"> * @param[in] sum_col_result_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="comment"> * @param[in] sum_col_result_step_x                        sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment"> * @param[in] sum_col_result_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment"> * @param[in] sum_col_result_step_y                        sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment"> * @param[in] sum_col_result_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"> * @param[in] sum_row_result_ptr                           Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment"> * @param[in] sum_row_result_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> * @param[in] sum_row_result_step_x                        sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment"> * @param[in] sum_row_result_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"> * @param[in] sum_row_result_step_y                        sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"> * @param[in] sum_row_result_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_offset_contribution(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(mm_result)</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                           ,</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                           ,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                                          )</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;{</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> mm_result = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(mm_result);</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    int4 a_offset_s32 = (int4)0;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    int4 b_offset_s32 = (int4)0;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="preprocessor">#if defined(A_OFFSET)</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> sum_col = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(sum_col);</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <span class="comment">// Compute the offset contribution due to A_OFFSET</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="preprocessor">#if defined(SUM_COL_HAS_BATCHES)</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    a_offset_s32 = vload4(0, (__global <span class="keywordtype">int</span> *)(sum_col.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * sum_col_stride_y));</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_HAS_BATCHES)</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    a_offset_s32 = vload4(0, (__global <span class="keywordtype">int</span> *)(sum_col.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_HAS_BATCHES)</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    a_offset_s32 *= (int4)A_OFFSET;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> sum_row = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(sum_row);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="comment">// Compute the offset contribution due to B_OFFSET</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    b_offset_s32 = (int4) * (((__global <span class="keywordtype">int</span> *)(sum_row.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * sum_row_stride_y)) + get_global_id(1));</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    b_offset_s32 *= (int4)B_OFFSET;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="preprocessor">#endif // defined(B_OFFSET)</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    <span class="keyword">const</span> int4 offset_term_s32 = (int4)K_OFFSET + a_offset_s32 + b_offset_s32;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    int4 in_s32 = vload4(0, (__global <span class="keywordtype">int</span> *)mm_result.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    in_s32 += offset_term_s32;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="comment">// Store the result with the offset contribution</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    vstore4(in_s32, 0, (__global <span class="keywordtype">int</span> *)mm_result.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;}</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="preprocessor">#endif // defined(K_OFFSET)</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="preprocessor">#if defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULT_INT) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;{</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> dst = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(dst);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    int16 input_values = vload16(0, (__global <span class="keywordtype">int</span> *)src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    input_values += (int16)RESULT_OFFSET;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keyword">const</span> int16 biases_values = vload16(0, (__global <span class="keywordtype">int</span> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    input_values += (int16)biases_values;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    input_values *= RESULT_MULT_INT;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    input_values &gt;&gt;= RESULT_SHIFT;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    uchar16 res = convert_uchar16_sat(input_values);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(res, (uchar16)MIN_BOUND);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>(res, (uchar16)MAX_BOUND);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    vstore16(res, 0, dst.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;}</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="preprocessor">#endif // defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULT_INT) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="preprocessor">#if defined(RESULT_OFFSET_AFTER_SHIFT) &amp;&amp; defined(RESULT_FIXEDPOINT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down_fixedpoint(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                                                             <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                                             <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;{</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> dst = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(dst);</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    int16 input_values = vload16(0, (__global <span class="keywordtype">int</span> *)src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keyword">const</span> int16 biases_values = vload16(0, (__global <span class="keywordtype">int</span> *)biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    input_values += (int16)biases_values;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, 16);</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    input_values += (int16)RESULT_OFFSET_AFTER_SHIFT;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    uchar16 res = convert_uchar16_sat(input_values);</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(res, (uchar16)MIN_BOUND);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>(res, (uchar16)MAX_BOUND);</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="comment">// Store the result</span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    vstore16(res, 0, dst.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;}</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="preprocessor">#endif // defined(RESULT_OFFSET_AFTER_SHIFT) &amp;&amp; defined(RESULT_FIXEDPOINT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00132">helpers.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00884">FixedPoint.h:884</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00098">fixed_point.h:98</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00040">helpers.h:40</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00117">helpers.h:117</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a527bfdf5eeb306f1cf01c4a8e29f38e0"><div class="ttname"><a href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00096">helpers.h:96</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00066">helpers.h:66</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00149">helpers.h:149</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00043">helpers.h:43</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00102">helpers.h:102</a></div></div>
<div class="ttc" id="struct_vector_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">Vector::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00134">helpers.h:134</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00060">helpers.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00137">Convolution.cpp:137</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00140">helpers.h:140</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00074">helpers.h:74</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00142">helpers.h:142</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml"><div class="ttname"><a href="helpers__asymm_8h.xhtml">helpers_asymm.h</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a86de0ffca367bfcf27a8ae5dd1fdef2d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a></div><div class="ttdeci">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE(x, quantized_multiplier, right_shift, size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00296">helpers_asymm.h:296</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">Tensor3D::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00151">helpers.h:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00889">FixedPoint.h:889</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6743f0a130e8311e6f5b1a23df102472"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">arm_compute::test::validation::src</a></div><div class="ttdeci">convolution configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00147">Convolution.cpp:147</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="gemmlowp_8cl.xhtml">gemmlowp.cl</a></li>
    <li class="footer">Generated on Fri Mar 2 2018 12:37:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
