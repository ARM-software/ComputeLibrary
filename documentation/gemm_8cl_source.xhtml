<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/gemm.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="fixed__point_8h.xhtml">fixed_point.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#ac5eba21b9ac015e1454044aeba93546c">   45</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#ac5eba21b9ac015e1454044aeba93546c">gemm_transpose1x4</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Compute address for Matrix B - source</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Compute address for Matrix B transposed - destination. X and Y are swapped</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    uint dst_addr_in_bytes = y * 16 + ((x * dst_stride_y + dst_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    uint4 b0 = vload4(0, (__global uint *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    vstore4(b0, 0, (__global uint *)(dst_ptr + dst_addr_in_bytes));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#a75c35ac120f123e9cce56c43ba3f48d2">   77</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#a75c35ac120f123e9cce56c43ba3f48d2">gemm_transpose1x8</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">/* Compute address for Matrix B - source */</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">/* Compute address for Matrix B transposed - destination. X and Y are swapped */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    uint dst_addr_in_bytes = y * 16 + ((x * dst_stride_y + dst_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    ushort8 b0 = vload8(0, (__global ushort *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    vstore8(b0, 0, (__global ushort *)(dst_ptr + dst_addr_in_bytes));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#a97a299ffb620aa98fe5e39bb8ab0833f">  109</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#a97a299ffb620aa98fe5e39bb8ab0833f">gemm_transpose1x16</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">/* Compute address for Matrix B - source */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">/* Compute address for Matrix B transposed - destination. X and Y are swapped */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    uint dst_addr_in_bytes = y * 16 + ((x * dst_stride_y + dst_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    uchar16 b0 = vload16(0, (__global uchar *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    vstore16(b0, 0, (__global uchar *)(dst_ptr + dst_addr_in_bytes));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#a560b2d50aa886edc0f5daf4fe729717f">  141</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#a560b2d50aa886edc0f5daf4fe729717f">gemm_interleave4x4_32bit</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                       <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">/* Load values from Matrix A */</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    uint4 a0 = vload4(0, (__global uint *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 0)));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    uint4 a1 = vload4(0, (__global uint *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 1)));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    uint4 a2 = vload4(0, (__global uint *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 2)));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    uint4 a3 = vload4(0, (__global uint *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 3)));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    uint4 val0 = (uint4)(a0.s0, a1.s0, a2.s0, a3.s0);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    vstore4(val0, 0, ((__global uint *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 0);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    val0 = (uint4)(a0.s1, a1.s1, a2.s1, a3.s1);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    vstore4(val0, 0, ((__global uint *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 4);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    val0 = (uint4)(a0.s2, a1.s2, a2.s2, a3.s2);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    vstore4(val0, 0, ((__global uint *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 8);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    val0 = (uint4)(a0.s3, a1.s3, a2.s3, a3.s3);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    vstore4(val0, 0, ((__global uint *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 12);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#a2f32d740e780059f68da8aa589ed0a5b">  182</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#a2f32d740e780059f68da8aa589ed0a5b">gemm_interleave4x4_16bit</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                       <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">/* Load values from Matrix A */</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    ushort8 a0 = vload8(0, (__global ushort *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 0)));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    ushort8 a1 = vload8(0, (__global ushort *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 1)));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    ushort8 a2 = vload8(0, (__global ushort *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 2)));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    ushort8 a3 = vload8(0, (__global ushort *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 3)));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    ushort8 val0 = (ushort8)((ushort4)(a0.s0, a1.s0, a2.s0, a3.s0), (ushort4)(a0.s1, a1.s1, a2.s1, a3.s1));</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    vstore8(val0, 0, ((__global ushort *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 0);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    val0 = (ushort8)((ushort4)(a0.s2, a1.s2, a2.s2, a3.s2), (ushort4)(a0.s3, a1.s3, a2.s3, a3.s3));</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    vstore8(val0, 0, ((__global ushort *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 8);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    val0 = (ushort8)((ushort4)(a0.s4, a1.s4, a2.s4, a3.s4), (ushort4)(a0.s5, a1.s5, a2.s5, a3.s5));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    vstore8(val0, 0, ((__global ushort *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 16);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    val0 = (ushort8)((ushort4)(a0.s6, a1.s6, a2.s6, a3.s6), (ushort4)(a0.s7, a1.s7, a2.s7, a3.s7));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    vstore8(val0, 0, ((__global ushort *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 24);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="gemm_8cl.xhtml#aa66a7b6b0420e54ec173743e6c5bfc45">  223</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="gemm_8cl.xhtml#aa66a7b6b0420e54ec173743e6c5bfc45">gemm_interleave4x4_8bit</a>(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                      <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">/* Load values from Matrix A */</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    uchar16 a0 = vload16(0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 0)));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    uchar16 a1 = vload16(0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 1)));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    uchar16 a2 = vload16(0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 2)));</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    uchar16 a3 = vload16(0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 3)));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    uchar16 val0 = (uchar16)((uchar4)(a0.s0, a1.s0, a2.s0, a3.s0), (uchar4)(a0.s1, a1.s1, a2.s1, a3.s1),</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                             (uchar4)(a0.s2, a1.s2, a2.s2, a3.s2), (uchar4)(a0.s3, a1.s3, a2.s3, a3.s3));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    vstore16(val0, 0, ((__global uchar *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 0);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    val0 = (uchar16)((uchar4)(a0.s4, a1.s4, a2.s4, a3.s4), (uchar4)(a0.s5, a1.s5, a2.s5, a3.s5),</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                     (uchar4)(a0.s6, a1.s6, a2.s6, a3.s6), (uchar4)(a0.s7, a1.s7, a2.s7, a3.s7));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    vstore16(val0, 0, ((__global uchar *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 16);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    val0 = (uchar16)((uchar4)(a0.s8, a1.s8, a2.s8, a3.s8), (uchar4)(a0.s9, a1.s9, a2.s9, a3.s9),</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                     (uchar4)(a0.sA, a1.sA, a2.sA, a3.sA), (uchar4)(a0.sB, a1.sB, a2.sB, a3.sB));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    vstore16(val0, 0, ((__global uchar *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 32);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    val0 = (uchar16)((uchar4)(a0.sC, a1.sC, a2.sC, a3.sC), (uchar4)(a0.sD, a1.sD, a2.sD, a3.sD),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                     (uchar4)(a0.sE, a1.sE, a2.sE, a3.sE), (uchar4)(a0.sF, a1.sF, a2.sF, a3.sF));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    vstore16(val0, 0, ((__global uchar *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>) + 48);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">#ifdef DATA_TYPE</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor"></span>__kernel <span class="keywordtype">void</span> gemm_accumulate_biases(</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(accum),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases))</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>  accum  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(accum);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(biases);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, 16)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    accum_value = vload16(0, (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)accum.ptr);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, 16)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    biases_value = vload16(0, (__global DATA_TYPE *)biases.ptr);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor"></span>    accum_value = <a class="code" href="fixed__point_8h.xhtml#a6b1acbaff6cb3bad4edda9a93dac1f9e">ADD_SAT_OP_EXPAND</a>(biases_value, accum_value, DATA_TYPE, 16);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#else  // FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor"></span>    accum_value = biases_value + accum_value;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Store result in the accummulate buffer</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    vstore16(accum_value, 0, (__global DATA_TYPE *)accum.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DATA_TYPE */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">#ifdef COLS_B</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_u8(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst),</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                <span class="keywordtype">int</span> a_offset,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                <span class="keywordtype">int</span> b_offset,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                                <span class="keywordtype">int</span> c_offset,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                <span class="keywordtype">int</span> c_mult_int,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                <span class="keywordtype">int</span> shift)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">/* src_addr.s0 = address of matrix A */</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">/* src_addr.s1 = address of matrix B */</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">/* Compute address for matrix A and B */</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                                        (src1_stride_y));</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">/* Add offset_first_element_in_bytes */</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="comment">/* Compute end row address for matrix B */</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="comment">/* Reset accumulators */</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    int16 c00 = 0.0f;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    int16 c10 = 0.0f;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    int16 c20 = 0.0f;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    int16 c30 = 0.0f;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 8); src_addr += (int2)(8, 32))</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        int8 a0  = (int8)a_offset + convert_int8(vload8(0, ((__global uchar *)src0_ptr) + src_addr.s0));</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        int16 b0 = (int16)b_offset + convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1));</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        c00 += (int16)a0.s0 * b0;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        c10 += (int16)a0.s1 * b0;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        c20 += (int16)a0.s2 * b0;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        c30 += (int16)a0.s3 * b0;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        int16 b1 = (int16)b_offset + convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1 + 16));</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        c00 += (int16)a0.s4 * b1;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        c10 += (int16)a0.s5 * b1;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        c20 += (int16)a0.s6 * b1;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        c30 += (int16)a0.s7 * b1;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt; end_row_mtx_b; src_addr += (int2)(4, 16))</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        int4 a0  = (int4)a_offset + convert_int4(vload4(0, ((__global uchar *)src0_ptr) + src_addr.s0));</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        int16 b0 = (int16)b_offset + convert_int16(vload16(0, ((__global uchar *)src1_ptr) + src_addr.s1));</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        c00 += (int16)a0.s0 * b0;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        c10 += (int16)a0.s1 * b0;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        c20 += (int16)a0.s2 * b0;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        c30 += (int16)a0.s3 * b0;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="comment">/* Multiply by the weight of matrix product */</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    c00 = (((int16)c_offset + c00) * (int16)c_mult_int) &gt;&gt; shift;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    c10 = (((int16)c_offset + c10) * (int16)c_mult_int) &gt;&gt; shift;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    c20 = (((int16)c_offset + c20) * (int16)c_mult_int) &gt;&gt; shift;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    c30 = (((int16)c_offset + c30) * (int16)c_mult_int) &gt;&gt; shift;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="comment">/* Store 4x16 block */</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    vstore16(convert_uchar16_sat(c00), 0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    vstore16(convert_uchar16_sat(c10), 0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    vstore16(convert_uchar16_sat(c20), 0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    vstore16(convert_uchar16_sat(c30), 0, (__global uchar *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* COLS_B */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="preprocessor">#if defined(COLS_B) &amp;&amp; defined(ALPHA)</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_f32_midgard(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">/* src_addr.s0 = address of matrix A */</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">/* src_addr.s1 = address of matrix B */</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="comment">/* Compute address for matrix A and B */</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                                                        (src1_stride_y));</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="comment">/* Add offset_first_element_in_bytes */</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">/* Divide by 4 in order to get the src_addr in unit of float */</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    src_addr = src_addr &gt;&gt; 2;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">/* Compute end row address for matrix B */</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">/* Reset accumulators */</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    float4 c00 = 0.0f;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    float4 c10 = 0.0f;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    float4 c20 = 0.0f;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    float4 c30 = 0.0f;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 8); src_addr += (int2)(8, 8))</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        float4 a0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        float4 b0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        c00 += (float4)a0.s0 * b0;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        c10 += (float4)a0.s1 * b0;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        c20 += (float4)a0.s2 * b0;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        c30 += (float4)a0.s3 * b0;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        a0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src0_ptr) + src_addr.s0 + 4);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        b0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src1_ptr) + src_addr.s1 + 4);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        c00 += (float4)a0.s0 * b0;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        c10 += (float4)a0.s1 * b0;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        c20 += (float4)a0.s2 * b0;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        c30 += (float4)a0.s3 * b0;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt; end_row_mtx_b; src_addr += (int2)(4, 4))</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        float4 a0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        float4 b0 = vload4(0, ((__global <span class="keywordtype">float</span> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        c00 += (float4)a0.s0 * b0;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        c10 += (float4)a0.s1 * b0;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        c20 += (float4)a0.s2 * b0;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        c30 += (float4)a0.s3 * b0;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="comment">/* Multiply by the weight of matrix product */</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    c00 = c00 * (float4)ALPHA;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    c10 = c10 * (float4)ALPHA;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    c20 = c20 * (float4)ALPHA;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    c30 = c30 * (float4)ALPHA;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">/* Store 4x4 block */</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    vstore4(c00, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    vstore4(c10, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    vstore4(c20, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    vstore4(c30, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_f32_bifrost(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                                         <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;{</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="comment">// src_addr_a = address of matrix A</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// src_addr_b = address of matrix B</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    __global <span class="keywordtype">float</span> *src_addr_a = (__global <span class="keywordtype">float</span> *)(src0_ptr + get_global_id(1) * src0_stride_y + src0_offset_first_element_in_bytes);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    __global <span class="keywordtype">float</span> *src_addr_b = (__global <span class="keywordtype">float</span> *)(src1_ptr + get_global_id(0) * src1_stride_y + src1_offset_first_element_in_bytes);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="comment">// Compute end row address for matrix B</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    __global <span class="keywordtype">float</span> *src_end_addr_b = src_addr_b + COLS_B;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="comment">// Reset accumulators</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordtype">float</span> c00 = 0.0f;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordtype">float</span> c01 = 0.0f;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordtype">float</span> c02 = 0.0f;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordtype">float</span> c03 = 0.0f;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keywordtype">float</span> c10 = 0.0f;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordtype">float</span> c11 = 0.0f;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keywordtype">float</span> c12 = 0.0f;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordtype">float</span> c13 = 0.0f;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordtype">float</span> c20 = 0.0f;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keywordtype">float</span> c21 = 0.0f;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordtype">float</span> c22 = 0.0f;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordtype">float</span> c23 = 0.0f;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordtype">float</span> c30 = 0.0f;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordtype">float</span> c31 = 0.0f;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keywordtype">float</span> c32 = 0.0f;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordtype">float</span> c33 = 0.0f;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt;= (src_end_addr_b - 16); src_addr_a += 16, src_addr_b += 16)</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        float4 a0 = vload4(0, src_addr_a);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        float4 b0 = vload4(0, src_addr_b);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        c00 = fma(a0.s0, b0.s0, c00);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        c01 = fma(a0.s0, b0.s1, c01);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        c02 = fma(a0.s0, b0.s2, c02);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        c03 = fma(a0.s0, b0.s3, c03);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        c10 = fma(a0.s1, b0.s0, c10);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        c11 = fma(a0.s1, b0.s1, c11);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        c12 = fma(a0.s1, b0.s2, c12);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        c13 = fma(a0.s1, b0.s3, c13);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        c20 = fma(a0.s2, b0.s0, c20);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        c21 = fma(a0.s2, b0.s1, c21);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        c22 = fma(a0.s2, b0.s2, c22);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        c23 = fma(a0.s2, b0.s3, c23);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        c30 = fma(a0.s3, b0.s0, c30);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        c31 = fma(a0.s3, b0.s1, c31);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        c32 = fma(a0.s3, b0.s2, c32);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        c33 = fma(a0.s3, b0.s3, c33);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        a0 = vload4(0, src_addr_a + 4);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        b0 = vload4(0, src_addr_b + 4);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        c00 = fma(a0.s0, b0.s0, c00);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        c01 = fma(a0.s0, b0.s1, c01);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        c02 = fma(a0.s0, b0.s2, c02);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        c03 = fma(a0.s0, b0.s3, c03);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        c10 = fma(a0.s1, b0.s0, c10);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        c11 = fma(a0.s1, b0.s1, c11);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        c12 = fma(a0.s1, b0.s2, c12);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        c13 = fma(a0.s1, b0.s3, c13);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        c20 = fma(a0.s2, b0.s0, c20);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        c21 = fma(a0.s2, b0.s1, c21);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        c22 = fma(a0.s2, b0.s2, c22);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        c23 = fma(a0.s2, b0.s3, c23);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        c30 = fma(a0.s3, b0.s0, c30);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        c31 = fma(a0.s3, b0.s1, c31);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        c32 = fma(a0.s3, b0.s2, c32);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        c33 = fma(a0.s3, b0.s3, c33);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        a0 = vload4(0, src_addr_a + 8);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        b0 = vload4(0, src_addr_b + 8);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        c00 = fma(a0.s0, b0.s0, c00);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        c01 = fma(a0.s0, b0.s1, c01);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        c02 = fma(a0.s0, b0.s2, c02);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        c03 = fma(a0.s0, b0.s3, c03);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        c10 = fma(a0.s1, b0.s0, c10);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        c11 = fma(a0.s1, b0.s1, c11);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        c12 = fma(a0.s1, b0.s2, c12);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        c13 = fma(a0.s1, b0.s3, c13);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        c20 = fma(a0.s2, b0.s0, c20);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        c21 = fma(a0.s2, b0.s1, c21);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        c22 = fma(a0.s2, b0.s2, c22);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        c23 = fma(a0.s2, b0.s3, c23);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        c30 = fma(a0.s3, b0.s0, c30);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        c31 = fma(a0.s3, b0.s1, c31);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        c32 = fma(a0.s3, b0.s2, c32);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        c33 = fma(a0.s3, b0.s3, c33);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        a0 = vload4(0, src_addr_a + 12);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        b0 = vload4(0, src_addr_b + 12);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        c00 = fma(a0.s0, b0.s0, c00);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        c01 = fma(a0.s0, b0.s1, c01);</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        c02 = fma(a0.s0, b0.s2, c02);</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        c03 = fma(a0.s0, b0.s3, c03);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        c10 = fma(a0.s1, b0.s0, c10);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        c11 = fma(a0.s1, b0.s1, c11);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        c12 = fma(a0.s1, b0.s2, c12);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        c13 = fma(a0.s1, b0.s3, c13);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        c20 = fma(a0.s2, b0.s0, c20);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        c21 = fma(a0.s2, b0.s1, c21);</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        c22 = fma(a0.s2, b0.s2, c22);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        c23 = fma(a0.s2, b0.s3, c23);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        c30 = fma(a0.s3, b0.s0, c30);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        c31 = fma(a0.s3, b0.s1, c31);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        c32 = fma(a0.s3, b0.s2, c32);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        c33 = fma(a0.s3, b0.s3, c33);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">for</span>(; src_addr_b &lt; src_end_addr_b; src_addr_a += 4, src_addr_b += 4)</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    {</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="comment">// Load values from matrix A (interleaved) and matrix B (transposed)</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        float4 a0 = vload4(0, src_addr_a);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        float4 b0 = vload4(0, src_addr_b);</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        c00 = fma(a0.s0, b0.s0, c00);</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        c01 = fma(a0.s0, b0.s1, c01);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        c02 = fma(a0.s0, b0.s2, c02);</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        c03 = fma(a0.s0, b0.s3, c03);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        c10 = fma(a0.s1, b0.s0, c10);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        c11 = fma(a0.s1, b0.s1, c11);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        c12 = fma(a0.s1, b0.s2, c12);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        c13 = fma(a0.s1, b0.s3, c13);</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        c20 = fma(a0.s2, b0.s0, c20);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        c21 = fma(a0.s2, b0.s1, c21);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        c22 = fma(a0.s2, b0.s2, c22);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        c23 = fma(a0.s2, b0.s3, c23);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        c30 = fma(a0.s3, b0.s0, c30);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        c31 = fma(a0.s3, b0.s1, c31);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        c32 = fma(a0.s3, b0.s2, c32);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        c33 = fma(a0.s3, b0.s3, c33);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="comment">// Compute destination address</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">// Multiply by the weight of matrix product</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    c00 = c00 * ALPHA;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    c01 = c01 * ALPHA;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    c02 = c02 * ALPHA;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    c03 = c03 * ALPHA;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    c10 = c10 * ALPHA;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    c11 = c11 * ALPHA;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    c12 = c12 * ALPHA;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    c13 = c13 * ALPHA;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    c20 = c20 * ALPHA;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    c21 = c21 * ALPHA;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    c22 = c22 * ALPHA;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    c23 = c23 * ALPHA;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    c30 = c30 * ALPHA;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    c31 = c31 * ALPHA;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    c32 = c32 * ALPHA;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    c33 = c33 * ALPHA;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    barrier(CLK_GLOBAL_MEM_FENCE);</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">// Store 4x4 block</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    vstore4((float4)(c00, c01, c02, c03), 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    vstore4((float4)(c10, c11, c12, c13), 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    vstore4((float4)(c20, c21, c22, c23), 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    vstore4((float4)(c30, c31, c32, c33), 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_f16(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;{</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="comment">/* src_addr.s0 = address of matrix A */</span></div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="comment">/* src_addr.s1 = address of matrix B */</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="comment">/* Compute address for matrix A and B */</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                                                        (src1_stride_y));</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="comment">/* Add offset_first_element_in_bytes */</span></div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="comment">/* Divide by 2 in order to get the src_addr in unit of half */</span></div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    src_addr = src_addr &gt;&gt; 1;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="comment">/* Compute end row address for matrix B */</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="comment">/* Reset accumulators */</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    half8 c00 = 0.0f;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    half8 c10 = 0.0f;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    half8 c20 = 0.0f;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    half8 c30 = 0.0f;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 16); src_addr += (int2)(8, 16))</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    {</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        half4 a0 = vload4(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        half8 b0 = vload8(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        c00 += (half8)a0.s0 * b0;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        c10 += (half8)a0.s1 * b0;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        c20 += (half8)a0.s2 * b0;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        c30 += (half8)a0.s3 * b0;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        a0 = vload4(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src0_ptr) + src_addr.s0 + 4);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        b0 = vload8(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src1_ptr) + src_addr.s1 + 8);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        c00 += (half8)a0.s0 * b0;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        c10 += (half8)a0.s1 * b0;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        c20 += (half8)a0.s2 * b0;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        c30 += (half8)a0.s3 * b0;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt; end_row_mtx_b; src_addr += (int2)(4, 8))</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    {</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        half4 a0 = vload4(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        half8 b0 = vload8(0, ((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        c00 += (half8)a0.s0 * b0;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        c10 += (half8)a0.s1 * b0;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        c20 += (half8)a0.s2 * b0;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        c30 += (half8)a0.s3 * b0;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    }</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="comment">/* Multiply by the weight of matrix product */</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    c00 = c00 * (half8)ALPHA;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    c10 = c10 * (half8)ALPHA;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    c20 = c20 * (half8)ALPHA;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    c30 = c30 * (half8)ALPHA;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="comment">/* Store 4x8 block */</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    vstore8(c00, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    vstore8(c10, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    vstore8(c20, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    vstore8(c30, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_qs8(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                                                 <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="comment">/* src_addr.s0 = address of matrix A */</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="comment">/* src_addr.s1 = address of matrix B */</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="comment">/* Compute address for matrix A and B */</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                                                        (src1_stride_y));</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="comment">/* Add offset_first_element_in_bytes */</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="comment">/* Compute end row address for matrix B */</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="comment">/* Reset accumulators */</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    short8 c00 = 0.0f;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    short8 c10 = 0.0f;</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    short8 c20 = 0.0f;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    short8 c30 = 0.0f;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    short8 c01 = 0.0f;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    short8 c11 = 0.0f;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    short8 c21 = 0.0f;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    short8 c31 = 0.0f;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="comment">/* This for loop performs 1 accumulation for each iteration */</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 16); src_addr += (int2)(4, 16))</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    {</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        char4  a0 = vload4(0, ((__global <span class="keywordtype">char</span> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        char16 b0 = vload16(0, ((__global <span class="keywordtype">char</span> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        c00 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c00, (char8)a0.s0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        c10 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c10, (char8)a0.s1, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        c20 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c20, (char8)a0.s2, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        c30 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c30, (char8)a0.s3, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        c01 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c01, (char8)a0.s0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        c11 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c11, (char8)a0.s1, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        c21 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c21, (char8)a0.s2, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        c31 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(c31, (char8)a0.s3, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="comment">/* Multiply by the weight of matrix product */</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    char16 c00_qs8 = convert_char16_sat((short16)(c00, c01));</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    char16 c10_qs8 = convert_char16_sat((short16)(c10, c11));</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    char16 c20_qs8 = convert_char16_sat((short16)(c20, c21));</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    char16 c30_qs8 = convert_char16_sat((short16)(c30, c31));</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    c00_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(c00_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    c10_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(c10_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    c20_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(c20_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    c30_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(c30_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="comment">/* Store 16x4 block */</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    vstore16(c00_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    vstore16(c10_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    vstore16(c20_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    vstore16(c30_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;}</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_interleaved_transposed_qs16(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                                  <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;{</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="comment">/* src_addr.s0 = address of matrix A */</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="comment">/* src_addr.s1 = address of matrix B */</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <span class="comment">/* Compute address for matrix A and B */</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    int2 src_addr = (int2)(get_global_id(1), get_global_id(0)) * (int2)((src0_stride_y),</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                                        (src1_stride_y));</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="comment">/* Add offset_first_element_in_bytes */</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    src_addr = src_addr + ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="comment">/* Divide by 2 in order to get the src_addr in unit of short */</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    src_addr = src_addr &gt;&gt; 1;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="comment">/* Compute end row address for matrix B */</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordtype">int</span> end_row_mtx_b = src_addr.s1 + COLS_B;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="comment">/* Reset accumulators */</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    int8 c00 = 0.0f;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    int8 c10 = 0.0f;</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    int8 c20 = 0.0f;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    int8 c30 = 0.0f;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <span class="comment">/* This for loop performs 1 accumulation for each iteration */</span></div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s1 &lt;= (end_row_mtx_b - 8); src_addr += (int2)(4, 8))</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        <span class="comment">/* Load values from matrix A (interleaved) and matrix B (transposed) */</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        short4 a0 = vload4(0, ((__global <span class="keywordtype">short</span> *)src0_ptr) + src_addr.s0);</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        short8 b0 = vload8(0, ((__global <span class="keywordtype">short</span> *)src1_ptr) + src_addr.s1);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        c00 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(c00, (short8)a0.s0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        c10 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(c10, (short8)a0.s1, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        c20 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(c20, (short8)a0.s2, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        c30 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(c30, (short8)a0.s3, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    }</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="comment">/* Multiply by the weight of matrix product */</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    short8 c00_qs16 = convert_short8_sat(c00);</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    short8 c10_qs16 = convert_short8_sat(c10);</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    short8 c20_qs16 = convert_short8_sat(c20);</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    short8 c30_qs16 = convert_short8_sat(c30);</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    c00_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(c00_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    c10_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(c10_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    c20_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(c20_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    c30_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(c30_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="comment">/* Store 8x4 block */</span></div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    vstore8(c00_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    vstore8(c10_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    vstore8(c20_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    vstore8(c30_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;}</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="preprocessor">#endif // defined(FIXED_POINT_POSITION)</span></div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="preprocessor">#if defined(COLS_A) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; (NUM_ELEMS_PROCESSED_PER_THREAD_Y)</span></div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if defined(DATA_TYPE)</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define VECTOR_TYPE VEC_DATA_TYPE(DATA_TYPE, NUM_ELEMS_PROCESSED_PER_THREAD_X)</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_floating_point(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                                     <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                                     <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;{</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="comment">// Update address for the matrix A</span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="comment">// Update address for the matrix B</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    src_addr.s1 += idx * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>);</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + (COLS_A * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>));</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    VECTOR_TYPE acc0 = 0.0f;</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="preprocessor"></span>    VECTOR_TYPE acc1 = 0.0f;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="preprocessor"></span>    VECTOR_TYPE acc2 = 0.0f;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="preprocessor"></span>    VECTOR_TYPE acc3 = 0.0f;</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2 * <span class="keyword">sizeof</span>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)); src_addr += (int2)(2 * <span class="keyword">sizeof</span>(DATA_TYPE), 2 * src1_stride_y))</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    {</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="comment">// Load values from matrix A</span></div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        a0 = vload2(0, (__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="preprocessor"></span>        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        a1 = vload2(0, (__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="preprocessor"></span>        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        a2 = vload2(0, (__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="preprocessor"></span>        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        a3 = vload2(0, (__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Load values from matrix B</span></div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        VECTOR_TYPE b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, (__global DATA_TYPE *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        VECTOR_TYPE b1 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, (__global DATA_TYPE *)(src1_ptr + src_addr.s1 + src1_stride_y));</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        <span class="comment">// Accumulate</span></div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        acc0 += b0 * (VECTOR_TYPE)a0.s0;</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;        acc0 += b1 * (VECTOR_TYPE)a0.s1;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="preprocessor"></span>        acc1 += b0 * (VECTOR_TYPE)a1.s0;</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        acc1 += b1 * (VECTOR_TYPE)a1.s1;</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="preprocessor"></span>        acc2 += b0 * (VECTOR_TYPE)a2.s0;</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        acc2 += b1 * (VECTOR_TYPE)a2.s1;</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="preprocessor"></span>        acc3 += b0 * (VECTOR_TYPE)a3.s0;</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        acc3 += b1 * (VECTOR_TYPE)a3.s1;</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(<span class="keyword">sizeof</span>(DATA_TYPE), src1_stride_y))</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    {</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        <span class="comment">// Load values from matrix A</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        DATA_TYPE a0 = *((__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="preprocessor"></span>        DATA_TYPE a1 = *((__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="preprocessor"></span>        DATA_TYPE a2 = *((__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="preprocessor"></span>        DATA_TYPE a3 = *((__global DATA_TYPE *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Load values from matrix B</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        VECTOR_TYPE b0 = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)(0, (__global DATA_TYPE *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        <span class="comment">// Accumulate</span></div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;        acc0 += b0 * (VECTOR_TYPE)a0;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="preprocessor"></span>        acc1 += b0 * (VECTOR_TYPE)a1;</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="preprocessor"></span>        acc2 += b0 * (VECTOR_TYPE)a2;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="preprocessor"></span>        acc3 += b0 * (VECTOR_TYPE)a3;</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <span class="comment">// Compute destination address</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="comment">// Multiply by the weight of matrix-matrix product and store the result</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    acc0 = acc0 * (VECTOR_TYPE)ALPHA;</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    (acc0, 0, (__global DATA_TYPE *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="preprocessor"></span>    acc1 = acc1 * (VECTOR_TYPE)ALPHA;</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    (acc1, 0, (__global DATA_TYPE *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="preprocessor"></span>    acc2 = acc2 * (VECTOR_TYPE)ALPHA;</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    (acc2, 0, (__global DATA_TYPE *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="preprocessor"></span>    acc3 = acc3 * (VECTOR_TYPE)ALPHA;</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(NUM_ELEMS_PROCESSED_PER_THREAD_X)</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    (acc3, 0, (__global DATA_TYPE *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="preprocessor">#endif // defined(DATA_TYPE)</span></div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_qs8(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;{</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="comment">// Update address for the matrix A</span></div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <span class="comment">// Update address for the matrix B</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    src_addr.s1 += idx * <span class="keyword">sizeof</span>(char);</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + (COLS_A * <span class="keyword">sizeof</span>(char));</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    short8 acc00 = 0;</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    short8 acc01 = 0;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="preprocessor"></span>    short8 acc10 = 0;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    short8 acc11 = 0;</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="preprocessor"></span>    short8 acc20 = 0;</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    short8 acc21 = 0;</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="preprocessor"></span>    short8 acc30 = 0;</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    short8 acc31 = 0;</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="comment">// This for loop performs 4 accumulations per iteration</span></div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2); src_addr += (int2)(2, 2 * src1_stride_y))</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    {</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        char2 a0 = vload2(0, (__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="preprocessor"></span>        char2 a1 = vload2(0, (__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;<span class="preprocessor"></span>        char2 a2 = vload2(0, (__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="preprocessor"></span>        char2 a3 = vload2(0, (__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;<span class="preprocessor"></span>        char16 b0 = vload16(0, (__global <span class="keywordtype">char</span> *)(src1_ptr + src_addr.s1 + 0 * src1_stride_y));</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        char16 b1 = vload16(0, (__global <span class="keywordtype">char</span> *)(src1_ptr + src_addr.s1 + 1 * src1_stride_y));</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        acc00 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc00, (char8)a0.s0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        acc00 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc00, (char8)a0.s1, b1.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        acc01 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc01, (char8)a0.s0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        acc01 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc01, (char8)a0.s1, b1.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="preprocessor"></span>        acc10 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc10, (char8)a1.s0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        acc10 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc10, (char8)a1.s1, b1.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        acc11 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc11, (char8)a1.s0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;        acc11 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc11, (char8)a1.s1, b1.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="preprocessor"></span>        acc20 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc20, (char8)a2.s0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        acc20 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc20, (char8)a2.s1, b1.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        acc21 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc21, (char8)a2.s0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        acc21 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc21, (char8)a2.s1, b1.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="preprocessor"></span>        acc30 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc30, (char8)a3.s0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        acc30 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc30, (char8)a3.s1, b1.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        acc31 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc31, (char8)a3.s0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        acc31 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc31, (char8)a3.s1, b1.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    <span class="comment">// Left-over accumulations</span></div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(1, src1_stride_y))</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    {</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;        <span class="keywordtype">char</span> a0 = *((__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">char</span> a1 = *((__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">char</span> a2 = *((__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">char</span> a3 = *((__global <span class="keywordtype">char</span> *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="preprocessor"></span>        char16 b0 = vload16(0, (__global <span class="keywordtype">char</span> *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        acc00 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc00, (char8)a0, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        acc01 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc01, (char8)a0, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="preprocessor"></span>        acc10 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc10, (char8)a1, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        acc11 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc11, (char8)a1, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;<span class="preprocessor"></span>        acc20 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc20, (char8)a2, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        acc21 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc21, (char8)a2, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;<span class="preprocessor"></span>        acc30 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc30, (char8)a3, b0.s01234567, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        acc31 = <a class="code" href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a>(acc31, (char8)a3, b0.s89ABCDEF, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <span class="comment">// Compute destination address</span></div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="comment">// Multiply by the weight of matrix product and store the result</span></div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    char16 acc_qs8;</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    acc_qs8 = convert_char16_sat((short16)(acc00, acc01));</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    acc_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(acc_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    vstore16(acc_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="preprocessor"></span>    acc_qs8 = convert_char16_sat((short16)(acc10, acc11));</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    acc_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(acc_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    vstore16(acc_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor"></span>    acc_qs8 = convert_char16_sat((short16)(acc20, acc21));</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    acc_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(acc_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    vstore16(acc_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<span class="preprocessor"></span>    acc_qs8 = convert_char16_sat((short16)(acc30, acc31));</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    acc_qs8 = <a class="code" href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a>(acc_qs8, (char16)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    vstore16(acc_qs8, 0, (__global <span class="keywordtype">char</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_qs16(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src1),</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;{</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * NUM_ELEMS_PROCESSED_PER_THREAD_X;</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <span class="comment">// Compute starting address for matrix A and Matrix B</span></div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes, src1_offset_first_element_in_bytes));</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    <span class="comment">// Update address for the matrix A</span></div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    src_addr.s0 += get_global_id(1) * src0_stride_y * NUM_ELEMS_PROCESSED_PER_THREAD_Y;</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="comment">// Update address for the matrix B</span></div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    src_addr.s1 += idx * <span class="keyword">sizeof</span>(short);</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + (COLS_A * <span class="keyword">sizeof</span>(short));</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    int8 acc0 = 0;</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="preprocessor"></span>    int8 acc1 = 0;</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="preprocessor"></span>    int8 acc2 = 0;</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="preprocessor"></span>    int8 acc3 = 0;</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="comment">// This for loop performs 4 accumulations per iteration</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2 * <span class="keyword">sizeof</span>(short)); src_addr += (int2)(2 * <span class="keyword">sizeof</span>(<span class="keywordtype">short</span>), 2 * src1_stride_y))</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    {</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        short2 a0 = vload2(0, (__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="preprocessor"></span>        short2 a1 = vload2(0, (__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="preprocessor"></span>        short2 a2 = vload2(0, (__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="preprocessor"></span>        short2 a3 = vload2(0, (__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="preprocessor"></span>        short8 b0 = vload8(0, (__global <span class="keywordtype">short</span> *)(src1_ptr + src_addr.s1 + 0 * src1_stride_y));</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        short8 b1 = vload8(0, (__global <span class="keywordtype">short</span> *)(src1_ptr + src_addr.s1 + 1 * src1_stride_y));</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        acc0 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc0, (short8)a0.s0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        acc0 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc0, (short8)a0.s1, b1, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="preprocessor"></span>        acc1 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc1, (short8)a1.s0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        acc1 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc1, (short8)a1.s1, b1, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="preprocessor"></span>        acc2 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc2, (short8)a2.s0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        acc2 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc2, (short8)a2.s1, b1, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="preprocessor"></span>        acc3 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc3, (short8)a3.s0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        acc3 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc3, (short8)a3.s1, b1, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="comment">// Left-over accumulations</span></div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(<span class="keyword">sizeof</span>(<span class="keywordtype">short</span>), src1_stride_y))</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    {</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        <span class="keywordtype">short</span> a0 = *((__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 0 * src0_stride_y));</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">short</span> a1 = *((__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 1 * src0_stride_y));</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">short</span> a2 = *((__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 2 * src0_stride_y));</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">short</span> a3 = *((__global <span class="keywordtype">short</span> *)(src0_ptr + src_addr.s0 + 3 * src0_stride_y));</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="preprocessor"></span>        short8 b0 = vload8(0, (__global <span class="keywordtype">short</span> *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        acc0 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc0, (short8)a0, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="preprocessor"></span>        acc1 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc1, (short8)a1, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="preprocessor"></span>        acc2 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc2, (short8)a2, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="preprocessor"></span>        acc3 = <a class="code" href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a>(acc3, (short8)a3, b0, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <span class="comment">// Compute destination address</span></div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <span class="comment">// Multiply by the weight of matrix product and store the result</span></div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    short8 acc_qs16;</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    acc_qs16 = convert_short8_sat(acc0);</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    acc_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(acc_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    vstore8(acc_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="preprocessor"></span>    acc_qs16 = convert_short8_sat(acc1);</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    acc_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(acc_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    vstore8(acc_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 1)));</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 1</span></div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="preprocessor"></span>    acc_qs16 = convert_short8_sat(acc2);</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    acc_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(acc_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    vstore8(acc_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 2)));</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 2</span></div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;<span class="preprocessor"></span>    acc_qs16 = convert_short8_sat(acc3);</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    acc_qs16 = <a class="code" href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a>(acc_qs16, (short8)ALPHA, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    vstore8(acc_qs16, 0, (__global <span class="keywordtype">short</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 3)));</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="preprocessor">#endif // NUM_ELEMS_PROCESSED_PER_THREAD_Y &gt; 3</span></div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="preprocessor">#endif // defined(FIXED_POINT_POSITION)</span></div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif // defined(COLS_A) &amp;&amp; defined(NUM_ELEMS_PROCESSED_PER_THREAD_X) &amp;&amp; (NUM_ELEMS_PROCESSED_PER_THREAD_Y)</span></div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif // defined(COLS_B) &amp;&amp; defined(ALPHA)</span></div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="preprocessor">#ifdef BETA</span></div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;__kernel <span class="keywordtype">void</span> gemm_ma_f32(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;{</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="comment">/* Load values from A x B */</span></div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    float4 alpha_ab = vload4(0, (__global <span class="keywordtype">float</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="comment">/* Load values from Matrix C */</span></div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    float4 c = vload4(0, (__global <span class="keywordtype">float</span> *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    <span class="comment">/* Computes alpha * axb + beta * c */</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    float4 out = alpha_ab + (float4)BETA * c;</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    <span class="comment">/* Store final result in axb matrix */</span></div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    vstore4(out, 0, (__global <span class="keywordtype">float</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;}</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;__kernel <span class="keywordtype">void</span> gemm_ma_f16(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;{</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    <span class="comment">/* Load values from A x B */</span></div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    half8 alpha_ab = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="comment">/* Load values from Matrix C */</span></div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    half8 c = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="comment">/* Computes alpha * axb + beta * c */</span></div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    half8 out = alpha_ab + (half8)BETA * c;</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    <span class="comment">/* Store final result in axb matrix */</span></div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    vstore8(out, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;}</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;__kernel <span class="keywordtype">void</span> gemm_ma_qs8(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;                          <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;{</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="comment">/* Load values from A x B */</span></div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    char16 alpha_ab = vload16(0, (__global <span class="keywordtype">char</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    <span class="comment">/* Load values from Matrix C */</span></div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    char16 c = vload16(0, (__global <span class="keywordtype">char</span> *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <span class="comment">/* Computes alpha * axb + beta * c */</span></div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    char16 out = <a class="code" href="fixed__point_8h.xhtml#ad59f32bf4f61044a698ff4da02080e5a">mla_sat_qs8x16</a>(alpha_ab, (char16)BETA, c, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;    <span class="comment">/* Store final result in axb matrix */</span></div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    vstore16(out, 0, (__global <span class="keywordtype">char</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;}</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;__kernel <span class="keywordtype">void</span> gemm_ma_qs16(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src),</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;                           <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;{</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="comment">/* Compute source and destination addresses */</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> src = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(src);</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <span class="comment">/* Load values from A x B */</span></div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    short8 alpha_ab = vload8(0, (__global <span class="keywordtype">short</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    <span class="comment">/* Load values from Matrix C */</span></div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    short8 c = vload8(0, (__global <span class="keywordtype">short</span> *)src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    <span class="comment">/* Computes alpha * axb + beta * c */</span></div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    short8 out = <a class="code" href="fixed__point_8h.xhtml#a7a3c295a894e0529251bd4529b36a574">mla_sat_qs16x8</a>(alpha_ab, (short8)BETA, c, FIXED_POINT_POSITION);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    <span class="comment">/* Store final result in axb matrix */</span></div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    vstore8(out, 0, (__global <span class="keywordtype">short</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;}</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(FIXED_POINT_POSITION) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* defined(BETA) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;<span class="preprocessor">#ifdef WIDTH_VECTOR_A</span></div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;__kernel <span class="keywordtype">void</span> gemm_lc_vm_f32(<a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(src0),</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;                             <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src1),</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;                             <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst))</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;{</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    <span class="keywordtype">int</span> idx = get_global_id(0) * 4;</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keywordtype">int</span> idy = get_global_id(1);</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="comment">/* Compute the address for the vector A and matrix B */</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    int2 src_addr = ((int2)(src0_offset_first_element_in_bytes + src0_stride_y * idy, src1_offset_first_element_in_bytes + src1_stride_z * idy));</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    src_addr.s1 += idx * <span class="keyword">sizeof</span>(float);</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    <span class="keywordtype">int</span> end_row_vec_a = src_addr.s0 + (WIDTH_VECTOR_A * <span class="keyword">sizeof</span>(float));</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    float4 acc = 0.0f;</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt;= (end_row_vec_a - 2 * <span class="keyword">sizeof</span>(float)); src_addr += (int2)(2 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>), 2 * src1_stride_y))</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;    {</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;        float2 a0 = vload2(0, (__global <span class="keywordtype">float</span> *)(src0_ptr + src_addr.s0));</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;        float4 b0 = vload4(0, (__global <span class="keywordtype">float</span> *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;        float4 b1 = vload4(0, (__global <span class="keywordtype">float</span> *)(src1_ptr + src_addr.s1 + src1_stride_y));</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        acc += b0 * (float4)a0.s0;</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        acc += b1 * (float4)a0.s1;</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    }</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    <span class="keywordflow">for</span>(; src_addr.s0 &lt; end_row_vec_a; src_addr += (int2)(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>), src1_stride_y))</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    {</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;        <span class="keywordtype">float</span>  a0 = *((__global <span class="keywordtype">float</span> *)(src0_ptr + src_addr.s0));</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;        float4 b0 = vload4(0, (__global <span class="keywordtype">float</span> *)(src1_ptr + src_addr.s1));</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;        acc += b0 * (float4)a0;</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    }</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <span class="comment">/* Compute destination address */</span></div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> dst = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(dst);</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    vstore4(acc, 0, (__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;dst, 0, 0)));</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;}</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* WIDTH_VECTOR_A */</span><span class="preprocessor"></span></div>
<div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00123">helpers.h:123</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a286a2ecb07602fd7268d31c6e88e62a6"><div class="ttname"><a href="fixed__point_8h.xhtml#a286a2ecb07602fd7268d31c6e88e62a6">mul_sat_qs8x16</a></div><div class="ttdeci">qs8x16 mul_sat_qs8x16(qs8x16 VopA, qs8x16 VopB, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00249">fixed_point.h:249</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_a97a299ffb620aa98fe5e39bb8ab0833f"><div class="ttname"><a href="gemm_8cl.xhtml#a97a299ffb620aa98fe5e39bb8ab0833f">gemm_transpose1x16</a></div><div class="ttdeci">__kernel void gemm_transpose1x16(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel computes the &quot;vector&quot; 1x16 transposition of input matrix. </div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00109">gemm.cl:109</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a93fefd4972b6b9440c8371509b46d19e"><div class="ttname"><a href="fixed__point_8h.xhtml#a93fefd4972b6b9440c8371509b46d19e">mul_sat_qs16x8</a></div><div class="ttdeci">qs16x8 mul_sat_qs16x8(qs16x8 VopA, qs16x8 VopB, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00254">fixed_point.h:254</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00034">helpers.h:34</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a527bfdf5eeb306f1cf01c4a8e29f38e0"><div class="ttname"><a href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00087">helpers.h:87</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_aa66a7b6b0420e54ec173743e6c5bfc45"><div class="ttname"><a href="gemm_8cl.xhtml#aa66a7b6b0420e54ec173743e6c5bfc45">gemm_interleave4x4_8bit</a></div><div class="ttdeci">__kernel void gemm_interleave4x4_8bit(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel reshapes the input matrix transposing each 4x4 block and interleaving the values...</div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00223">gemm.cl:223</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afb8c72ce35c4a1f4a2588d6573e54aa1"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a></div><div class="ttdeci">#define DATA_TYPE</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00027">convolution3x3.cl:27</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00039">Types.h:39</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00057">helpers.h:57</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_ad59f32bf4f61044a698ff4da02080e5a"><div class="ttname"><a href="fixed__point_8h.xhtml#ad59f32bf4f61044a698ff4da02080e5a">mla_sat_qs8x16</a></div><div class="ttdeci">qs8x16 mla_sat_qs8x16(qs8x16 VopA, qs8x16 VopB, qs8x16 VopC, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00275">fixed_point.h:275</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00292">helpers.h:292</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00037">helpers.h:37</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a7a3c295a894e0529251bd4529b36a574"><div class="ttname"><a href="fixed__point_8h.xhtml#a7a3c295a894e0529251bd4529b36a574">mla_sat_qs16x8</a></div><div class="ttdeci">qs16x8 mla_sat_qs16x8(qs16x8 VopA, qs16x8 VopB, qs16x8 VopC, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00276">fixed_point.h:276</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00093">helpers.h:93</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a50b6bfd3a44a0ac605e88135e230d1e5"><div class="ttname"><a href="fixed__point_8h.xhtml#a50b6bfd3a44a0ac605e88135e230d1e5">mlal_sat_qs16x8</a></div><div class="ttdeci">qs32x8 mlal_sat_qs16x8(qs32x8 VopA, qs16x8 VopB, qs16x8 VopC, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00296">fixed_point.h:296</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml"><div class="ttname"><a href="fixed__point_8h.xhtml">fixed_point.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00051">helpers.h:51</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00131">helpers.h:131</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00065">helpers.h:65</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_a75c35ac120f123e9cce56c43ba3f48d2"><div class="ttname"><a href="gemm_8cl.xhtml#a75c35ac120f123e9cce56c43ba3f48d2">gemm_transpose1x8</a></div><div class="ttdeci">__kernel void gemm_transpose1x8(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel computes the &quot;vector&quot; 1x8 transposition of input matrix. </div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00077">gemm.cl:77</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00133">helpers.h:133</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_a560b2d50aa886edc0f5daf4fe729717f"><div class="ttname"><a href="gemm_8cl.xhtml#a560b2d50aa886edc0f5daf4fe729717f">gemm_interleave4x4_32bit</a></div><div class="ttdeci">__kernel void gemm_interleave4x4_32bit(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel reshapes the input matrix transposing each 4x4 block and interleaving the values...</div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00141">gemm.cl:141</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_ac5eba21b9ac015e1454044aeba93546c"><div class="ttname"><a href="gemm_8cl.xhtml#ac5eba21b9ac015e1454044aeba93546c">gemm_transpose1x4</a></div><div class="ttdeci">__kernel void gemm_transpose1x4(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel computes the &quot;vector&quot; 1x4 transposition of input matrix. </div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00045">gemm.cl:45</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00093">fixed_point.h:93</a></div></div>
<div class="ttc" id="gemm_8cl_xhtml_a2f32d740e780059f68da8aa589ed0a5b"><div class="ttname"><a href="gemm_8cl.xhtml#a2f32d740e780059f68da8aa589ed0a5b">gemm_interleave4x4_16bit</a></div><div class="ttdeci">__kernel void gemm_interleave4x4_16bit(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_offset_first_element_in_bytes)</div><div class="ttdoc">This OpenCL kernel reshapes the input matrix transposing each 4x4 block and interleaving the values...</div><div class="ttdef"><b>Definition:</b> <a href="gemm_8cl_source.xhtml#l00182">gemm.cl:182</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a09f5d764b62b47a1894a4cb71a0a62f6"><div class="ttname"><a href="fixed__point_8h.xhtml#a09f5d764b62b47a1894a4cb71a0a62f6">mlal_sat_qs8x8</a></div><div class="ttdeci">qs16x8 mlal_sat_qs8x8(qs16x8 VopA, qs8x8 VopB, qs8x8 VopC, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00295">fixed_point.h:295</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a6b1acbaff6cb3bad4edda9a93dac1f9e"><div class="ttname"><a href="fixed__point_8h.xhtml#a6b1acbaff6cb3bad4edda9a93dac1f9e">ADD_SAT_OP_EXPAND</a></div><div class="ttdeci">#define ADD_SAT_OP_EXPAND(a, b, type, size)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00178">fixed_point.h:178</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_55b5a5006e943fb664ff8cff3cfe7768.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_f6c3ae42d7e27145d0a3c3e38ca1c000.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_1b7ae9123c88e650426d50d95c19d414.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_b7c3d80b0dadb2139bc73b7161751c12.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="gemm_8cl.xhtml">gemm.cl</a></li>
    <li class="footer">Generated on Thu Sep 28 2017 14:37:50 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.6 </li>
  </ul>
</div>
</body>
</html>
