<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmInterleaved&lt; strategy, To, Tr &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_gemm_interleaved.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmInterleaved&lt; strategy, To, Tr &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmInterleaved&lt; strategy, To, Tr &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="class_gemm_interleaved__coll__graph.svg" width="220" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abf5a58f6feffeae31f48b750cba9303d"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">get_working_size</a> () const override</td></tr>
<tr class="separator:abf5a58f6feffeae31f48b750cba9303d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b554ff56ba355e66b70698b1393085"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_gemm_interleaved.xhtml#ad4b554ff56ba355e66b70698b1393085">GemmInterleaved</a> (const CPUInfo *ci, const unsigned int M, const unsigned int N, const unsigned int K, const bool trA, const bool trB)</td></tr>
<tr class="separator:ad4b554ff56ba355e66b70698b1393085"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51e6173ab8fcea6e02f04352d43838dd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_gemm_interleaved.xhtml#a51e6173ab8fcea6e02f04352d43838dd">execute</a> (const To *A, const int lda, const To *B, const int ldb, Tr *C, const int ldc, const Tr alpha, const Tr beta, void *working_space) const override</td></tr>
<tr class="separator:a51e6173ab8fcea6e02f04352d43838dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_gemm_common.xhtml">GemmCommon&lt; To, Tr &gt;</a></td></tr>
<tr class="memitem:a431c4e53fa05a1e8ba127441e8baeed2 inherit pub_methods_class_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_gemm_common.xhtml#a431c4e53fa05a1e8ba127441e8baeed2">~GemmCommon</a> ()</td></tr>
<tr class="separator:a431c4e53fa05a1e8ba127441e8baeed2 inherit pub_methods_class_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr&gt;<br />
class GemmInterleaved&lt; strategy, To, Tr &gt;</h3>


<p>Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad4b554ff56ba355e66b70698b1393085"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_gemm_interleaved.xhtml">GemmInterleaved</a> </td>
          <td>(</td>
          <td class="paramtype">const CPUInfo *&#160;</td>
          <td class="paramname"><em>ci</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>M</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>K</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>trA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>trB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00078">78</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                                                                                                                         : M(M), N(N), K(K), trA(trA), trB(trB), strat(ci) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = ci-&gt;L1_size;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = ci-&gt;L2_size;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Work out blocking parameters</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="comment">// k_block: Each iteration will consume (out_width + out_height)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// operands - so how many iterations will fill the L1?</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        k_block = L1_size / (<span class="keyword">sizeof</span>(Toi) * (strat.out_width + strat.out_height));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Needs to be a multiple of the K unroll level.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        k_block /= strat.k_unroll;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        k_block *= strat.k_unroll;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordtype">int</span> num_k_blocks = (K + (k_block - 1)) / k_block;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        k_block = (K + num_k_blocks - 1) / num_k_blocks;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        k_block = (k_block + strat.k_unroll - 1) / strat.k_unroll;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        k_block *= strat.k_unroll;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        x_block = L2_size / (<span class="keyword">sizeof</span>(Toi) * k_block);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Needs to be a multiple of the kernel output width.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        x_block /= strat.out_width;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        x_block *= strat.out_width;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordtype">int</span> num_x_blocks = (N + (x_block - 1)) / x_block;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        x_block = (N + num_x_blocks - 1) / num_x_blocks;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        x_block = (x_block + strat.out_width - 1) / strat.out_width;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        x_block *= strat.out_width;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// Work out the rounded size of M - needed for some buffers.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        Mround = (M + (strat.out_height - 1)) / strat.out_height;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        Mround *= strat.out_height;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a51e6173ab8fcea6e02f04352d43838dd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>lda</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Tr *&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Tr&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Tr&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>working_space</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="class_gemm_common.xhtml#aab79882bbff1e62036bf9cb655e9c5d3">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p>Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00122">122</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>

<p>References <a class="el" href="profiler_8hpp_source.xhtml#l00100">PROFILE_KERNEL</a>, <a class="el" href="profiler_8hpp_source.xhtml#l00101">PROFILE_MERGE</a>, <a class="el" href="profiler_8hpp_source.xhtml#l00098">PROFILE_PREPA</a>, and <a class="el" href="profiler_8hpp_source.xhtml#l00099">PROFILE_PREPB</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                                                                                                                                                  {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        assert(working_space);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <a class="code" href="classprofiler.xhtml">profiler</a> prof;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        intptr_t working_space_int = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(working_space_bytes);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordtype">size_t</span> diff = 0;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0xF) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            diff = 0x10 - (working_space_int &amp; 0xF);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + diff);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        Toi * <span class="keyword">const</span> b_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + get_a_working_size() + diff);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + get_a_working_size() + get_b_working_size() + diff);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;K; k0 += k_block) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax = k0 + k_block;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (kmax &gt; K) kmax = K;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">int</span> kern_k = ((kmax - k0) + (strat.k_unroll - 1)) / strat.k_unroll;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            kern_k *= strat.k_unroll;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            prof(<a class="code" href="profiler_8hpp.xhtml#ac19bf2c5c388b9fb21cd0668475b2cf7">PROFILE_PREPA</a>, (M * (kmax-k0) * <span class="keyword">sizeof</span>(Toi)), [&amp;](void) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">if</span> (trA ^ strategy::A_transpose) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    Transform&lt;strategy::A_interleave, strategy::A_block, true&gt;(a_panel, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, lda, 0, M, k0, kmax);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    Transform&lt;strategy::A_interleave, strategy::A_block, false&gt;(a_panel, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>, lda, 0, M, k0, kmax);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            });</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0&lt;N; x0 += x_block) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = x0 + x_block;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">if</span> (xmax &gt; N) xmax = N;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordtype">int</span> bblocks = (xmax - x0 + strat.out_width - 1) / strat.out_width;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                prof(<a class="code" href="profiler_8hpp.xhtml#af0477dfaa86fc08825cb3f31212f423c">PROFILE_PREPB</a>, (xmax-x0) * (kmax-k0) * <span class="keyword">sizeof</span>(Toi), [&amp;](void) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keywordflow">if</span> (trB ^ strategy::B_transpose) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        Transform&lt;strategy::B_interleave, strategy::B_block, true&gt;(b_panel, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, ldb, x0, xmax, k0, kmax);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        Transform&lt;strategy::B_interleave, strategy::B_block, false&gt;(b_panel, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>, ldb, x0, xmax, k0, kmax);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                });</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=0; y&lt;M; y+=strat.out_height) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax = y + strat.out_height;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">if</span> (ymax &gt; M) ymax = M;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    prof(<a class="code" href="profiler_8hpp.xhtml#a97f4e398174b5e094f5262e5d785ac20">PROFILE_KERNEL</a>, (strat.out_height * bblocks * strat.out_width * kern_k), [&amp;](<span class="keywordtype">void</span>) { strat.kernel(a_panel + (y * kern_k), b_panel, c_panel, 1, bblocks, kern_k); });</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    prof(<a class="code" href="profiler_8hpp.xhtml#a2f7c3e65a9ccab509d7776832f562dd0">PROFILE_MERGE</a>, (strat.out_height * bblocks * strat.out_width * <span class="keyword">sizeof</span>(Tr)), [&amp;](<span class="keywordtype">void</span>) { MergeResults&lt;strategy::out_width, strategy::out_height&gt;(C, c_panel, ldc, y, ymax, x0, xmax, alpha, (k0==0 ? beta : static_cast&lt;Tr&gt;(1))); });</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdoc">Alpha channel. </div></div>
<div class="ttc" id="profiler_8hpp_xhtml_af0477dfaa86fc08825cb3f31212f423c"><div class="ttname"><a href="profiler_8hpp.xhtml#af0477dfaa86fc08825cb3f31212f423c">PROFILE_PREPB</a></div><div class="ttdeci">#define PROFILE_PREPB</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00099">profiler.hpp:99</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdoc">Blue channel. </div></div>
<div class="ttc" id="profiler_8hpp_xhtml_a97f4e398174b5e094f5262e5d785ac20"><div class="ttname"><a href="profiler_8hpp.xhtml#a97f4e398174b5e094f5262e5d785ac20">PROFILE_KERNEL</a></div><div class="ttdeci">#define PROFILE_KERNEL</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00100">profiler.hpp:100</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_ac19bf2c5c388b9fb21cd0668475b2cf7"><div class="ttname"><a href="profiler_8hpp.xhtml#ac19bf2c5c388b9fb21cd0668475b2cf7">PROFILE_PREPA</a></div><div class="ttdeci">#define PROFILE_PREPA</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00098">profiler.hpp:98</a></div></div>
<div class="ttc" id="classprofiler_xhtml"><div class="ttname"><a href="classprofiler.xhtml">profiler</a></div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00088">profiler.hpp:88</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_a2f7c3e65a9ccab509d7776832f562dd0"><div class="ttname"><a href="profiler_8hpp.xhtml#a2f7c3e65a9ccab509d7776832f562dd0">PROFILE_MERGE</a></div><div class="ttdeci">#define PROFILE_MERGE</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00101">profiler.hpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abf5a58f6feffeae31f48b750cba9303d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_working_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="class_gemm_common.xhtml#a190aa5a4547b7d8d8cbf7b7dc46ca32d">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p>Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00074">74</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                             {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> get_a_working_size() + get_b_working_size() + get_c_working_size();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/NEON/kernels/assembly/<a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_gemm_interleaved.xhtml">GemmInterleaved</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
