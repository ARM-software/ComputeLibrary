<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/cl_convolution.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cl__convolution_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">cl_convolution.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">arm_compute/core/Types.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_c_l_functions_8h_source.xhtml">arm_compute/runtime/CL/CLFunctions.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_c_l_scheduler_8h_source.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="utils_2_utils_8h_source.xhtml">utils/Utils.h</a>&quot;</code><br />
</div>
<p><a href="cl__convolution_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a63683d6451d68be4415ea2a694b350e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cl__convolution_8cpp.xhtml#a63683d6451d68be4415ea2a694b350e7">main_cl_convolution</a> (int argc, const char **argv)</td></tr>
<tr class="separator:a63683d6451d68be4415ea2a694b350e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a217dbf8b442f20279ea00b898af96f52"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cl__convolution_8cpp.xhtml#a217dbf8b442f20279ea00b898af96f52">main</a> (int argc, const char **argv)</td></tr>
<tr class="memdesc:a217dbf8b442f20279ea00b898af96f52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main program for convolution test.  <a href="#a217dbf8b442f20279ea00b898af96f52">More...</a><br /></td></tr>
<tr class="separator:a217dbf8b442f20279ea00b898af96f52"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a741ba5321da40184f8653e0a50ace070"><td class="memItemLeft" align="right" valign="top">const int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cl__convolution_8cpp.xhtml#a741ba5321da40184f8653e0a50ace070">gaussian3x3</a> []</td></tr>
<tr class="memdesc:a741ba5321da40184f8653e0a50ace070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gaussian 3x3 matrix.  <a href="#a741ba5321da40184f8653e0a50ace070">More...</a><br /></td></tr>
<tr class="separator:a741ba5321da40184f8653e0a50ace070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a565013cf7e49a591bacd548571951f94"><td class="memItemLeft" align="right" valign="top">const int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="cl__convolution_8cpp.xhtml#a565013cf7e49a591bacd548571951f94">gaussian5x5</a> []</td></tr>
<tr class="memdesc:a565013cf7e49a591bacd548571951f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gaussian 5x5 matrix.  <a href="#a565013cf7e49a591bacd548571951f94">More...</a><br /></td></tr>
<tr class="separator:a565013cf7e49a591bacd548571951f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a217dbf8b442f20279ea00b898af96f52"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int main </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Main program for convolution test. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>Number of arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>Arguments ( [optional] Path to PPM image to process ) </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cl__convolution_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="cl__convolution_8cpp_source.xhtml">cl_convolution.cpp</a>.</p>

<p>References <a class="el" href="cl__convolution_8cpp_source.xhtml#l00056">main_cl_convolution()</a>, and <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00069">arm_compute::utils::run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4c9395db2c8b8d0c336656a7b58fca3e">utils::run_example</a>(argc, argv, <a class="code" href="cl__convolution_8cpp.xhtml#a63683d6451d68be4415ea2a694b350e7">main_cl_convolution</a>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4c9395db2c8b8d0c336656a7b58fca3e"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4c9395db2c8b8d0c336656a7b58fca3e">arm_compute::utils::run_example</a></div><div class="ttdeci">int run_example(int argc, const char **argv, example &amp;func)</div><div class="ttdoc">Run an example and handle the potential exceptions it throws. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00069">Utils.cpp:69</a></div></div>
<div class="ttc" id="cl__convolution_8cpp_xhtml_a63683d6451d68be4415ea2a694b350e7"><div class="ttname"><a href="cl__convolution_8cpp.xhtml#a63683d6451d68be4415ea2a694b350e7">main_cl_convolution</a></div><div class="ttdeci">void main_cl_convolution(int argc, const char **argv)</div><div class="ttdef"><b>Definition:</b> <a href="cl__convolution_8cpp_source.xhtml#l00056">cl_convolution.cpp:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a63683d6451d68be4415ea2a694b350e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void main_cl_convolution </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="cl__convolution_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="cl__convolution_8cpp_source.xhtml">cl_convolution.cpp</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">ITensorAllocator::allocate()</a>, <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">CLTensor::allocator()</a>, <a class="el" href="classarm__compute_1_1_c_l_convolution3x3.xhtml#a26e1b4686b1f2d591d62d11585114a82">CLConvolution3x3::configure()</a>, <a class="el" href="classarm__compute_1_1_c_l_convolution_square.xhtml#a26e1b4686b1f2d591d62d11585114a82">CLConvolutionSquare&lt; matrix_size &gt;::configure()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00083">CLScheduler::default_init()</a>, <a class="el" href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">arm_compute::test::validation::dst</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00296">PPMLoader::fill_image()</a>, <a class="el" href="cl__convolution_8cpp_source.xhtml#l00038">gaussian3x3</a>, <a class="el" href="cl__convolution_8cpp_source.xhtml#l00047">gaussian5x5</a>, <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">CLScheduler::get()</a>, <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">CLTensor::info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">ITensorAllocator::init()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00279">PPMLoader::init_image()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00268">PPMLoader::is_open()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00248">PPMLoader::open()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab5fd6e96c07aaaed2747c7e16ed5951e">ICLSimpleFunction::run()</a>, <a class="el" href="classarm__compute_1_1_c_l_convolution_square.xhtml#ad1717410afd0be936c6213a63c8005fb">CLConvolutionSquare&lt; matrix_size &gt;::run()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00639">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00174">CLScheduler::sync()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>, and <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::UNDEFINED</a>.</p>

<p>Referenced by <a class="el" href="cl__convolution_8cpp_source.xhtml#l00118">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">PPMLoader</a> ppm;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLImage</a>   src, tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    CLScheduler::get().default_init();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span>(argc &lt; 2)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Print help</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: ./build/cl_convolution [input_image.ppm]\n\n&quot;</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;No input_image provided, creating a dummy 640x480 image\n&quot;</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">// Create an empty grayscale 640x480 image</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(640, 480, Format::U8));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a36e58f3e64f3851ebac7a9556b4704ed">open</a>(argv[1]);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a69f2a0e263d4f77d1e166de9cd2746f7">init_image</a>(src, Format::U8);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Configure the temporary and destination images</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    tmp.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(*src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(*src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_convolution3x3.xhtml">CLConvolution3x3</a> conv3x3;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_convolution_square.xhtml">CLConvolution5x5</a> conv5x5;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// Apply a Gaussian 3x3 filter to the source image followed by a Gaussian 5x5:</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    conv3x3.<a class="code" href="classarm__compute_1_1_c_l_convolution3x3.xhtml#a26e1b4686b1f2d591d62d11585114a82">configure</a>(&amp;src, &amp;tmp, <a class="code" href="cl__convolution_8cpp.xhtml#a741ba5321da40184f8653e0a50ace070">gaussian3x3</a>, 0 <span class="comment">/* Let arm_compute calculate the scale */</span>, BorderMode::UNDEFINED);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    conv5x5.<a class="code" href="classarm__compute_1_1_c_l_convolution_square.xhtml#a26e1b4686b1f2d591d62d11585114a82">configure</a>(&amp;tmp, &amp;dst, <a class="code" href="cl__convolution_8cpp.xhtml#a565013cf7e49a591bacd548571951f94">gaussian5x5</a>, 0 <span class="comment">/* Let arm_compute calculate the scale */</span>, BorderMode::UNDEFINED);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Allocate all the images</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    tmp.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Fill the input image with the content of the PPM image if a filename was provided:</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span>(ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>())</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a1672610b872bef30d0dc2333a0ffc402">fill_image</a>(src);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Execute the functions:</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    conv3x3.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab5fd6e96c07aaaed2747c7e16ed5951e">run</a>();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    conv5x5.<a class="code" href="classarm__compute_1_1_c_l_convolution_square.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Make sure all the OpenCL jobs are done executing:</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    CLScheduler::get().sync();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Save the result to file:</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">if</span>(ppm.<a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> std::string output_filename = std::string(argv[1]) + <span class="stringliteral">&quot;_out.ppm&quot;</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">save_to_ppm</a>(dst, output_filename); <span class="comment">// save_to_ppm maps and unmaps the image to store as PPM</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a1672610b872bef30d0dc2333a0ffc402"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a1672610b872bef30d0dc2333a0ffc402">arm_compute::utils::PPMLoader::fill_image</a></div><div class="ttdeci">void fill_image(T &amp;image)</div><div class="ttdoc">Fill an image with the content of the currently open PPM file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00296">Utils.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a301d0b7bfd70f73fc1924f4281938d08"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">arm_compute::utils::save_to_ppm</a></div><div class="ttdeci">void save_to_ppm(T &amp;tensor, const std::string &amp;ppm_filename)</div><div class="ttdoc">Template helper function to save a tensor image to a PPM file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00639">Utils.h:639</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convolution3x3_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_convolution3x3.xhtml">arm_compute::CLConvolution3x3</a></div><div class="ttdoc">Basic function to execute convolution of size 3x3. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_convolution_8h_source.xhtml#l00049">CLConvolution.h:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convolution_square_xhtml_a26e1b4686b1f2d591d62d11585114a82"><div class="ttname"><a href="classarm__compute_1_1_c_l_convolution_square.xhtml#a26e1b4686b1f2d591d62d11585114a82">arm_compute::CLConvolutionSquare::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value=0)</div><div class="ttdoc">Initialize the function&amp;#39;s source, destination, conv and border_mode. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad6dc6b773780dd6b1ad17fc82368d9f3"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">ITensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a97de03c31e0ca04be6960e2e3ffdca95"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convolution_square_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_convolution_square.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLConvolutionSquare::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a36e58f3e64f3851ebac7a9556b4704ed"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a36e58f3e64f3851ebac7a9556b4704ed">arm_compute::utils::PPMLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;ppm_filename)</div><div class="ttdoc">Open a PPM file and reads its metadata (Width, height) </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00248">Utils.h:248</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a2f57f54d8c03b615bb31eee091d8a88a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">arm_compute::utils::PPMLoader::is_open</a></div><div class="ttdeci">bool is_open()</div><div class="ttdoc">Return true if a PPM file is currently open. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00268">Utils.h:268</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">Tensor dst</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">GEMM.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_aa8a4946cd749d482dd996874d295af85"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">arm_compute::ITensorAllocator::allocate</a></div><div class="ttdeci">virtual void allocate()=0</div><div class="ttdoc">Interface to be implemented by the child class to allocate the tensor. </div></div>
<div class="ttc" id="cl__convolution_8cpp_xhtml_a565013cf7e49a591bacd548571951f94"><div class="ttname"><a href="cl__convolution_8cpp.xhtml#a565013cf7e49a591bacd548571951f94">gaussian5x5</a></div><div class="ttdeci">const int16_t gaussian5x5[]</div><div class="ttdoc">Gaussian 5x5 matrix. </div><div class="ttdef"><b>Definition:</b> <a href="cl__convolution_8cpp_source.xhtml#l00047">cl_convolution.cpp:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convolution_square_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_convolution_square.xhtml">arm_compute::CLConvolutionSquare</a></div><div class="ttdoc">Basic function to execute square convolution.Currently it supports 5x5, 7x7, 9x9. ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_convolution_8h_source.xhtml#l00072">CLConvolution.h:72</a></div></div>
<div class="ttc" id="cl__convolution_8cpp_xhtml_a741ba5321da40184f8653e0a50ace070"><div class="ttname"><a href="cl__convolution_8cpp.xhtml#a741ba5321da40184f8653e0a50ace070">gaussian3x3</a></div><div class="ttdeci">const int16_t gaussian3x3[]</div><div class="ttdoc">Gaussian 3x3 matrix. </div><div class="ttdef"><b>Definition:</b> <a href="cl__convolution_8cpp_source.xhtml#l00038">cl_convolution.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_convolution3x3_xhtml_a26e1b4686b1f2d591d62d11585114a82"><div class="ttname"><a href="classarm__compute_1_1_c_l_convolution3x3.xhtml#a26e1b4686b1f2d591d62d11585114a82">arm_compute::CLConvolution3x3::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value=0)</div><div class="ttdoc">Initialize the function&amp;#39;s source, destination, conv and border_mode. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_aa72161e0e3c0f6b2da20f835de6af680"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00044">TensorInfo.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a69f2a0e263d4f77d1e166de9cd2746f7"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a69f2a0e263d4f77d1e166de9cd2746f7">arm_compute::utils::PPMLoader::init_image</a></div><div class="ttdeci">void init_image(T &amp;image, arm_compute::Format format)</div><div class="ttdoc">Initialise an image&amp;#39;s metadata with the dimensions of the PPM file currently open. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00279">Utils.h:279</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_simple_function_xhtml_ab5fd6e96c07aaaed2747c7e16ed5951e"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab5fd6e96c07aaaed2747c7e16ed5951e">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() overridefinal</div><div class="ttdoc">Run the kernels contained in the function. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">arm_compute::utils::PPMLoader</a></div><div class="ttdoc">Class to load the content of a PPM file into an Image. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00237">Utils.h:237</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00039">CLTensor.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a741ba5321da40184f8653e0a50ace070"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int16_t gaussian3x3[]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div><div class="line">{</div><div class="line">    1, 2, 1,</div><div class="line">    2, 4, 2,</div><div class="line">    1, 2, 1</div><div class="line">}</div></div><!-- fragment -->
<p>Gaussian 3x3 matrix. </p>

<p>Definition at line <a class="el" href="cl__convolution_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="cl__convolution_8cpp_source.xhtml">cl_convolution.cpp</a>.</p>

<p>Referenced by <a class="el" href="cl__convolution_8cpp_source.xhtml#l00056">main_cl_convolution()</a>, and <a class="el" href="_gaussian3x3_fixture_8h_source.xhtml#l00049">Gaussian3x3ValidationFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>.</p>

</div>
</div>
<a class="anchor" id="a565013cf7e49a591bacd548571951f94"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int16_t gaussian5x5[]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div><div class="line">{</div><div class="line">    1, 4, 6, 4, 1,</div><div class="line">    4, 16, 24, 16, 4,</div><div class="line">    6, 24, 36, 24, 6,</div><div class="line">    4, 16, 24, 16, 4,</div><div class="line">    1, 4, 6, 4, 1</div><div class="line">}</div></div><!-- fragment -->
<p>Gaussian 5x5 matrix. </p>

<p>Definition at line <a class="el" href="cl__convolution_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="cl__convolution_8cpp_source.xhtml">cl_convolution.cpp</a>.</p>

<p>Referenced by <a class="el" href="cl__convolution_8cpp_source.xhtml#l00056">main_cl_convolution()</a>, and <a class="el" href="_gaussian5x5_fixture_8h_source.xhtml#l00049">Gaussian5x5ValidationFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="cl__convolution_8cpp.xhtml">cl_convolution.cpp</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
