<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/im2col.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('im2col_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">im2col.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="im2col_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if defined(FIXED_POINT_POSITION)</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fixed__point_8h.xhtml">fixed_point.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#if defined(DATA_TYPE) &amp;&amp; defined(ELEMENT_SIZE)</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if !defined(FIXED_POINT_POSITION)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#if ELEMENT_SIZE == 1</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#define COND_DATA_TYPE char</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#elif ELEMENT_SIZE == 2</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#define COND_DATA_TYPE short</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#elif ELEMENT_SIZE == 4</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#define COND_DATA_TYPE int</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#else // ELEMENT_SIZE</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#error &quot;Element size not support&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#endif // ELEMENT_SIZE</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#if defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH)</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;__kernel <span class="keywordtype">void</span> im2col1x1_stridex1_dchw(</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> uint xc    = get_global_id(0) * 4;            <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> uint yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> uint ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> uint batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Clamp xc</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// The strategy clamps at &quot;xc&quot; as it will be a valid value for sure</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    uint4 xc_clamped = xc + (uint4)(0, 1, 2, 3);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Check which values are valid</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4) cond0 = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((xc_clamped &lt; SRC_WIDTH), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    xc_clamped = select((uint4)xc, xc_clamped, convert_int4(cond0));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    const uint xi = xc;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    const uint yi = yc * STRIDE_Y;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    const uint  xo = ch;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    const uint4 yo = xc_clamped + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Get input and output address</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    __global uchar *input_ptr = src_ptr + src_offset_first_element_in_bytes + xi * src_stride_x + yi * src_stride_y + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + xo * dst_stride_x + batch * dst_stride_w;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>, 4)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    data = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// If out-of-bound, overwrite with the first element</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    data = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))data.s0, data, cond0);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    *(__global DATA_TYPE *)(output_ptr + yo.s0 * dst_stride_y) = data.s0;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    *(__global DATA_TYPE *)(output_ptr + yo.s1 * dst_stride_y) = data.s1;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    *(__global DATA_TYPE *)(output_ptr + yo.s2 * dst_stride_y) = data.s2;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    *(__global DATA_TYPE *)(output_ptr + yo.s3 * dst_stride_y) = data.s3;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        *((__global DATA_TYPE *)(output_ptr + yo.s0 * dst_stride_y) + 1) = 1.0f;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        *((__global DATA_TYPE *)(output_ptr + yo.s1 * dst_stride_y) + 1) = 1.0f;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        *((__global DATA_TYPE *)(output_ptr + yo.s2 * dst_stride_y) + 1) = 1.0f;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        *((__global DATA_TYPE *)(output_ptr + yo.s3 * dst_stride_y) + 1) = 1.0f;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#endif // defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH)</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">#if defined(CONVOLVED_WIDTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(PAD_VALUE)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;__kernel <span class="keywordtype">void</span> im2col3x3_dchw(</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xc    = get_global_id(0);                <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = xc * STRIDE_X - PAD_LEFT;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = yc * STRIDE_Y - PAD_TOP;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = ch * 9;                    <span class="comment">// 3x3</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = xc + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Get input and output address</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    __global uchar *input_ptr = src_ptr + src_offset_first_element_in_bytes + xi * (int)src_stride_x + yi * (<span class="keywordtype">int</span>)src_stride_y + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + xo * dst_stride_x + yo * dst_stride_y + batch * dst_stride_w;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    row0 = vload3(0, (__global DATA_TYPE *)(input_ptr + 0 * src_stride_y));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    row1 = vload3(0, (__global DATA_TYPE *)(input_ptr + 1 * src_stride_y));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    row2 = vload3(0, (__global DATA_TYPE *)(input_ptr + 2 * src_stride_y));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Put 0 if the value is out-of-bound</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    int3 x = (int3)xi + (int3)(0, 1, 2);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    int3 y = (int3)yi + (int3)(0, 1, 2);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    cond0 = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((x &gt;= (int3)0 &amp;&amp; x &lt; (int3)SRC_WIDTH &amp;&amp; (int3)(y.s0 &gt;= 0 &amp;&amp; y.s0 &lt; SRC_HEIGHT)), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    cond1 = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((x &gt;= (int3)0 &amp;&amp; x &lt; (int3)SRC_WIDTH &amp;&amp; (int3)(y.s1 &gt;= 0 &amp;&amp; y.s1 &lt; SRC_HEIGHT)), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    cond2 = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((x &gt;= (int3)0 &amp;&amp; x &lt; (int3)SRC_WIDTH &amp;&amp; (int3)(y.s2 &gt;= 0 &amp;&amp; y.s2 &lt; SRC_HEIGHT)), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 3));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    row0 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))PAD_VALUE, row0, cond0);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    row1 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))PAD_VALUE, row1, cond1);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    row2 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))PAD_VALUE, row2, cond2);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row0.s012, row1.s012, row2.s01), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    *((__global DATA_TYPE *)output_ptr + 8) = row2.s2;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        *((__global DATA_TYPE *)output_ptr + 9) = 1.0f;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;__kernel <span class="keywordtype">void</span> im2col5x5_dchw(</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xc    = get_global_id(0);                <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = xc * STRIDE_X - PAD_LEFT;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = yc * STRIDE_Y - PAD_TOP;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = ch * 25;                   <span class="comment">// 5x5</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = xc + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Put 0 if the value is out-of-bound</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    int4 x0 = (int4)xi + (int4)(0, 1, 2, 3);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    int4 y0 = (int4)yi + (int4)(0, 1, 2, 3);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordtype">int</span>  x1 = xi + 4;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">int</span>  y1 = yi + 4;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Check if we could have out-of-bounds elements in the x direction</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    x0_condition = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((x0 &gt;= (int4)0 &amp;&amp; x0 &lt; (int4)SRC_WIDTH), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4));</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    y0_condition                = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((y0 &gt;= (int4)0 &amp;&amp; y0 &lt; (int4)SRC_HEIGHT), <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    COND_DATA_TYPE x1_condition = (COND_DATA_TYPE)(x1 &gt;= 0 &amp;&amp; x1 &lt; SRC_WIDTH);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    COND_DATA_TYPE y1_condition = (COND_DATA_TYPE)(y1 &gt;= 0 &amp;&amp; y1 &lt; SRC_HEIGHT);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Get input and output address</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    __global uchar *input_ptr = src_ptr + src_offset_first_element_in_bytes + xi * (int)src_stride_x + yi * (<span class="keywordtype">int</span>)src_stride_y + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + xo * dst_stride_x + yo * dst_stride_y + batch * dst_stride_w;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        row00 = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        DATA_TYPE</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        row01 = *((__global DATA_TYPE *)input_ptr + 4);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        row10 = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        DATA_TYPE</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        row11 = *((__global DATA_TYPE *)input_ptr + 4);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        cond00 = x0_condition &amp;&amp; (<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4))y0_condition.s0;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        cond10                = x0_condition &amp;&amp; (<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4))y0_condition.s1;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        COND_DATA_TYPE cond01 = (COND_DATA_TYPE)(x1_condition &amp;&amp; y0_condition.s0);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        COND_DATA_TYPE cond11 = (COND_DATA_TYPE)(x1_condition &amp;&amp; y0_condition.s1);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// Replace with 0 if the value is not valid</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        row00 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))PAD_VALUE, row00, cond00);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        row10 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))PAD_VALUE, row10, cond10);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        row01 = select((DATA_TYPE)PAD_VALUE, row01, cond01);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        row11 = select((DATA_TYPE)PAD_VALUE, row11, cond11);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s0123, row01,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                              row10.s012),</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        vstore2((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2))(row10.s3, row11), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        output_ptr += 10 * dst_stride_x;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        row00 = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        DATA_TYPE</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        row01 = *((__global DATA_TYPE *)input_ptr + 4);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        row10 = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        DATA_TYPE</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        row11 = *((__global DATA_TYPE *)input_ptr + 4);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        cond00 = x0_condition &amp;&amp; (<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4))y0_condition.s2;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        cond10                = x0_condition &amp;&amp; (<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4))y0_condition.s3;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        COND_DATA_TYPE cond01 = (COND_DATA_TYPE)(x1_condition &amp;&amp; y0_condition.s2);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        COND_DATA_TYPE cond11 = (COND_DATA_TYPE)(x1_condition &amp;&amp; y0_condition.s3);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="comment">// Replace with 0 if the value is not valid</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        row00 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))PAD_VALUE, row00, cond00);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        row10 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))PAD_VALUE, row10, cond10);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        row01 = select((DATA_TYPE)PAD_VALUE, row01, cond01);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        row11 = select((DATA_TYPE)PAD_VALUE, row11, cond11);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s0123, row01,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                              row10.s012),</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        vstore2((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2))(row10.s3, row11), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        output_ptr += 10 * dst_stride_x;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        row00 = vload4(0, (__global DATA_TYPE *)input_ptr);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        DATA_TYPE</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        row01 = *((__global DATA_TYPE *)input_ptr + 4);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4)</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        cond00                = x0_condition &amp;&amp; (<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(COND_DATA_TYPE, 4))y1_condition;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        COND_DATA_TYPE cond01 = (COND_DATA_TYPE)(x1_condition &amp;&amp; y1_condition);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// Replace with 0 if the value is not valid</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        row00 = select((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))PAD_VALUE, row00, cond00);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        row01 = select((DATA_TYPE)PAD_VALUE, row01, cond01);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        vstore4(row00, 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        *((__global DATA_TYPE *)output_ptr + 4) = row01;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        output_ptr += 5 * dst_stride_x;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        *((__global DATA_TYPE *)output_ptr) = 1.0f;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;}</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor">#endif // defined(CONVOLVED_WIDTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(PAD_VALUE)</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">#if defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH)</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;__kernel <span class="keywordtype">void</span> im2col11x11_padx0_pady0_dchw(</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;{</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xc    = get_global_id(0);                <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = xc * STRIDE_X;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = yc * STRIDE_Y;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = ch * 121;                  <span class="comment">// 11x11</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = xc + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">// Get input and output address</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    __global uchar *input_ptr = src_ptr + src_offset_first_element_in_bytes + xi * src_stride_x + yi * src_stride_y + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + xo * dst_stride_x + yo * dst_stride_y + batch * dst_stride_w;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    }</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        input_ptr += src_stride_y;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8)</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        row00 = vload8(0, (__global DATA_TYPE *)(input_ptr));</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        row01 = vload3(0, (__global DATA_TYPE *)(input_ptr) + 8);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        vstore8((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 8))(row00.s01234567), 0, (__global DATA_TYPE *)output_ptr);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        vstore3((<a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 3))(row01.s012), 0, (__global DATA_TYPE *)output_ptr + 8);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        output_ptr += 11 * src_stride_x;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    }</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        *((__global DATA_TYPE *)output_ptr) = 1.0f;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;}</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="preprocessor">#endif // defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_DEPTH)</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="preprocessor">#endif // !defined(FIXED_POINT_POSITION)</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">#if defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(VECTOR_SIZE) &amp;&amp; defined(WIDTH_MOD_VECTOR_SIZE)</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;__kernel <span class="keywordtype">void</span> im2col_generic_padx0_pady0_dchw(</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;{</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xc    = get_global_id(0);                <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = xc * STRIDE_X;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = yc * STRIDE_Y;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo                   = ch * KERNEL_WIDTH * KERNEL_HEIGHT;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo                   = xc + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    __global uchar *input_ptr      = src_ptr + src_offset_first_element_in_bytes + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    __global DATA_TYPE *output_ptr = ((__global DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + yo * dst_stride_y + batch * dst_stride_w)) + xo;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="comment">// Linearize convolution elements</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = yi, y_e = yi + KERNEL_HEIGHT; y &lt; y_e; ++y)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordtype">int</span> last_x = 0;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = xi, x_e = xi + KERNEL_WIDTH; x + <a class="code" href="softmax__layer_8cl.xhtml#a7c78836761fa3b5b124efea237dac70f">VECTOR_SIZE</a> &lt;= x_e; x += <a class="code" href="softmax__layer_8cl.xhtml#a7c78836761fa3b5b124efea237dac70f">VECTOR_SIZE</a>, output_ptr += <a class="code" href="softmax__layer_8cl.xhtml#a7c78836761fa3b5b124efea237dac70f">VECTOR_SIZE</a>)</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        {</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, VECTOR_SIZE)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            row = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + x * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VECTOR_SIZE)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            (row, 0, output_ptr);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            last_x = x;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="comment">// Copy the remainder of the row by doing VLOAD(WIDTH_MOD_VECTOR_SIZE) and VSTORE(WIDTH_MOD_VECTOR_SIZE).</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="comment">// Note that x and output_ptr have already been incremented by VECTOR_SIZE by the loop just before exit.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="preprocessor">#if WIDTH_MOD_VECTOR_SIZE == 1</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        *output_ptr = *((__global DATA_TYPE *)(input_ptr + (last_x + VECTOR_SIZE) * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="preprocessor">#elif WIDTH_MOD_VECTOR_SIZE &gt; 1</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <a class="code" href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, WIDTH_MOD_VECTOR_SIZE)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        row = <a class="code" href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(WIDTH_MOD_VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + (last_x + VECTOR_SIZE) * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <a class="code" href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(WIDTH_MOD_VECTOR_SIZE)</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        (row, 0, output_ptr);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* WIDTH_MOD_VECTOR_SIZE */</span><span class="preprocessor"></span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        output_ptr += WIDTH_MOD_VECTOR_SIZE;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    } <span class="comment">/* End of loop over KERNEL_HEIGHT */</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    {</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        *output_ptr = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)(1 &lt;&lt; FIXED_POINT_POSITION);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="preprocessor">#else  // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        *output_ptr = 1.0f;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="preprocessor">#endif //defined(CONVOLVED_WIDTH) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(VECTOR_SIZE) &amp;&amp; defined(WIDTH_MOD_VECTOR_SIZE)</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="preprocessor">#if defined(CONVOLVED_WIDTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(PAD_VALUE)</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;__kernel <span class="keywordtype">void</span> im2col_generic_dchw(</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    uint src_stride_w,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    uint dst_stride_w)</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;{</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xc    = get_global_id(0);                <span class="comment">// x coordinate in the convolved tensor</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yc    = get_global_id(1);                <span class="comment">// y coordinate in the convolved tensor</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch    = get_global_id(2) % KERNEL_DEPTH; <span class="comment">// input feature map</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch = get_global_id(2) / KERNEL_DEPTH; <span class="comment">// batch size</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="comment">// Calculate input indices</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = xc * STRIDE_X - PAD_LEFT;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = yc * STRIDE_Y - PAD_TOP;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="comment">// Calculate output indices</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = ch * KERNEL_WIDTH * KERNEL_HEIGHT;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = xc + yc * CONVOLVED_WIDTH; <span class="comment">// Index of the convolution</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    __global uchar *input_ptr      = src_ptr + src_offset_first_element_in_bytes + ch * src_stride_z + batch * src_stride_w;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    __global DATA_TYPE *output_ptr = ((__global DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + yo * dst_stride_y + batch * dst_stride_w)) + xo;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="comment">// Linearize convolution elements</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = yi, y_e = yi + KERNEL_HEIGHT; y &lt; y_e; ++y)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    {</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = xi, x_e = xi + KERNEL_WIDTH; x &lt; x_e; ++x, ++output_ptr)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">#if PAD_LEFT == 0 &amp;&amp; PAD_TOP == 0 &amp;&amp; PAD_RIGHT == 0 &amp;&amp; PAD_BOTTOM == 0</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            *output_ptr = *((__global DATA_TYPE *)(input_ptr + x * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">#else  // PAD_LEFT == 0 &amp;&amp; PAD_TOP == 0 &amp;&amp; PAD_RIGHT == 0 &amp;&amp; PAD_BOTTOM == 0</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="keywordflow">if</span>(x &lt; 0 || x &gt;= SRC_WIDTH || y &lt; 0 || y &gt;= SRC_HEIGHT)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                *output_ptr = PAD_VALUE;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                *output_ptr = *((__global DATA_TYPE *)(input_ptr + x * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            }</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="preprocessor">#endif // PAD_LEFT == 0 &amp;&amp; PAD_TOP == 0 &amp;&amp; PAD_RIGHT == 0 &amp;&amp; PAD_BOTTOM == 0</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    }</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordflow">if</span>(ch == (KERNEL_DEPTH - 1))</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    {</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        *output_ptr = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)(1 &lt;&lt; FIXED_POINT_POSITION);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="preprocessor">#else  // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        *output_ptr = 1.0f;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;}</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="preprocessor">#endif // defined(CONVOLVED_WIDTH) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(KERNEL_DEPTH) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(PAD_VALUE)</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;__kernel <span class="keywordtype">void</span> im2col_reduced_dchw(</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    uint width, uint height)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;{</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a> = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">const</span> uint image_size = width * height;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    __global uchar *tmp_out_ptr = dst_ptr + dst_offset_first_element_in_bytes + (get_global_id(0) + get_global_id(1) * width + get_global_id(2) * image_size) * dst_stride_x;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    *((__global DATA_TYPE *)tmp_out_ptr) = *((__global DATA_TYPE *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>.ptr);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="comment">// If it is the last thread in the 3 dimensional workgroup</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">if</span>(get_global_id(0) == (get_global_size(0) - 1) &amp;&amp; get_global_id(1) == (get_global_size(1) - 1) &amp;&amp; get_global_id(2) == (get_global_size(2) - 1))</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    {</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        tmp_out_ptr += dst_stride_x;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor">#ifdef FIXED_POINT_POSITION</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        *((__global DATA_TYPE *)tmp_out_ptr) = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)(1 &lt;&lt; FIXED_POINT_POSITION);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#else  // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        *((__global DATA_TYPE *)tmp_out_ptr) = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)1.0f;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="preprocessor">#endif // FIXED_POINT_POSITION</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;}</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="preprocessor">#endif // defined(DATA_TYPE) &amp;&amp; defined(ELEMENT_SIZE)</span></div><div class="ttc" id="fixed__point_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00098">fixed_point.h:98</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00040">helpers.h:40</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00117">helpers.h:117</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afb8c72ce35c4a1f4a2588d6573e54aa1"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a></div><div class="ttdeci">#define DATA_TYPE</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00027">convolution3x3.cl:27</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00066">helpers.h:66</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00149">helpers.h:149</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00043">helpers.h:43</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="softmax__layer_8cl_xhtml_a7c78836761fa3b5b124efea237dac70f"><div class="ttname"><a href="softmax__layer_8cl.xhtml#a7c78836761fa3b5b124efea237dac70f">VECTOR_SIZE</a></div><div class="ttdeci">#define VECTOR_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="softmax__layer_8cl_source.xhtml#l00079">softmax_layer.cl:79</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml"><div class="ttname"><a href="fixed__point_8h.xhtml">fixed_point.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00060">helpers.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00137">Convolution.cpp:137</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00074">helpers.h:74</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="fixed__point_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00093">fixed_point.h:93</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6743f0a130e8311e6f5b1a23df102472"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">arm_compute::test::validation::src</a></div><div class="ttdeci">convolution configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00147">Convolution.cpp:147</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="im2col_8cl.xhtml">im2col.cl</a></li>
    <li class="footer">Generated on Fri Mar 2 2018 12:37:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
