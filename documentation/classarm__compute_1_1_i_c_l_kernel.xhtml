<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ICLKernel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_c_l_kernel.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ICLKernel Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Common interface for all the OpenCL kernels.  
 <a href="classarm__compute_1_1_i_c_l_kernel.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ICLKernel:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_i_c_l_kernel__coll__graph.svg" width="91" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6b10e96ce90bf901d17def86b874b019"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a6b10e96ce90bf901d17def86b874b019">ICLKernel</a> ()</td></tr>
<tr class="memdesc:a6b10e96ce90bf901d17def86b874b019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a6b10e96ce90bf901d17def86b874b019">More...</a><br /></td></tr>
<tr class="separator:a6b10e96ce90bf901d17def86b874b019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5121015ab09ece4d470f50c7ffe198e"><td class="memItemLeft" align="right" valign="top">cl::Kernel &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">kernel</a> ()</td></tr>
<tr class="memdesc:ae5121015ab09ece4d470f50c7ffe198e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to the OpenCL kernel of this object.  <a href="#ae5121015ab09ece4d470f50c7ffe198e">More...</a><br /></td></tr>
<tr class="separator:ae5121015ab09ece4d470f50c7ffe198e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9331d385192a50adf74d3af40ce0fa20"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9331d385192a50adf74d3af40ce0fa20"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9331d385192a50adf74d3af40ce0fa20">add_1D_array_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *array, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, unsigned int num_dimensions, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:a9331d385192a50adf74d3af40ce0fa20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 1D array's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a9331d385192a50adf74d3af40ce0fa20">More...</a><br /></td></tr>
<tr class="separator:a9331d385192a50adf74d3af40ce0fa20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a479e7043e65dc87de35d374e108510f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a479e7043e65dc87de35d374e108510f7">add_1D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:a479e7043e65dc87de35d374e108510f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a479e7043e65dc87de35d374e108510f7">More...</a><br /></td></tr>
<tr class="separator:a479e7043e65dc87de35d374e108510f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac74dad3e61f79334f5e73f3c3ac603cb">add_2D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#ac74dad3e61f79334f5e73f3c3ac603cb">More...</a><br /></td></tr>
<tr class="separator:ac74dad3e61f79334f5e73f3c3ac603cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f5847162f352444c6ac1825d0e99c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a28f5847162f352444c6ac1825d0e99c7">add_3D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:a28f5847162f352444c6ac1825d0e99c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 3D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a28f5847162f352444c6ac1825d0e99c7">More...</a><br /></td></tr>
<tr class="separator:a28f5847162f352444c6ac1825d0e99c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33e09c946b338fbfc780a9d1c66e68ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a33e09c946b338fbfc780a9d1c66e68ad">add_4D_tensor_argument</a> (unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *tensor, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:a33e09c946b338fbfc780a9d1c66e68ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed 4D tensor's parameters to the object's kernel's arguments starting from the index idx.  <a href="#a33e09c946b338fbfc780a9d1c66e68ad">More...</a><br /></td></tr>
<tr class="separator:a33e09c946b338fbfc780a9d1c66e68ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99fde125501fae43952af222c91236cd"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a99fde125501fae43952af222c91236cd">num_arguments_per_1D_array</a> () const </td></tr>
<tr class="memdesc:a99fde125501fae43952af222c91236cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 1D array object.  <a href="#a99fde125501fae43952af222c91236cd">More...</a><br /></td></tr>
<tr class="separator:a99fde125501fae43952af222c91236cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a770f45838881fc061294e56d64f34386"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a770f45838881fc061294e56d64f34386">num_arguments_per_1D_tensor</a> () const </td></tr>
<tr class="memdesc:a770f45838881fc061294e56d64f34386"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 1D tensor object.  <a href="#a770f45838881fc061294e56d64f34386">More...</a><br /></td></tr>
<tr class="separator:a770f45838881fc061294e56d64f34386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac734502531e7f95e25b3bf688a304a59"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ac734502531e7f95e25b3bf688a304a59">num_arguments_per_2D_tensor</a> () const </td></tr>
<tr class="memdesc:ac734502531e7f95e25b3bf688a304a59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 2D tensor object.  <a href="#ac734502531e7f95e25b3bf688a304a59">More...</a><br /></td></tr>
<tr class="separator:ac734502531e7f95e25b3bf688a304a59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4feaae9c860cddfa843d37c953674a22"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a4feaae9c860cddfa843d37c953674a22">num_arguments_per_3D_tensor</a> () const </td></tr>
<tr class="memdesc:a4feaae9c860cddfa843d37c953674a22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 3D tensor object.  <a href="#a4feaae9c860cddfa843d37c953674a22">More...</a><br /></td></tr>
<tr class="separator:a4feaae9c860cddfa843d37c953674a22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af24df23a978e1a46ff6714e9b9d3eef9"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#af24df23a978e1a46ff6714e9b9d3eef9">num_arguments_per_4D_tensor</a> () const </td></tr>
<tr class="memdesc:af24df23a978e1a46ff6714e9b9d3eef9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of arguments enqueued per 4D tensor object.  <a href="#af24df23a978e1a46ff6714e9b9d3eef9">More...</a><br /></td></tr>
<tr class="separator:af24df23a978e1a46ff6714e9b9d3eef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6a174d47571f51f199ffc27ecc10f51"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#af6a174d47571f51f199ffc27ecc10f51">run</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>, cl::CommandQueue &amp;queue)=0</td></tr>
<tr class="memdesc:af6a174d47571f51f199ffc27ecc10f51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue.  <a href="#af6a174d47571f51f199ffc27ecc10f51">More...</a><br /></td></tr>
<tr class="separator:af6a174d47571f51f199ffc27ecc10f51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50f427a1d9419800972b9e03c4034311"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a50f427a1d9419800972b9e03c4034311"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a50f427a1d9419800972b9e03c4034311">add_argument</a> (unsigned int &amp;idx, T <a class="el" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</td></tr>
<tr class="memdesc:a50f427a1d9419800972b9e03c4034311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the passed parameters to the object's kernel's arguments starting from the index idx.  <a href="#a50f427a1d9419800972b9e03c4034311">More...</a><br /></td></tr>
<tr class="separator:a50f427a1d9419800972b9e03c4034311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44c701b9dbd01a171de4928254d1ecbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a44c701b9dbd01a171de4928254d1ecbf">set_lws_hint</a> (cl::NDRange &amp;lws_hint)</td></tr>
<tr class="memdesc:a44c701b9dbd01a171de4928254d1ecbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the Local-Workgroup-Size hint.  <a href="#a44c701b9dbd01a171de4928254d1ecbf">More...</a><br /></td></tr>
<tr class="separator:a44c701b9dbd01a171de4928254d1ecbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a226d2e9e6d3c42d681666566fe950b2d"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a226d2e9e6d3c42d681666566fe950b2d">config_id</a> () const </td></tr>
<tr class="memdesc:a226d2e9e6d3c42d681666566fe950b2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the configuration ID.  <a href="#a226d2e9e6d3c42d681666566fe950b2d">More...</a><br /></td></tr>
<tr class="separator:a226d2e9e6d3c42d681666566fe950b2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target)</td></tr>
<tr class="memdesc:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the targeted GPU architecture.  <a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">More...</a><br /></td></tr>
<tr class="separator:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a57e5f498fcbfc25c28b8496dfa3fc33c">set_target</a> (cl::Device &amp;device)</td></tr>
<tr class="memdesc:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the targeted GPU architecture according to the CL device.  <a href="#a57e5f498fcbfc25c28b8496dfa3fc33c">More...</a><br /></td></tr>
<tr class="separator:a57e5f498fcbfc25c28b8496dfa3fc33c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a646cd535a16835b246c3367a63d96250"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a646cd535a16835b246c3367a63d96250">get_target</a> () const </td></tr>
<tr class="memdesc:a646cd535a16835b246c3367a63d96250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the targeted GPU architecture.  <a href="#a646cd535a16835b246c3367a63d96250">More...</a><br /></td></tr>
<tr class="separator:a646cd535a16835b246c3367a63d96250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abca336f832d730e8494049bd714df60a"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#abca336f832d730e8494049bd714df60a">get_max_workgroup_size</a> ()</td></tr>
<tr class="memdesc:abca336f832d730e8494049bd714df60a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the maximum workgroup size for the device the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> uses.  <a href="#abca336f832d730e8494049bd714df60a">More...</a><br /></td></tr>
<tr class="separator:abca336f832d730e8494049bd714df60a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d7c6b5f3332604ad6a637457f65c342"><td class="memTemplParams" colspan="2">template&lt;typename T , unsigned int dimension_size&gt; </td></tr>
<tr class="memitem:a2d7c6b5f3332604ad6a637457f65c342"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a2d7c6b5f3332604ad6a637457f65c342">add_array_argument</a> (unsigned &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *array, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;strides, unsigned int num_dimensions, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="separator:a2d7c6b5f3332604ad6a637457f65c342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_kernel"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_kernel')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></td></tr>
<tr class="memitem:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">IKernel</a> ()</td></tr>
<tr class="memdesc:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a7250cb8cbaa4104a93a2d77155085507">More...</a><br /></td></tr>
<tr class="separator:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">~IKernel</a> ()=default</td></tr>
<tr class="memdesc:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a341b60d15a5e12a5b8f3825194dd3b12">More...</a><br /></td></tr>
<tr class="separator:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfab8f0d4928e1081d9f65b77933e24a inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#abfab8f0d4928e1081d9f65b77933e24a">is_parallelisable</a> () const </td></tr>
<tr class="memdesc:abfab8f0d4928e1081d9f65b77933e24a inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates whether or not the kernel is parallelisable.  <a href="#abfab8f0d4928e1081d9f65b77933e24a">More...</a><br /></td></tr>
<tr class="separator:abfab8f0d4928e1081d9f65b77933e24a inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6daa9b04e2035bf007e5e5c3c4396a8 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#aa6daa9b04e2035bf007e5e5c3c4396a8">border_size</a> () const </td></tr>
<tr class="memdesc:aa6daa9b04e2035bf007e5e5c3c4396a8 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the border for that kernel.  <a href="#aa6daa9b04e2035bf007e5e5c3c4396a8">More...</a><br /></td></tr>
<tr class="separator:aa6daa9b04e2035bf007e5e5c3c4396a8 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f5646133956f06348b310ccc3d36353 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a> () const </td></tr>
<tr class="memdesc:a3f5646133956f06348b310ccc3d36353 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum window the kernel can be executed on.  <a href="#a3f5646133956f06348b310ccc3d36353">More...</a><br /></td></tr>
<tr class="separator:a3f5646133956f06348b310ccc3d36353 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a4b4a20e518c04e657839280cd486a85d"><td class="memItemLeft" align="right" valign="top">static cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a4b4a20e518c04e657839280cd486a85d">gws_from_window</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>)</td></tr>
<tr class="memdesc:a4b4a20e518c04e657839280cd486a85d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the global work size given an execution window.  <a href="#a4b4a20e518c04e657839280cd486a85d">More...</a><br /></td></tr>
<tr class="separator:a4b4a20e518c04e657839280cd486a85d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Common interface for all the OpenCL kernels. </p>

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a6b10e96ce90bf901d17def86b874b019"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9331d385192a50adf74d3af40ce0fa20"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_1D_array_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed 1D array's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the array's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values...">Array</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td><a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> object containing stride of each dimension in bytes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_dimensions</td><td>Number of dimensions of the <code>array</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00274">274</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">IKernel::window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    add_array_argument&lt;T, 1&gt;(idx, array, strides, num_dimensions, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_a3f5646133956f06348b310ccc3d36353"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const </div><div class="ttdoc">The maximum window the kernel can be executed on. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a479e7043e65dc87de35d374e108510f7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_1D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed 1D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac74dad3e61f79334f5e73f3c3ac603cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_2D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed 2D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a28f5847162f352444c6ac1825d0e99c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_3D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed 3D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a33e09c946b338fbfc780a9d1c66e68ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_4D_tensor_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the passed 4D tensor's parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the tensor's arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to set as an argument of the object's kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window. ">Window</a> the kernel will be executed on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a50f427a1d9419800972b9e03c4034311"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the passed parameters to the object's kernel's arguments starting from the index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to start adding the arguments. Will be incremented by the number of kernel arguments set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to set as an argument of the object's kernel. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00129">129</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        _kernel.setArg(idx++, <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2d7c6b5f3332604ad6a637457f65c342"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_array_argument </td>
          <td>(</td>
          <td class="paramtype">unsigned &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml">ICLArray</a>&lt; T &gt; *&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_dimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00247">247</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00297">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="core_2_error_8h_source.xhtml#l00147">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLArray&lt; T &gt;::cl_buffer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Calculate offset to the start of the window</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset_first_element = 0;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; num_dimensions; ++n)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        offset_first_element += <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>[n].start() * strides[n];</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_start = idx;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    _kernel.setArg(idx++, array-&gt;cl_buffer());</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimension = 0; dimension &lt; dimension_size; dimension++)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension]);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        _kernel.setArg&lt;cl_uint&gt;(idx++, strides[dimension] * <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">window</a>[dimension].step());</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    _kernel.setArg&lt;cl_uint&gt;(idx++, offset_first_element);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(idx_start + num_arguments_per_array&lt;dimension_size&gt;() != idx,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                             <span class="stringliteral">&quot;add_%dD_array_argument() is supposed to add exactly %d arguments to the kernel&quot;</span>, dimension_size, num_arguments_per_array&lt;dimension_size&gt;());</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a>(idx_start);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a4103adbb45806b2f2002d44b91d0d206"><div class="ttname"><a href="core_2_error_8h.xhtml#a4103adbb45806b2f2002d44b91d0d206">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(var)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00147">Error.h:147</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00297">Error.h:297</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_a3f5646133956f06348b310ccc3d36353"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const </div><div class="ttdoc">The maximum window the kernel can be executed on. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a226d2e9e6d3c42d681666566fe950b2d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; config_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the configuration ID. </p>
<dl class="section note"><dt>Note</dt><dd>The configuration ID can be used by the caller to distinguish different calls of the same OpenCL kernel In particular, this method can be used by <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue. ">CLScheduler</a> to keep track of the best LWS for each configuration of the same kernel. The configuration ID should be provided only for the kernels potentially affected by the LWS geometry</dd>
<dd>
This method should be called after the configuration of the kernel</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>configuration id string </dd></dl>

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">155</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#a0f68015f649819f1102aa73d7b88b29e">arm_compute::enqueue()</a>, <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#abca336f832d730e8494049bd714df60a">ICLKernel::get_max_workgroup_size()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a646cd535a16835b246c3367a63d96250">ICLKernel::get_target()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a4b4a20e518c04e657839280cd486a85d">ICLKernel::gws_from_window()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ae5121015ab09ece4d470f50c7ffe198e">ICLKernel::kernel()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">ICLKernel::set_target()</a>, and <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353">IKernel::window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> _config_id;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abca336f832d730e8494049bd714df60a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_max_workgroup_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the maximum workgroup size for the device the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> uses. </p>
<dl class="section return"><dt>Returns</dt><dd>The maximum workgroup size value. </dd></dl>

<p>Referenced by <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel::config_id()</a>.</p>

</div>
</div>
<a class="anchor" id="a646cd535a16835b246c3367a63d96250"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> get_target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the targeted GPU architecture. </p>
<dl class="section return"><dt>Returns</dt><dd>The targeted GPU architecture. </dd></dl>

<p>Referenced by <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel::config_id()</a>.</p>

</div>
</div>
<a class="anchor" id="a4b4a20e518c04e657839280cd486a85d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl::NDRange gws_from_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the global work size given an execution window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Global work size of the given execution window </dd></dl>

<p>Referenced by <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel::config_id()</a>.</p>

</div>
</div>
<a class="anchor" id="ae5121015ab09ece4d470f50c7ffe198e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Kernel&amp; kernel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a reference to the OpenCL kernel of this object. </p>
<dl class="section return"><dt>Returns</dt><dd>A reference to the OpenCL kernel of this object. </dd></dl>

<p>Referenced by <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel::config_id()</a>.</p>

</div>
</div>
<a class="anchor" id="a99fde125501fae43952af222c91236cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_arguments_per_1D_array </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 1D array object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 1D array object. </dd></dl>

</div>
</div>
<a class="anchor" id="a770f45838881fc061294e56d64f34386"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_arguments_per_1D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 1D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 1D tensor object. </dd></dl>

</div>
</div>
<a class="anchor" id="ac734502531e7f95e25b3bf688a304a59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_arguments_per_2D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 2D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 2D tensor object. </dd></dl>

</div>
</div>
<a class="anchor" id="a4feaae9c860cddfa843d37c953674a22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_arguments_per_3D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 3D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 3D tensor object. </dd></dl>

</div>
</div>
<a class="anchor" id="af24df23a978e1a46ff6714e9b9d3eef9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_arguments_per_4D_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of arguments enqueued per 4D tensor object. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of arguments enqueues per 4D tensor object. </dd></dl>

</div>
</div>
<a class="anchor" id="af6a174d47571f51f199ffc27ecc10f51"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::CommandQueue &amp;&#160;</td>
          <td class="paramname"><em>queue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue. </p>
<dl class="section note"><dt>Note</dt><dd>The queue is <em>not</em> flushed by this method, and therefore the kernel will not have been executed by the time this method returns.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a valid region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a3f5646133956f06348b310ccc3d36353" title="The maximum window the kernel can be executed on. ">window()</a>). </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">queue</td><td>Command queue on which to enqueue the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_logits1_d_norm_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLogits1DNormKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLKTrackerStage1Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_convolution_rectangle_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLConvolutionRectangleKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_logits1_d_max_shift_exp_sum_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLogits1DMaxShiftExpSumKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLKTrackerStage0Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_edge_trace_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLEdgeTraceKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_copy_to_array_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLCopyToArrayKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLKTrackerFinalizeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_sobel5x5_vert_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSobel5x5VertKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_sobel7x7_vert_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSobel7x7VertKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_h_o_g_block_normalization_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLHOGBlockNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_min_max_location_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMinMaxLocationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_edge_non_max_suppression_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLEdgeNonMaxSuppressionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_b_reduction_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpMatrixBReductionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGaussianPyramidVertKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_histogram_border_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLHistogramBorderKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLogits1DShiftExpSumKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_init_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLKTrackerInitKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDirectConvolutionLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBatchNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_im2_col_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_color_convert_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLColorConvertKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMTranspose1xWKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLPixelWiseMultiplicationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_col2_im_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLCol2ImKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLArithmeticSubtractionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpMatrixAReductionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_scharr3x3_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLScharr3x3Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLArithmeticAdditionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_channel_combine_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLChannelCombineKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMInterleave4x4Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpOffsetContributionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_h_o_g_detector_kernel.xhtml#ac8f1ca778b425c6408a93b672b041dd0">CLHOGDetectorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_harris_score_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLHarrisScoreKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_pooling_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLPoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_activation_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLActivationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_fast_corners_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFastCornersKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_channel_extract_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLChannelExtractKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_integral_image_vert_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLIntegralImageVertKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLROIPoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depth_concatenate_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthConcatenateLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMLowpMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMagnitudePhaseKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depthwise_im2_col_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthwiseIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMeanStdDevKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_absolute_difference_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLAbsoluteDifferenceKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depthwise_vector_to_tensor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthwiseVectorToTensorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_dequantization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDequantizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_min_max_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMinMaxLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMMatrixAdditionKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_h_o_g_orientation_binning_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLHOGOrientationBinningKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLL2NormalizeLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_quantization_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLQuantizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_sobel5x5_hor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSobel5x5HorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_sobel7x7_hor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSobel7x7HorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_derivative_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDerivativeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLReductionOperationKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_sobel3x3_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLSobel3x3Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_bitwise_and_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBitwiseAndKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_bitwise_or_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBitwiseOrKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_bitwise_xor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLBitwiseXorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthwiseConvolutionLayer3x3Kernel</a>, <a class="el" href="classarm__compute_1_1_c_l_depthwise_weights_reshape_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLDepthwiseWeightsReshapeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_locally_connected_matrix_multiply_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLLocallyConnectedMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_min_max_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLMinMaxKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_remap_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLRemapKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_gradient_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGradientKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGaussianPyramidHorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_histogram_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLHistogramKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_weights_reshape_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLWeightsReshapeKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_reshape_layer_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLReshapeLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_floor_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLFloorKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_vector_multiply_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMMatrixVectorMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">CLGEMMMatrixAccumulateBiasesKernel</a>, <a class="el" href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">ICLSimple3DKernel</a>, and <a class="el" href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml#a493987e85723a8000eb26d1f00e2ad0e">ICLSimple2DKernel</a>.</p>

</div>
</div>
<a class="anchor" id="a44c701b9dbd01a171de4928254d1ecbf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_lws_hint </td>
          <td>(</td>
          <td class="paramtype">cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>lws_hint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the Local-Workgroup-Size hint. </p>
<dl class="section note"><dt>Note</dt><dd>This method should be called after the configuration of the kernel</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lws_hint</td><td>Local-Workgroup-Size to use </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00140">140</a> of file <a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        _lws_hint = lws_hint;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad5ba9d34a3a855bf1dd2e36316ff550a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the targeted GPU architecture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>The targeted GPU architecture </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="_i_c_l_kernel_8h_source.xhtml#l00155">ICLKernel::config_id()</a>.</p>

</div>
</div>
<a class="anchor" id="a57e5f498fcbfc25c28b8496dfa3fc33c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype">cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the targeted GPU architecture according to the CL device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/CL/<a class="el" href="_i_c_l_kernel_8h_source.xhtml">ICLKernel.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
