<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/AssetsLibrary.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assets_library_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">AssetsLibrary.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_assets_library_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_TENSOR_LIBRARY_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_TENSOR_LIBRARY_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;libnpy/npy.hpp&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_raw_tensor_8h.xhtml">tests/RawTensor.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_cache_8h.xhtml">tests/TensorCache.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8h.xhtml">tests/framework/Exceptions.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml">   58</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> final</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#adb53338108890e6b7354e16a1e9ae716">AssetsLibrary</a>(std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9b67b266207227062c7a2961ef85293a">path</a>, std::random_device::result_type <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a4035a1140831801ced5dfa1d9fe6988a">seed</a>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9b67b266207227062c7a2961ef85293a">path</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::random_device::result_type <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a4035a1140831801ced5dfa1d9fe6988a">seed</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#acc474b96886b5fd500460c7b25dc84fa">get_image_shape</a>(<span class="keyword">const</span> std::string &amp;name);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name) <span class="keyword">const</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>, <span class="keywordtype">int</span> num_channels = 1) <span class="keyword">const</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9a6d9b68649fb7444ca36b5c651dfdda">fill_borders_with_garbage</a>(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, D &amp;&amp;distribution, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset, D low, D high) <span class="keyword">const</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ad85dc4c57a27c44d114c573b9a80bad6">fill_layer_data</a>(T &amp;&amp;tensor, std::string name) <span class="keyword">const</span>;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">// Function prototype to convert between image formats.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">using</span> Converter = void (*)(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Function prototype to extract a channel from an image.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">using</span> Extractor = void (*)(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Function prototype to load an image file.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">using</span> Loader = <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> (*)(<span class="keyword">const</span> std::string &amp;<a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9b67b266207227062c7a2961ef85293a">path</a>);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> src, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> dst) <span class="keyword">const</span>;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dst) <span class="keyword">const</span>;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> src, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dst) <span class="keyword">const</span>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> Extractor &amp;get_extractor(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">const</span> Loader &amp;get_loader(<span class="keyword">const</span> std::string &amp;extension) <span class="keyword">const</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> load_image(<span class="keyword">const</span> std::string &amp;name) <span class="keyword">const</span>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;find_or_create_raw_tensor(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;find_or_create_raw_tensor(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">mutable</span> <a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">TensorCache</a>             _cache{};</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">mutable</span> std::mutex              _format_lock{};</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">mutable</span> std::mutex              _channel_lock{};</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">const</span> std::string               _library_path;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    std::random_device::result_type _seed;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;};</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9a6d9b68649fb7444ca36b5c651dfdda">  377</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9a6d9b68649fb7444ca36b5c651dfdda">AssetsLibrary::fill_borders_with_garbage</a>(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> padding_size = tensor.padding();</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(0, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(-padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, tensor.shape()[0] + padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>, 1));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">if</span>(tensor.shape().num_dimensions() &gt; 1)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(-padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, tensor.shape()[1] + padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>, 1));</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    std::mt19937 gen(_seed);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = tensor.shape();</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="comment">// If outside of valid region</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &lt; 0 || <span class="keywordtype">id</span>.x() &gt;= static_cast&lt;int&gt;(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>()) || <span class="keywordtype">id</span>.y() &lt; 0 || <span class="keywordtype">id</span>.y() &gt;= <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>()))</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keyword">using</span> ResultType         = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keyword">const</span> ResultType <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>   = distribution(gen);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keywordtype">void</span> *<span class="keyword">const</span>      out_ptr = tensor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(out_ptr, value, tensor.data_type());</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    });</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">  406</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">AssetsLibrary::fill</a>(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; tensor.shape().num_dimensions(); ++d)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, tensor.shape()[d], 1));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keyword">using</span> ResultType         = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keyword">const</span> ResultType <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>   = distribution(gen);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordtype">void</span> *<span class="keyword">const</span>      out_ptr = tensor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(out_ptr, value, tensor.data_type());</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    });</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9a6d9b68649fb7444ca36b5c651dfdda">fill_borders_with_garbage</a>(tensor, distribution, seed_offset);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a935d861fcffb0099b001498c494daaf6">  428</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">AssetsLibrary::fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, D &amp;&amp;distribution, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keyword">using</span> ResultType       = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> ResultType <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a> = distribution(gen);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">data</a>() + <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>());</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a5ee4fc10b84f941236df524f618b96c6">  441</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)<span class="keyword"> const</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw = <span class="keyword">get</span>(name, format);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> / raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">const</span> raw_ptr = raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">data</a>() + <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                         out_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        std::copy_n(raw_ptr, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), out_ptr);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a4d049b9a5aba1f30b51f4bd36c3db076">  456</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)<span class="keyword"> const</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(std::forward&lt;T&gt;(tensor), name, <a class="code" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a>(channel), channel);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a36a9ddc6792949fb561cd788e6e31208">  462</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)<span class="keyword"> const</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw = <span class="keyword">get</span>(name, format, channel);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> / raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">const</span> raw_ptr = raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">data</a>() + <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                         out_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        std::copy_n(raw_ptr, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), out_ptr);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00477"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">  477</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">AssetsLibrary::fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            std::uniform_int_distribution&lt;uint8_t&gt; distribution_u8(std::numeric_limits&lt;uint8_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;uint8_t&gt;::max</a>());</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u8, seed_offset);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>:</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            std::uniform_int_distribution&lt;int8_t&gt; distribution_s8(std::numeric_limits&lt;int8_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;int8_t&gt;::max</a>());</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s8, seed_offset);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        }</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            std::uniform_int_distribution&lt;uint16_t&gt; distribution_u16(std::numeric_limits&lt;uint16_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;uint16_t&gt;::max</a>());</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u16, seed_offset);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">DataType::QS16</a>:</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            std::uniform_int_distribution&lt;int16_t&gt; distribution_s16(std::numeric_limits&lt;int16_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;int16_t&gt;::max</a>());</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s16, seed_offset);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u32(std::numeric_limits&lt;uint32_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;uint32_t&gt;::max</a>());</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u32, seed_offset);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s32(std::numeric_limits&lt;int32_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;int32_t&gt;::max</a>());</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s32, seed_offset);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        }</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            std::uniform_int_distribution&lt;uint64_t&gt; distribution_u64(std::numeric_limits&lt;uint64_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;uint64_t&gt;::max</a>());</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u64, seed_offset);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            std::uniform_int_distribution&lt;int64_t&gt; distribution_s64(std::numeric_limits&lt;int64_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;int64_t&gt;::max</a>());</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s64, seed_offset);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f16(-100.f, 100.f);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f16, seed_offset);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        {</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f32(-1000.f, 1000.f);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f32, seed_offset);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        {</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            std::uniform_real_distribution&lt;double&gt; distribution_f64(-1000.f, 1000.f);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f64, seed_offset);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            std::uniform_int_distribution&lt;size_t&gt; distribution_sizet(std::numeric_limits&lt;size_t&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;size_t&gt;::max</a>());</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_sizet, seed_offset);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    }</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;}</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00565"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a150d2023c197e197f09f350ede795085">  565</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">AssetsLibrary::fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset, D low, D high)<span class="keyword"> const</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;uint8_t, D&gt;::value</a>));</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            std::uniform_int_distribution&lt;uint8_t&gt; distribution_u8(low, high);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u8, seed_offset);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        }</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>:</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        {</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;int8_t, D&gt;::value</a>));</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            std::uniform_int_distribution&lt;int8_t&gt; distribution_s8(low, high);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s8, seed_offset);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        {</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;uint16_t, D&gt;::value</a>));</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            std::uniform_int_distribution&lt;uint16_t&gt; distribution_u16(low, high);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u16, seed_offset);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">DataType::QS16</a>:</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;int16_t, D&gt;::value</a>));</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            std::uniform_int_distribution&lt;int16_t&gt; distribution_s16(low, high);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s16, seed_offset);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;uint32_t, D&gt;::value</a>));</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u32(low, high);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u32, seed_offset);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        {</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;int32_t, D&gt;::value</a>));</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s32(low, high);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s32, seed_offset);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        }</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        {</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;uint64_t, D&gt;::value</a>));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            std::uniform_int_distribution&lt;uint64_t&gt; distribution_u64(low, high);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_u64, seed_offset);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        }</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;int64_t, D&gt;::value</a>));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            std::uniform_int_distribution&lt;int64_t&gt; distribution_s64(low, high);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_s64, seed_offset);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        {</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f16(low, high);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f16, seed_offset);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;float, D&gt;::value</a>));</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f32(low, high);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f32, seed_offset);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        }</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;double, D&gt;::value</a>));</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            std::uniform_real_distribution&lt;double&gt; distribution_f64(low, high);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_f64, seed_offset);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">std::is_same&lt;size_t, D&gt;::value</a>));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            std::uniform_int_distribution&lt;size_t&gt; distribution_sizet(low, high);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">fill</a>(tensor, distribution_sizet, seed_offset);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    }</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00661"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ad85dc4c57a27c44d114c573b9a80bad6">  661</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ad85dc4c57a27c44d114c573b9a80bad6">AssetsLibrary::fill_layer_data</a>(T &amp;&amp;tensor, std::string name)<span class="keyword"> const</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> std::string path_separator(<span class="stringliteral">&quot;\\&quot;</span>);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* _WIN32 */</span><span class="preprocessor"></span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">const</span> std::string path_separator(<span class="stringliteral">&quot;/&quot;</span>);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* _WIN32 */</span><span class="preprocessor"></span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">const</span> std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9b67b266207227062c7a2961ef85293a">path</a> = _library_path + path_separator + name;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    std::vector&lt;unsigned long&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// Open file</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    std::ifstream stream(path, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordflow">if</span>(!stream.good())</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_file_not_found.xhtml">framework::FileNotFound</a>(<span class="stringliteral">&quot;Could not load npy file: &quot;</span> + path);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    std::string <a class="code" href="hwc_8hpp.xhtml#a9d9174de5edba1e56fbfd90dc5e60f75">header</a> = npy::read_header(stream);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">// Parse header</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordtype">bool</span>        fortran_order = <span class="keyword">false</span>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    std::string typestr;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    npy::parse_header(header, typestr, fortran_order, shape);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="comment">// Check if the typestring matches the given one</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    std::string expect_typestr = <a class="code" href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">get_typestring</a>(tensor.data_type());</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(typestr != expect_typestr, <span class="stringliteral">&quot;Typestrings mismatch&quot;</span>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="comment">// Validate tensor shape</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(shape.size() != tensor.shape().num_dimensions(), <span class="stringliteral">&quot;Tensor ranks mismatch&quot;</span>);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">if</span>(fortran_order)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; shape.size(); ++i)</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(tensor.shape()[i] != shape[i], <span class="stringliteral">&quot;Tensor dimensions mismatch&quot;</span>);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        }</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    }</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    {</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; shape.size(); ++i)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(tensor.shape()[i] != shape[shape.size() - i - 1], <span class="stringliteral">&quot;Tensor dimensions mismatch&quot;</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        }</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="comment">// Read data</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">if</span>(tensor.padding().empty())</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    {</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="comment">// If tensor has no padding read directly from stream.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        stream.read(reinterpret_cast&lt;char *&gt;(tensor.data()), tensor.size());</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    }</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="comment">// If tensor has padding accessing tensor elements through execution window.</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor.shape());</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        {</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            stream.read(reinterpret_cast&lt;char *&gt;(tensor(<span class="keywordtype">id</span>)), tensor.element_size());</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        });</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    }</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;}</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_TEST_TENSOR_LIBRARY_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00262">Types.h:262</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">arm_compute::DataType::QS16</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_min_max_location_8cpp_source.xhtml#l00089">MinMaxLocation.cpp:89</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Subclass of SimpleTensor using uint8_t as value type. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00038">RawTensor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_abb6f25295592e886976520216187eed7"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#abb6f25295592e886976520216187eed7">arm_compute::test::AssetsLibrary::fill_tensor_uniform</a></div><div class="ttdeci">void fill_tensor_uniform(T &amp;&amp;tensor, std::random_device::result_type seed_offset) const </div><div class="ttdoc">Fill a tensor with uniform distribution across the range of its type. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00477">AssetsLibrary.h:477</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_tensor_cache_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">arm_compute::test::TensorCache</a></div><div class="ttdoc">Stores RawTensor categorised by the image they are created from including name, format and channel...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_cache_8h_source.xhtml#l00040">TensorCache.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a80a7b5ae084bf22b91bc5f68a06711c0"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a80a7b5ae084bf22b91bc5f68a06711c0">arm_compute::test::AssetsLibrary::fill</a></div><div class="ttdeci">void fill(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) const </div><div class="ttdoc">Fills the specified tensor with random values drawn from distribution. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00406">AssetsLibrary.h:406</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a9d9174de5edba1e56fbfd90dc5e60f75"><div class="ttname"><a href="hwc_8hpp.xhtml#a9d9174de5edba1e56fbfd90dc5e60f75">header</a></div><div class="ttdeci">union kbase_uk_hwcnt_header header</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00261">hwc.hpp:261</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ad7701a09a964eab360a8e51fa7ad2c16"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">arm_compute::test::SimpleTensor::size</a></div><div class="ttdeci">size_t size() const override</div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00268">SimpleTensor.h:268</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">arm_compute::DataType::QS8</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml"><div class="ttname"><a href="core_2_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00198">Types.h:198</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml">arm_compute::test::AssetsLibrary</a></div><div class="ttdoc">Factory class to create and fill tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00058">AssetsLibrary.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_aa337ab76176f3c4193642ac6de3a61cf"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">arm_compute::test::get_format_for_channel</a></div><div class="ttdeci">Format get_format_for_channel(Channel channel)</div><div class="ttdoc">Look up the format corresponding to a channel. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00123">Utils.h:123</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00238">Error.h:238</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00281">SimpleTensor.h:281</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00068">Window.h:68</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a4035a1140831801ced5dfa1d9fe6988a"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a4035a1140831801ced5dfa1d9fe6988a">arm_compute::test::AssetsLibrary::seed</a></div><div class="ttdeci">std::random_device::result_type seed() const </div><div class="ttdoc">Seed that is used to fill tensors with random values. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00199">AssetsLibrary.cpp:199</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00264">Types.h:264</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00244">SimpleTensor.h:244</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_acc474b96886b5fd500460c7b25dc84fa"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#acc474b96886b5fd500460c7b25dc84fa">arm_compute::test::AssetsLibrary::get_image_shape</a></div><div class="ttdeci">TensorShape get_image_shape(const std::string &amp;name)</div><div class="ttdoc">Provides a tensor shape for the specified image. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00395">AssetsLibrary.cpp:395</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor&amp;#39;s dimensions to fill the window dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00204">Window.inl:204</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a9b67b266207227062c7a2961ef85293a"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9b67b266207227062c7a2961ef85293a">arm_compute::test::AssetsLibrary::path</a></div><div class="ttdeci">std::string path() const </div><div class="ttdoc">Path to assets directory used to initialise library. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00194">AssetsLibrary.cpp:194</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a9a6d9b68649fb7444ca36b5c651dfdda"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a9a6d9b68649fb7444ca36b5c651dfdda">arm_compute::test::AssetsLibrary::fill_borders_with_garbage</a></div><div class="ttdeci">void fill_borders_with_garbage(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) const </div><div class="ttdoc">Puts garbage values all around the tensor for testing purposes. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00377">AssetsLibrary.h:377</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2ad7f431e3446fddcd9b6b9f93c4c14"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_min_max_location_8cpp_source.xhtml#l00090">MinMaxLocation.cpp:90</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a1e6934e95738573214c2ce1d6648d116"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">arm_compute::test::store_value_with_data_type</a></div><div class="ttdeci">void store_value_with_data_type(void *ptr, T value, DataType data_type)</div><div class="ttdoc">Write the value after casting the pointer according to data_type. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00289">Utils.h:289</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a0c52a8f0085b55d907af7210ef2069d0"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">arm_compute::test::SimpleTensor::data</a></div><div class="ttdeci">const T * data() const </div><div class="ttdoc">Constant pointer to the underlying buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00327">SimpleTensor.h:327</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00370">Types.h:370</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00049">Types.h:49</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00127">Helpers.inl:127</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::value_type</a></div><div class="ttdeci">uint8_t value_type</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00099">SimpleTensor.h:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_file_not_found_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_file_not_found.xhtml">arm_compute::test::framework::FileNotFound</a></div><div class="ttdoc">Error class for when some external assets are missing. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00067">Exceptions.h:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">Tensor dst</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">GEMM.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00040">Window.inl:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00384">Utils.h:384</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00265">Types.h:265</a></div></div>
<div class="ttc" id="_tensor_cache_8h_xhtml"><div class="ttname"><a href="_tensor_cache_8h.xhtml">TensorCache.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00263">Types.h:263</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_ae47155d6186155ec4da9295764b3c05a"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">arm_compute::test::get_typestring</a></div><div class="ttdeci">std::string get_typestring(DataType data_type)</div><div class="ttdoc">Obtain numpy type string from DataType. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00525">Utils.h:525</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_ad85dc4c57a27c44d114c573b9a80bad6"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#ad85dc4c57a27c44d114c573b9a80bad6">arm_compute::test::AssetsLibrary::fill_layer_data</a></div><div class="ttdeci">void fill_layer_data(T &amp;&amp;tensor, std::string name) const </div><div class="ttdoc">Fills the specified tensor with data loaded from .npy (numpy binary) in specified path...</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00661">AssetsLibrary.h:661</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00297">Error.h:297</a></div></div>
<div class="ttc" id="_exceptions_8h_xhtml"><div class="ttname"><a href="_exceptions_8h.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00889">FixedPoint.h:889</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div></div>
<div class="ttc" id="_raw_tensor_8h_xhtml"><div class="ttname"><a href="_raw_tensor_8h.xhtml">RawTensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_adb53338108890e6b7354e16a1e9ae716"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#adb53338108890e6b7354e16a1e9ae716">arm_compute::test::AssetsLibrary::AssetsLibrary</a></div><div class="ttdeci">AssetsLibrary(std::string path, std::random_device::result_type seed)</div><div class="ttdoc">Initialises the library with a path to the assets directory. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00188">AssetsLibrary.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_assets_library_8h.xhtml">AssetsLibrary.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
