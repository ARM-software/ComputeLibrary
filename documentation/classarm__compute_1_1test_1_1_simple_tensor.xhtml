<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: SimpleTensor&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1_simple_tensor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">SimpleTensor&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Simple tensor object that stores elements in a consecutive chunk of memory.  
 <a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for SimpleTensor&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1test_1_1_simple_tensor__coll__graph.svg" width="155" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:afb9ded5f49336ae503bb9f2035ea902b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = T</td></tr>
<tr class="separator:afb9ded5f49336ae503bb9f2035ea902b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf18a24d1f21176e811e88cee2a70f1f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#acf18a24d1f21176e811e88cee2a70f1f">Buffer</a> = std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a>[]&gt;</td></tr>
<tr class="separator:acf18a24d1f21176e811e88cee2a70f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a011bb65bd16aaf66b8efb3929692b2ce"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">SimpleTensor</a> ()=default</td></tr>
<tr class="memdesc:a011bb65bd16aaf66b8efb3929692b2ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor.  <a href="#a011bb65bd16aaf66b8efb3929692b2ce">More...</a><br /></td></tr>
<tr class="separator:a011bb65bd16aaf66b8efb3929692b2ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1cd44d7621633f8ae04a3a16287673"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a1cd44d7621633f8ae04a3a16287673">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:a9a1cd44d7621633f8ae04a3a16287673"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>.  <a href="#a9a1cd44d7621633f8ae04a3a16287673">More...</a><br /></td></tr>
<tr class="separator:a9a1cd44d7621633f8ae04a3a16287673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595bc6006e098a6564cbc270eaac9667"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a595bc6006e098a6564cbc270eaac9667">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>=1, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0, <a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>=<a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a595bc6006e098a6564cbc270eaac9667"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type.  <a href="#a595bc6006e098a6564cbc270eaac9667">More...</a><br /></td></tr>
<tr class="separator:a595bc6006e098a6564cbc270eaac9667"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1769959044a4356fdc93cac2b03a5f6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ae1769959044a4356fdc93cac2b03a5f6">SimpleTensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;tensor)</td></tr>
<tr class="memdesc:ae1769959044a4356fdc93cac2b03a5f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ae1769959044a4356fdc93cac2b03a5f6">More...</a><br /></td></tr>
<tr class="separator:ae1769959044a4356fdc93cac2b03a5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4622eda610d53fb6852209f0213aeed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad4622eda610d53fb6852209f0213aeed">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> tensor)</td></tr>
<tr class="memdesc:ad4622eda610d53fb6852209f0213aeed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ad4622eda610d53fb6852209f0213aeed">More...</a><br /></td></tr>
<tr class="separator:ad4622eda610d53fb6852209f0213aeed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40eed42b5858849fb8570018760ba996"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a40eed42b5858849fb8570018760ba996">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a40eed42b5858849fb8570018760ba996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16d7ecd97f89cf9dc40b3fc7c9abe2cd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a16d7ecd97f89cf9dc40b3fc7c9abe2cd">~SimpleTensor</a> ()=default</td></tr>
<tr class="separator:a16d7ecd97f89cf9dc40b3fc7c9abe2cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6124c81d1e81f182d64ae76caa3fa52"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#af6124c81d1e81f182d64ae76caa3fa52">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:af6124c81d1e81f182d64ae76caa3fa52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return value at <code>offset</code> in the buffer.  <a href="#af6124c81d1e81f182d64ae76caa3fa52">More...</a><br /></td></tr>
<tr class="separator:af6124c81d1e81f182d64ae76caa3fa52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73aecdf45b3f257e0c15757a18573ea4"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a73aecdf45b3f257e0c15757a18573ea4">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) const </td></tr>
<tr class="memdesc:a73aecdf45b3f257e0c15757a18573ea4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return constant value at <code>offset</code> in the buffer.  <a href="#a73aecdf45b3f257e0c15757a18573ea4">More...</a><br /></td></tr>
<tr class="separator:a73aecdf45b3f257e0c15757a18573ea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba5871b3e4a65d057ec1c28fce8b00ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a> () const override</td></tr>
<tr class="memdesc:aba5871b3e4a65d057ec1c28fce8b00ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shape of the tensor.  <a href="#aba5871b3e4a65d057ec1c28fce8b00ba">More...</a><br /></td></tr>
<tr class="separator:aba5871b3e4a65d057ec1c28fce8b00ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b67b578f684c4d516843c9dea86a23"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a> () const override</td></tr>
<tr class="memdesc:a62b67b578f684c4d516843c9dea86a23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of each element in the tensor in bytes.  <a href="#a62b67b578f684c4d516843c9dea86a23">More...</a><br /></td></tr>
<tr class="separator:a62b67b578f684c4d516843c9dea86a23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7701a09a964eab360a8e51fa7ad2c16"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a> () const override</td></tr>
<tr class="memdesc:ad7701a09a964eab360a8e51fa7ad2c16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Total size of the tensor in bytes.  <a href="#ad7701a09a964eab360a8e51fa7ad2c16">More...</a><br /></td></tr>
<tr class="separator:ad7701a09a964eab360a8e51fa7ad2c16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a> () const override</td></tr>
<tr class="memdesc:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> format of the tensor.  <a href="#ac4b36cc1e56b0b7e579bb4b7196490db">More...</a><br /></td></tr>
<tr class="separator:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a3e72153aeb3ed212e9c3698774e881"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a> () const override</td></tr>
<tr class="memdesc:a9a3e72153aeb3ed212e9c3698774e881"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type of the tensor.  <a href="#a9a3e72153aeb3ed212e9c3698774e881">More...</a><br /></td></tr>
<tr class="separator:a9a3e72153aeb3ed212e9c3698774e881"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdd3637f2bbde9d7d0cc0b7bbd8400bb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a> () const override</td></tr>
<tr class="memdesc:abdd3637f2bbde9d7d0cc0b7bbd8400bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of channels of the tensor.  <a href="#abdd3637f2bbde9d7d0cc0b7bbd8400bb">More...</a><br /></td></tr>
<tr class="separator:abdd3637f2bbde9d7d0cc0b7bbd8400bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedcfdd4c3b92fe0d63b5463c7ad1d21e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a> () const override</td></tr>
<tr class="memdesc:aedcfdd4c3b92fe0d63b5463c7ad1d21e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of elements of the tensor.  <a href="#aedcfdd4c3b92fe0d63b5463c7ad1d21e">More...</a><br /></td></tr>
<tr class="separator:aedcfdd4c3b92fe0d63b5463c7ad1d21e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e20eacb1e963e24a21ebd7369effd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a> () const override</td></tr>
<tr class="memdesc:a79e20eacb1e963e24a21ebd7369effd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available padding around the tensor.  <a href="#a79e20eacb1e963e24a21ebd7369effd7">More...</a><br /></td></tr>
<tr class="separator:a79e20eacb1e963e24a21ebd7369effd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ccf2eb0c18a15feab2db98b307b78b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a> () const override</td></tr>
<tr class="memdesc:a35ccf2eb0c18a15feab2db98b307b78b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of bits for the fractional part of the fixed point numbers.  <a href="#a35ccf2eb0c18a15feab2db98b307b78b">More...</a><br /></td></tr>
<tr class="separator:a35ccf2eb0c18a15feab2db98b307b78b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74736e3863207232a23b7181c1d0f44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a> () const override</td></tr>
<tr class="memdesc:ac74736e3863207232a23b7181c1d0f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantization info in case of asymmetric quantized type.  <a href="#ac74736e3863207232a23b7181c1d0f44">More...</a><br /></td></tr>
<tr class="separator:ac74736e3863207232a23b7181c1d0f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c52a8f0085b55d907af7210ef2069d0"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">data</a> () const </td></tr>
<tr class="memdesc:a0c52a8f0085b55d907af7210ef2069d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant pointer to the underlying buffer.  <a href="#a0c52a8f0085b55d907af7210ef2069d0">More...</a><br /></td></tr>
<tr class="separator:a0c52a8f0085b55d907af7210ef2069d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1e16b293a89a9ccc9541058b5ca560"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#adc1e16b293a89a9ccc9541058b5ca560">data</a> ()</td></tr>
<tr class="memdesc:adc1e16b293a89a9ccc9541058b5ca560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the underlying buffer.  <a href="#adc1e16b293a89a9ccc9541058b5ca560">More...</a><br /></td></tr>
<tr class="separator:adc1e16b293a89a9ccc9541058b5ca560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39537b09ccc3ce3d17922f4ef49a123f"><td class="memItemLeft" align="right" valign="top">const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a39537b09ccc3ce3d17922f4ef49a123f">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) const override</td></tr>
<tr class="memdesc:a39537b09ccc3ce3d17922f4ef49a123f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to the specified element.  <a href="#a39537b09ccc3ce3d17922f4ef49a123f">More...</a><br /></td></tr>
<tr class="separator:a39537b09ccc3ce3d17922f4ef49a123f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2df95f7046b81e69a1265a42202ea068"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a2df95f7046b81e69a1265a42202ea068">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) override</td></tr>
<tr class="memdesc:a2df95f7046b81e69a1265a42202ea068"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the specified element.  <a href="#a2df95f7046b81e69a1265a42202ea068">More...</a><br /></td></tr>
<tr class="separator:a2df95f7046b81e69a1265a42202ea068"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1test_1_1_i_accessor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a></td></tr>
<tr class="memitem:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a04e5197de7318cec1ebfd3cea50f5de5">~IAccessor</a> ()=default</td></tr>
<tr class="memdesc:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a04e5197de7318cec1ebfd3cea50f5de5">More...</a><br /></td></tr>
<tr class="separator:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a467ad6d14558452f498777a7823fa252"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a467ad6d14558452f498777a7823fa252">RawTensor</a></td></tr>
<tr class="separator:a467ad6d14558452f498777a7823fa252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51920d34b0fa5415e84891ad8e755224"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:a51920d34b0fa5415e84891ad8e755224"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor1, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor2)</td></tr>
<tr class="memdesc:a51920d34b0fa5415e84891ad8e755224"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the content of the provided tensors.  <a href="#a51920d34b0fa5415e84891ad8e755224">More...</a><br /></td></tr>
<tr class="separator:a51920d34b0fa5415e84891ad8e755224"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class arm_compute::test::SimpleTensor&lt; T &gt;</h3>

<p>Simple tensor object that stores elements in a consecutive chunk of memory. </p>
<p>It can be created by either loading an image from a file which also initialises the content of the tensor or by explcitly specifying the size. The latter leaves the content uninitialised.</p>
<p>Furthermore, the class provides methods to convert the tensor's values into different image format. </p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00059">59</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="acf18a24d1f21176e811e88cee2a70f1f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#acf18a24d1f21176e811e88cee2a70f1f">Buffer</a> =  std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a>[]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

</div>
</div>
<a class="anchor" id="afb9ded5f49336ae503bb9f2035ea902b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00099">99</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a011bb65bd16aaf66b8efb3929692b2ce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an uninitialised tensor. </p>

</div>
</div>
<a class="anchor" id="a9a1cd44d7621633f8ae04a3a16287673"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00187">187</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      _shape(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      _format(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>),</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      _fixed_point_position(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>),</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      _quantization_info()</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    _buffer = support::cpp14::make_unique&lt;T[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::test::SimpleTensor::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Image format of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00275">SimpleTensor.h:275</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00244">SimpleTensor.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a35ccf2eb0c18a15feab2db98b307b78b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">arm_compute::test::SimpleTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const override</div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00256">SimpleTensor.h:256</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a595bc6006e098a6564cbc270eaac9667"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em> = <code><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) Number of channels (default = 1). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers (default = 0). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>(Optional) Quantization info for asymmetric quantization (default = empty). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00198">198</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      _shape(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      _data_type(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      _num_channels(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>),</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      _fixed_point_position(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      _quantization_info(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    _buffer = support::cpp14::make_unique&lt;T[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>() * this-&gt;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00281">SimpleTensor.h:281</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00244">SimpleTensor.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::test::SimpleTensor::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Quantization info in case of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00262">SimpleTensor.h:262</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a35ccf2eb0c18a15feab2db98b307b78b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">arm_compute::test::SimpleTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const override</div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00256">SimpleTensor.h:256</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae1769959044a4356fdc93cac2b03a5f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the given <code>tensor</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>To be copied tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00210">210</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00327">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      _shape(tensor.shape()),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      _format(tensor.format()),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      _data_type(tensor.data_type()),</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      _num_channels(tensor.num_channels()),</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      _fixed_point_position(tensor.fixed_point_position()),</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      _quantization_info(tensor.quantization_info())</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    _buffer = support::cpp14::make_unique&lt;T[]&gt;(tensor.num_elements() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>());</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::copy_n(tensor.data(), <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>(), _buffer.get());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a40eed42b5858849fb8570018760ba996"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a16d7ecd97f89cf9dc40b3fc7c9abe2cd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a0c52a8f0085b55d907af7210ef2069d0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const T * data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant pointer to the underlying buffer. </p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00327">327</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="reference_2_depth_concatenate_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::depthconcatenate_layer()</a>, <a class="el" href="validation_2reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00053">arm_compute::test::validation::reference::depthwise_convolution()</a>, <a class="el" href="_assets_library_8cpp_source.xhtml#l00204">AssetsLibrary::fill()</a>, <a class="el" href="_flatten_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::flatten_layer()</a>, <a class="el" href="_g_e_m_m_interleave4x4_8h_source.xhtml#l00038">arm_compute::test::validation::reference::gemm_interleave_4x4()</a>, <a class="el" href="reference_2_l2_normalize_layer_8cpp_source.xhtml#l00051">arm_compute::test::validation::reference::l2_normalize()</a>, <a class="el" href="reference_2_mean_std_dev_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::mean_and_standard_deviation()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00042">RawTensor::RawTensor()</a>, <a class="el" href="reference_2_reduction_operation_8cpp_source.xhtml#l00064">arm_compute::test::validation::reference::reduction_operation()</a>, <a class="el" href="reference_2_reshape_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::reshape_layer()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00210">SimpleTensor&lt; T &gt;::SimpleTensor()</a>, and <a class="el" href="validation_2reference_2_softmax_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::softmax_layer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adc1e16b293a89a9ccc9541058b5ca560"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T * data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pointer to the underlying buffer. </p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00333">333</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9a3e72153aeb3ed212e9c3698774e881"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type of the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00281">281</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00195">arm_compute::data_type_from_format()</a>, and <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p>Referenced by <a class="el" href="validation_2reference_2_activation_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::activation_layer()</a>, <a class="el" href="validation_2reference_2_batch_normalization_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::batch_normalization_layer()</a>, <a class="el" href="reference_2_bitwise_and_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_and()</a>, <a class="el" href="reference_2_bitwise_not_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_not()</a>, <a class="el" href="reference_2_bitwise_or_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_or()</a>, <a class="el" href="reference_2_bitwise_xor_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_xor()</a>, <a class="el" href="reference_2_box3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::box3x3()</a>, <a class="el" href="validation_2reference_2_convolution_layer_8cpp_source.xhtml#l00221">arm_compute::test::validation::reference::convolution_layer()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="reference_2_depth_convert_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::depth_convert()</a>, <a class="el" href="validation_2reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00053">arm_compute::test::validation::reference::depthwise_convolution()</a>, <a class="el" href="reference_2_dilate_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::dilate()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor&lt; T &gt;::element_size()</a>, <a class="el" href="reference_2_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00428">AssetsLibrary::fill()</a>, <a class="el" href="reference_2_fixed_point_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::fixed_point_operation()</a>, <a class="el" href="reference_2_fixed_point_pixel_wise_multiplication_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::fixed_point_pixel_wise_multiplication()</a>, <a class="el" href="_flatten_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::flatten_layer()</a>, <a class="el" href="validation_2reference_2_floor_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::floor_layer()</a>, <a class="el" href="validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fully_connected_layer()</a>, <a class="el" href="reference_2_gaussian3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian3x3()</a>, <a class="el" href="reference_2_gaussian5x5_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian5x5()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gemm()</a>, <a class="el" href="reference_2_l2_normalize_layer_8cpp_source.xhtml#l00051">arm_compute::test::validation::reference::l2_normalize()</a>, <a class="el" href="reference_2_magnitude_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::magnitude()</a>, <a class="el" href="reference_2_median3x3_8cpp_source.xhtml#l00044">arm_compute::test::validation::reference::median3x3()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="validation_2reference_2_normalization_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::normalization_layer()</a>, <a class="el" href="reference_2_permute_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::permute()</a>, <a class="el" href="reference_2_pixel_wise_multiplication_8cpp_source.xhtml#l00045">arm_compute::test::validation::reference::pixel_wise_multiplication()</a>, <a class="el" href="validation_2reference_2_pooling_layer_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::pooling_layer()</a>, <a class="el" href="reference_2_reduction_operation_8cpp_source.xhtml#l00064">arm_compute::test::validation::reference::reduction_operation()</a>, <a class="el" href="reference_2_remap_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::remap()</a>, <a class="el" href="reference_2_reshape_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::reshape_layer()</a>, <a class="el" href="reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale()</a>, <a class="el" href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00057">ConvolutionValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, <a class="el" href="validation_2reference_2_softmax_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::softmax_layer()</a>, <a class="el" href="reference_2_table_lookup_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::table_lookup()</a>, <a class="el" href="reference_2_threshold_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::threshold()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00069">arm_compute::test::validation::transpose()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>, <a class="el" href="reference_2_warp_affine_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::warp_affine()</a>, and <a class="el" href="reference_2_warp_perspective_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::warp_perspective()</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span>(_format != <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(_format);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">return</span> _data_type;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a59846ef5ca75cd81cdb7e8a1ce08f9db"><div class="ttname"><a href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">arm_compute::data_type_from_format</a></div><div class="ttdeci">DataType data_type_from_format(Format format)</div><div class="ttdoc">Return the data type used by a given single-planar pixel format. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00195">Utils.h:195</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a62b67b578f684c4d516843c9dea86a23"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of each element in the tensor in bytes. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">250</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00281">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00164">arm_compute::element_size_from_data_type()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>.</p>

<p>Referenced by <a class="el" href="_assets_library_8h_source.xhtml#l00428">AssetsLibrary::fill()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00030">RawTensor::RawTensor()</a>, <a class="el" href="validation_2fixtures_2_fully_connected_layer_fixture_8h_source.xhtml#l00056">FullyConnectedLayerValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T, run_interleave &gt;::setup()</a>, <a class="el" href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00057">ConvolutionValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00268">SimpleTensor&lt; T &gt;::size()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00069">arm_compute::test::validation::transpose()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>() * <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>());</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00164">Utils.h:164</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00281">SimpleTensor.h:281</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a35ccf2eb0c18a15feab2db98b307b78b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int fixed_point_position </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of bits for the fractional part of the fixed point numbers. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ab21a362740e892b6e913bd8db03b0e67">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00256">256</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2reference_2_activation_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::activation_layer()</a>, <a class="el" href="validation_2reference_2_convolution_layer_8cpp_source.xhtml#l00221">arm_compute::test::validation::reference::convolution_layer()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="reference_2_depth_convert_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::depth_convert()</a>, <a class="el" href="validation_2reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00053">arm_compute::test::validation::reference::depthwise_convolution()</a>, <a class="el" href="reference_2_fixed_point_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::fixed_point_operation()</a>, <a class="el" href="reference_2_fixed_point_pixel_wise_multiplication_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::fixed_point_pixel_wise_multiplication()</a>, <a class="el" href="_flatten_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::flatten_layer()</a>, <a class="el" href="validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fully_connected_layer()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gemm()</a>, <a class="el" href="validation_2reference_2_normalization_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::normalization_layer()</a>, <a class="el" href="validation_2reference_2_pooling_layer_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::pooling_layer()</a>, and <a class="el" href="validation_2reference_2_softmax_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::softmax_layer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> _fixed_point_position;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac4b36cc1e56b0b7e579bb4b7196490db"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> format of the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00275">275</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="_assets_library_8cpp_source.xhtml#l00215">AssetsLibrary::fill()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00042">RawTensor::RawTensor()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> _format;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abdd3637f2bbde9d7d0cc0b7bbd8400bb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of channels of the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">294</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00238">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>, and <a class="el" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p>Referenced by <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor&lt; T &gt;::element_size()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00030">RawTensor::RawTensor()</a>, <a class="el" href="reference_2_scharr_8cpp_source.xhtml#l00062">arm_compute::test::validation::reference::scharr()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00187">SimpleTensor&lt; T &gt;::SimpleTensor()</a>, <a class="el" href="reference_2_sobel_8cpp_source.xhtml#l00106">arm_compute::test::validation::reference::sobel()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">switch</span>(_format)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>:</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">Format::S16</a>:</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">Format::U16</a>:</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">Format::S32</a>:</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">Format::U32</a>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">Format::F32</a>:</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>:</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>:</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">return</span> _num_channels;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <a class="code" href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="core_2_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00238">Error.h:238</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">3 channels, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a3a440b3893fa10608d4428958be1c52ea696b031073e74bf2cb98e5ef201d4aa3">arm_compute::CLVersion::UNKNOWN</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aedcfdd4c3b92fe0d63b5463c7ad1d21e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int num_elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of elements of the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">315</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_tensor_shape_8h_source.xhtml#l00135">TensorShape::total_size()</a>.</p>

<p>Referenced by <a class="el" href="reference_2_absolute_difference_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::absolute_difference()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00077">arm_compute::test::validation::reference::accumulate_squared()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::accumulate_weighted()</a>, <a class="el" href="validation_2reference_2_activation_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::activation_layer()</a>, <a class="el" href="reference_2_arithmetic_addition_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::arithmetic_addition()</a>, <a class="el" href="reference_2_arithmetic_subtraction_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::arithmetic_subtraction()</a>, <a class="el" href="reference_2_bitwise_and_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_and()</a>, <a class="el" href="reference_2_bitwise_not_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_not()</a>, <a class="el" href="reference_2_bitwise_or_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_or()</a>, <a class="el" href="reference_2_bitwise_xor_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_xor()</a>, <a class="el" href="reference_2_box3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::box3x3()</a>, <a class="el" href="reference_2_min_max_location_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::compute_min_max()</a>, <a class="el" href="_helpers_8cpp_source.xhtml#l00116">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="_helpers_8cpp_source.xhtml#l00127">arm_compute::test::validation::convert_to_asymmetric()</a>, <a class="el" href="reference_2_depth_convert_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::depth_convert()</a>, <a class="el" href="reference_2_depth_concatenate_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::depthconcatenate_layer()</a>, <a class="el" href="reference_2_dilate_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::dilate()</a>, <a class="el" href="reference_2_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="reference_2_fixed_point_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::fixed_point_operation()</a>, <a class="el" href="reference_2_fixed_point_pixel_wise_multiplication_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::fixed_point_pixel_wise_multiplication()</a>, <a class="el" href="_flatten_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::flatten_layer()</a>, <a class="el" href="validation_2reference_2_floor_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::floor_layer()</a>, <a class="el" href="reference_2_gaussian3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian3x3()</a>, <a class="el" href="reference_2_gaussian5x5_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian5x5()</a>, <a class="el" href="reference_2_histogram_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::histogram()</a>, <a class="el" href="reference_2_magnitude_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::magnitude()</a>, <a class="el" href="reference_2_mean_std_dev_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::mean_and_standard_deviation()</a>, <a class="el" href="reference_2_median3x3_8cpp_source.xhtml#l00044">arm_compute::test::validation::reference::median3x3()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="reference_2_permute_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::permute()</a>, <a class="el" href="reference_2_phase_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::phase()</a>, <a class="el" href="reference_2_pixel_wise_multiplication_8cpp_source.xhtml#l00045">arm_compute::test::validation::reference::pixel_wise_multiplication()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00030">RawTensor::RawTensor()</a>, <a class="el" href="reference_2_reshape_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::reshape_layer()</a>, <a class="el" href="reference_2_scharr_8cpp_source.xhtml#l00062">arm_compute::test::validation::reference::scharr()</a>, <a class="el" href="validation_2fixtures_2_fully_connected_layer_fixture_8h_source.xhtml#l00056">FullyConnectedLayerValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T, run_interleave &gt;::setup()</a>, <a class="el" href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00057">ConvolutionValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00187">SimpleTensor&lt; T &gt;::SimpleTensor()</a>, <a class="el" href="reference_2_sobel_8cpp_source.xhtml#l00106">arm_compute::test::validation::reference::sobel()</a>, <a class="el" href="validation_2reference_2_softmax_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::softmax_layer()</a>, <a class="el" href="reference_2_table_lookup_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::table_lookup()</a>, <a class="el" href="reference_2_threshold_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::threshold()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>, <a class="el" href="reference_2_warp_affine_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::warp_affine()</a>, and <a class="el" href="reference_2_warp_perspective_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::warp_perspective()</a>.</p>
<div class="fragment"><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> _shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>();</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00135">TensorShape.h:135</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a39537b09ccc3ce3d17922f4ef49a123f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const void * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read only access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a583a35e4fd72f072a6b76ce58c2e3998">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00339">339</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00413">arm_compute::test::coord2index()</a>.</p>
<div class="fragment"><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00413">Utils.h:413</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2df95f7046b81e69a1265a42202ea068"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a9fd1359f2b5ea45a31bd79b381281eb4">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00345">345</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00413">arm_compute::test::coord2index()</a>.</p>
<div class="fragment"><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00413">Utils.h:413</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad4622eda610d53fb6852209f0213aeed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the given <code>tensor</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>To be copied tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00224">224</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor&lt; T &gt;::swap</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(*<span class="keyword">this</span>, tensor);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a51920d34b0fa5415e84891ad8e755224"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">arm_compute::test::SimpleTensor::swap</a></div><div class="ttdeci">friend void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor.h:351</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af6124c81d1e81f182d64ae76caa3fa52"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return value at <code>offset</code> in the buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Offset within the buffer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00232">232</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00301">offset()</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a73aecdf45b3f257e0c15757a18573ea4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const T &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return constant value at <code>offset</code> in the buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Offset within the buffer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00238">238</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00301">offset()</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00301">helpers.h:301</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a79e20eacb1e963e24a21ebd7369effd7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Available padding around the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a07b929c34ad1dc823d8315876aa403ce">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00321">321</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>(0);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a4467b302fc9ec312c40580336ab783da"><div class="ttname"><a href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a></div><div class="ttdeci">BorderSize PaddingSize</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00268">Types.h:268</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac74736e3863207232a23b7181c1d0f44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Quantization info in case of asymmetric quantized type. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a3f3e1a3200223e6a304a533b1016e749">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00262">262</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="validation_2reference_2_activation_layer_8cpp_source.xhtml#l00158">arm_compute::test::validation::reference::activation_layer&lt; uint8_t &gt;()</a>, <a class="el" href="_helpers_8cpp_source.xhtml#l00116">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="validation_2reference_2_convolution_layer_8cpp_source.xhtml#l00221">arm_compute::test::validation::reference::convolution_layer()</a>, <a class="el" href="validation_2reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::reference::depthwise_convolution()</a>, <a class="el" href="validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fully_connected_layer()</a>, and <a class="el" href="validation_2reference_2_pooling_layer_8cpp_source.xhtml#l00287">arm_compute::test::validation::reference::pooling_layer&lt; uint8_t &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">return</span> _quantization_info;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aba5871b3e4a65d057ec1c28fce8b00ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shape of the tensor. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00244">244</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="reference_2_absolute_difference_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::absolute_difference()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00077">arm_compute::test::validation::reference::accumulate_squared()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::accumulate_weighted()</a>, <a class="el" href="validation_2reference_2_activation_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::activation_layer()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00096">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="reference_2_arithmetic_addition_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::arithmetic_addition()</a>, <a class="el" href="reference_2_arithmetic_subtraction_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::arithmetic_subtraction()</a>, <a class="el" href="validation_2reference_2_batch_normalization_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::batch_normalization_layer()</a>, <a class="el" href="reference_2_bitwise_and_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_and()</a>, <a class="el" href="reference_2_bitwise_not_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_not()</a>, <a class="el" href="reference_2_bitwise_or_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_or()</a>, <a class="el" href="reference_2_bitwise_xor_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::bitwise_xor()</a>, <a class="el" href="reference_2_box3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::box3x3()</a>, <a class="el" href="_helpers_8cpp_source.xhtml#l00116">arm_compute::test::validation::convert_from_asymmetric()</a>, <a class="el" href="_helpers_8cpp_source.xhtml#l00127">arm_compute::test::validation::convert_to_asymmetric()</a>, <a class="el" href="validation_2reference_2_convolution_layer_8cpp_source.xhtml#l00221">arm_compute::test::validation::reference::convolution_layer()</a>, <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml#l00064">arm_compute::test::gles_compute::create_tensor()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="reference_2_depth_convert_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::depth_convert()</a>, <a class="el" href="reference_2_depth_concatenate_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::depthconcatenate_layer()</a>, <a class="el" href="validation_2reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00053">arm_compute::test::validation::reference::depthwise_convolution()</a>, <a class="el" href="reference_2_dequantization_layer_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::dequantization_layer()</a>, <a class="el" href="reference_2_dilate_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::dilate()</a>, <a class="el" href="reference_2_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="_assets_library_8cpp_source.xhtml#l00215">AssetsLibrary::fill()</a>, <a class="el" href="reference_2_fixed_point_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::fixed_point_operation()</a>, <a class="el" href="reference_2_fixed_point_pixel_wise_multiplication_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::fixed_point_pixel_wise_multiplication()</a>, <a class="el" href="_flatten_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::flatten_layer()</a>, <a class="el" href="validation_2reference_2_floor_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::floor_layer()</a>, <a class="el" href="validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fully_connected_layer()</a>, <a class="el" href="reference_2_gaussian3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian3x3()</a>, <a class="el" href="reference_2_gaussian5x5_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian5x5()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gemm()</a>, <a class="el" href="_g_e_m_m_interleave4x4_8h_source.xhtml#l00038">arm_compute::test::validation::reference::gemm_interleave_4x4()</a>, <a class="el" href="_g_e_m_m_interleave_blocked_8h_source.xhtml#l00051">arm_compute::test::validation::reference::gemm_interleave_blocked()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00101">arm_compute::test::validation::reference::gemmlowp_matrix_multiply_core()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00150">arm_compute::test::validation::reference::gemmlowp_quantize_down_int32_to_uint8_scale()</a>, <a class="el" href="validation_2reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00171">arm_compute::test::validation::reference::gemmlowp_quantize_down_int32_to_uint8_scale_by_fixedpoint()</a>, <a class="el" href="_assets_library_8cpp_source.xhtml#l00410">AssetsLibrary::get()</a>, <a class="el" href="_assets_library_8cpp_source.xhtml#l00395">AssetsLibrary::get_image_shape()</a>, <a class="el" href="reference_2_integral_image_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::integral_image()</a>, <a class="el" href="reference_2_l2_normalize_layer_8cpp_source.xhtml#l00051">arm_compute::test::validation::reference::l2_normalize()</a>, <a class="el" href="reference_2_magnitude_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::magnitude()</a>, <a class="el" href="reference_2_median3x3_8cpp_source.xhtml#l00044">arm_compute::test::validation::reference::median3x3()</a>, <a class="el" href="reference_2_min_max_location_8cpp_source.xhtml#l00058">arm_compute::test::validation::reference::min_max_location()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="validation_2reference_2_normalization_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::normalization_layer()</a>, <a class="el" href="reference_2_permute_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::permute()</a>, <a class="el" href="reference_2_phase_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::phase()</a>, <a class="el" href="reference_2_pixel_wise_multiplication_8cpp_source.xhtml#l00045">arm_compute::test::validation::reference::pixel_wise_multiplication()</a>, <a class="el" href="validation_2reference_2_pooling_layer_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::pooling_layer()</a>, <a class="el" href="reference_2_quantization_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::quantization_layer()</a>, <a class="el" href="reference_2_reduction_operation_8cpp_source.xhtml#l00064">arm_compute::test::validation::reference::reduction_operation()</a>, <a class="el" href="reference_2_remap_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::remap()</a>, <a class="el" href="reference_2_reshape_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::reshape_layer()</a>, <a class="el" href="_g_e_m_m_interleave_blocked_8h_source.xhtml#l00038">arm_compute::test::validation::reference::safe_read()</a>, <a class="el" href="reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale()</a>, <a class="el" href="reference_2_scharr_8cpp_source.xhtml#l00062">arm_compute::test::validation::reference::scharr()</a>, <a class="el" href="validation_2fixtures_2_fully_connected_layer_fixture_8h_source.xhtml#l00056">FullyConnectedLayerValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T, run_interleave &gt;::setup()</a>, <a class="el" href="validation_2fixtures_2_convolution_layer_fixture_8h_source.xhtml#l00057">ConvolutionValidationGenericFixture&lt; TensorType, AccessorType, FunctionType, T &gt;::setup()</a>, <a class="el" href="reference_2_sobel_8cpp_source.xhtml#l00106">arm_compute::test::validation::reference::sobel()</a>, <a class="el" href="validation_2reference_2_softmax_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::softmax_layer()</a>, <a class="el" href="reference_2_table_lookup_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::table_lookup()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00061">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_threshold_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::threshold()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00069">arm_compute::test::validation::transpose()</a>, <a class="el" href="_validation_8h_source.xhtml#l00328">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00389">arm_compute::test::validation::validate_wrap()</a>, <a class="el" href="reference_2_warp_affine_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::warp_affine()</a>, and <a class="el" href="reference_2_warp_perspective_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::warp_perspective()</a>.</p>
<div class="fragment"><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> _shape;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad7701a09a964eab360a8e51fa7ad2c16"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Total size of the tensor in bytes. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa983ddaeded5756189f46428be79c631">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00268">268</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>References <a class="el" href="accumulate_8cl_source.xhtml#l00041">accumulate()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00179">Dimensions&lt; T &gt;::cbegin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00194">Dimensions&lt; T &gt;::cend()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor&lt; T &gt;::element_size()</a>.</p>

<p>Referenced by <a class="el" href="_assets_library_8cpp_source.xhtml#l00204">AssetsLibrary::fill()</a>.</p>
<div class="fragment"><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a> = <a class="code" href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">std::accumulate</a>(_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">cbegin</a>(), _shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">cend</a>(), 1, std::multiplies&lt;size_t&gt;());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> size * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a4498730adaf901d945c12841df994bba"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">arm_compute::Dimensions::cbegin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cbegin() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points to the first element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00179">Dimensions.h:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ad7701a09a964eab360a8e51fa7ad2c16"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">arm_compute::test::SimpleTensor::size</a></div><div class="ttdeci">size_t size() const override</div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00268">SimpleTensor.h:268</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_adf9b6d55d708c285d58511a780e937fc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">arm_compute::Dimensions::cend</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cend() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points one past the last element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00194">Dimensions.h:194</a></div></div>
<div class="ttc" id="accumulate_8cl_xhtml_a00e540076dd545ad59ac7482f8cdf514"><div class="ttname"><a href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">accumulate</a></div><div class="ttdeci">__kernel void accumulate(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *accu_ptr, uint accu_stride_x, uint accu_step_x, uint accu_stride_y, uint accu_step_y, uint accu_offset_first_element_in_bytes)</div><div class="ttdoc">This function accumulates an input image into output image. </div><div class="ttdef"><b>Definition:</b> <a href="accumulate_8cl_source.xhtml#l00041">accumulate.cl:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a467ad6d14558452f498777a7823fa252"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00102">102</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

</div>
</div>
<a class="anchor" id="a51920d34b0fa5415e84891ad8e755224"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps the content of the provided tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor1</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be swapped. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor2</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be swapped. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00351">351</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>

<p>Referenced by <a class="el" href="_simple_tensor_8h_source.xhtml#l00224">SimpleTensor&lt; T &gt;::operator=()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00351">arm_compute::test::swap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">// Use unqualified call to swap to enable ADL. But make std::swap available</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">// as backup.</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">std::swap</a>;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(tensor1._shape, tensor2._shape);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(tensor1._format, tensor2._format);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(tensor1._data_type, tensor2._data_type);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(tensor1._num_channels, tensor2._num_channels);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(tensor1._buffer, tensor2._buffer);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a51920d34b0fa5415e84891ad8e755224"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">arm_compute::test::SimpleTensor::swap</a></div><div class="ttdeci">friend void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor.h:351</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a28edc8880596d14c099f3c2509efc8b3"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">arm_compute::test::swap</a></div><div class="ttdeci">void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor.h:351</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>tests/<a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
