<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Framework Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1framework_1_1_framework.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">Framework Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Main framework class.  
 <a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_framework_8h_source.xhtml">Framework.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a19a641ac841ecb3f867a75b374b36f61"><td class="memItemLeft" align="right" valign="top">std::set&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a19a641ac841ecb3f867a75b374b36f61">available_instruments</a> () const </td></tr>
<tr class="memdesc:a19a641ac841ecb3f867a75b374b36f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported instrument types for benchmarking.  <a href="#a19a641ac841ecb3f867a75b374b36f61">More...</a><br /></td></tr>
<tr class="separator:a19a641ac841ecb3f867a75b374b36f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47fbbce86aea0ba4a9d539c069f840c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a47fbbce86aea0ba4a9d539c069f840c9">init</a> (const std::vector&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">framework::InstrumentsDescription</a> &gt; &amp;instruments, int <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">num_iterations</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> mode, const std::string &amp;name_filter, const std::string &amp;id_filter, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a> <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae7de2e3a2078977fcf1ba9132e829c0e">log_level</a>)</td></tr>
<tr class="memdesc:a47fbbce86aea0ba4a9d539c069f840c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Init the framework.  <a href="#a47fbbce86aea0ba4a9d539c069f840c9">More...</a><br /></td></tr>
<tr class="separator:a47fbbce86aea0ba4a9d539c069f840c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3893bc1fbad02227b78bbce22bcff1ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a3893bc1fbad02227b78bbce22bcff1ba">push_suite</a> (std::string name)</td></tr>
<tr class="memdesc:a3893bc1fbad02227b78bbce22bcff1ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new test suite.  <a href="#a3893bc1fbad02227b78bbce22bcff1ba">More...</a><br /></td></tr>
<tr class="separator:a3893bc1fbad02227b78bbce22bcff1ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedbe6ac82569518fedc4a08718f8aa93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#aedbe6ac82569518fedc4a08718f8aa93">pop_suite</a> ()</td></tr>
<tr class="memdesc:aedbe6ac82569518fedc4a08718f8aa93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove innermost test suite.  <a href="#aedbe6ac82569518fedc4a08718f8aa93">More...</a><br /></td></tr>
<tr class="separator:aedbe6ac82569518fedc4a08718f8aa93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8e7764125fcd790e0b151d26cfe949c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad8e7764125fcd790e0b151d26cfe949c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a> (std::string test_name, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> mode, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> status)</td></tr>
<tr class="memdesc:ad8e7764125fcd790e0b151d26cfe949c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a test case to the framework.  <a href="#ad8e7764125fcd790e0b151d26cfe949c">More...</a><br /></td></tr>
<tr class="separator:ad8e7764125fcd790e0b151d26cfe949c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff39a3b89865624b6579d6980fb88654"><td class="memTemplParams" colspan="2">template&lt;typename T , typename D &gt; </td></tr>
<tr class="memitem:aff39a3b89865624b6579d6980fb88654"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#aff39a3b89865624b6579d6980fb88654">add_data_test_case</a> (std::string test_name, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> mode, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> status, std::string description, D &amp;&amp;data)</td></tr>
<tr class="memdesc:aff39a3b89865624b6579d6980fb88654"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a data test case to the framework.  <a href="#aff39a3b89865624b6579d6980fb88654">More...</a><br /></td></tr>
<tr class="separator:aff39a3b89865624b6579d6980fb88654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab5eae10e0a4067cff9e87fdcb186eca8">add_test_info</a> (std::string info)</td></tr>
<tr class="memdesc:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add info string for the next expectation/assertion.  <a href="#ab5eae10e0a4067cff9e87fdcb186eca8">More...</a><br /></td></tr>
<tr class="separator:ab5eae10e0a4067cff9e87fdcb186eca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6a973ccd27225a87d59d93ca458720"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a> ()</td></tr>
<tr class="memdesc:afb6a973ccd27225a87d59d93ca458720"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the collected test info.  <a href="#afb6a973ccd27225a87d59d93ca458720">More...</a><br /></td></tr>
<tr class="separator:afb6a973ccd27225a87d59d93ca458720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d155271d07c4f025033c03b62d70661"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4d155271d07c4f025033c03b62d70661">has_test_info</a> () const </td></tr>
<tr class="memdesc:a4d155271d07c4f025033c03b62d70661"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if any info has been registered.  <a href="#a4d155271d07c4f025033c03b62d70661">More...</a><br /></td></tr>
<tr class="separator:a4d155271d07c4f025033c03b62d70661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26c3f59f0cdb3e54a82878c7daf94594"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a> (std::ostream &amp;os) const </td></tr>
<tr class="memdesc:a26c3f59f0cdb3e54a82878c7daf94594"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print test info.  <a href="#a26c3f59f0cdb3e54a82878c7daf94594">More...</a><br /></td></tr>
<tr class="separator:a26c3f59f0cdb3e54a82878c7daf94594"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8135a21178dd34ec3b334b83381269a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8135a21178dd34ec3b334b83381269a">log_test_start</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:af8135a21178dd34ec3b334b83381269a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that execution of a test starts.  <a href="#af8135a21178dd34ec3b334b83381269a">More...</a><br /></td></tr>
<tr class="separator:af8135a21178dd34ec3b334b83381269a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a2d19934af27623634c5ab3c47a9446"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5a2d19934af27623634c5ab3c47a9446">log_test_skipped</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a5a2d19934af27623634c5ab3c47a9446"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that a test case is skipped.  <a href="#a5a2d19934af27623634c5ab3c47a9446">More...</a><br /></td></tr>
<tr class="separator:a5a2d19934af27623634c5ab3c47a9446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab2cd8b6e8e0aac442fc1e35ad9e1ac45">log_test_end</a> (const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that a test case finished.  <a href="#ab2cd8b6e8e0aac442fc1e35ad9e1ac45">More...</a><br /></td></tr>
<tr class="separator:ab2cd8b6e8e0aac442fc1e35ad9e1ac45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0128e62cd67888b56078dac05dd59761"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">log_failed_expectation</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">TestError</a> &amp;<a class="el" href="namespacearm__compute.xhtml#a568b0fbfa3d903099d9c9f7b6acf188d">error</a>)</td></tr>
<tr class="memdesc:a0128e62cd67888b56078dac05dd59761"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the framework that the currently running test case failed a non-fatal expectation.  <a href="#a0128e62cd67888b56078dac05dd59761">More...</a><br /></td></tr>
<tr class="separator:a0128e62cd67888b56078dac05dd59761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60b060774255916807ef1cca44bfbfe1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a60b060774255916807ef1cca44bfbfe1">log_info</a> (const std::string &amp;info)</td></tr>
<tr class="memdesc:a60b060774255916807ef1cca44bfbfe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the debug information that has already been logged.  <a href="#a60b060774255916807ef1cca44bfbfe1">More...</a><br /></td></tr>
<tr class="separator:a60b060774255916807ef1cca44bfbfe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30181518d2f7c76c7692e8ab99ea1808"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">num_iterations</a> () const </td></tr>
<tr class="memdesc:a30181518d2f7c76c7692e8ab99ea1808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of iterations per test case.  <a href="#a30181518d2f7c76c7692e8ab99ea1808">More...</a><br /></td></tr>
<tr class="separator:a30181518d2f7c76c7692e8ab99ea1808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0b69f2142100651d022d5af576f42cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae0b69f2142100651d022d5af576f42cf">set_num_iterations</a> (int <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">num_iterations</a>)</td></tr>
<tr class="memdesc:ae0b69f2142100651d022d5af576f42cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set number of iterations per test case.  <a href="#ae0b69f2142100651d022d5af576f42cf">More...</a><br /></td></tr>
<tr class="separator:ae0b69f2142100651d022d5af576f42cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98bab95a13c24f15f3fa7d81f0222a09"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a98bab95a13c24f15f3fa7d81f0222a09">throw_errors</a> () const </td></tr>
<tr class="memdesc:a98bab95a13c24f15f3fa7d81f0222a09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Should errors be caught or thrown by the framework.  <a href="#a98bab95a13c24f15f3fa7d81f0222a09">More...</a><br /></td></tr>
<tr class="separator:a98bab95a13c24f15f3fa7d81f0222a09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e61ba4403f0d2bd4f755f59193af692"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">set_throw_errors</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a98bab95a13c24f15f3fa7d81f0222a09">throw_errors</a>)</td></tr>
<tr class="memdesc:a5e61ba4403f0d2bd4f755f59193af692"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether errors are caught or thrown by the framework.  <a href="#a5e61ba4403f0d2bd4f755f59193af692">More...</a><br /></td></tr>
<tr class="separator:a5e61ba4403f0d2bd4f755f59193af692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d22ec5d060270ed5e0c348ca0177cdb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4d22ec5d060270ed5e0c348ca0177cdb">stop_on_error</a> () const </td></tr>
<tr class="memdesc:a4d22ec5d060270ed5e0c348ca0177cdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if test execution is stopped after the first failed test.  <a href="#a4d22ec5d060270ed5e0c348ca0177cdb">More...</a><br /></td></tr>
<tr class="separator:a4d22ec5d060270ed5e0c348ca0177cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ab4b7e9757ad7e9d23b608b617c5dffa6">set_stop_on_error</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4d22ec5d060270ed5e0c348ca0177cdb">stop_on_error</a>)</td></tr>
<tr class="memdesc:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether to abort execution after the first failed test.  <a href="#ab4b7e9757ad7e9d23b608b617c5dffa6">More...</a><br /></td></tr>
<tr class="separator:ab4b7e9757ad7e9d23b608b617c5dffa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf459f20010856da7946767ba4da183"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4cf459f20010856da7946767ba4da183">error_on_missing_assets</a> () const </td></tr>
<tr class="memdesc:a4cf459f20010856da7946767ba4da183"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if a test should be marked as failed when its assets are missing.  <a href="#a4cf459f20010856da7946767ba4da183">More...</a><br /></td></tr>
<tr class="separator:a4cf459f20010856da7946767ba4da183"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46a0cefc3b9a13645548ec705f438ce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a46a0cefc3b9a13645548ec705f438ce9">set_error_on_missing_assets</a> (bool <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4cf459f20010856da7946767ba4da183">error_on_missing_assets</a>)</td></tr>
<tr class="memdesc:a46a0cefc3b9a13645548ec705f438ce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether a test should be considered as failed if its assets cannot be found.  <a href="#a46a0cefc3b9a13645548ec705f438ce9">More...</a><br /></td></tr>
<tr class="separator:a46a0cefc3b9a13645548ec705f438ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a149ad6701e3e2414cb566bb414029841"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">run</a> ()</td></tr>
<tr class="memdesc:a149ad6701e3e2414cb566bb414029841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run all enabled test cases.  <a href="#a149ad6701e3e2414cb566bb414029841">More...</a><br /></td></tr>
<tr class="separator:a149ad6701e3e2414cb566bb414029841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4494f098cda45f40105c454d0ffa9147"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4494f098cda45f40105c454d0ffa9147">set_test_result</a> (<a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> info, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml">TestResult</a> result)</td></tr>
<tr class="memdesc:a4494f098cda45f40105c454d0ffa9147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the result for an executed test case.  <a href="#a4494f098cda45f40105c454d0ffa9147">More...</a><br /></td></tr>
<tr class="separator:a4494f098cda45f40105c454d0ffa9147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbec548e723c57f5f88e2dd241d1e791"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#adbec548e723c57f5f88e2dd241d1e791">print_test_results</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> &amp;printer) const </td></tr>
<tr class="memdesc:adbec548e723c57f5f88e2dd241d1e791"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the specified printer to output test results from the last run.  <a href="#adbec548e723c57f5f88e2dd241d1e791">More...</a><br /></td></tr>
<tr class="separator:adbec548e723c57f5f88e2dd241d1e791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e42876589150f9ae9ad78d6446ef3b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml">Profiler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0e42876589150f9ae9ad78d6446ef3b6">get_profiler</a> () const </td></tr>
<tr class="memdesc:a0e42876589150f9ae9ad78d6446ef3b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory method to obtain a configured profiler.  <a href="#a0e42876589150f9ae9ad78d6446ef3b6">More...</a><br /></td></tr>
<tr class="separator:a0e42876589150f9ae9ad78d6446ef3b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f16ced78873ee3a193490197fbf57a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">add_printer</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> *printer)</td></tr>
<tr class="memdesc:a5f16ced78873ee3a193490197fbf57a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the printer used for the output of test results.  <a href="#a5f16ced78873ee3a193490197fbf57a5">More...</a><br /></td></tr>
<tr class="separator:a5f16ced78873ee3a193490197fbf57a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77825496fa0fbf840b676d2c9aabaf4"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af77825496fa0fbf840b676d2c9aabaf4">test_infos</a> () const </td></tr>
<tr class="memdesc:af77825496fa0fbf840b676d2c9aabaf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>'s.  <a href="#af77825496fa0fbf840b676d2c9aabaf4">More...</a><br /></td></tr>
<tr class="separator:af77825496fa0fbf840b676d2c9aabaf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7de2e3a2078977fcf1ba9132e829c0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae7de2e3a2078977fcf1ba9132e829c0e">log_level</a> () const </td></tr>
<tr class="memdesc:ae7de2e3a2078977fcf1ba9132e829c0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current logging level.  <a href="#ae7de2e3a2078977fcf1ba9132e829c0e">More...</a><br /></td></tr>
<tr class="separator:ae7de2e3a2078977fcf1ba9132e829c0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">get</a> ()</td></tr>
<tr class="memdesc:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the singleton.  <a href="#af8fbb8b386d3cce307a89002bcdbcfc9">More...</a><br /></td></tr>
<tr class="separator:af8fbb8b386d3cce307a89002bcdbcfc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Main framework class. </p>
<p>Keeps track of the global state, owns all test cases and collects results. </p>

<p>Definition at line <a class="el" href="_framework_8h_source.xhtml#l00083">83</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aff39a3b89865624b6579d6980fb88654"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_data_test_case </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>test_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a>&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">D &amp;&amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a data test case to the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">test_name</td><td>Name of the new test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Mode in which to include the test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">status</td><td><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> of the test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">description</td><td>Description of <code>data</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data that will be used as input to the test. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8h_source.xhtml#l00348">348</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>

<p>References <a class="el" href="_framework_8h_source.xhtml#l00070">TestInfo::mode</a>, and <a class="el" href="_framework_8h_source.xhtml#l00071">TestInfo::status</a>.</p>

<p>Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00087">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>.</p>
<div class="fragment"><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// WORKAROUND for GCC 4.9</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">// The function should get *it which is tuple but that seems to trigger a</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// bug in the compiler.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">auto</span> tmp = std::unique_ptr&lt;DataTestCaseFactory&lt;T, decltype(*std::declval&lt;D&gt;())&gt;&gt;(<span class="keyword">new</span> DataTestCaseFactory&lt;T, decltype(*std::declval&lt;D&gt;())&gt;(current_suite_name(), std::move(test_name), mode, status,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                                                     std::move(description), *data));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    _test_factories.emplace_back(std::move(tmp));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5f16ced78873ee3a193490197fbf57a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_printer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> *&#160;</td>
          <td class="paramname"><em>printer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the printer used for the output of test results. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">printer</td><td>Pointer to a printer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00620">620</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;{</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    _printers.push_back(printer);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad8e7764125fcd790e0b151d26cfe949c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_test_case </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>test_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a>&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a test case to the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">test_name</td><td>Name of the new test case. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Mode in which to include the test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">status</td><td><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a> of the test case. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8h_source.xhtml#l00342">342</a> of file <a class="el" href="_framework_8h_source.xhtml">Framework.h</a>.</p>

<p>References <a class="el" href="_toolchain_support_8h_source.xhtml#l00361">arm_compute::support::cpp14::make_unique()</a>.</p>

<p>Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00080">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    _test_factories.emplace_back(<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a94d8ad03db9ccb2005b06858856d0a4c">support::cpp14::make_unique</a>&lt;SimpleTestCaseFactory&lt;T&gt;&gt;(current_suite_name(), std::move(test_name), mode, status));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp14_xhtml_a94d8ad03db9ccb2005b06858856d0a4c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a94d8ad03db9ccb2005b06858856d0a4c">arm_compute::support::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Single_object make_unique(Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00361">ToolchainSupport.h:361</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab5eae10e0a4067cff9e87fdcb186eca8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_test_info </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add info string for the next expectation/assertion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    _test_info.emplace_back(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>));</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a19a641ac841ecb3f867a75b374b36f61"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::set&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> &gt; available_instruments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Supported instrument types for benchmarking. </p>
<dl class="section return"><dt>Returns</dt><dd>Set of all available instrument types. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::set&lt;InstrumentsDescription&gt; types;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;instrument : _available_instruments)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        types.emplace(instrument.first);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> types;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afb6a973ccd27225a87d59d93ca458720"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void clear_test_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the collected test info. </p>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    _test_info.clear();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4cf459f20010856da7946767ba4da183"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool error_on_missing_assets </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if a test should be marked as failed when its assets are missing. </p>
<dl class="section return"><dt>Returns</dt><dd>True if a test should be marked as failed when its assets are missing. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">TestResult::CRASHED</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::DEBUG</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::DISABLED</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestCaseFactory::DISABLED</a>, <a class="el" href="namespacearm__compute.xhtml#a568b0fbfa3d903099d9c9f7b6acf188d">arm_compute::error()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::ERRORS</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::EXPECTED_FAILURE</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::EXPECTED_FAILURE</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::FAILED</a>, <a class="el" href="classarm__compute_1_1_g_c_scheduler.xhtml#ac758c6b5a7ccc31b7193cfde59c32109">GCScheduler::get()</a>, <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">CLScheduler::get()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00591">Framework::get_profiler()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info()</a>, <a class="el" href="_exceptions_8cpp_source.xhtml#l00121">TestError::level()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00177">Framework::log_test_end()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00172">Framework::log_test_skipped()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00161">Framework::log_test_start()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a15cffdfdea029e4617b983044f27f25e">TestCaseFactory::make()</a>, <a class="el" href="_profiler_8cpp_source.xhtml#l00064">Profiler::measurements()</a>, <a class="el" href="_test_result_8h_source.xhtml#l00075">TestResult::measurements</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad3cbb6cb9043ad908cdd5414236e6603">TestResult::NOT_RUN</a>, <a class="el" href="namespacearm__compute.xhtml#aa4f4d7a58287017588fc338965873f14">arm_compute::opencl_is_available()</a>, <a class="el" href="namespacearm__compute.xhtml#a19c7b9bc5f36935ba40314907ffe54ce">arm_compute::opengles31_is_available()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a8b879125822f4f7e70d563c4f1672942">Printer::print_error()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a0aa25e682d18e48c986ed28cca43ad77">Printer::print_errors_footer()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#ab7cc3070c9af8540e5805f5df8b0214f">Printer::print_errors_header()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a24f328af2266d153ab2ddd1ada7b02e2">Printer::print_info()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00572">Framework::set_test_result()</a>, <a class="el" href="_profiler_8cpp_source.xhtml#l00040">Profiler::start()</a>, <a class="el" href="_framework_8h_source.xhtml#l00071">TestInfo::status</a>, <a class="el" href="_test_result_8h_source.xhtml#l00074">TestResult::status</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00157">TestCaseFactory::status()</a>, <a class="el" href="_profiler_8cpp_source.xhtml#l00048">Profiler::stop()</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::SUCCESS</a>, <a class="el" href="classarm__compute_1_1_g_c_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">GCScheduler::sync()</a>, and <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00174">CLScheduler::sync()</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00255">Framework::set_error_on_missing_assets()</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> _error_on_missing_assets;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af8fbb8b386d3cce307a89002bcdbcfc9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a> &amp; get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the singleton. </p>
<dl class="section return"><dt>Returns</dt><dd>Unique instance of the framework class. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>, <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>, <a class="el" href="_registrars_8h_source.xhtml#l00080">TestCaseRegistrar&lt; T &gt;::TestCaseRegistrar()</a>, and <a class="el" href="_registrars_8h_source.xhtml#l00100">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">static</span> Framework instance;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> instance;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0e42876589150f9ae9ad78d6446ef3b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_profiler.xhtml">Profiler</a> get_profiler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Factory method to obtain a configured profiler. </p>
<p>The profiler enables all instruments that have been passed to the <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a47fbbce86aea0ba4a9d539c069f840c9">init</a> method.</p>
<dl class="section return"><dt>Returns</dt><dd>Configured profiler to collect benchmark results. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00591">591</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="_profiler_8cpp_source.xhtml#l00035">Profiler::add()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::ALL</a>, and <a class="el" href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor::type</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>, and <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    Profiler <a class="code" href="classprofiler.xhtml">profiler</a>;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> all_instruments = std::any_of(</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                     _instruments.begin(),</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                     _instruments.end(),</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                     [](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>) -&gt; <span class="keywordtype">bool</span> { <span class="keywordflow">return</span> <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.first == <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">InstrumentType::ALL</a>; });</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">auto</span> is_selected = [&amp;](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> instrument) -&gt; <span class="keywordtype">bool</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">return</span> std::find_if(_instruments.begin(), _instruments.end(), [&amp;](<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">InstrumentsDescription</a> <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> group = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aac6b258eb313f96447f4f0e273431005">InstrumentType</a><span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.first) &amp; 0xFF00);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordflow">return</span> (group == instrument.first) &amp;&amp; (instrument.second == <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">type</a>.second);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        })</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        != _instruments.end();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    };</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;instrument : _available_instruments)</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        <span class="keywordflow">if</span>(all_instruments || is_selected(instrument.first))</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            profiler.add(instrument.second());</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        }</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">return</span> profiler;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a2a9beba9ddfcbb1d1d7f695c9d86296e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">arm_compute::test::framework::InstrumentsDescription</a></div><div class="ttdeci">std::pair&lt; InstrumentType, ScaleFactor &gt; InstrumentsDescription</div><div class="ttdef"><b>Definition:</b> <a href="_instruments_8h_source.xhtml#l00053">Instruments.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aac6b258eb313f96447f4f0e273431005"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aac6b258eb313f96447f4f0e273431005">arm_compute::test::framework::InstrumentType</a></div><div class="ttdeci">InstrumentType</div><div class="ttdef"><b>Definition:</b> <a href="_instruments_8h_source.xhtml#l00041">Instruments.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::DatasetMode::ALL</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">caffe_data_extractor.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
<div class="ttc" id="classprofiler_xhtml"><div class="ttname"><a href="classprofiler.xhtml">profiler</a></div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00088">profiler.hpp:88</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4d155271d07c4f025033c03b62d70661"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_test_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if any info has been registered. </p>
<dl class="section return"><dt>Returns</dt><dd>True if there is test info. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> !_test_info.empty();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a47fbbce86aea0ba4a9d539c069f840c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2a9beba9ddfcbb1d1d7f695c9d86296e">framework::InstrumentsDescription</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>instruments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_iterations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>id_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a>&#160;</td>
          <td class="paramname"><em>log_level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Init the framework. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#a6c1c1828685702cd5b6a577d568d629c" title="Default constructor. ">TestFilter::TestFilter</a> for the format of the string to filter ids.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">instruments</td><td><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance. ">Instrument</a> types that will be used for benchmarking. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_iterations</td><td>Number of iterations per test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Dataset mode. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name_filter</td><td>Regular expression to filter tests by name. Only matching tests will be executed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id_filter</td><td>String to match selected test ids. Only matching tests will be executed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">log_level</td><td>Verbosity of the output. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00093">arm_compute::test::join()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00646">Framework::log_level()</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00225">Framework::num_iterations()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    _test_filter    = TestFilter(mode, name_filter, id_filter);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    _num_iterations = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">num_iterations</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    _log_level      = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae7de2e3a2078977fcf1ba9132e829c0e">log_level</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    _instruments = std::set&lt;framework::InstrumentsDescription&gt;(instruments.begin(), instruments.end());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_ae7de2e3a2078977fcf1ba9132e829c0e"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ae7de2e3a2078977fcf1ba9132e829c0e">arm_compute::test::framework::Framework::log_level</a></div><div class="ttdeci">LogLevel log_level() const </div><div class="ttdoc">Get the current logging level. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00646">Framework.cpp:646</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a30181518d2f7c76c7692e8ab99ea1808"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">arm_compute::test::framework::Framework::num_iterations</a></div><div class="ttdeci">int num_iterations() const </div><div class="ttdoc">Number of iterations per test case. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00225">Framework.cpp:225</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0128e62cd67888b56078dac05dd59761"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_failed_expectation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">TestError</a> &amp;&#160;</td>
          <td class="paramname"><em>error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that the currently running test case failed a non-fatal expectation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error</td><td>Description of the error. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00196">196</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="core_2_error_8h_source.xhtml#l00306">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::EXPECTED_FAILURE</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::FAILED</a>, <a class="el" href="_exceptions_8cpp_source.xhtml#l00121">TestError::level()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a8b879125822f4f7e70d563c4f1672942">Printer::print_error()</a>, <a class="el" href="_framework_8h_source.xhtml#l00071">TestInfo::status</a>, and <a class="el" href="_test_result_8h_source.xhtml#l00074">TestResult::status</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_current_test_info == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_current_test_result == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_expected_failure = _current_test_info-&gt;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml#a9e590b7d913d38286ab0916c38bb600f">status</a> == <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::Status::EXPECTED_FAILURE</a>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute.xhtml#a568b0fbfa3d903099d9c9f7b6acf188d">error</a>.level())</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            p-&gt;print_error(<a class="code" href="namespacearm__compute.xhtml#a568b0fbfa3d903099d9c9f7b6acf188d">error</a>, is_expected_failure);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        });</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    _current_test_result-&gt;<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#ae29aa2d4ae440022daaed1107eb306b3">status</a> = <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::Status::FAILED</a>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="ttc" id="core_2_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="core_2_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00306">Error.h:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">arm_compute::test::framework::TestCaseFactory::Status::EXPECTED_FAILURE</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a568b0fbfa3d903099d9c9f7b6acf188d"><div class="ttname"><a href="namespacearm__compute.xhtml#a568b0fbfa3d903099d9c9f7b6acf188d">arm_compute::error</a></div><div class="ttdeci">void error(const char *function, const char *file, const int line, const char *msg,...)</div><div class="ttdoc">Print an error message then throw an std::runtime_error. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_ae29aa2d4ae440022daaed1107eb306b3"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#ae29aa2d4ae440022daaed1107eb306b3">arm_compute::test::framework::TestResult::status</a></div><div class="ttdeci">Status status</div><div class="ttdef"><b>Definition:</b> <a href="_test_result_8h_source.xhtml#l00074">TestResult.h:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_info_xhtml_a9e590b7d913d38286ab0916c38bb600f"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml#a9e590b7d913d38286ab0916c38bb600f">arm_compute::test::framework::TestInfo::status</a></div><div class="ttdeci">TestCaseFactory::Status status</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00071">Framework.h:71</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">arm_compute::test::framework::TestResult::Status::FAILED</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a60b060774255916807ef1cca44bfbfe1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_info </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the debug information that has already been logged. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Description of the log info. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00214">214</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::DEBUG</a>, and <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a24f328af2266d153ab2ddd1ada7b02e2">Printer::print_info()</a>.</p>

<p>Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">LogLevel::DEBUG</a>)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            p-&gt;print_info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        });</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9adc30ec20708ef7b0f641ef78b7880a15">arm_compute::test::framework::LogLevel::DEBUG</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae7de2e3a2078977fcf1ba9132e829c0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9">LogLevel</a> log_level </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current logging level. </p>
<dl class="section return"><dt>Returns</dt><dd>The current logging level. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00646">646</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00102">Framework::init()</a>.</p>
<div class="fragment"><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;{</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">return</span> _log_level;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab2cd8b6e8e0aac442fc1e35ad9e1ac45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_end </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that a test case finished. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00177">177</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">arm_compute::test::framework::MEASUREMENTS</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a93693778c8458ce21b0fc41b85467dd6">Printer::print_measurements()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a983ccd98b01612e3415a74981ec7d8ab">Printer::print_test_footer()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">LogLevel::MEASUREMENTS</a>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            p-&gt;print_measurements(_test_results.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>).measurements);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        });</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            p-&gt;print_test_footer();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        });</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a9632e44563b724240d9299f0ab14aae8">arm_compute::test::framework::LogLevel::MEASUREMENTS</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5a2d19934af27623634c5ab3c47a9446"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_skipped </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that a test case is skipped. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00172">172</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info()</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af8135a21178dd34ec3b334b83381269a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_test_start </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the framework that execution of a test starts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a5c0a4b9fd162ee32e0e6231947b6e9b0">Printer::print_test_header()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        func_on_all_printers([&amp;](Printer * p)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            p-&gt;print_test_header(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        });</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a30181518d2f7c76c7692e8ab99ea1808"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int num_iterations </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of iterations per test case. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of iterations per test case. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00225">225</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00102">Framework::init()</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00230">Framework::set_num_iterations()</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">return</span> _num_iterations;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aedbe6ac82569518fedc4a08718f8aa93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pop_suite </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove innermost test suite. </p>
<dl class="section warning"><dt>Warning</dt><dd>Cannot be used at execution time. It can only be used for registering test cases. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00100">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    _test_suite_name.pop_back();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a26c3f59f0cdb3e54a82878c7daf94594"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_test_info </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print test info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00272">arm_compute::for_each()</a>, and <a class="el" href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor::str</a>.</p>

<p>Referenced by <a class="el" href="_asserts_8h_source.xhtml#l00057">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO()</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span>(!_test_info.empty())</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;CONTEXT:\n&quot;</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> : _test_info)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; <a class="code" href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="namespacecaffe__data__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_data_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adbec548e723c57f5f88e2dd241d1e791"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_test_results </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml">Printer</a> &amp;&#160;</td>
          <td class="paramname"><em>printer</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use the specified printer to output test results from the last run. </p>
<p>This method can be used if the test results need to be obtained using a different printer than the one managed by the framework.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">printer</td><td><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml" title="Abstract printer class used by the Framework to present output. ">Printer</a> used to output results. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00577">577</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a93693778c8458ce21b0fc41b85467dd6">Printer::print_measurements()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a2551b01adb00e6af451202a3aa2fe30a">Printer::print_run_footer()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#aa8974e876a9d2e4ed49aeab9b0a18a96">Printer::print_run_header()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a983ccd98b01612e3415a74981ec7d8ab">Printer::print_test_footer()</a>, and <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a5c0a4b9fd162ee32e0e6231947b6e9b0">Printer::print_test_header()</a>.</p>
<div class="fragment"><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;{</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    printer.print_run_header();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;test : _test_results)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        printer.print_test_header(test.first);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        printer.print_measurements(test.second.measurements);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        printer.print_test_footer();</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    printer.print_run_footer();</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3893bc1fbad02227b78bbce22bcff1ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void push_suite </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new test suite. </p>
<dl class="section warning"><dt>Warning</dt><dd>Cannot be used at execution time. It can only be used for registering test cases.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of the added test suite.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Name of the current test suite. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_registrars_8h_source.xhtml#l00105">TestSuiteRegistrar::TestSuiteRegistrar()</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    _test_suite_name.emplace_back(std::move(name));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a149ad6701e3e2414cb566bb414029841"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run all enabled test cases. </p>
<dl class="section return"><dt>Returns</dt><dd>True if all test cases executed successful. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00514">514</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">TestResult::CRASHED</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::DISABLED</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::EXPECTED_FAILURE</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::FAILED</a>, <a class="el" href="hwc_8hpp_source.xhtml#l00252">id</a>, <a class="el" href="_test_filter_8cpp_source.xhtml#l00043">TestFilter::is_selected()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00152">TestCaseFactory::mode()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00140">TestCaseFactory::name()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::NONE</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#a2551b01adb00e6af451202a3aa2fe30a">Printer::print_run_footer()</a>, <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_printer.xhtml#aa8974e876a9d2e4ed49aeab9b0a18a96">Printer::print_run_header()</a>, <a class="el" href="_test_case_factory_8h_source.xhtml#l00157">TestCaseFactory::status()</a>, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::SUCCESS</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::TESTS</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="comment">// Clear old test results</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    _test_results.clear();</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        {</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            p-&gt;print_run_header();</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        });</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; start = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = 0;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;test_factory : _test_factories)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keyword">const</span> std::string test_case_name = test_factory-&gt;name();</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keyword">const</span> TestInfo    test_info{ <a class="code" href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a>, test_case_name, test_factory-&gt;mode(), test_factory-&gt;status() };</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">if</span>(_test_filter.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#ad4f8f3424c5f57e91d554e7e00a31fcf">is_selected</a>(test_info))</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        {</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            run_test(test_info, *test_factory);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        }</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        ++<a class="code" href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a>;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; end = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">LogLevel::TESTS</a>)</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    {</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        func_on_all_printers([](Printer * p)</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        {</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            p-&gt;print_run_footer();</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        });</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keyword">auto</span> runtime = std::chrono::duration_cast&lt;std::chrono::seconds&gt;(end - start);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    std::map&lt;TestResult::Status, int&gt; results = count_test_results();</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">if</span>(_log_level &gt; <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">LogLevel::NONE</a>)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Executed &quot;</span> &lt;&lt; _test_results.size() &lt;&lt; <span class="stringliteral">&quot; test(s) (&quot;</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::Status::SUCCESS</a>] &lt;&lt; <span class="stringliteral">&quot; passed, &quot;</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::Status::EXPECTED_FAILURE</a>] &lt;&lt; <span class="stringliteral">&quot; expected failures, &quot;</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">TestResult::Status::FAILED</a>] &lt;&lt; <span class="stringliteral">&quot; failed, &quot;</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">TestResult::Status::CRASHED</a>] &lt;&lt; <span class="stringliteral">&quot; crashed, &quot;</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                  &lt;&lt; results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::Status::DISABLED</a>] &lt;&lt; <span class="stringliteral">&quot; disabled) in &quot;</span> &lt;&lt; runtime.count() &lt;&lt; <span class="stringliteral">&quot; second(s)\n&quot;</span>;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordtype">int</span> num_successful_tests = results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">TestResult::Status::SUCCESS</a>] + results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestResult::Status::EXPECTED_FAILURE</a>] + results[<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestResult::Status::DISABLED</a>];</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> (static_cast&lt;unsigned int&gt;(num_successful_tests) == _test_results.size());</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div><div class="ttc" id="hwc_8hpp_xhtml_abaabdc509cdaba7df9f56c6c76f3ae19"><div class="ttname"><a href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a></div><div class="ttdeci">uint32_t id</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00252">hwc.hpp:252</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::LogLevel::NONE</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ac769ef7bddc01ed21a9f7c5fecbe2430">arm_compute::test::framework::LogLevel::TESTS</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_filter_xhtml_ad4f8f3424c5f57e91d554e7e00a31fcf"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#ad4f8f3424c5f57e91d554e7e00a31fcf">arm_compute::test::framework::TestFilter::is_selected</a></div><div class="ttdeci">bool is_selected(const TestInfo &amp;info) const </div><div class="ttdoc">Check if a test case is selected to be executed. </div><div class="ttdef"><b>Definition:</b> <a href="_test_filter_8cpp_source.xhtml#l00043">TestFilter.cpp:43</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bad0749aaba8b833466dfcbb0428e4f89c">arm_compute::test::framework::TestResult::Status::SUCCESS</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba9c51674930e03c276344d19f9e4398fb">arm_compute::test::framework::TestResult::Status::CRASHED</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">arm_compute::test::framework::TestResult::Status::DISABLED</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bab9e14d9b2886bcff408b85aefa780419">arm_compute::test::framework::TestResult::Status::FAILED</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_test_result_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">arm_compute::test::framework::TestResult::Status::EXPECTED_FAILURE</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a46a0cefc3b9a13645548ec705f438ce9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_error_on_missing_assets </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>error_on_missing_assets</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether a test should be considered as failed if its assets cannot be found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error_on_missing_assets</td><td>True if a test should be marked as failed when its assets are missing. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00255">255</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    _error_on_missing_assets = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4cf459f20010856da7946767ba4da183">error_on_missing_assets</a>;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a4cf459f20010856da7946767ba4da183"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4cf459f20010856da7946767ba4da183">arm_compute::test::framework::Framework::error_on_missing_assets</a></div><div class="ttdeci">bool error_on_missing_assets() const </div><div class="ttdoc">Indicates if a test should be marked as failed when its assets are missing. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00260">Framework.cpp:260</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae0b69f2142100651d022d5af576f42cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_num_iterations </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_iterations</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set number of iterations per test case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_iterations</td><td>Number of iterations per test case. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00230">230</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="_framework_8cpp_source.xhtml#l00225">Framework::num_iterations()</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    _num_iterations = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">num_iterations</a>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a30181518d2f7c76c7692e8ab99ea1808"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a30181518d2f7c76c7692e8ab99ea1808">arm_compute::test::framework::Framework::num_iterations</a></div><div class="ttdeci">int num_iterations() const </div><div class="ttdoc">Number of iterations per test case. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00225">Framework.cpp:225</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab4b7e9757ad7e9d23b608b617c5dffa6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_stop_on_error </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>stop_on_error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether to abort execution after the first failed test. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stop_on_error</td><td>True if execution is going to be aborted after first failed test. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00245">245</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="_framework_8cpp_source.xhtml#l00250">Framework::stop_on_error()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    _stop_on_error = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4d22ec5d060270ed5e0c348ca0177cdb">stop_on_error</a>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a4d22ec5d060270ed5e0c348ca0177cdb"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a4d22ec5d060270ed5e0c348ca0177cdb">arm_compute::test::framework::Framework::stop_on_error</a></div><div class="ttdeci">bool stop_on_error() const </div><div class="ttdoc">Indicates if test execution is stopped after the first failed test. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00250">Framework.cpp:250</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4494f098cda45f40105c454d0ffa9147"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_test_result </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_result.xhtml">TestResult</a>&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the result for an executed test case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Test info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">result</td><td>Execution result. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00572">572</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00260">Framework::error_on_missing_assets()</a>.</p>
<div class="fragment"><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    _test_results.emplace(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">info</a>), std::move(result));</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a096668313a9a819d54a2e65ec21ff0cc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a096668313a9a819d54a2e65ec21ff0cc">arm_compute::test::validation::info</a></div><div class="ttdeci">src info() -&gt; set_format(Format::S16)</div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5e61ba4403f0d2bd4f755f59193af692"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_throw_errors </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>throw_errors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set whether errors are caught or thrown by the framework. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">throw_errors</td><td>True if errors should be thrown. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00235">235</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="_framework_8cpp_source.xhtml#l00240">Framework::throw_errors()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    _throw_errors = <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a98bab95a13c24f15f3fa7d81f0222a09">throw_errors</a>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a98bab95a13c24f15f3fa7d81f0222a09"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a98bab95a13c24f15f3fa7d81f0222a09">arm_compute::test::framework::Framework::throw_errors</a></div><div class="ttdeci">bool throw_errors() const </div><div class="ttdoc">Should errors be caught or thrown by the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00240">Framework.cpp:240</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4d22ec5d060270ed5e0c348ca0177cdb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stop_on_error </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if test execution is stopped after the first failed test. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the execution is going to be aborted after the first failed test. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00250">250</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00245">Framework::set_stop_on_error()</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> _stop_on_error;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af77825496fa0fbf840b676d2c9aabaf4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a> &gt; test_infos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List of <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_test_info.xhtml">TestInfo</a>'s. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> with all test ids. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00625">625</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>References <a class="el" href="hwc_8hpp_source.xhtml#l00252">id</a>, and <a class="el" href="_test_filter_8cpp_source.xhtml#l00043">TestFilter::is_selected()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00062">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;{</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    std::vector&lt;TestInfo&gt; ids;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = 0;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;factory : _test_factories)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        TestInfo test_info{ <a class="code" href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a>, factory-&gt;name(), factory-&gt;mode(), factory-&gt;status() };</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">if</span>(_test_filter.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#ad4f8f3424c5f57e91d554e7e00a31fcf">is_selected</a>(test_info))</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        {</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            ids.emplace_back(std::move(test_info));</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        }</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        ++<a class="code" href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a>;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;}</div><div class="ttc" id="hwc_8hpp_xhtml_abaabdc509cdaba7df9f56c6c76f3ae19"><div class="ttname"><a href="hwc_8hpp.xhtml#abaabdc509cdaba7df9f56c6c76f3ae19">id</a></div><div class="ttdeci">uint32_t id</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00252">hwc.hpp:252</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_filter_xhtml_ad4f8f3424c5f57e91d554e7e00a31fcf"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_filter.xhtml#ad4f8f3424c5f57e91d554e7e00a31fcf">arm_compute::test::framework::TestFilter::is_selected</a></div><div class="ttdeci">bool is_selected(const TestInfo &amp;info) const </div><div class="ttdoc">Check if a test case is selected to be executed. </div><div class="ttdef"><b>Definition:</b> <a href="_test_filter_8cpp_source.xhtml#l00043">TestFilter.cpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a98bab95a13c24f15f3fa7d81f0222a09"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool throw_errors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Should errors be caught or thrown by the framework. </p>
<dl class="section return"><dt>Returns</dt><dd>True if errors are thrown. </dd></dl>

<p>Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00240">240</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p>Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00235">Framework::set_throw_errors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span> _throw_errors;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/framework/<a class="el" href="_framework_8h_source.xhtml">Framework.h</a></li>
<li>tests/framework/<a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">Framework</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
