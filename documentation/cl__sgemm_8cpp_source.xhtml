<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/cl_sgemm.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cl__sgemm_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">cl_sgemm.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cl__sgemm_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CL </span><span class="comment">/* Needed by Utils.cpp to handle OpenCL exceptions properly */</span><span class="preprocessor"></span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#error &quot;This example needs to be built with -DARM_COMPUTE_CL&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_functions_8h.xhtml">arm_compute/runtime/CL/CLFunctions.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_utils_8h.xhtml">utils/Utils.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">using namespace </span>utils;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="cl__sgemm_8cpp.xhtml#a97e46b1270a50083320d33dee4bcc8ac">   39</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="cl__sgemm_8cpp.xhtml#a97e46b1270a50083320d33dee4bcc8ac">main_cl_sgemm</a>(<span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">NPYLoader</a> npy0, npy1, npy2;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>  src0, src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">float</span>     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">alpha</a> = 1.0f, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a> = 0.0f;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> tuner;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a46ecf9ef0fe80ba2ed35acfc29856b7d">default_init</a>(&amp;tuner);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::ifstream stream;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span>(argc &gt; 1)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        stream.open(argv[1], std::fstream::in);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span>(argc &lt; 3 || (argc &lt; 4 &amp;&amp; stream.bad()))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="comment">// Print help</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: 1) ./build/cl_sgemm input_matrix_1.npy input_matrix_2.npy [input_matrix_3.npy] [alpha = 1] [beta = 0]\n&quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;       2) ./build/cl_sgemm M N K [alpha = 1.0f] [beta = 0.0f]\n\n&quot;</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Too few or no input_matrices provided. Using M=7, N=3, K=5, alpha=1.0f and beta=0.0f\n\n&quot;</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        src0.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(5<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 7<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        src1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 5<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 7<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span>(stream.good()) <span class="comment">/* case file1.npy file2.npy [file3.npy] [alpha = 1.0f] [beta = 0.0f] */</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a5988c0b8edbcd872e79d72cd47a8c18b">open</a>(argv[1]);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">init_tensor</a>(src0, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            npy1.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a5988c0b8edbcd872e79d72cd47a8c18b">open</a>(argv[2]);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            npy1.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">init_tensor</a>(src1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">if</span>(argc &gt; 3)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                stream.close();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                stream.clear();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                stream.open(argv[3], std::fstream::in);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">if</span>(stream.good()) <span class="comment">/* case with third file */</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    npy2.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a5988c0b8edbcd872e79d72cd47a8c18b">open</a>(argv[3]);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    npy2.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">init_tensor</a>(src2, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keywordflow">if</span>(argc &gt; 4)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="comment">// Convert string to float</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        alpha = strtof(argv[4], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        <span class="keywordflow">if</span>(argc &gt; 5)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                            <span class="comment">// Convert string to float</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a> = strtof(argv[5], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">else</span> <span class="comment">/* case without third file */</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    alpha = strtof(argv[3], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">if</span>(argc &gt; 4)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a> = strtof(argv[4], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">else</span> <span class="comment">/* case M N K [alpha = 1.0f] [beta = 0.0f] */</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">size_t</span> M = strtol(argv[1], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordtype">size_t</span> N = strtol(argv[2], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordtype">size_t</span> K = strtol(argv[3], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            src0.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(K, M), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            src1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(N, K), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(N, M), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span>(argc &gt; 4)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                alpha = strtof(argv[4], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">if</span>(argc &gt; 5)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a> = strtof(argv[5], <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">init_sgemm_output</a>(dst, src0, src1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// Configure function</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> sgemm;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    sgemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a48b9e5c0bdc8a7c306252dafff14741f">configure</a>(&amp;src0, &amp;src1, (src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>() &gt; 0) ? &amp;src2 : <span class="keyword">nullptr</span>, &amp;dst, alpha, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Allocate all the images</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    src0.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    src1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Fill the input images with either the data provided or random data</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span>(npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>())</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">fill_tensor</a>(src0);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        npy1.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">fill_tensor</a>(src1);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span>(npy2.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>())</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            npy2.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">fill_tensor</a>(src2);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#abe777f4e6d2b0d9964eee32f5ae3fca7">fill_random_tensor</a>(src0, -1.f, 1.f);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#abe777f4e6d2b0d9964eee32f5ae3fca7">fill_random_tensor</a>(src1, -1.f, 1.f);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#abe777f4e6d2b0d9964eee32f5ae3fca7">fill_random_tensor</a>(src2, -1.f, 1.f);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Dummy run for CLTuner</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    sgemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// Execute the function</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    sgemm.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Make sure all the OpenCL jobs are done executing:</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">auto</span> stop = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(!npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>()) <span class="comment">/* If the inputs were not files, print the results */</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\nMatrix 1:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        src0.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        src0.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0b092c86d6e0fb8a114281565953a02a">print</a>(std::cout, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        src0.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a>();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Matrix 2:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        src1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        src1.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0b092c86d6e0fb8a114281565953a02a">print</a>(std::cout, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        src1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a>();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Matrix 3:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        src2.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0b092c86d6e0fb8a114281565953a02a">print</a>(std::cout, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        src2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a>();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Alpha:&quot;</span> &lt;&lt; alpha &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Beta:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a> &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Output Matrix:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        dst.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0b092c86d6e0fb8a114281565953a02a">print</a>(std::cout, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>());</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a>();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">else</span> <span class="comment">/* Save to .npy file */</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3f8c80e5ec379049ad0a9ba1d8ad5547">save_to_npy</a>(dst, <span class="stringliteral">&quot;sgemm_out.npy&quot;</span>, npy0.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a8aa067630bcfd267bf3389ae27e70e76">is_fortran</a>());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">auto</span> delta = std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(stop - start);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Time elapsed: &quot;</span> &lt;&lt; delta.count() &lt;&lt; <span class="stringliteral">&quot;us.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="cl__sgemm_8cpp.xhtml#a217dbf8b442f20279ea00b898af96f52">  213</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="cl__sgemm_8cpp.xhtml#a217dbf8b442f20279ea00b898af96f52">main</a>(<span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4c9395db2c8b8d0c336656a7b58fca3e">utils::run_example</a>(argc, argv, <a class="code" href="cl__sgemm_8cpp.xhtml#a97e46b1270a50083320d33dee4bcc8ac">main_cl_sgemm</a>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml">arm_compute::CLTuner</a></div><div class="ttdoc">Basic implementation of the OpenCL tuner interface. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00037">CLTuner.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab146b9cbab6e73e7588b240dc709fe01"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">arm_compute::test::validation::beta</a></div><div class="ttdeci">beta</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00109">GEMM.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a48b9e5c0bdc8a7c306252dafff14741f"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a48b9e5c0bdc8a7c306252dafff14741f">arm_compute::CLGEMM::configure</a></div><div class="ttdeci">void configure(const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, float alpha, float beta)</div><div class="ttdoc">Initialise the kernel&amp;#39;s inputs and output. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a8aa067630bcfd267bf3389ae27e70e76"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a8aa067630bcfd267bf3389ae27e70e76">arm_compute::utils::NPYLoader::is_fortran</a></div><div class="ttdeci">bool is_fortran()</div><div class="ttdoc">Return true if a NPY file is in fortran order. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00510">Utils.h:510</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLGEMM::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a6e3c7f7584c89bfed519597f40c08528"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">arm_compute::utils::NPYLoader::init_tensor</a></div><div class="ttdeci">void init_tensor(T &amp;tensor, arm_compute::DataType dt)</div><div class="ttdoc">Initialise the tensor&amp;#39;s metadata with the dimensions of the NPY file currently open. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00521">Utils.h:521</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad6dc6b773780dd6b1ad17fc82368d9f3"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">ITensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div></div>
<div class="ttc" id="utils_2_utils_8h_xhtml"><div class="ttname"><a href="utils_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a055a51a536088065021a54e13968521d"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">arm_compute::utils::NPYLoader::fill_tensor</a></div><div class="ttdeci">void fill_tensor(T &amp;tensor)</div><div class="ttdoc">Fill a tensor with the content of the currently open NPY file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00545">Utils.h:545</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a97de03c31e0ca04be6960e2e3ffdca95"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4c9395db2c8b8d0c336656a7b58fca3e"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4c9395db2c8b8d0c336656a7b58fca3e">arm_compute::utils::run_example</a></div><div class="ttdeci">int run_example(int argc, const char **argv, example &amp;func)</div><div class="ttdoc">Run an example and handle the potential exceptions it throws. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00069">Utils.cpp:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a14c53d2d17be6fa8a2c9861527c7b002"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">arm_compute::CLTensor::map</a></div><div class="ttdeci">void map(bool blocking=true)</div><div class="ttdoc">Enqueue a map operation of the allocated buffer. </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_abe777f4e6d2b0d9964eee32f5ae3fca7"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#abe777f4e6d2b0d9964eee32f5ae3fca7">arm_compute::utils::fill_random_tensor</a></div><div class="ttdeci">void fill_random_tensor(T &amp;tensor, float lower_bound, float upper_bound)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00839">Utils.h:839</a></div></div>
<div class="ttc" id="cl__sgemm_8cpp_xhtml_a97e46b1270a50083320d33dee4bcc8ac"><div class="ttname"><a href="cl__sgemm_8cpp.xhtml#a97e46b1270a50083320d33dee4bcc8ac">main_cl_sgemm</a></div><div class="ttdeci">void main_cl_sgemm(int argc, const char **argv)</div><div class="ttdef"><b>Definition:</b> <a href="cl__sgemm_8cpp_source.xhtml#l00039">cl_sgemm.cpp:39</a></div></div>
<div class="ttc" id="_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div></div>
<div class="ttc" id="cl__sgemm_8cpp_xhtml_a217dbf8b442f20279ea00b898af96f52"><div class="ttname"><a href="cl__sgemm_8cpp.xhtml#a217dbf8b442f20279ea00b898af96f52">main</a></div><div class="ttdeci">int main(int argc, const char **argv)</div><div class="ttdoc">Main program for sgemm test. </div><div class="ttdef"><b>Definition:</b> <a href="cl__sgemm_8cpp_source.xhtml#l00213">cl_sgemm.cpp:213</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">arm_compute::utils::NPYLoader</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00476">Utils.h:476</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml">arm_compute::IOFormatInfo</a></div><div class="ttdoc">IO formatting information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00872">Types.h:872</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">arm_compute::CLGEMM</a></div><div class="ttdoc">Basic function to execute GEMM on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8h_source.xhtml#l00051">CLGEMM.h:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00267">TensorInfo.h:267</a></div></div>
<div class="ttc" id="_c_l_tuner_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_8h.xhtml">CLTuner.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a60f9a6836b628a7171914c4afe43b4a7"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">Tensor dst</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00118">GEMM.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a2f57f54d8c03b615bb31eee091d8a88a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">arm_compute::utils::NPYLoader::is_open</a></div><div class="ttdeci">bool is_open()</div><div class="ttdoc">Return true if a NPY file is currently open. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00504">Utils.h:504</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_aa8a4946cd749d482dd996874d295af85"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">arm_compute::ITensorAllocator::allocate</a></div><div class="ttdeci">virtual void allocate()=0</div><div class="ttdoc">Interface to be implemented by the child class to allocate the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3f8c80e5ec379049ad0a9ba1d8ad5547"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3f8c80e5ec379049ad0a9ba1d8ad5547">arm_compute::utils::save_to_npy</a></div><div class="ttdeci">void save_to_npy(T &amp;tensor, const std::string &amp;npy_filename, bool fortran_order)</div><div class="ttdoc">Template helper function to save a tensor image to a NPY file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00720">Utils.h:720</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad55f80ed3cd8b6c4f247763b747016af"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">arm_compute::CLScheduler::sync</a></div><div class="ttdeci">void sync()</div><div class="ttdoc">Blocks until all commands in the associated command queue have finished. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00174">CLScheduler.h:174</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_aa72161e0e3c0f6b2da20f835de6af680"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa72161e0e3c0f6b2da20f835de6af680">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00044">TensorInfo.h:44</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a62197192f0fbf4e0675eb37be1c4c175"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">arm_compute::test::validation::alpha</a></div><div class="ttdeci">alpha</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00109">GEMM.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a5988c0b8edbcd872e79d72cd47a8c18b"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a5988c0b8edbcd872e79d72cd47a8c18b">arm_compute::utils::NPYLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;npy_filename)</div><div class="ttdoc">Open a NPY file and reads its metadata. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00488">Utils.h:488</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_c_l_functions_8h_xhtml"><div class="ttname"><a href="_c_l_functions_8h.xhtml">CLFunctions.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a1ffeb3b5abb3d61f62b58a391816201c"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">arm_compute::CLTensor::unmap</a></div><div class="ttdeci">void unmap()</div><div class="ttdoc">Enqueue an unmap operation of the allocated and mapped buffer. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0b092c86d6e0fb8a114281565953a02a"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0b092c86d6e0fb8a114281565953a02a">arm_compute::ITensor::print</a></div><div class="ttdeci">void print(std::ostream &amp;s, IOFormatInfo io_fmt=IOFormatInfo()) const </div><div class="ttdoc">Print a tensor to a given stream using user defined formatting information. </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3ff90da00700526d89a0ee29f85fd804"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">arm_compute::utils::init_sgemm_output</a></div><div class="ttdeci">void init_sgemm_output(T &amp;dst, T &amp;src0, T &amp;src1, arm_compute::DataType dt)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00878">Utils.h:878</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a46ecf9ef0fe80ba2ed35acfc29856b7d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a46ecf9ef0fe80ba2ed35acfc29856b7d">arm_compute::CLScheduler::default_init</a></div><div class="ttdeci">void default_init(ICLTuner *cl_tuner=nullptr)</div><div class="ttdoc">Initialises the context and command queue used by the scheduler to default values and sets a default ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00083">CLScheduler.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00039">CLTensor.h:39</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="cl__sgemm_8cpp.xhtml">cl_sgemm.cpp</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:31 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
