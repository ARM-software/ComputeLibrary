<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: RawTensor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1_raw_tensor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">RawTensor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Subclass of <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a> using uint8_t as value type.  
 <a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for RawTensor:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1test_1_1_raw_tensor__coll__graph.svg" width="262" height="279"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad5f076c202d054557fde207a7e3b3b41"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">RawTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:ad5f076c202d054557fde207a7e3b3b41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>.  <a href="#ad5f076c202d054557fde207a7e3b3b41">More...</a><br /></td></tr>
<tr class="separator:ad5f076c202d054557fde207a7e3b3b41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af878b348cac7129792bd35d9a016b2d4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af878b348cac7129792bd35d9a016b2d4">RawTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>=1, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:af878b348cac7129792bd35d9a016b2d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type.  <a href="#af878b348cac7129792bd35d9a016b2d4">More...</a><br /></td></tr>
<tr class="separator:af878b348cac7129792bd35d9a016b2d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef0b9d628bdb5fe0a533a20e6c49e29f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aef0b9d628bdb5fe0a533a20e6c49e29f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aef0b9d628bdb5fe0a533a20e6c49e29f">RawTensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&amp;tensor)</td></tr>
<tr class="memdesc:aef0b9d628bdb5fe0a533a20e6c49e29f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conversion constructor from <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a>.  <a href="#aef0b9d628bdb5fe0a533a20e6c49e29f">More...</a><br /></td></tr>
<tr class="separator:aef0b9d628bdb5fe0a533a20e6c49e29f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29752327fa8a586a73ef96f04d41cf38"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a29752327fa8a586a73ef96f04d41cf38"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a29752327fa8a586a73ef96f04d41cf38">operator SimpleTensor&lt; T &gt;</a> ()</td></tr>
<tr class="memdesc:a29752327fa8a586a73ef96f04d41cf38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conversion operator to <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a>.  <a href="#a29752327fa8a586a73ef96f04d41cf38">More...</a><br /></td></tr>
<tr class="separator:a29752327fa8a586a73ef96f04d41cf38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ac1b3afa1c0a4618768b43a7a0d930cd6">RawTensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor)</td></tr>
<tr class="memdesc:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ac1b3afa1c0a4618768b43a7a0d930cd6">More...</a><br /></td></tr>
<tr class="separator:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf951228abf3337929f26f7c0feedcac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abf951228abf3337929f26f7c0feedcac">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> tensor)</td></tr>
<tr class="separator:abf951228abf3337929f26f7c0feedcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dcfdb740cfee882a573929d51e3cf9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a5dcfdb740cfee882a573929d51e3cf9b">RawTensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a5dcfdb740cfee882a573929d51e3cf9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ab8156de913df911b4ad1ad46f51313"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a1ab8156de913df911b4ad1ad46f51313">~RawTensor</a> ()=default</td></tr>
<tr class="separator:a1ab8156de913df911b4ad1ad46f51313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39537b09ccc3ce3d17922f4ef49a123f"><td class="memItemLeft" align="right" valign="top">const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a39537b09ccc3ce3d17922f4ef49a123f">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) const override</td></tr>
<tr class="memdesc:a39537b09ccc3ce3d17922f4ef49a123f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to the specified element.  <a href="#a39537b09ccc3ce3d17922f4ef49a123f">More...</a><br /></td></tr>
<tr class="separator:a39537b09ccc3ce3d17922f4ef49a123f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2df95f7046b81e69a1265a42202ea068"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a2df95f7046b81e69a1265a42202ea068">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) override</td></tr>
<tr class="memdesc:a2df95f7046b81e69a1265a42202ea068"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the specified element.  <a href="#a2df95f7046b81e69a1265a42202ea068">More...</a><br /></td></tr>
<tr class="separator:a2df95f7046b81e69a1265a42202ea068"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1test_1_1_simple_tensor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt; uint8_t &gt;</a></td></tr>
<tr class="memitem:a011bb65bd16aaf66b8efb3929692b2ce inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">SimpleTensor</a> ()=default</td></tr>
<tr class="memdesc:a011bb65bd16aaf66b8efb3929692b2ce inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor.  <a href="#a011bb65bd16aaf66b8efb3929692b2ce">More...</a><br /></td></tr>
<tr class="separator:a011bb65bd16aaf66b8efb3929692b2ce inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1cd44d7621633f8ae04a3a16287673 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a1cd44d7621633f8ae04a3a16287673">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:a9a1cd44d7621633f8ae04a3a16287673 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>.  <a href="#a9a1cd44d7621633f8ae04a3a16287673">More...</a><br /></td></tr>
<tr class="separator:a9a1cd44d7621633f8ae04a3a16287673 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595bc6006e098a6564cbc270eaac9667 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a595bc6006e098a6564cbc270eaac9667">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>=1, int <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>=0, <a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>=<a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a595bc6006e098a6564cbc270eaac9667 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type.  <a href="#a595bc6006e098a6564cbc270eaac9667">More...</a><br /></td></tr>
<tr class="separator:a595bc6006e098a6564cbc270eaac9667 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1769959044a4356fdc93cac2b03a5f6 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ae1769959044a4356fdc93cac2b03a5f6">SimpleTensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;tensor)</td></tr>
<tr class="memdesc:ae1769959044a4356fdc93cac2b03a5f6 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ae1769959044a4356fdc93cac2b03a5f6">More...</a><br /></td></tr>
<tr class="separator:ae1769959044a4356fdc93cac2b03a5f6 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40eed42b5858849fb8570018760ba996 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a40eed42b5858849fb8570018760ba996">SimpleTensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a40eed42b5858849fb8570018760ba996 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4622eda610d53fb6852209f0213aeed inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad4622eda610d53fb6852209f0213aeed">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> tensor)</td></tr>
<tr class="memdesc:ad4622eda610d53fb6852209f0213aeed inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ad4622eda610d53fb6852209f0213aeed">More...</a><br /></td></tr>
<tr class="separator:ad4622eda610d53fb6852209f0213aeed inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16d7ecd97f89cf9dc40b3fc7c9abe2cd inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a16d7ecd97f89cf9dc40b3fc7c9abe2cd">~SimpleTensor</a> ()=default</td></tr>
<tr class="separator:a16d7ecd97f89cf9dc40b3fc7c9abe2cd inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6124c81d1e81f182d64ae76caa3fa52 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">uint8_t &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#af6124c81d1e81f182d64ae76caa3fa52">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:af6124c81d1e81f182d64ae76caa3fa52 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return value at <code>offset</code> in the buffer.  <a href="#af6124c81d1e81f182d64ae76caa3fa52">More...</a><br /></td></tr>
<tr class="separator:af6124c81d1e81f182d64ae76caa3fa52 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73aecdf45b3f257e0c15757a18573ea4 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">const uint8_t &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a73aecdf45b3f257e0c15757a18573ea4">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) const</td></tr>
<tr class="memdesc:a73aecdf45b3f257e0c15757a18573ea4 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return constant value at <code>offset</code> in the buffer.  <a href="#a73aecdf45b3f257e0c15757a18573ea4">More...</a><br /></td></tr>
<tr class="separator:a73aecdf45b3f257e0c15757a18573ea4 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba5871b3e4a65d057ec1c28fce8b00ba inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a> () const override</td></tr>
<tr class="memdesc:aba5871b3e4a65d057ec1c28fce8b00ba inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shape of the tensor.  <a href="#aba5871b3e4a65d057ec1c28fce8b00ba">More...</a><br /></td></tr>
<tr class="separator:aba5871b3e4a65d057ec1c28fce8b00ba inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b67b578f684c4d516843c9dea86a23 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a> () const override</td></tr>
<tr class="memdesc:a62b67b578f684c4d516843c9dea86a23 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of each element in the tensor in bytes.  <a href="#a62b67b578f684c4d516843c9dea86a23">More...</a><br /></td></tr>
<tr class="separator:a62b67b578f684c4d516843c9dea86a23 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7701a09a964eab360a8e51fa7ad2c16 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a> () const override</td></tr>
<tr class="memdesc:ad7701a09a964eab360a8e51fa7ad2c16 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Total size of the tensor in bytes.  <a href="#ad7701a09a964eab360a8e51fa7ad2c16">More...</a><br /></td></tr>
<tr class="separator:ad7701a09a964eab360a8e51fa7ad2c16 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b36cc1e56b0b7e579bb4b7196490db inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a> () const override</td></tr>
<tr class="memdesc:ac4b36cc1e56b0b7e579bb4b7196490db inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> format of the tensor.  <a href="#ac4b36cc1e56b0b7e579bb4b7196490db">More...</a><br /></td></tr>
<tr class="separator:ac4b36cc1e56b0b7e579bb4b7196490db inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a3e72153aeb3ed212e9c3698774e881 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a> () const override</td></tr>
<tr class="memdesc:a9a3e72153aeb3ed212e9c3698774e881 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type of the tensor.  <a href="#a9a3e72153aeb3ed212e9c3698774e881">More...</a><br /></td></tr>
<tr class="separator:a9a3e72153aeb3ed212e9c3698774e881 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdd3637f2bbde9d7d0cc0b7bbd8400bb inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a> () const override</td></tr>
<tr class="memdesc:abdd3637f2bbde9d7d0cc0b7bbd8400bb inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of channels of the tensor.  <a href="#abdd3637f2bbde9d7d0cc0b7bbd8400bb">More...</a><br /></td></tr>
<tr class="separator:abdd3637f2bbde9d7d0cc0b7bbd8400bb inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedcfdd4c3b92fe0d63b5463c7ad1d21e inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a> () const override</td></tr>
<tr class="memdesc:aedcfdd4c3b92fe0d63b5463c7ad1d21e inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of elements of the tensor.  <a href="#aedcfdd4c3b92fe0d63b5463c7ad1d21e">More...</a><br /></td></tr>
<tr class="separator:aedcfdd4c3b92fe0d63b5463c7ad1d21e inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e20eacb1e963e24a21ebd7369effd7 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a> () const override</td></tr>
<tr class="memdesc:a79e20eacb1e963e24a21ebd7369effd7 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available padding around the tensor.  <a href="#a79e20eacb1e963e24a21ebd7369effd7">More...</a><br /></td></tr>
<tr class="separator:a79e20eacb1e963e24a21ebd7369effd7 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ccf2eb0c18a15feab2db98b307b78b inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a> () const override</td></tr>
<tr class="memdesc:a35ccf2eb0c18a15feab2db98b307b78b inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of bits for the fractional part of the fixed point numbers.  <a href="#a35ccf2eb0c18a15feab2db98b307b78b">More...</a><br /></td></tr>
<tr class="separator:a35ccf2eb0c18a15feab2db98b307b78b inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74736e3863207232a23b7181c1d0f44 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a> () const override</td></tr>
<tr class="memdesc:ac74736e3863207232a23b7181c1d0f44 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantization info in case of asymmetric quantized type.  <a href="#ac74736e3863207232a23b7181c1d0f44">More...</a><br /></td></tr>
<tr class="separator:ac74736e3863207232a23b7181c1d0f44 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c52a8f0085b55d907af7210ef2069d0 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">const uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a0c52a8f0085b55d907af7210ef2069d0">data</a> () const</td></tr>
<tr class="memdesc:a0c52a8f0085b55d907af7210ef2069d0 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant pointer to the underlying buffer.  <a href="#a0c52a8f0085b55d907af7210ef2069d0">More...</a><br /></td></tr>
<tr class="separator:a0c52a8f0085b55d907af7210ef2069d0 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1e16b293a89a9ccc9541058b5ca560 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#adc1e16b293a89a9ccc9541058b5ca560">data</a> ()</td></tr>
<tr class="memdesc:adc1e16b293a89a9ccc9541058b5ca560 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the underlying buffer.  <a href="#adc1e16b293a89a9ccc9541058b5ca560">More...</a><br /></td></tr>
<tr class="separator:adc1e16b293a89a9ccc9541058b5ca560 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39537b09ccc3ce3d17922f4ef49a123f inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a39537b09ccc3ce3d17922f4ef49a123f">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) const override</td></tr>
<tr class="memdesc:a39537b09ccc3ce3d17922f4ef49a123f inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to the specified element.  <a href="#a39537b09ccc3ce3d17922f4ef49a123f">More...</a><br /></td></tr>
<tr class="separator:a39537b09ccc3ce3d17922f4ef49a123f inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2df95f7046b81e69a1265a42202ea068 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a2df95f7046b81e69a1265a42202ea068">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) override</td></tr>
<tr class="memdesc:a2df95f7046b81e69a1265a42202ea068 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the specified element.  <a href="#a2df95f7046b81e69a1265a42202ea068">More...</a><br /></td></tr>
<tr class="separator:a2df95f7046b81e69a1265a42202ea068 inherit pub_methods_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1test_1_1_i_accessor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a></td></tr>
<tr class="memitem:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a04e5197de7318cec1ebfd3cea50f5de5">~IAccessor</a> ()=default</td></tr>
<tr class="memdesc:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a04e5197de7318cec1ebfd3cea50f5de5">More...</a><br /></td></tr>
<tr class="separator:a04e5197de7318cec1ebfd3cea50f5de5 inherit pub_methods_classarm__compute_1_1test_1_1_i_accessor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1test_1_1_simple_tensor"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1test_1_1_simple_tensor')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt; uint8_t &gt;</a></td></tr>
<tr class="memitem:afb9ded5f49336ae503bb9f2035ea902b inherit pub_types_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a> = uint8_t</td></tr>
<tr class="separator:afb9ded5f49336ae503bb9f2035ea902b inherit pub_types_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf18a24d1f21176e811e88cee2a70f1f inherit pub_types_classarm__compute_1_1test_1_1_simple_tensor"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#acf18a24d1f21176e811e88cee2a70f1f">Buffer</a> = std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">value_type</a>[]&gt;</td></tr>
<tr class="separator:acf18a24d1f21176e811e88cee2a70f1f inherit pub_types_classarm__compute_1_1test_1_1_simple_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Subclass of <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a> using uint8_t as value type. </p>
<p>Access operations (except for operator[]) will be based on the data type to copy the right number of elements. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad5f076c202d054557fde207a7e3b3b41"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor&lt; T &gt;::element_size()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_raw_tensor_8h_source.xhtml#l00083">RawTensor::operator SimpleTensor&lt; T &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">SimpleTensor</a>(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    _buffer = support::cpp14::make_unique&lt;uint8_t[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">SimpleTensor::num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">SimpleTensor::num_channels</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">SimpleTensor::element_size</a>());</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Image format of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a011bb65bd16aaf66b8efb3929692b2ce"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::SimpleTensor</a></div><div class="ttdeci">SimpleTensor()=default</div><div class="ttdoc">Create an uninitialised tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a35ccf2eb0c18a15feab2db98b307b78b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const override</div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af878b348cac7129792bd35d9a016b2d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) Number of channels (default = 1). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers (default = 0). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor&lt; T &gt;::element_size()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor&lt; T &gt;::num_channels()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    : <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">SimpleTensor</a>(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">fixed_point_position</a>)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    _buffer = support::cpp14::make_unique&lt;uint8_t[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">SimpleTensor::num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">SimpleTensor::num_channels</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">SimpleTensor::element_size</a>());</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00250">SimpleTensor.h:250</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a011bb65bd16aaf66b8efb3929692b2ce"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::SimpleTensor</a></div><div class="ttdeci">SimpleTensor()=default</div><div class="ttdoc">Create an uninitialised tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00315">SimpleTensor.h:315</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a35ccf2eb0c18a15feab2db98b307b78b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const override</div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aef0b9d628bdb5fe0a533a20e6c49e29f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Conversion constructor from <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a>. </p>
<p>The passed <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a> will be destroyed after it has been converted to a <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml" title="Subclass of SimpleTensor using uint8_t as value type. ">RawTensor</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a> to be converted to a <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml" title="Subclass of SimpleTensor using uint8_t as value type. ">RawTensor</a>. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00066">66</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        _buffer               = std::unique_ptr&lt;uint8_t[]&gt;(<span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(tensor._buffer.release()));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        _shape                = std::move(tensor._shape);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        _format               = tensor._format;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        _data_type            = tensor._data_type;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        _num_channels         = tensor._num_channels;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        _fixed_point_position = tensor._fixed_point_position;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac1b3afa1c0a4618768b43a7a0d930cd6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the given <code>tensor</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>To be copied tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00327">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">SimpleTensor&lt; uint8_t &gt;::element_size()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00275">SimpleTensor&lt; T &gt;::format()</a>, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">SimpleTensor&lt; uint8_t &gt;::num_channels()</a>, and <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">SimpleTensor&lt; uint8_t &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    : <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">SimpleTensor</a>(tensor.shape(), tensor.data_type(), tensor.num_channels(), tensor.fixed_point_position())</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    _format = tensor.format();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    _buffer = support::cpp14::make_unique&lt;uint8_t[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::copy_n(tensor.data(), <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>() * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), _buffer.get());</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a011bb65bd16aaf66b8efb3929692b2ce"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a011bb65bd16aaf66b8efb3929692b2ce">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::SimpleTensor</a></div><div class="ttdeci">SimpleTensor()=default</div><div class="ttdoc">Create an uninitialised tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5dcfdb740cfee882a573929d51e3cf9b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1ab8156de913df911b4ad1ad46f51313"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="_raw_tensor_8h_source.xhtml#l00083">RawTensor::operator SimpleTensor&lt; T &gt;()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a29752327fa8a586a73ef96f04d41cf38"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">operator <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Conversion operator to <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a>. </p>
<p>The current <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml" title="Subclass of SimpleTensor using uint8_t as value type. ">RawTensor</a> must not be used after the conversion.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory. ">SimpleTensor</a> of the given type. </dd></dl>

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00083">83</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00057">RawTensor::operator()()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00050">RawTensor::operator=()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00030">RawTensor::RawTensor()</a>, and <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a1ab8156de913df911b4ad1ad46f51313">RawTensor::~RawTensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        SimpleTensor&lt;T&gt; cast;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        cast._buffer               = std::unique_ptr&lt;T[]&gt;(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(_buffer.release()));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        cast._shape                = std::move(_shape);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        cast._format               = _format;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        cast._data_type            = _data_type;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        cast._num_channels         = _num_channels;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        cast._fixed_point_position = _fixed_point_position;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> cast;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a39537b09ccc3ce3d17922f4ef49a123f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const void * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read only access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a583a35e4fd72f072a6b76ce58c2e3998">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00413">arm_compute::test::coord2index()</a>, and <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">SimpleTensor&lt; uint8_t &gt;::element_size()</a>.</p>

<p>Referenced by <a class="el" href="_raw_tensor_8h_source.xhtml#l00083">RawTensor::operator SimpleTensor&lt; T &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00413">Utils.h:413</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2df95f7046b81e69a1265a42202ea068"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a9fd1359f2b5ea45a31bd79b381281eb4">IAccessor</a>.</p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00413">arm_compute::test::coord2index()</a>, and <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">SimpleTensor&lt; uint8_t &gt;::element_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00413">Utils.h:413</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abf951228abf3337929f26f7c0feedcac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor&lt; uint8_t &gt;::swap</a>.</p>

<p>Referenced by <a class="el" href="_raw_tensor_8h_source.xhtml#l00083">RawTensor::operator SimpleTensor&lt; T &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">swap</a>(*<span class="keyword">this</span>, tensor);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a51920d34b0fa5415e84891ad8e755224"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a51920d34b0fa5415e84891ad8e755224">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::swap</a></div><div class="ttdeci">friend void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00351">SimpleTensor.h:351</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/<a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a></li>
<li>tests/<a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
