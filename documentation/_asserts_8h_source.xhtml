<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/Asserts.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_asserts_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Asserts.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_asserts_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_FRAMEWORK_ASSERTS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_FRAMEWORK_ASSERTS</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8h.xhtml">Exceptions.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_framework_8h.xhtml">Framework.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml">   37</a></span>&#160;<span class="keyword">namespace </span>framework</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Cast char values to int so that their numeric value are printed.</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">   40</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">make_printable</a>(int8_t <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml#a2abe3b2eae7dbf37ba0370baf7b8608d">   45</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">make_printable</a>(uint8_t <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// Everything else can be printed as its own type.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml#a5acaca5463f6a0958c7bc243adda0e14">   52</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">make_printable</a>(T &amp;&amp;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">   57</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">ARM_COMPUTE_PRINT_INFO</a>()</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">print_test_info</a>(msg);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a60b060774255916807ef1cca44bfbfe1">log_info</a>(msg.str());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">clear_test_info</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#ac498e3dc31f8819519a9497b2d5789c1">   65</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_INFO(INFO)                                               \</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    {                                                                             \</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">        std::stringstream info;                                                   \</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">        info &lt;&lt; INFO;                                                             \</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().add_test_info(info.str()); \</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml">   72</a></span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">   74</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_COMP_FACTORY(SEVERITY, SEVERITY_NAME, COMP, COMP_NAME, ERROR_CALL)                                            \</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">    template &lt;typename T, typename U&gt;                                                                                                  \</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    void ARM_COMPUTE_##SEVERITY##_##COMP_NAME##_IMPL(T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level) \</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    {                                                                                                                                  \</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">        if(!(x COMP y))                                                                                                                \</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">        {                                                                                                                              \</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">            std::stringstream msg;                                                                                                     \</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">            msg &lt;&lt; #SEVERITY_NAME &quot; &#39;&quot; &lt;&lt; x_str &lt;&lt; &quot; &quot; #COMP &quot; &quot; &lt;&lt; y_str &lt;&lt; &quot;&#39; failed. [&quot;                                             \</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">                &lt;&lt; std::boolalpha &lt;&lt; arm_compute::test::framework::make_printable(x)                                                   \</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">                &lt;&lt; &quot; &quot; #COMP &quot; &quot;                                                                                                       \</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">                &lt;&lt; std::boolalpha &lt;&lt; arm_compute::test::framework::make_printable(y)                                                   \</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">                &lt;&lt; &quot;]\n&quot;;                                                                                                              \</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">            arm_compute::test::framework::Framework::get().print_test_info(msg);                                                       \</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">            ERROR_CALL                                                                                                                 \</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">        }                                                                                                                              \</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().clear_test_info();                                                              \</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#ae9bc925970822e824eb1f740d46f2e8a">   92</a></span>&#160;<a class="code" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a>(EXPECT, Expectation, ==, EQUAL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a>().log_failed_expectation(<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), level));)</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#a8d2500614dd09dd9edf7df40934e7a77">   93</a></span>&#160;<a class="code" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a>(EXPECT, Expectation, !=, NOT_EQUAL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a>().<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">log_failed_expectation</a>(<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), level));)</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#af78c3c4f8aca44d2ba3de3af92cd0f96">   94</a></span>&#160;<a class="code" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a>(ASSERT, Assertion, ==, EQUAL, <span class="keywordflow">throw</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), level);)</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">   95</a></span>&#160;<a class="code" href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a>(ASSERT, Assertion, !=, NOT_EQUAL, <span class="keywordflow">throw</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a>(msg.str(), level);)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#aea1f0ff429c8ce509e55250fa125d883">   98</a></span>&#160;#define <a class="code" href="_asserts_8h.xhtml#aea1f0ff429c8ce509e55250fa125d883">ARM_COMPUTE_ASSERT_NOT_EQUAL</a>(X, Y) <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">\</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">    arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL</a>(X, Y, #X, #Y, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">LogLevel::ERRORS</a>)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#afc547cbd8b525edcf4895a961e03cfd0">  101</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ASSERT_EQUAL(X, Y) \</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">    arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_EQUAL_IMPL(X, Y, #X, #Y, LogLevel::ERRORS)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#ac057d80e0c27881ee453299d98a878f4">  104</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPECT_EQUAL(X, Y, LEVEL) \</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">    arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_EQUAL_IMPL(X, Y, #X, #Y, LEVEL)</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#a375312dd537df40cc86ffdbe7e024385">  107</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPECT_NOT_EQUAL(X, Y, LEVEL) \</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">    arm_compute::test::framework::detail::ARM_COMPUTE_EXPECT_NOT_EQUAL_IMPL(X, Y, #X, #Y, LEVEL)</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#a83bf33add9b97f6897b7b3db2766dd27">  110</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ASSERT(X)                                                                                         \</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">    do                                                                                                                \</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">    {                                                                                                                 \</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">        const auto &amp;x = X;                                                                                            \</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">        if(!x)                                                                                                        \</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">        {                                                                                                             \</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">            std::stringstream msg;                                                                                    \</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">            msg &lt;&lt; &quot;Assertion &#39;&quot; #X &quot;&#39; failed.\n&quot;;                                                                    \</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">            arm_compute::test::framework::Framework::get().print_test_info(msg);                                      \</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">            throw arm_compute::test::framework::TestError(msg.str(), arm_compute::test::framework::LogLevel::ERRORS); \</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">        }                                                                                                             \</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().clear_test_info();                                             \</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">    } while(false)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#adc60af942e951dc93e22b97b41809b51">  124</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPECT(X, LEVEL)                                                                                                          \</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">    do                                                                                                                                        \</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">    {                                                                                                                                         \</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">        const auto &amp;x = X;                                                                                                                    \</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">        if(!x)                                                                                                                                \</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">        {                                                                                                                                     \</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">            std::stringstream msg;                                                                                                            \</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">            msg &lt;&lt; &quot;Expectation &#39;&quot; #X &quot;&#39; failed.\n&quot;;                                                                                          \</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">            arm_compute::test::framework::Framework::get().print_test_info(msg);                                                              \</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">            arm_compute::test::framework::Framework::get().log_failed_expectation(arm_compute::test::framework::TestError(msg.str(), LEVEL)); \</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">        }                                                                                                                                     \</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().clear_test_info();                                                                     \</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">    } while(false)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#a774d3fd18bd9c1856a965a35a432f2d4">  138</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ASSERT_FAIL(MSG)                                                                              \</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">    do                                                                                                            \</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    {                                                                                                             \</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">        std::stringstream msg;                                                                                    \</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">        msg &lt;&lt; &quot;Assertion &#39;&quot; &lt;&lt; MSG &lt;&lt; &quot;&#39; failed.\n&quot;;                                                             \</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().print_test_info(msg);                                      \</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">        throw arm_compute::test::framework::TestError(msg.str(), arm_compute::test::framework::LogLevel::ERRORS); \</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().clear_test_info();                                         \</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">    } while(false)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="_asserts_8h.xhtml#a5c196704614e365ae4be76e3867c4e53">  148</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPECT_FAIL(MSG, LEVEL)                                                                                               \</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">    do                                                                                                                                    \</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">    {                                                                                                                                     \</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">        std::stringstream msg;                                                                                                            \</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">        msg &lt;&lt; &quot;Expectation &#39;&quot; &lt;&lt; MSG &lt;&lt; &quot;&#39; failed.\n&quot;;                                                                                   \</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().print_test_info(msg);                                                              \</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().log_failed_expectation(arm_compute::test::framework::TestError(msg.str(), LEVEL)); \</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">        arm_compute::test::framework::Framework::get().clear_test_info();                                                                 \</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">    } while(false)</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;} <span class="comment">// namespace framework</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_FRAMEWORK_ASSERTS */</span><span class="preprocessor"></span></div><div class="ttc" id="_asserts_8h_xhtml_a9b1013d9828dd87c5ea4a43c31db18cc"><div class="ttname"><a href="_asserts_8h.xhtml#a9b1013d9828dd87c5ea4a43c31db18cc">ARM_COMPUTE_TEST_COMP_FACTORY</a></div><div class="ttdeci">#define ARM_COMPUTE_TEST_COMP_FACTORY(SEVERITY, SEVERITY_NAME, COMP, COMP_NAME, ERROR_CALL)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00074">Asserts.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a26c3f59f0cdb3e54a82878c7daf94594"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a26c3f59f0cdb3e54a82878c7daf94594">arm_compute::test::framework::Framework::print_test_info</a></div><div class="ttdeci">void print_test_info(std::ostream &amp;os) const </div><div class="ttdoc">Print test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00142">Framework.cpp:142</a></div></div>
<div class="ttc" id="_asserts_8h_xhtml_aea1f0ff429c8ce509e55250fa125d883"><div class="ttname"><a href="_asserts_8h.xhtml#aea1f0ff429c8ce509e55250fa125d883">ARM_COMPUTE_ASSERT_NOT_EQUAL</a></div><div class="ttdeci">#define ARM_COMPUTE_ASSERT_NOT_EQUAL(X, Y)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00098">Asserts.h:98</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ac82666ff37e69696e3945d175a50e363"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ac82666ff37e69696e3945d175a50e363">arm_compute::test::framework::make_printable</a></div><div class="ttdeci">int make_printable(int8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00040">Asserts.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a0128e62cd67888b56078dac05dd59761"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a0128e62cd67888b56078dac05dd59761">arm_compute::test::framework::Framework::log_failed_expectation</a></div><div class="ttdeci">void log_failed_expectation(const TestError &amp;error)</div><div class="ttdoc">Tell the framework that the currently running test case failed a non-fatal expectation. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00196">Framework.cpp:196</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a60b060774255916807ef1cca44bfbfe1"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a60b060774255916807ef1cca44bfbfe1">arm_compute::test::framework::Framework::log_info</a></div><div class="ttdeci">void log_info(const std::string &amp;info)</div><div class="ttdoc">Print the debug information that has already been logged. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00214">Framework.cpp:214</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_af8fbb8b386d3cce307a89002bcdbcfc9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#af8fbb8b386d3cce307a89002bcdbcfc9">arm_compute::test::framework::Framework::get</a></div><div class="ttdeci">static Framework &amp; get()</div><div class="ttdoc">Access to the singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00096">Framework.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7457955ed1c49b6478071caa7b5c5be2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7457955ed1c49b6478071caa7b5c5be2">arm_compute::test::framework::ARM_COMPUTE_PRINT_INFO</a></div><div class="ttdeci">void ARM_COMPUTE_PRINT_INFO()</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00057">Asserts.h:57</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="_exceptions_8h_xhtml"><div class="ttname"><a href="_exceptions_8h.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_1_1detail_xhtml_aaa05b2025b37c285ce6e9edfb437fc06"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework_1_1detail.xhtml#aaa05b2025b37c285ce6e9edfb437fc06">arm_compute::test::framework::detail::ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL</a></div><div class="ttdeci">void ARM_COMPUTE_ASSERT_NOT_EQUAL_IMPL(T &amp;&amp;x, U &amp;&amp;y, const std::string &amp;x_str, const std::string &amp;y_str, LogLevel level)</div><div class="ttdef"><b>Definition:</b> <a href="_asserts_8h_source.xhtml#l00095">Asserts.h:95</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a6f3a603fac4d817f1848c3173b243b57">arm_compute::test::framework::LogLevel::ERRORS</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_error_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_error.xhtml">arm_compute::test::framework::TestError</a></div><div class="ttdoc">Error class for failures during test execution. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00078">Exceptions.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_afb6a973ccd27225a87d59d93ca458720"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#afb6a973ccd27225a87d59d93ca458720">arm_compute::test::framework::Framework::clear_test_info</a></div><div class="ttdeci">void clear_test_info()</div><div class="ttdoc">Clear the collected test info. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00132">Framework.cpp:132</a></div></div>
<div class="ttc" id="_framework_8h_xhtml"><div class="ttname"><a href="_framework_8h.xhtml">Framework.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="_asserts_8h.xhtml">Asserts.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
