<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: support/ToolchainSupport.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_toolchain_support_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ToolchainSupport.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_toolchain_support_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_TOOLCHAINSUPPORT</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_TOOLCHAINSUPPORT</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_half_8h.xhtml">support/Half.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support.xhtml">   41</a></span>&#160;<span class="keyword">namespace </span>support</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml">   43</a></span>&#160;<span class="keyword">namespace </span>cpp11</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#if(__ANDROID__ || BARE_METAL)</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">template &lt;typename T, typename std::enable_if&lt;std::is_arithmetic&lt;typename std::decay&lt;T&gt;::type</a>&gt;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">::value</a>, <span class="keywordtype">int</span>&gt;<a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">::type</a> = 0&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a>(T &amp;&amp; <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::stringstream stream;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    stream &lt;&lt; std::forward&lt;T&gt;(<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> stream.str();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aeb1811acb18248b8919a2cf1203e3faf">stoi</a>(<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">int</span>               <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a> = 0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    stream &gt;&gt; <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a3c9ee94e1de3032f244cf041310868b4">stoul</a>(<span class="keyword">const</span> std::string &amp;str)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>     <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a> = 0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    stream &gt;&gt; <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa4152693b62db2a43edcc0039de95e38">stof</a>(<span class="keyword">const</span> std::string &amp;str)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">float</span>             <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a> = 0.f;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    stream &gt;&gt; <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">round</a>(T <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">return ::round</a>(value);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">trunc</a>(T value)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">return ::trunc</a>(value);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">copysign</a>(T x, T y)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">return ::copysign</a>(x, y);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">snprintf</a>(<span class="keywordtype">char</span> *s, <span class="keywordtype">size_t</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span> *fmt, Ts &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">return ::snprintf</a>(s, n, fmt, std::forward&lt;Ts&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* (__ANDROID__ || BARE_METAL) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">  187</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a>(T &amp;&amp;value)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">return ::std::to_string</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aeb1811acb18248b8919a2cf1203e3faf">  202</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aeb1811acb18248b8919a2cf1203e3faf">stoi</a>(Ts &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aeb1811acb18248b8919a2cf1203e3faf">return ::std::stoi</a>(std::forward&lt;Ts&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a3c9ee94e1de3032f244cf041310868b4">  217</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a3c9ee94e1de3032f244cf041310868b4">stoul</a>(Ts &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a3c9ee94e1de3032f244cf041310868b4">return ::std::stoul</a>(std::forward&lt;Ts&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa4152693b62db2a43edcc0039de95e38">  232</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa4152693b62db2a43edcc0039de95e38">stof</a>(Ts &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa4152693b62db2a43edcc0039de95e38">return ::std::stof</a>(std::forward&lt;Ts&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">  247</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">round</a>(T value)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">std::round</a>(value);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">  262</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">trunc</a>(T value)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">std::trunc</a>(value);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">  278</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">copysign</a>(T x, T y)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">std::copysign</a>(x, y);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">  295</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">snprintf</a>(<span class="keywordtype">char</span> *s, std::size_t n, <span class="keyword">const</span> <span class="keywordtype">char</span> *fmt, Ts &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">std::snprintf</a>(s, n, fmt, std::forward&lt;Ts&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* (__ANDROID__ || BARE_METAL) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">  301</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a>(<span class="keywordtype">bool</span> value)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    str &lt;&lt; std::boolalpha &lt;&lt; <a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">// std::align is missing in GCC 4.9</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57350</span></div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">  310</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> *<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">align</a>(std::size_t alignment, std::size_t <a class="code" href="hwc_8hpp.xhtml#ab2c6b258f02add8fdf4cfc7c371dd772">size</a>, <span class="keywordtype">void</span> *&amp;ptr, std::size_t &amp;space)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    std::uintptr_t pn      = <span class="keyword">reinterpret_cast&lt;</span>std::uintptr_t<span class="keyword">&gt;</span>(ptr);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    std::uintptr_t aligned = (pn + alignment - 1) &amp; -alignment;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    std::size_t    <a class="code" href="hwc_8hpp.xhtml#ad487ce76e40f524a7f5e350763b91ae5">padding</a> = aligned - pn;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span>(space &lt; size + padding)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    space -= <a class="code" href="hwc_8hpp.xhtml#ad487ce76e40f524a7f5e350763b91ae5">padding</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(aligned);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">// std::isfinite</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<a class="code" href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">template &lt;typename T, typename = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value</a>&gt;::type&gt;</div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">  327</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">isfinite</a>(T value)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">std::isfinite</a>(value);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">  332</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">isfinite</a>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half_float::half</a> value)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">half_float::isfinite</a>(value);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;} <span class="comment">// namespace cpp11</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp14.xhtml">  338</a></span>&#160;<span class="keyword">namespace </span>cpp14</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">  342</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">  344</a></span>&#160;    <span class="keyword">typedef</span> std::unique_ptr&lt;T&gt; <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">_Single_object</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;};</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml">  348</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a>&lt;T[]&gt;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div><div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">  350</a></span>&#160;    <span class="keyword">typedef</span> std::unique_ptr&lt;T[]&gt; <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">_Unknown_bound</a>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;};</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml">  354</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a>&lt;T[N]&gt;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div><div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">  356</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">_Known_bound</a>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;};</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">_Unique_if&lt;T&gt;::_Single_object</a></div><div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a94d8ad03db9ccb2005b06858856d0a4c">  361</a></span>&#160;<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">make_unique</a>(Args &amp;&amp;... <a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;T&gt;(<span class="keyword">new</span> T(std::forward&lt;Args&gt;(<a class="code" href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...));</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt;T&gt;::_Unknown_bound</a></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a9497f049c3bfd9fcebdec84397fff2b9">  368</a></span>&#160;<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">make_unique</a>(<span class="keywordtype">size_t</span> n)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">std::remove_extent&lt;T&gt;::type</a> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;T&gt;(<span class="keyword">new</span> U[n]());</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt;T&gt;::_Known_bound</a></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">make_unique</a>(Args &amp;&amp;...) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;} <span class="comment">// namespace cpp14</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;} <span class="comment">// namespace support</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_TOOLCHAINSUPPORT */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aae1437f4a38c4ada64e7a2586aa35bf8"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(bool value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00301">ToolchainSupport.h:301</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00262">ToolchainSupport.h:262</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp14_xhtml_a2ccfba86a91625f5bc79156f2a598a6d"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a2ccfba86a91625f5bc79156f2a598a6d">arm_compute::support::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Known_bound make_unique(Args &amp;&amp;...)=delete</div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a28096f8372c0ad762864c790917375e2"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">arm_compute::support::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00187">ToolchainSupport.h:187</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00043">Types.h:43</a></div></div>
<div class="ttc" id="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_xhtml"><div class="ttname"><a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml">arm_compute::support::cpp14::_Unique_if</a></div><div class="ttdoc">make_unique is missing in CPP11. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00342">ToolchainSupport.h:342</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_xhtml_a110afbff84e3935821a5dd174781da73"><div class="ttname"><a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">arm_compute::support::cpp14::_Unique_if::_Single_object</a></div><div class="ttdeci">std::unique_ptr&lt; T &gt; _Single_object</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00344">ToolchainSupport.h:344</a></div></div>
<div class="ttc" id="_half_8h_xhtml"><div class="ttname"><a href="_half_8h.xhtml">Half.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a079a0ecb5fc05e0a107785f2573bc854"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(T value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00327">ToolchainSupport.h:327</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a3c9ee94e1de3032f244cf041310868b4"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a3c9ee94e1de3032f244cf041310868b4">arm_compute::support::cpp11::stoul</a></div><div class="ttdeci">int stoul(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to unsigned long. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00217">ToolchainSupport.h:217</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="hwc_8hpp_xhtml_ab2c6b258f02add8fdf4cfc7c371dd772"><div class="ttname"><a href="hwc_8hpp.xhtml#ab2c6b258f02add8fdf4cfc7c371dd772">size</a></div><div class="ttdeci">uint32_t size</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00276">hwc.hpp:276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a6004ef5c66f38e0e45ff8fcc8a30392a"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a6004ef5c66f38e0e45ff8fcc8a30392a">arm_compute::support::cpp11::snprintf</a></div><div class="ttdeci">int snprintf(char *s, std::size_t n, const char *fmt, Ts &amp;&amp;...args)</div><div class="ttdoc">Loads the data from the given location, converts them to character string equivalents and writes the ...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00295">ToolchainSupport.h:295</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a9e51e04e3f86c823883757ef22d4f39a"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">arm_compute::support::cpp11::align</a></div><div class="ttdeci">void * align(std::size_t alignment, std::size_t size, void *&amp;ptr, std::size_t &amp;space)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00310">ToolchainSupport.h:310</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aeb1811acb18248b8919a2cf1203e3faf"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aeb1811acb18248b8919a2cf1203e3faf">arm_compute::support::cpp11::stoi</a></div><div class="ttdeci">int stoi(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to integer. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00202">ToolchainSupport.h:202</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_a0f61d63b009d0880a89c843bd50d8d76"><div class="ttname"><a href="hwc_8hpp.xhtml#a0f61d63b009d0880a89c843bd50d8d76">value</a></div><div class="ttdeci">void * value</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00269">hwc.hpp:269</a></div></div>
<div class="ttc" id="hwc_8hpp_xhtml_ad487ce76e40f524a7f5e350763b91ae5"><div class="ttname"><a href="hwc_8hpp.xhtml#ad487ce76e40f524a7f5e350763b91ae5">padding</a></div><div class="ttdeci">uint8_t padding[4]</div><div class="ttdef"><b>Definition:</b> <a href="hwc_8hpp_source.xhtml#l00265">hwc.hpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ab71c35ca207b916a9f8b0336ab88484e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">arm_compute::support::cpp11::round</a></div><div class="ttdeci">T round(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00247">ToolchainSupport.h:247</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_data_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a7aead736a07eaf25623ad7bfa1f0ee2d"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">caffe_data_extractor.type</a></div><div class="ttdeci">type</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00019">caffe_data_extractor.py:19</a></div></div>
<div class="ttc" id="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4_xhtml_a7bdc8412f0630ce38a08b0455830216d"><div class="ttname"><a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">arm_compute::support::cpp14::_Unique_if&lt; T[]&gt;::_Unknown_bound</a></div><div class="ttdeci">std::unique_ptr&lt; T[]&gt; _Unknown_bound</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00350">ToolchainSupport.h:350</a></div></div>
<div class="ttc" id="namespacecaffe__data__extractor_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespacecaffe__data__extractor.xhtml#a8187411843a6284ffb964ef3fb9fcab3">caffe_data_extractor.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="caffe__data__extractor_8py_source.xhtml#l00021">caffe_data_extractor.py:21</a></div></div>
<div class="ttc" id="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4_xhtml_a344694425c9a8cf20c0869bdc4c675b6"><div class="ttname"><a href="structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">arm_compute::support::cpp14::_Unique_if&lt; T[N]&gt;::_Known_bound</a></div><div class="ttdeci">void _Known_bound</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00356">ToolchainSupport.h:356</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(half_float::half value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00332">ToolchainSupport.h:332</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aa4152693b62db2a43edcc0039de95e38"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa4152693b62db2a43edcc0039de95e38">arm_compute::support::cpp11::stof</a></div><div class="ttdeci">int stof(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to float. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00232">ToolchainSupport.h:232</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5815af820a9cc9481f1d0990a0d60286.xhtml">support</a></li><li class="navelem"><a class="el" href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
