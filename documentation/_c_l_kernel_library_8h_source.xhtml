<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/CL/CLKernelLibrary.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_c_l_kernel_library_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLKernelLibrary.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_kernel_library_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016, 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_CLKERNELLIBRARY_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_CLKERNELLIBRARY_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_8h.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_build_options.xhtml">   37</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">using</span> StringSet = std::set&lt;std::string&gt;;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#af889744e64b496ba5dc1ef57f9918f79">CLBuildOptions</a>();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(std::string option);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a95b46e69297fad10b27a1baa000f92cc">add_option_if</a>(<span class="keywordtype">bool</span> cond, std::string option);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a9b58a8c8bf638904a0b5f62b2bfcf96a">add_option_if_else</a>(<span class="keywordtype">bool</span> cond, std::string option_true, std::string option_false);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84">add_options</a>(<span class="keyword">const</span> StringSet &amp;<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#aa8653d4327df885173a41982fa0f777a">options</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a504e7a51a86c19f1f529f739f50729f2">add_options_if</a>(<span class="keywordtype">bool</span> cond, <span class="keyword">const</span> StringSet &amp;options);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> StringSet &amp;<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#aa8653d4327df885173a41982fa0f777a">options</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    StringSet _build_opts; </div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;};</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_program.xhtml">   83</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_program.xhtml">Program</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a>(cl::Context context, std::string name, std::string source);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a>(cl::Context context, cl::Device device, std::string name, std::vector&lt;unsigned char&gt; binary);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a>(<a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;operator=(<a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_program.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">  115</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_program.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> _name;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> cl::Program() <span class="keyword">const</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> build(<span class="keyword">const</span> cl::Program &amp;program, <span class="keyword">const</span> std::string &amp;build_options = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    cl::Program build(<span class="keyword">const</span> std::string &amp;build_options = <span class="stringliteral">&quot;&quot;</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    cl::Context                _context;   </div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    cl::Device                 _device;    </div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">bool</span>                       _is_binary; </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::string                _name;      </div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::string                _source;    </div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::vector&lt;unsigned char&gt; _binary;    </div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;};</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml">  144</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a>();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a>(<a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;operator=(<a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a>(std::string name, <span class="keyword">const</span> cl::Program &amp;program);</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">  167</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_kernel.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> _name;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml#ad3a94f90bef30dbf3529c617cb8b2c53">  175</a></span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> cl::Kernel()<span class="keyword"> const</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">return</span> _kernel;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::string _name;   </div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    cl::Kernel  _kernel; </div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;};</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml">  186</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">using</span> StringSet = std::set&lt;std::string&gt;;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;<span class="keyword">get</span>();</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#af353532ea782387df6bcb6d01894f4ae">  209</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#af353532ea782387df6bcb6d01894f4ae">init</a>(std::string kernel_path = <span class="stringliteral">&quot;.&quot;</span>, cl::Context context = cl::Context::getDefault(), cl::Device device = cl::Device::getDefault())</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        _kernel_path = std::move(kernel_path);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        _context     = std::move(context);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        _device      = std::move(device);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">  219</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">set_kernel_path</a>(<span class="keyword">const</span> std::string &amp;kernel_path)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        _kernel_path = kernel_path;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    };</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">  225</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">get_kernel_path</a>()</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> _kernel_path;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    };</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    std::string get_program_source(<span class="keyword">const</span> std::string &amp;program_name);</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">  241</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(cl::Context context)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        _context = std::move(context);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> cl_devices = _context.getInfo&lt;CL_CONTEXT_DEVICES&gt;();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span>(cl_devices.empty())</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            _device = cl::Device();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            _device = cl_devices[0];</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">  260</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">set_device</a>(cl::Device device)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        _device = std::move(device);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> <a class="code" href="namespacearm__compute.xhtml#a5e7625bcc531d297c9b988a33cb2da32">create_kernel</a>(<span class="keyword">const</span> std::string &amp;kernel_name, <span class="keyword">const</span> StringSet &amp;build_options_set = {}) <span class="keyword">const</span>;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordtype">void</span> save_binary();</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordtype">void</span> load_binary();</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">size_t</span> max_local_workgroup_size(<span class="keyword">const</span> cl::Kernel &amp;kernel) <span class="keyword">const</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    cl::NDRange default_ndrange() <span class="keyword">const</span>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;load_program(<span class="keyword">const</span> std::string &amp;program_name) <span class="keyword">const</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    std::string stringify_set(<span class="keyword">const</span> StringSet &amp;s) <span class="keyword">const</span>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    cl::Context _context;                                                </div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    cl::Device  _device;                                                 </div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    std::string _kernel_path;                                            </div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">mutable</span> std::map&lt;std::string, const Program&gt;    _programs_map;       </div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">mutable</span> std::map&lt;std::string, cl::Program&gt;      _built_programs_map; </div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; _kernel_program_map; </div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; _program_source_map; </div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;};</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_CLKERNELLIBRARY_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_af353532ea782387df6bcb6d01894f4ae"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#af353532ea782387df6bcb6d01894f4ae">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path=&quot;.&quot;, cl::Context context=cl::Context::getDefault(), cl::Device device=cl::Device::getDefault())</div><div class="ttdoc">Initialises the kernel library. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00209">CLKernelLibrary.h:209</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a66a558a56f5d0dcd6305c405ebc38cc2"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">arm_compute::CLKernelLibrary::set_kernel_path</a></div><div class="ttdeci">void set_kernel_path(const std::string &amp;kernel_path)</div><div class="ttdoc">Sets the path that the kernels reside in. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00219">CLKernelLibrary.h:219</a></div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml_a37627d5d5bba7f4a8690c71c2ab3cb07"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">arm_compute::Program::name</a></div><div class="ttdeci">std::string name() const </div><div class="ttdoc">Returns program name. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00115">CLKernelLibrary.h:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_af889744e64b496ba5dc1ef57f9918f79"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#af889744e64b496ba5dc1ef57f9918f79">arm_compute::CLBuildOptions::CLBuildOptions</a></div><div class="ttdeci">CLBuildOptions()</div><div class="ttdoc">Default constructor. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLKernelLibrary::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00241">CLKernelLibrary.h:241</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a3e2b80ff5463b7d2017de847f5c32a30"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">arm_compute::CLBuildOptions::add_option</a></div><div class="ttdeci">void add_option(std::string option)</div><div class="ttdoc">Adds option to the existing build option list. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a58abf0792821f6f1d6271570aa27dd84"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84">arm_compute::CLBuildOptions::add_options</a></div><div class="ttdeci">void add_options(const StringSet &amp;options)</div><div class="ttdoc">Appends given build options to the current&amp;#39;s objects options. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a5a6865d04c8d3348860f3cb8100fdb97"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">arm_compute::CLKernelLibrary::set_device</a></div><div class="ttdeci">void set_device(cl::Device device)</div><div class="ttdoc">Sets the CL device for which the programs are created. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00260">CLKernelLibrary.h:260</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_aa8653d4327df885173a41982fa0f777a"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#aa8653d4327df885173a41982fa0f777a">arm_compute::CLBuildOptions::options</a></div><div class="ttdeci">const StringSet &amp; options() const </div><div class="ttdoc">Gets the current options list set. </div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml">arm_compute::Program</a></div><div class="ttdoc">Program class. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00083">CLKernelLibrary.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a95b46e69297fad10b27a1baa000f92cc"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a95b46e69297fad10b27a1baa000f92cc">arm_compute::CLBuildOptions::add_option_if</a></div><div class="ttdeci">void add_option_if(bool cond, std::string option)</div><div class="ttdoc">Adds option if a given condition is true;. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml">arm_compute::CLBuildOptions</a></div><div class="ttdoc">Build options. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00037">CLKernelLibrary.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml">arm_compute::Kernel</a></div><div class="ttdoc">Kernel class. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00144">CLKernelLibrary.h:144</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5e7625bcc531d297c9b988a33cb2da32"><div class="ttname"><a href="namespacearm__compute.xhtml#a5e7625bcc531d297c9b988a33cb2da32">arm_compute::create_kernel</a></div><div class="ttdeci">std::unique_ptr&lt; Kernel &gt; create_kernel()</div><div class="ttdoc">Helper function to create and return a unique_ptr pointed to a CL kernel object. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_helpers_8h_source.xhtml#l00100">CLHelpers.h:100</a></div></div>
<div class="ttc" id="_open_c_l_8h_xhtml"><div class="ttname"><a href="_open_c_l_8h.xhtml">OpenCL.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml">arm_compute::CLKernelLibrary</a></div><div class="ttdoc">CLKernelLibrary class. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00186">CLKernelLibrary.h:186</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_ad7395c158d8e31b9af211b9bc1f65a08"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">arm_compute::CLKernelLibrary::get_kernel_path</a></div><div class="ttdeci">std::string get_kernel_path()</div><div class="ttdoc">Gets the path that the kernels reside in. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00225">CLKernelLibrary.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml_a37627d5d5bba7f4a8690c71c2ab3cb07"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">arm_compute::Kernel::name</a></div><div class="ttdeci">std::string name() const </div><div class="ttdoc">Returns kernel name. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00167">CLKernelLibrary.h:167</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a504e7a51a86c19f1f529f739f50729f2"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a504e7a51a86c19f1f529f739f50729f2">arm_compute::CLBuildOptions::add_options_if</a></div><div class="ttdeci">void add_options_if(bool cond, const StringSet &amp;options)</div><div class="ttdoc">Appends given build options to the current&amp;#39;s objects options if a given condition is true...</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a9b58a8c8bf638904a0b5f62b2bfcf96a"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a9b58a8c8bf638904a0b5f62b2bfcf96a">arm_compute::CLBuildOptions::add_option_if_else</a></div><div class="ttdeci">void add_option_if_else(bool cond, std::string option_true, std::string option_false)</div><div class="ttdoc">Adds first option if condition is true else the second one. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_1633709b037eda5b8477677909f78129.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:30 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
