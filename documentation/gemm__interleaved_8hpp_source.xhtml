<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/NEON/kernels/assembly/gemm_interleaved.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm__interleaved_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_interleaved.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__interleaved_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="gemm__common_8hpp.xhtml">gemm_common.hpp</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="profiler_8hpp.xhtml">profiler.hpp</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8hpp.xhtml">transform.hpp</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mergeresults_8hpp.xhtml">mergeresults.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// Some macros used to decide how much working space to allocate.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// Round allocations up to the next cache line.</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#abd1ded15e3688096ead983e87f83fbd1">   36</a></span>&#160;<span class="preprocessor">#define ALLOC_ROUND 64</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">   37</a></span>&#160;<span class="preprocessor">#define ROUND_UP(x) ((((x) + ALLOC_ROUND-1) / ALLOC_ROUND) * ALLOC_ROUND)</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Implementation of the GemmCommon abstract class.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// This implementation interleaves the source matrices in blocks - good for</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// larger matrices.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="class_gemm_interleaved.xhtml">   44</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_interleaved.xhtml">GemmInterleaved</a> : <span class="keyword">public</span> <a class="code" href="class_gemm_common.xhtml">GemmCommon</a>&lt;To, Tr&gt; {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::operand_type Toi;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type Tri;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> M;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> K;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> trA;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> trB;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> strategy strat;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block = 0;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_block = 0;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Mround = 0;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">size_t</span> get_a_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * k_block * Mround);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">size_t</span> get_b_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * x_block * k_block);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">size_t</span> get_c_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Tri) * x_block * strat.out_height);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="class_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">   74</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="class_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">get_working_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> get_a_working_size() + get_b_working_size() + get_c_working_size();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="class_gemm_interleaved.xhtml#ad4b554ff56ba355e66b70698b1393085">   78</a></span>&#160;    <a class="code" href="class_gemm_interleaved.xhtml#ad4b554ff56ba355e66b70698b1393085">GemmInterleaved</a>(<span class="keyword">const</span> CPUInfo *ci, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> M, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> K, <span class="keyword">const</span> <span class="keywordtype">bool</span> trA, <span class="keyword">const</span> <span class="keywordtype">bool</span> trB) : M(M), N(N), K(K), trA(trA), trB(trB), strat(ci) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = ci-&gt;L1_size;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = ci-&gt;L2_size;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Work out blocking parameters</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="comment">// k_block: Each iteration will consume (out_width + out_height)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// operands - so how many iterations will fill the L1?</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        k_block = L1_size / (<span class="keyword">sizeof</span>(Toi) * (strat.out_width + strat.out_height));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Needs to be a multiple of the K unroll level.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        k_block /= strat.k_unroll;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        k_block *= strat.k_unroll;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordtype">int</span> num_k_blocks = (K + (k_block - 1)) / k_block;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        k_block = (K + num_k_blocks - 1) / num_k_blocks;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        k_block = (k_block + strat.k_unroll - 1) / strat.k_unroll;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        k_block *= strat.k_unroll;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        x_block = L2_size / (<span class="keyword">sizeof</span>(Toi) * k_block);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Needs to be a multiple of the kernel output width.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        x_block /= strat.out_width;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        x_block *= strat.out_width;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordtype">int</span> num_x_blocks = (N + (x_block - 1)) / x_block;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        x_block = (N + num_x_blocks - 1) / num_x_blocks;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        x_block = (x_block + strat.out_width - 1) / strat.out_width;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        x_block *= strat.out_width;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// Work out the rounded size of M - needed for some buffers.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        Mround = (M + (strat.out_height - 1)) / strat.out_height;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        Mround *= strat.out_height;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Actually execute the GEMM.</span></div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="class_gemm_interleaved.xhtml#a51e6173ab8fcea6e02f04352d43838dd">  122</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_gemm_interleaved.xhtml#a51e6173ab8fcea6e02f04352d43838dd">execute</a>(<span class="keyword">const</span> To *A, <span class="keyword">const</span> <span class="keywordtype">int</span> lda, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, Tr *C, <span class="keyword">const</span> <span class="keywordtype">int</span> ldc, <span class="keyword">const</span> Tr <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">alpha</a>, <span class="keyword">const</span> Tr <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a>, <span class="keywordtype">void</span> *working_space)<span class="keyword"> const override </span>{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        assert(working_space);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <a class="code" href="classprofiler.xhtml">profiler</a> prof;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        intptr_t working_space_int = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(working_space_bytes);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordtype">size_t</span> diff = 0;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0xF) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            diff = 0x10 - (working_space_int &amp; 0xF);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + diff);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        Toi * <span class="keyword">const</span> b_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + get_a_working_size() + diff);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + get_a_working_size() + get_b_working_size() + diff);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;K; k0 += k_block) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax = k0 + k_block;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (kmax &gt; K) kmax = K;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">int</span> kern_k = ((kmax - k0) + (strat.k_unroll - 1)) / strat.k_unroll;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            kern_k *= strat.k_unroll;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            prof(<a class="code" href="profiler_8hpp.xhtml#ac19bf2c5c388b9fb21cd0668475b2cf7">PROFILE_PREPA</a>, (M * (kmax-k0) * <span class="keyword">sizeof</span>(Toi)), [&amp;](void) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">if</span> (trA ^ strategy::A_transpose) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    Transform&lt;strategy::A_interleave, strategy::A_block, true&gt;(a_panel, A, lda, 0, M, k0, kmax);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    Transform&lt;strategy::A_interleave, strategy::A_block, false&gt;(a_panel, A, lda, 0, M, k0, kmax);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            });</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0&lt;N; x0 += x_block) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = x0 + x_block;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">if</span> (xmax &gt; N) xmax = N;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordtype">int</span> bblocks = (xmax - x0 + strat.out_width - 1) / strat.out_width;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                prof(<a class="code" href="profiler_8hpp.xhtml#af0477dfaa86fc08825cb3f31212f423c">PROFILE_PREPB</a>, (xmax-x0) * (kmax-k0) * <span class="keyword">sizeof</span>(Toi), [&amp;](void) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keywordflow">if</span> (trB ^ strategy::B_transpose) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        Transform&lt;strategy::B_interleave, strategy::B_block, true&gt;(b_panel, B, ldb, x0, xmax, k0, kmax);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        Transform&lt;strategy::B_interleave, strategy::B_block, false&gt;(b_panel, B, ldb, x0, xmax, k0, kmax);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                });</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=0; y&lt;M; y+=strat.out_height) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax = y + strat.out_height;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">if</span> (ymax &gt; M) ymax = M;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    prof(<a class="code" href="profiler_8hpp.xhtml#a97f4e398174b5e094f5262e5d785ac20">PROFILE_KERNEL</a>, (strat.out_height * bblocks * strat.out_width * kern_k), [&amp;](<span class="keywordtype">void</span>) { strat.kernel(a_panel + (y * kern_k), b_panel, c_panel, 1, bblocks, kern_k); });</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    prof(<a class="code" href="profiler_8hpp.xhtml#a2f7c3e65a9ccab509d7776832f562dd0">PROFILE_MERGE</a>, (strat.out_height * bblocks * strat.out_width * <span class="keyword">sizeof</span>(Tr)), [&amp;](<span class="keywordtype">void</span>) { MergeResults&lt;strategy::out_width, strategy::out_height&gt;(C, c_panel, ldc, y, ymax, x0, xmax, alpha, (k0==0 ? beta : static_cast&lt;Tr&gt;(1))); });</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;};</div><div class="ttc" id="gemm__common_8hpp_xhtml"><div class="ttname"><a href="gemm__common_8hpp.xhtml">gemm_common.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab146b9cbab6e73e7588b240dc709fe01"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">arm_compute::test::validation::beta</a></div><div class="ttdeci">beta</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00109">GEMM.cpp:109</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_af0477dfaa86fc08825cb3f31212f423c"><div class="ttname"><a href="profiler_8hpp.xhtml#af0477dfaa86fc08825cb3f31212f423c">PROFILE_PREPB</a></div><div class="ttdeci">#define PROFILE_PREPB</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00099">profiler.hpp:99</a></div></div>
<div class="ttc" id="mergeresults_8hpp_xhtml"><div class="ttname"><a href="mergeresults_8hpp.xhtml">mergeresults.hpp</a></div></div>
<div class="ttc" id="class_gemm_common_xhtml"><div class="ttname"><a href="class_gemm_common.xhtml">GemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00028">gemm_common.hpp:28</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml"><div class="ttname"><a href="profiler_8hpp.xhtml">profiler.hpp</a></div></div>
<div class="ttc" id="transform_8hpp_xhtml"><div class="ttname"><a href="transform_8hpp.xhtml">transform.hpp</a></div></div>
<div class="ttc" id="class_gemm_interleaved_xhtml"><div class="ttname"><a href="class_gemm_interleaved.xhtml">GemmInterleaved</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00044">gemm_interleaved.hpp:44</a></div></div>
<div class="ttc" id="class_gemm_interleaved_xhtml_ad4b554ff56ba355e66b70698b1393085"><div class="ttname"><a href="class_gemm_interleaved.xhtml#ad4b554ff56ba355e66b70698b1393085">GemmInterleaved::GemmInterleaved</a></div><div class="ttdeci">GemmInterleaved(const CPUInfo *ci, const unsigned int M, const unsigned int N, const unsigned int K, const bool trA, const bool trB)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00078">gemm_interleaved.hpp:78</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_a97f4e398174b5e094f5262e5d785ac20"><div class="ttname"><a href="profiler_8hpp.xhtml#a97f4e398174b5e094f5262e5d785ac20">PROFILE_KERNEL</a></div><div class="ttdeci">#define PROFILE_KERNEL</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00100">profiler.hpp:100</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_ac19bf2c5c388b9fb21cd0668475b2cf7"><div class="ttname"><a href="profiler_8hpp.xhtml#ac19bf2c5c388b9fb21cd0668475b2cf7">PROFILE_PREPA</a></div><div class="ttdeci">#define PROFILE_PREPA</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00098">profiler.hpp:98</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a5560b3c73e2e50a0b1bda1fa70ec58af"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a></div><div class="ttdeci">#define ROUND_UP(x)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00037">gemm_interleaved.hpp:37</a></div></div>
<div class="ttc" id="class_gemm_interleaved_xhtml_abf5a58f6feffeae31f48b750cba9303d"><div class="ttname"><a href="class_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">GemmInterleaved::get_working_size</a></div><div class="ttdeci">size_t get_working_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00074">gemm_interleaved.hpp:74</a></div></div>
<div class="ttc" id="classprofiler_xhtml"><div class="ttname"><a href="classprofiler.xhtml">profiler</a></div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00088">profiler.hpp:88</a></div></div>
<div class="ttc" id="class_gemm_interleaved_xhtml_a51e6173ab8fcea6e02f04352d43838dd"><div class="ttname"><a href="class_gemm_interleaved.xhtml#a51e6173ab8fcea6e02f04352d43838dd">GemmInterleaved::execute</a></div><div class="ttdeci">void execute(const To *A, const int lda, const To *B, const int ldb, Tr *C, const int ldc, const Tr alpha, const Tr beta, void *working_space) const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00122">gemm_interleaved.hpp:122</a></div></div>
<div class="ttc" id="profiler_8hpp_xhtml_a2f7c3e65a9ccab509d7776832f562dd0"><div class="ttname"><a href="profiler_8hpp.xhtml#a2f7c3e65a9ccab509d7776832f562dd0">PROFILE_MERGE</a></div><div class="ttdeci">#define PROFILE_MERGE</div><div class="ttdef"><b>Definition:</b> <a href="profiler_8hpp_source.xhtml#l00101">profiler.hpp:101</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a62197192f0fbf4e0675eb37be1c4c175"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">arm_compute::test::validation::alpha</a></div><div class="ttdeci">alpha</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_g_e_m_m_8cpp_source.xhtml#l00109">GEMM.cpp:109</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_315f6cf1ec0b2df3ae747ff8286a19f5.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_2c3c4cb85e732569e2614ad40a451d53.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_1528feb24a69b98c734f0fefcf3a82e1.xhtml">assembly</a></li><li class="navelem"><a class="el" href="gemm__interleaved_8hpp.xhtml">gemm_interleaved.hpp</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:30 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
