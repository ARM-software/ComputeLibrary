<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/networks/MobileNetNetwork.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_mobile_net_network_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MobileNetNetwork.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_mobile_net_network_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_MODEL_OBJECTS_MOBILENET_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_MODEL_OBJECTS_MOBILENET_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_assets_library_8h.xhtml">tests/AssetsLibrary.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_globals_8h.xhtml">tests/Globals.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_utils_8h.xhtml">utils/Utils.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>networks</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorType,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;          <span class="keyword">typename</span> <a class="code" href="classarm__compute_1_1test_1_1_accessor.xhtml">Accessor</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;          <span class="keyword">typename</span> ActivationLayerFunction,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;          <span class="keyword">typename</span> ConvolutionLayerFunction,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;          <span class="keyword">typename</span> DirectConvolutionLayerFunction,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;          <span class="keyword">typename</span> DepthwiseConvolutionLayerFunction,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;          <span class="keyword">typename</span> ReshapeFunction,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;          <span class="keyword">typename</span> PoolingLayerFunction&gt;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml">   53</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml">MobileNetNetwork</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ae3ad9a7ab50bae85c5020f337adc7869">   56</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ae3ad9a7ab50bae85c5020f337adc7869">init</a>(<span class="keywordtype">int</span> batches)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        _batches = batches;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// Initialize input, output</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        input.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(224<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 224<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, _batches), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        output.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(11<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, _batches), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// Initialize weights and biases</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        w_conv3x3.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 16<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        b_conv3x3.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(16<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        depthwise_conv_block_init(0, 16, 16);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        depthwise_conv_block_init(1, 16, 32);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        depthwise_conv_block_init(2, 32, 32);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        depthwise_conv_block_init(3, 32, 64);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        depthwise_conv_block_init(4, 64, 64);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        depthwise_conv_block_init(5, 64, 128);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        depthwise_conv_block_init(6, 128, 128);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        depthwise_conv_block_init(7, 128, 128);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        depthwise_conv_block_init(8, 128, 128);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        depthwise_conv_block_init(9, 128, 128);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        depthwise_conv_block_init(10, 128, 128);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        depthwise_conv_block_init(11, 128, 256);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        depthwise_conv_block_init(12, 256, 256);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        w_conv[13].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 256<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 11<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        b_conv[13].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(11<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a7740c7ab195c03ac140f1f75f633470f">   84</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a7740c7ab195c03ac140f1f75f633470f">build</a>()</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Configure Layers</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        conv3x3.configure(&amp;input, &amp;w_conv3x3, &amp;b_conv3x3, &amp;conv_out[0], <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        conv3x3_act.configure(&amp;conv_out[0], <span class="keyword">nullptr</span>, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>, 6.f));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        depthwise_conv_block_build(0, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        depthwise_conv_block_build(1, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        depthwise_conv_block_build(2, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        depthwise_conv_block_build(3, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        depthwise_conv_block_build(4, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        depthwise_conv_block_build(5, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        depthwise_conv_block_build(6, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        depthwise_conv_block_build(7, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        depthwise_conv_block_build(8, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        depthwise_conv_block_build(9, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        depthwise_conv_block_build(10, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        depthwise_conv_block_build(11, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        depthwise_conv_block_build(12, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 1, 1, 1, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        pool.configure(&amp;conv_out[13], &amp;pool_out, <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>, 7, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(2, 2, 0, 0)));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        conv1x1[13].configure(&amp;pool_out, &amp;w_conv[13], &amp;b_conv[13], &amp;conv_out[14], <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        logistic.configure(&amp;conv_out[14], <span class="keyword">nullptr</span>, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        reshape.configure(&amp;conv_out[14], &amp;output);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">  108</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">allocate</a>()</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        input.allocator()-&gt;allocate();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        output.allocator()-&gt;allocate();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        w_conv3x3.allocator()-&gt;allocate();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        b_conv3x3.allocator()-&gt;allocate();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_conv.size(); ++i)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            w_conv[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            b_conv[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_dwc.size(); ++i)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            w_dwc[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            b_dwc[i].allocator()-&gt;allocate();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;o : conv_out)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            o.allocator()-&gt;allocate();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;o : dwc_out)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            o.allocator()-&gt;allocate();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        pool_out.allocator()-&gt;allocate();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3b778cda9ac3fad08e7217edbcb942e0">  137</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3b778cda9ac3fad08e7217edbcb942e0">fill_random</a>()</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                     seed_idx = 0;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        std::uniform_real_distribution&lt;&gt; distribution(-1, 1);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(input), distribution, seed_idx++);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(w_conv3x3), distribution, seed_idx++);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(b_conv3x3), distribution, seed_idx++);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_conv.size(); ++i)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(w_conv[i]), distribution, seed_idx++);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(b_conv[i]), distribution, seed_idx++);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_dwc.size(); ++i)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(w_dwc[i]), distribution, seed_idx++);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(b_dwc[i]), distribution, seed_idx++);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3a41262ce9aed70a248ecefae646013b">  161</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3a41262ce9aed70a248ecefae646013b">feed</a>(std::string name)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill_layer_data(Accessor(input), name);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a1466ef70729f3c8b5da5ebfec3f53f26">  170</a></span>&#160;    std::vector&lt;unsigned int&gt; <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a1466ef70729f3c8b5da5ebfec3f53f26">get_classifications</a>()</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::vector&lt;unsigned int&gt; classified_labels;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        Accessor                  output_accessor(output);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt; output_accessor.<a class="code" href="classarm__compute_1_1test_1_1_accessor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++d)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, output_accessor.<a class="code" href="classarm__compute_1_1test_1_1_accessor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()[d], 1));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordtype">int</span>               max_idx = 0;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordtype">float</span>             val     = 0;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> out_ptr = output_accessor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> l = 0; l &lt; output_accessor.<a class="code" href="classarm__compute_1_1test_1_1_accessor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(); ++l)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordtype">float</span> curr_val = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out_ptr)[l];</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keywordflow">if</span>(curr_val &gt; val)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    max_idx = l;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    val     = curr_val;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            classified_labels.push_back(max_idx);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        });</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">return</span> classified_labels;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ac8bb3912a3ce86b15842e79d0b421204">  202</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ac8bb3912a3ce86b15842e79d0b421204">clear</a>()</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        input.allocator()-&gt;free();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        output.allocator()-&gt;free();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        w_conv3x3.allocator()-&gt;free();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        b_conv3x3.allocator()-&gt;free();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_conv.size(); ++i)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            w_conv[i].allocator()-&gt;free();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            b_conv[i].allocator()-&gt;free();</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; w_dwc.size(); ++i)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            w_dwc[i].allocator()-&gt;free();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            b_dwc[i].allocator()-&gt;free();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;o : conv_out)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            o.allocator()-&gt;free();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;o : dwc_out)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            o.allocator()-&gt;free();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        pool_out.allocator()-&gt;free();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a13a43e6d814de94978c515cb084873b1">  231</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a13a43e6d814de94978c515cb084873b1">run</a>()</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        conv3x3.run();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        conv3x3_act.run();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        depthwise_conv_block_run(0);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        depthwise_conv_block_run(1);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        depthwise_conv_block_run(2);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        depthwise_conv_block_run(3);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        depthwise_conv_block_run(4);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        depthwise_conv_block_run(5);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        depthwise_conv_block_run(6);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        depthwise_conv_block_run(7);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        depthwise_conv_block_run(8);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        depthwise_conv_block_run(9);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        depthwise_conv_block_run(10);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        depthwise_conv_block_run(11);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        depthwise_conv_block_run(12);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        pool.run();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        conv1x1[13].run();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        logistic.run();</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        reshape.run();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordtype">void</span> depthwise_conv_block_init(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifm, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ofm)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        w_dwc[idx].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, ifm), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        b_dwc[idx].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ifm), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        w_conv[idx].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, ifm, ofm), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        b_conv[idx].allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ofm), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> depthwise_conv_block_build(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> dwc_ps, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_ps)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        dwc3x3[idx].configure(&amp;conv_out[idx], &amp;w_dwc[idx], &amp;b_dwc[idx], &amp;dwc_out[idx], dwc_ps);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        act[2 * idx].configure(&amp;dwc_out[idx], <span class="keyword">nullptr</span>, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>, 6.f));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        conv1x1[idx].configure(&amp;dwc_out[idx], &amp;w_conv[idx], &amp;b_conv[idx], &amp;conv_out[idx + 1], conv_ps);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        act[2 * idx + 1].configure(&amp;conv_out[idx], <span class="keyword">nullptr</span>, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>, 6.f));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">void</span> depthwise_conv_block_run(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        dwc3x3[idx].run();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        act[2 * idx].run();</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        conv1x1[idx].run();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        act[2 * idx + 1].run();</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _batches{ 0 };</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    ConvolutionLayerFunction conv3x3{};</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    ActivationLayerFunction  conv3x3_act{};</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    std::array&lt;ActivationLayerFunction, 26&gt;           act{ {} };</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    std::array&lt;DirectConvolutionLayerFunction, 14&gt;    conv1x1{ {} };</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    std::array&lt;DepthwiseConvolutionLayerFunction, 13&gt; dwc3x3{ {} };</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    PoolingLayerFunction    pool{};</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    ActivationLayerFunction logistic{};</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    ReshapeFunction         reshape{};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    TensorType w_conv3x3{}, b_conv3x3{};</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    std::array&lt;TensorType, 14&gt; w_conv{ {} }, b_conv{ {} };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::array&lt;TensorType, 13&gt; w_dwc{ {} }, b_dwc{ {} };</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    TensorType input{}, output{};</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::array&lt;TensorType, 15&gt; conv_out{ {} };</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::array&lt;TensorType, 13&gt; dwc_out{ {} };</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    TensorType pool_out{};</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;};</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;} <span class="comment">// namespace networks</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#endif //__ARM_COMPUTE_TEST_MODEL_OBJECTS_MOBILENET_H__</span></div><div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_a3b778cda9ac3fad08e7217edbcb942e0"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3b778cda9ac3fad08e7217edbcb942e0">arm_compute::test::networks::MobileNetNetwork::fill_random</a></div><div class="ttdeci">void fill_random()</div><div class="ttdoc">Fills the trainable parameters and input with random data. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00137">MobileNetNetwork.h:137</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></div><div class="ttdef"><b>Definition:</b> <a href="02__tests_8dox_source.xhtml#l00003">02_tests.dox:3</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_a3a41262ce9aed70a248ecefae646013b"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a3a41262ce9aed70a248ecefae646013b">arm_compute::test::networks::MobileNetNetwork::feed</a></div><div class="ttdeci">void feed(std::string name)</div><div class="ttdoc">Feed input to network from file. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00161">MobileNetNetwork.h:161</a></div></div>
<div class="ttc" id="utils_2_utils_8h_xhtml"><div class="ttname"><a href="utils_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_accessor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_accessor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::Accessor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_accessor_8h_source.xhtml#l00073">Accessor.h:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00068">Window.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00650">Types.h:650</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="_globals_8h_xhtml"><div class="ttname"><a href="_globals_8h.xhtml">Globals.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_accessor.xhtml">arm_compute::test::Accessor</a></div><div class="ttdoc">Accessor implementation for Tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="_accessor_8h_source.xhtml#l00035">Accessor.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00058">main.cpp:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00127">Helpers.inl:127</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="_assets_library_8h_xhtml"><div class="ttname"><a href="_assets_library_8h.xhtml">AssetsLibrary.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00460">Types.h:460</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00040">Window.inl:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdoc">Logistic (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml">arm_compute::test::networks::MobileNetNetwork</a></div><div class="ttdoc">MobileNet model object. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00053">MobileNetNetwork.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_acaefe811b78a2fdc4a0dba0c4029c3ef"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#acaefe811b78a2fdc4a0dba0c4029c3ef">arm_compute::test::networks::MobileNetNetwork::allocate</a></div><div class="ttdeci">void allocate()</div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00108">MobileNetNetwork.h:108</a></div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_a7740c7ab195c03ac140f1f75f633470f"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a7740c7ab195c03ac140f1f75f633470f">arm_compute::test::networks::MobileNetNetwork::build</a></div><div class="ttdeci">void build()</div><div class="ttdoc">Build the model. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00084">MobileNetNetwork.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">arm_compute::ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a></div><div class="ttdoc">Upper Bounded Rectifier (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_ac8bb3912a3ce86b15842e79d0b421204"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ac8bb3912a3ce86b15842e79d0b421204">arm_compute::test::networks::MobileNetNetwork::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdoc">Clear all allocated memory from the tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00202">MobileNetNetwork.h:202</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdoc">Average Pooling. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00122">Dimensions.h:122</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_a13a43e6d814de94978c515cb084873b1"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a13a43e6d814de94978c515cb084873b1">arm_compute::test::networks::MobileNetNetwork::run</a></div><div class="ttdeci">void run()</div><div class="ttdoc">Runs the model. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00231">MobileNetNetwork.h:231</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_ae3ad9a7ab50bae85c5020f337adc7869"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#ae3ad9a7ab50bae85c5020f337adc7869">arm_compute::test::networks::MobileNetNetwork::init</a></div><div class="ttdeci">void init(int batches)</div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00056">MobileNetNetwork.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network_xhtml_a1466ef70729f3c8b5da5ebfec3f53f26"><div class="ttname"><a href="classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.xhtml#a1466ef70729f3c8b5da5ebfec3f53f26">arm_compute::test::networks::MobileNetNetwork::get_classifications</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; get_classifications()</div><div class="ttdoc">Get the classification results. </div><div class="ttdef"><b>Definition:</b> <a href="_mobile_net_network_8h_source.xhtml#l00170">MobileNetNetwork.h:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00044">TensorInfo.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00553">Types.h:553</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e31c3eb8a08c20d742288af67200e09f.xhtml">networks</a></li><li class="navelem"><a class="el" href="_mobile_net_network_8h.xhtml">MobileNetNetwork.h</a></li>
    <li class="footer">Generated on Thu Dec 14 2017 23:48:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
