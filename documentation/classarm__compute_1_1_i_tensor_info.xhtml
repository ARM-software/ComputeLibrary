<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ITensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">17.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ITensorInfo Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_i_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad998b50febf68540277e121a9c670bfa"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">~ITensorInfo</a> ()=default</td></tr>
<tr class="memdesc:ad998b50febf68540277e121a9c670bfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="#ad998b50febf68540277e121a9c670bfa">More...</a><br/></td></tr>
<tr class="separator:ad998b50febf68540277e121a9c670bfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b622a0346ec30baf0b9a387e00c9ace"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4b622a0346ec30baf0b9a387e00c9ace">set_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>)=0</td></tr>
<tr class="memdesc:a4b622a0346ec30baf0b9a387e00c9ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type to the specified value.  <a href="#a4b622a0346ec30baf0b9a387e00c9ace">More...</a><br/></td></tr>
<tr class="separator:a4b622a0346ec30baf0b9a387e00c9ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae05139a48d9360e44f5ef2eef64b23ec"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae05139a48d9360e44f5ef2eef64b23ec">set_num_channels</a> (int <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a>)=0</td></tr>
<tr class="memdesc:ae05139a48d9360e44f5ef2eef64b23ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the number of channels to the specified value.  <a href="#ae05139a48d9360e44f5ef2eef64b23ec">More...</a><br/></td></tr>
<tr class="separator:ae05139a48d9360e44f5ef2eef64b23ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43bf980bc1ac27efa062386baa506380"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a43bf980bc1ac27efa062386baa506380">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>)=0</td></tr>
<tr class="memdesc:a43bf980bc1ac27efa062386baa506380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="#a43bf980bc1ac27efa062386baa506380">More...</a><br/></td></tr>
<tr class="separator:a43bf980bc1ac27efa062386baa506380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40deec9ef7e7c892bef6b11b4d81c38e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a40deec9ef7e7c892bef6b11b4d81c38e">set_tensor_shape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape)=0</td></tr>
<tr class="memdesc:a40deec9ef7e7c892bef6b11b4d81c38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape of an already initialized tensor.  <a href="#a40deec9ef7e7c892bef6b11b4d81c38e">More...</a><br/></td></tr>
<tr class="separator:a40deec9ef7e7c892bef6b11b4d81c38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2c125ece3cc6593a0be7f1fef3d97f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aec2c125ece3cc6593a0be7f1fef3d97f">set_fixed_point_position</a> (int <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ab21a362740e892b6e913bd8db03b0e67">fixed_point_position</a>)=0</td></tr>
<tr class="memdesc:aec2c125ece3cc6593a0be7f1fef3d97f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the fixed point position to the specified value.  <a href="#aec2c125ece3cc6593a0be7f1fef3d97f">More...</a><br/></td></tr>
<tr class="separator:aec2c125ece3cc6593a0be7f1fef3d97f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">auto_padding</a> ()=0</td></tr>
<tr class="memdesc:a4f2d0ac983637a0459daf43bcd65cc38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="#a4f2d0ac983637a0459daf43bcd65cc38">More...</a><br/></td></tr>
<tr class="separator:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>)=0</td></tr>
<tr class="memdesc:a0cd5aea514f03afb48ebe22581ea4c66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="#a0cd5aea514f03afb48ebe22581ea4c66">More...</a><br/></td></tr>
<tr class="separator:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a178f0d3d87f959e00a743328d95359d2"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a> (size_t index) const =0</td></tr>
<tr class="memdesc:a178f0d3d87f959e00a743328d95359d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="#a178f0d3d87f959e00a743328d95359d2">More...</a><br/></td></tr>
<tr class="separator:a178f0d3d87f959e00a743328d95359d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="#a6b14f175bf5281f57b561e2d4e4b1f1f">More...</a><br/></td></tr>
<tr class="separator:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="#ad0bd5cc32e7e4c0699eccba91e5de397">More...</a><br/></td></tr>
<tr class="separator:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a5312c9a822d27a3b38dc238c1c7de3"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a8a5312c9a822d27a3b38dc238c1c7de3">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const =0</td></tr>
<tr class="memdesc:a8a5312c9a822d27a3b38dc238c1c7de3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="#a8a5312c9a822d27a3b38dc238c1c7de3">More...</a><br/></td></tr>
<tr class="separator:a8a5312c9a822d27a3b38dc238c1c7de3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab21a362740e892b6e913bd8db03b0e67"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ab21a362740e892b6e913bd8db03b0e67">fixed_point_position</a> () const =0</td></tr>
<tr class="memdesc:ab21a362740e892b6e913bd8db03b0e67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fixed point position used when the tensor data type is QS8 or QS16.  <a href="#ab21a362740e892b6e913bd8db03b0e67">More...</a><br/></td></tr>
<tr class="separator:ab21a362740e892b6e913bd8db03b0e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459796b5489eca8a9160cb5dcf1a103"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a> () const =0</td></tr>
<tr class="memdesc:aa459796b5489eca8a9160cb5dcf1a103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element. ">num_channels()</a>  <a href="#aa459796b5489eca8a9160cb5dcf1a103">More...</a><br/></td></tr>
<tr class="separator:aa459796b5489eca8a9160cb5dcf1a103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a> () const =0</td></tr>
<tr class="memdesc:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="#a1f4e725b8e1ea36b30e09dc08ae6961d">More...</a><br/></td></tr>
<tr class="separator:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a> () const =0</td></tr>
<tr class="memdesc:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="#ad7829ae79223ab87f9da4c0bd7d229ba">More...</a><br/></td></tr>
<tr class="separator:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c66505457d00ece3aa4b34cab80757d"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a> () const =0</td></tr>
<tr class="memdesc:a7c66505457d00ece3aa4b34cab80757d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="#a7c66505457d00ece3aa4b34cab80757d">More...</a><br/></td></tr>
<tr class="separator:a7c66505457d00ece3aa4b34cab80757d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfb31af63202568efef5214acfbf3ba"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a> () const =0</td></tr>
<tr class="memdesc:a7cfb31af63202568efef5214acfbf3ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="#a7cfb31af63202568efef5214acfbf3ba">More...</a><br/></td></tr>
<tr class="separator:a7cfb31af63202568efef5214acfbf3ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a> () const =0</td></tr>
<tr class="memdesc:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="#a57360dd9ca408834c0ea1a8ef70a11f4">More...</a><br/></td></tr>
<tr class="separator:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18064e0011c3869d884653e9e7c47b66"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a> () const =0</td></tr>
<tr class="memdesc:a18064e0011c3869d884653e9e7c47b66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="#a18064e0011c3869d884653e9e7c47b66">More...</a><br/></td></tr>
<tr class="separator:a18064e0011c3869d884653e9e7c47b66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b929c34ad1dc823d8315876aa403ce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a> () const =0</td></tr>
<tr class="memdesc:a07b929c34ad1dc823d8315876aa403ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="#a07b929c34ad1dc823d8315876aa403ce">More...</a><br/></td></tr>
<tr class="separator:a07b929c34ad1dc823d8315876aa403ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac394d6570ab3325810a3532d39091a52"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a> () const =0</td></tr>
<tr class="memdesc:ac394d6570ab3325810a3532d39091a52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="#ac394d6570ab3325810a3532d39091a52">More...</a><br/></td></tr>
<tr class="separator:ac394d6570ab3325810a3532d39091a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af555338f11d1d28f258f259ac3da743b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a> () const =0</td></tr>
<tr class="memdesc:af555338f11d1d28f258f259ac3da743b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="#af555338f11d1d28f258f259ac3da743b">More...</a><br/></td></tr>
<tr class="separator:af555338f11d1d28f258f259ac3da743b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc2a8e64645655d3bb8f37003c27a7ea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc2a8e64645655d3bb8f37003c27a7ea">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>)=0</td></tr>
<tr class="memdesc:afc2a8e64645655d3bb8f37003c27a7ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="#afc2a8e64645655d3bb8f37003c27a7ea">More...</a><br/></td></tr>
<tr class="separator:afc2a8e64645655d3bb8f37003c27a7ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74dfd07380a290c34fe7c8e065029b95"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a> () const =0</td></tr>
<tr class="memdesc:a74dfd07380a290c34fe7c8e065029b95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="#a74dfd07380a290c34fe7c8e065029b95">More...</a><br/></td></tr>
<tr class="separator:a74dfd07380a290c34fe7c8e065029b95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acea00276098762fd0e83a3c25d9f88cb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#acea00276098762fd0e83a3c25d9f88cb">set_valid_region</a> (<a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>)=0</td></tr>
<tr class="memdesc:acea00276098762fd0e83a3c25d9f88cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="#acea00276098762fd0e83a3c25d9f88cb">More...</a><br/></td></tr>
<tr class="separator:acea00276098762fd0e83a3c25d9f88cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p>Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad998b50febf68540277e121a9c670bfa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default virtual destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a4f2d0ac983637a0459daf43bcd65cc38"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00086">SubTensorInfo::auto_padding()</a>.</p>

</div>
</div>
<a class="anchor" id="a7cfb31af63202568efef5214acfbf3ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> data type </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00093">NumPyBinLoader::access_tensor()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00092">Accessor::data_type()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00131">SubTensorInfo::data_type()</a>, <a class="el" href="_validate_8h_source.xhtml#l00387">arm_compute::error_on_data_type_not_in()</a>, <a class="el" href="_validate_8h_source.xhtml#l00271">arm_compute::error_on_mismatching_data_types()</a>, <a class="el" href="_validate_8h_source.xhtml#l00309">arm_compute::error_on_mismatching_fixed_point()</a>, <a class="el" href="_validate_8h_source.xhtml#l00565">arm_compute::error_on_value_not_representable_in_fixed_point()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00236">arm_compute::set_data_type_if_unknown()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00247">arm_compute::set_fixed_point_position_if_zero()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00225">arm_compute::set_format_if_unknown()</a>.</p>

</div>
</div>
<a class="anchor" id="a178f0d3d87f959e00a743328d95359d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">SubTensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="aa459796b5489eca8a9160cb5dcf1a103"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element. ">num_channels()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00093">NumPyBinLoader::access_tensor()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00457">arm_compute::compute_strides()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00077">Accessor::element_size()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00112">SubTensorInfo::element_size()</a>.</p>

</div>
</div>
<a class="anchor" id="a0cd5aea514f03afb48ebe22581ea4c66"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">SubTensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="ab21a362740e892b6e913bd8db03b0e67"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int fixed_point_position </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fixed point position used when the tensor data type is QS8 or QS16. </p>
<dl class="section return"><dt>Returns</dt><dd>The fixed point position that expresses the number of bits for the fractional part of the number </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a35ccf2eb0c18a15feab2db98b307b78b">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_validate_8h_source.xhtml#l00309">arm_compute::error_on_mismatching_fixed_point()</a>, <a class="el" href="_validate_8h_source.xhtml#l00542">arm_compute::error_on_mismatching_fixed_point_position()</a>, <a class="el" href="_validate_8h_source.xhtml#l00565">arm_compute::error_on_value_not_representable_in_fixed_point()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00112">Accessor::fixed_point_position()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00107">SubTensorInfo::fixed_point_position()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00247">arm_compute::set_fixed_point_position_if_zero()</a>.</p>

</div>
</div>
<a class="anchor" id="a57360dd9ca408834c0ea1a8ef70a11f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_accessor_8h_source.xhtml#l00087">Accessor::format()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00136">SubTensorInfo::format()</a>.</p>

</div>
</div>
<a class="anchor" id="ac394d6570ab3325810a3532d39091a52"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00151">SubTensorInfo::has_padding()</a>.</p>

</div>
</div>
<a class="anchor" id="af555338f11d1d28f258f259ac3da743b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00156">SubTensorInfo::is_resizable()</a>.</p>

</div>
</div>
<a class="anchor" id="ad7829ae79223ab87f9da4c0bd7d229ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_validate_8h_source.xhtml#l00419">arm_compute::error_on_data_type_channel_not_in()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00097">Accessor::num_channels()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00121">SubTensorInfo::num_channels()</a>.</p>

</div>
</div>
<a class="anchor" id="a1f4e725b8e1ea36b30e09dc08ae6961d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00435">arm_compute::compute_strides()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00140">Iterator::Iterator()</a>.</p>

</div>
</div>
<a class="anchor" id="a8a5312c9a822d27a3b38dc238c1c7de3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a147790358ccd40f61dcd618cd4edd688">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a147790358ccd40f61dcd618cd4edd688">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00103">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00101">SubTensorInfo::offset_first_element_in_bytes()</a>, and <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>.</p>

</div>
</div>
<a class="anchor" id="ad0bd5cc32e7e4c0699eccba91e5de397"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00140">Iterator::Iterator()</a>.</p>

</div>
</div>
<a class="anchor" id="a07b929c34ad1dc823d8315876aa403ce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00093">NumPyBinLoader::access_tensor()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00107">Accessor::padding()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00146">SubTensorInfo::padding()</a>.</p>

</div>
</div>
<a class="anchor" id="a4b622a0346ec30baf0b9a387e00c9ace"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The new data type. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab499d647cc2a22dbd8bd21e39eb2aa58">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ab499d647cc2a22dbd8bd21e39eb2aa58">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00200">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00065">SubTensorInfo::set_data_type()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00236">arm_compute::set_data_type_if_unknown()</a>.</p>

</div>
</div>
<a class="anchor" id="aec2c125ece3cc6593a0be7f1fef3d97f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_fixed_point_position </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the fixed point position to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>The fixed point position must be set once the data type has been configured</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>The new fixed point position </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5221aaaad21f278619a8420bea680cf6">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5221aaaad21f278619a8420bea680cf6">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00200">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00080">SubTensorInfo::set_fixed_point_position()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00247">arm_compute::set_fixed_point_position_if_zero()</a>.</p>

</div>
</div>
<a class="anchor" id="a43bf980bc1ac27efa062386baa506380"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>If the data type has already been configured (i.e. not UNKNOWN) it must match the new format. If data type hasn't been configured it will be based on the format.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a76960ce9a9ccefb3f2f059edf360490d">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a76960ce9a9ccefb3f2f059edf360490d">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00075">SubTensorInfo::set_format()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00225">arm_compute::set_format_if_unknown()</a>.</p>

</div>
</div>
<a class="anchor" id="afc2a8e64645655d3bb8f37003c27a7ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_resizable</td><td>Flag that marks the tensor if it can be changed or not. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a64843bb449deed5b6d5c83e8bc94b9c5">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a64843bb449deed5b6d5c83e8bc94b9c5">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00161">SubTensorInfo::set_is_resizable()</a>.</p>

</div>
</div>
<a class="anchor" id="ae05139a48d9360e44f5ef2eef64b23ec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_num_channels </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the number of channels to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8fe01e461d1783bda8f489983e3434fd">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a8fe01e461d1783bda8f489983e3434fd">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00200">arm_compute::auto_init_if_empty()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00070">SubTensorInfo::set_num_channels()</a>.</p>

</div>
</div>
<a class="anchor" id="a40deec9ef7e7c892bef6b11b4d81c38e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_tensor_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape of an already initialized tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>Changing the shape requires to recompute the strides and is therefore only possible if the tensor hasn't been allocated yet.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New tensor shape. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5307618c5f15c917ef703324ea2c02af">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5307618c5f15c917ef703324ea2c02af">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00200">arm_compute::auto_init_if_empty()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00214">arm_compute::set_shape_if_empty()</a>.</p>

</div>
</div>
<a class="anchor" id="acea00276098762fd0e83a3c25d9f88cb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_valid_region </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region to set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0cbba4e45a4a1e389606493af3814415">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a0cbba4e45a4a1e389606493af3814415">SubTensorInfo</a>.</p>

</div>
</div>
<a class="anchor" id="a6b14f175bf5281f57b561e2d4e4b1f1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes. ">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00103">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00140">Iterator::Iterator()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00096">SubTensorInfo::strides_in_bytes()</a>.</p>

</div>
</div>
<a class="anchor" id="a7c66505457d00ece3aa4b34cab80757d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00093">NumPyBinLoader::access_tensor()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00200">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00258">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00435">arm_compute::compute_strides()</a>, <a class="el" href="neon__copy__objects_8cpp_source.xhtml#l00035">main_neon_copy_objects()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00102">Accessor::num_elements()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00214">arm_compute::set_shape_if_empty()</a>, and <a class="el" href="_accessor_8h_source.xhtml#l00072">Accessor::shape()</a>.</p>

</div>
</div>
<a class="anchor" id="a18064e0011c3869d884653e9e7c47b66"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00093">NumPyBinLoader::access_tensor()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00082">Accessor::size()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00141">SubTensorInfo::total_size()</a>.</p>

</div>
</div>
<a class="anchor" id="a74dfd07380a290c34fe7c8e065029b95"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">SubTensorInfo</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8inl_source.xhtml#l00258">arm_compute::calculate_valid_region_scale()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00170">SubTensorInfo::set_valid_region()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></li>
    <li class="footer">Generated on Thu Sep 28 2017 14:37:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.6 </li>
  </ul>
</div>
</body>
</html>
