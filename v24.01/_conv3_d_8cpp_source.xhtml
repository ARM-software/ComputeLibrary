<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/Conv3D.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_conv3_d_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Conv3D.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_conv3_d_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021, 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_conv3_d_8h.xhtml">Conv3D.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2quantization_2_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_acl_requires_8h.xhtml">support/AclRequires.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utils_quantized_asymm_8h.xhtml">tests/validation/reference/UtilsQuantizedAsymm.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// Source/Destination Tensor shape indices (N D H W C)</span></div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">   32</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a>   = 4u;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">   33</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a>   = 3u;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">   34</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a>  = 2u;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">   35</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a>   = 1u;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">   36</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a> = 0u;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// Weight tensor shape indices (D H W Cin Cout)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">   39</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a>  = 4u;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">   40</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a> = 3u;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">   41</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a>  = 2u;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#a0567e2aa8071b5a0b9d1f8626d222642">   42</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#a0567e2aa8071b5a0b9d1f8626d222642">weights_CHin_dim</a>   = 1u;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">   43</a></span>&#160;constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">weights_CHout_dim</a>  = 0u;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>test</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>validation</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span>reference</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> min, <span class="keywordtype">int</span> max)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> (i &gt;= min &amp;&amp; i &lt; max);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">// Evaluate the weights against an element in a given tensor.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;template &lt; typename T, typename TB, typename std::enable_if &lt; validation::is_floating_point&lt;T&gt;::value &amp;&amp;validation::is_floating_point&lt;TB&gt;::value, <span class="keywordtype">int</span> &gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> = 0 &gt;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;T calculate_conv3d(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;weights, <span class="keyword">const</span> SimpleTensor&lt;TB&gt; &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keyword">const</span> Size3D &amp;dilation, <span class="keywordtype">int</span> batch,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                   <span class="keywordtype">int</span> z_start, <span class="keywordtype">int</span> y_start, <span class="keywordtype">int</span> x_start, <span class="keywordtype">int</span> ch_out, UniformQuantizationInfo oq_info)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(oq_info);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_width  = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a>];</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_height = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a>];</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_depth  = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a>];</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_channels = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a>];</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_width    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a>];</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_height   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a>];</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a>];</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    T total(0);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_d = 0; weight_d &lt; weights_depth; ++weight_d)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> idx_z = z_start + dilation.depth * weight_d;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_y = 0; weight_y &lt; weights_height; ++weight_y)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> idx_y = y_start + dilation.height * weight_y;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_x = 0; weight_x &lt; weights_width; ++weight_x)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> idx_x = x_start + dilation.width * weight_x;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="comment">//Check if the point is within padding</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_x_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_x, 0, src_width);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_y_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_y, 0, src_height);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_z_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_z, 0, src_depth);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_invalid_pixel = !(is_x_valid &amp;&amp; is_y_valid &amp;&amp; is_z_valid);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span>(is_invalid_pixel)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ch_in = 0; ch_in &lt; src_channels; ++ch_in)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">const</span> T *in_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.data();</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">const</span> T *w_ptr  = weights.data();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> in_offset     = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape(), Coordinates{ ch_in, idx_x, idx_y, idx_z, batch });</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> weight_offset = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(weights.shape(), Coordinates{ ch_out, ch_in, weight_x, weight_y, weight_d });</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    T         input_value   = in_ptr[in_offset];</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    T         weight_value  = w_ptr[weight_offset];</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    total += (input_value * weight_value);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> TB *b_ptr      = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.data();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    TB        bias_value = b_ptr[ch_out];</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> total + bias_value;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt; <span class="keyword">typename</span> T, <span class="keyword">typename</span> TB, ARM_COMPUTE_REQUIRES_TA(std::is_same&lt;T, u<span class="keywordtype">int</span>8_t&gt;::value || std::is_same&lt;T, <span class="keywordtype">int</span>8_t&gt;::value) &gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;T calculate_conv3d(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;weights, <span class="keyword">const</span> SimpleTensor&lt;TB&gt; &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keyword">const</span> Size3D &amp;dilation, <span class="keywordtype">int</span> batch,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                   <span class="keywordtype">int</span> z_start, <span class="keywordtype">int</span> y_start, <span class="keywordtype">int</span> x_start, <span class="keywordtype">int</span> ch_out, UniformQuantizationInfo oq_info)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_width  = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a>];</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_height = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a>];</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_depth  = weights.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a>];</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_channels = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a>];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_width    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a>];</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_height   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a>];</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_depth    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a>];</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.quantization_info().uniform();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo wq_info = weights.quantization_info().uniform();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   input_offset   = -iq_info.offset;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> input_scale    = iq_info.scale;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">int</span>         weights_offset = -wq_info.offset;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">float</span>       weights_scale  = wq_info.scale;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   output_offset  = oq_info.offset;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> output_scale   = oq_info.scale;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">int</span>         output_multiplier = 0;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">int</span>         output_shift      = 0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = input_scale * weights_scale / output_scale;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    int32_t total(0);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_d = 0; weight_d &lt; weights_depth; ++weight_d)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> idx_z = z_start + dilation.depth * weight_d;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_y = 0; weight_y &lt; weights_height; ++weight_y)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> idx_y = y_start + dilation.height * weight_y;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weight_x = 0; weight_x &lt; weights_width; ++weight_x)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> idx_x = x_start + dilation.width * weight_x;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="comment">//Check if the point is within padding</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_x_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_x, 0, src_width);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_y_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_y, 0, src_height);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_z_valid       = <a class="code" href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">is_valid_pixel</a>(idx_z, 0, src_depth);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_invalid_pixel = !(is_x_valid &amp;&amp; is_y_valid &amp;&amp; is_z_valid);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">if</span>(is_invalid_pixel)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ch_in = 0; ch_in &lt; src_channels; ++ch_in)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keyword">const</span> T *in_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.data();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    <span class="keyword">const</span> T *w_ptr  = weights.data();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> in_offset     = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape(), Coordinates{ ch_in, idx_x, idx_y, idx_z, batch });</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> weight_offset = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(weights.shape(), Coordinates{ ch_out, ch_in, weight_x, weight_y, weight_d });</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    T         input_value   = in_ptr[in_offset];</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    T         weight_value  = w_ptr[weight_offset];</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    total += ((input_value + input_offset) * (weight_value + weights_offset));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> TB *b_ptr      = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.data();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    TB        bias_value = b_ptr[ch_out];</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    total += bias_value;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">validation::quantize_down_scale_by_fixedpoint</a>(total, output_multiplier, output_shift, output_offset,</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                         <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>(), std::numeric_limits&lt;T&gt;::max());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TB&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">  193</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">conv3d</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TB&gt;</a> &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// Compute reference</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a>];</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dst_width      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a>];</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dst_height     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a>];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dst_depth      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a>];</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> src_channels   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a>];</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weights_out_ch = weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()[<a class="code" href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">weights_CHout_dim</a>];</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dst_channels   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a>];</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       pad_left       = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       pad_top        = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       pad_front      = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">front</a>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       stride_x       = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>();</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       stride_y       = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       stride_z       = conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">z</a>();</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a48df2e30342af92f8082425bafc36a4d">arm_compute::misc::shape_calculator::compute_conv3d_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape(), weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), conv3d_info);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(src_channels, weights_out_ch, dst_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <a class="code" href="_conv3_d_8cpp.xhtml#a0567e2aa8071b5a0b9d1f8626d222642">weights_CHin_dim</a>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// Number of batches of source and destination tensors must match.</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a>] != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[<a class="code" href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a>]);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Input channels in the source and weights must match.</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src_channels != weights.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()[<a class="code" href="_conv3_d_8cpp.xhtml#a0567e2aa8071b5a0b9d1f8626d222642">weights_CHin_dim</a>]);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// Weight channels in the destination and weights must match.</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights_out_ch != dst_channels);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Bias must match the number of destination channels.</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>.shape()[0] != dst_channels);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Compare given dst tensor shape with expected shape.</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape() != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = 0; batch &lt; batch_size; ++batch)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> z_out = 0; z_out &lt; dst_depth; ++z_out)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> z_start = (z_out * stride_z) - pad_front;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y_out = 0; y_out &lt; dst_height; ++y_out)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_start = (y_out * stride_y) - pad_top;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_out = 0; x_out &lt; dst_width; ++x_out)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> x_start = (x_out * stride_x) - pad_left;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ch_out = 0; ch_out &lt; dst_channels; ++ch_out)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        T *out_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.data();</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> out_offset = <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape(), <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>{ ch_out, x_out, y_out, z_out, batch });</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        out_ptr[out_offset]  = calculate_conv3d&lt;T, TB&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, conv3d_info.<a class="code" href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">dilation</a>, batch, z_start, y_start, x_start, ch_out, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.quantization_info().uniform());</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">conv3d</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">conv3d</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">conv3d</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">conv3d</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv3d_info);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;} <span class="comment">// namespace reference</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;} <span class="comment">// namespace validation</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;} <span class="comment">// namespace test</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructarm__compute_1_1_conv3d_info_xhtml_a51ba0498913f8c74b9ba8938694d09bf"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">arm_compute::Conv3dInfo::padding</a></div><div class="ttdeci">Padding3D padding</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00105">FunctionDescriptors.h:105</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_aa700774683c3d8977c1021a9463b02c1"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aa700774683c3d8977c1021a9463b02c1">weights_CHout_dim</a></div><div class="ttdeci">constexpr unsigned int weights_CHout_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00043">Conv3D.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_conv3d_info_xhtml_a8552c72afa19c3cb09f61e2ac730f504"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">arm_compute::Conv3dInfo::stride</a></div><div class="ttdeci">Size3D stride</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00104">FunctionDescriptors.h:104</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00388">Utils.h:388</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_aa9c700eabf3b1ac4158662e957f4d165"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aa9c700eabf3b1ac4158662e957f4d165">weights_depth_dim</a></div><div class="ttdeci">constexpr unsigned int weights_depth_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00039">Conv3D.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00329">SimpleTensor.h:329</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_aafd45960ee9d276cd77fb4d26d8dc86b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aafd45960ee9d276cd77fb4d26d8dc86b">arm_compute::test::validation::reference::conv3d</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; conv3d(const SimpleTensor&lt; T &gt; &amp;src, const SimpleTensor&lt; T &gt; &amp;weights, const SimpleTensor&lt; TB &gt; &amp;bias, SimpleTensor&lt; T &gt; &amp;dst, const Conv3dInfo &amp;conv3d_info)</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00193">Conv3D.cpp:193</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size3D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00057">Size3D.h:57</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_adbd8a17754adc67f128a28cd256e4d4a"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#adbd8a17754adc67f128a28cd256e4d4a">weights_width_dim</a></div><div class="ttdeci">constexpr unsigned int weights_width_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00041">Conv3D.cpp:41</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_a00cca3f535943c474cfb60f99e491bf1"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#a00cca3f535943c474cfb60f99e491bf1">height_dim</a></div><div class="ttdeci">constexpr unsigned int height_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00034">Conv3D.cpp:34</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_aac145e44968aa3f4c5c8ee8f27ec6baf"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#aac145e44968aa3f4c5c8ee8f27ec6baf">depth_dim</a></div><div class="ttdeci">constexpr unsigned int depth_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00033">Conv3D.cpp:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size3D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00066">Size3D.h:66</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_conv3d_info_xhtml_a883bafc097dfc9eb0a78b92154b759c4"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml#a883bafc097dfc9eb0a78b92154b759c4">arm_compute::Conv3dInfo::dilation</a></div><div class="ttdeci">Size3D dilation</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00107">FunctionDescriptors.h:107</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::Padding3D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimenstion on the top, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Types.h:640</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_ac8ce77b502316d44dfbe3232259d9aff"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#ac8ce77b502316d44dfbe3232259d9aff">width_dim</a></div><div class="ttdeci">constexpr unsigned int width_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00035">Conv3D.cpp:35</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a1052a747170eed194bab868f0fce68ad"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">arm_compute::Padding3D::front</a></div><div class="ttdeci">size_t front</div><div class="ttdoc">Padding across the depth dimenstion on the front, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Types.h:642</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a43852fa64fdbd5efa153e5c1e1e27ba4"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">arm_compute::Size3D::z</a></div><div class="ttdeci">size_t z() const</div><div class="ttdoc">Semantic accessor for depth as z.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00075">Size3D.h:75</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_af3ea9359e54887bee840504b4e51ccda"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#af3ea9359e54887bee840504b4e51ccda">channel_dim</a></div><div class="ttdeci">constexpr unsigned int channel_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00036">Conv3D.cpp:36</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_a08435ee49cd2444e8f8f31362062be07"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#a08435ee49cd2444e8f8f31362062be07">weights_height_dim</a></div><div class="ttdeci">constexpr unsigned int weights_height_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00040">Conv3D.cpp:40</a></div></div>
<div class="ttc" id="a_utils_quantized_asymm_8h_xhtml"><div class="ttname"><a href="_utils_quantized_asymm_8h.xhtml">UtilsQuantizedAsymm.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2utils_2quantization_2_asymm_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2quantization_2_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="a_acl_requires_8h_xhtml"><div class="ttname"><a href="_acl_requires_8h.xhtml">AclRequires.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::Padding3D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimenstion on the left, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Types.h:638</a></div></div>
<div class="ttc" id="a_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a48df2e30342af92f8082425bafc36a4d"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a48df2e30342af92f8082425bafc36a4d">arm_compute::misc::shape_calculator::compute_conv3d_shape</a></div><div class="ttdeci">TensorShape compute_conv3d_shape(const TensorShape &amp;src, const TensorShape &amp;weights, const Conv3dInfo &amp;conv3d_info)</div><div class="ttdoc">Calculate the output shape of 3d Convolution.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01574">ShapeCalculator.h:1574</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_a0567e2aa8071b5a0b9d1f8626d222642"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#a0567e2aa8071b5a0b9d1f8626d222642">weights_CHin_dim</a></div><div class="ttdeci">constexpr unsigned int weights_CHin_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00042">Conv3D.cpp:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_conv3d_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_conv3d_info.xhtml">arm_compute::Conv3dInfo</a></div><div class="ttdoc">Descriptor used by the 3d Convolution function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_descriptors_8h_source.xhtml#l00085">FunctionDescriptors.h:85</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00043">AsymmHelpers.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1convolution__3d_1_1detail_xhtml_a03098570a566d97570169cb6d3106b6e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1convolution__3d_1_1detail.xhtml#a03098570a566d97570169cb6d3106b6e">arm_compute::test::convolution_3d::detail::is_valid_pixel</a></div><div class="ttdeci">bool is_valid_pixel(int i, int min, int max)</div><div class="ttdef"><b>Definition:</b> <a href="_convolution3d_8h_source.xhtml#l00040">Convolution3d.h:40</a></div></div>
<div class="ttc" id="a_conv3_d_8cpp_xhtml_af12060b11d4c1c9f615d6a55738212be"><div class="ttname"><a href="_conv3_d_8cpp.xhtml#af12060b11d4c1c9f615d6a55738212be">batch_dim</a></div><div class="ttdeci">constexpr unsigned int batch_dim</div><div class="ttdef"><b>Definition:</b> <a href="_conv3_d_8cpp_source.xhtml#l00032">Conv3D.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aeba431de7aa296356e936e9c39a569c8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">arm_compute::test::validation::quantize_down_scale_by_fixedpoint</a></div><div class="ttdeci">int32_t quantize_down_scale_by_fixedpoint(int32_t val, int32_t result_mult_int, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="ttdoc">Quantize down the input value in range [min, max].</div><div class="ttdef"><b>Definition:</b> <a href="_utils_quantized_asymm_8h_source.xhtml#l00072">UtilsQuantizedAsymm.h:72</a></div></div>
<div class="ttc" id="a_conv3_d_8h_xhtml"><div class="ttname"><a href="_conv3_d_8h.xhtml">Conv3D.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="_conv3_d_8cpp.xhtml">Conv3D.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:05 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
