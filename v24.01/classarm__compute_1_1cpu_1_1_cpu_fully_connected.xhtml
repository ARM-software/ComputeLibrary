<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CpuFullyConnected Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CpuFullyConnected Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to compute a Fully Connected layer.  
 <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_cpu_fully_connected_8h_source.xhtml">CpuFullyConnected.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CpuFullyConnected:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1cpu_1_1_cpu_fully_connected__coll__graph.svg" width="158" height="187"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad129244c32fe3ad5d682ad57f39dd511"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#ad129244c32fe3ad5d682ad57f39dd511">CpuFullyConnected</a> ()</td></tr>
<tr class="memdesc:ad129244c32fe3ad5d682ad57f39dd511"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#ad129244c32fe3ad5d682ad57f39dd511">More...</a><br /></td></tr>
<tr class="separator:ad129244c32fe3ad5d682ad57f39dd511"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5c20cb314bf227c6740d346da29a7a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#abb5c20cb314bf227c6740d346da29a7a">~CpuFullyConnected</a> ()</td></tr>
<tr class="memdesc:abb5c20cb314bf227c6740d346da29a7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#abb5c20cb314bf227c6740d346da29a7a">More...</a><br /></td></tr>
<tr class="separator:abb5c20cb314bf227c6740d346da29a7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5822d7b90151d245c07e8c12c15a8ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#aa5822d7b90151d245c07e8c12c15a8ab">configure</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info=<a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>(), const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;weights_info=<a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>())</td></tr>
<tr class="memdesc:aa5822d7b90151d245c07e8c12c15a8ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the input and output tensors.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#aa5822d7b90151d245c07e8c12c15a8ab">More...</a><br /></td></tr>
<tr class="separator:aa5822d7b90151d245c07e8c12c15a8ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a684a54d1fb1634a348a585c6b5e76df0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a684a54d1fb1634a348a585c6b5e76df0">run</a> (<a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) override</td></tr>
<tr class="memdesc:a684a54d1fb1634a348a585c6b5e76df0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a684a54d1fb1634a348a585c6b5e76df0">More...</a><br /></td></tr>
<tr class="separator:a684a54d1fb1634a348a585c6b5e76df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4d2c35e9fbc329b2e1b2acb864265aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">prepare</a> (<a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) override</td></tr>
<tr class="memdesc:af4d2c35e9fbc329b2e1b2acb864265aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">More...</a><br /></td></tr>
<tr class="separator:af4d2c35e9fbc329b2e1b2acb864265aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ae0d6e96f38fecd38471431786b870"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a74ae0d6e96f38fecd38471431786b870">workspace</a> () const override</td></tr>
<tr class="memdesc:a74ae0d6e96f38fecd38471431786b870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the memory requirements required by the workspace.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a74ae0d6e96f38fecd38471431786b870">More...</a><br /></td></tr>
<tr class="separator:a74ae0d6e96f38fecd38471431786b870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a></td></tr>
<tr class="memitem:a5d9d1b2676ea513d58e85161ce554c49 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a5d9d1b2676ea513d58e85161ce554c49">INEOperator</a> (<a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:a5d9d1b2676ea513d58e85161ce554c49 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a5d9d1b2676ea513d58e85161ce554c49">More...</a><br /></td></tr>
<tr class="separator:a5d9d1b2676ea513d58e85161ce554c49 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a612c94f92504d3d3573c9812a068cc inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a0a612c94f92504d3d3573c9812a068cc">INEOperator</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;)=delete</td></tr>
<tr class="memdesc:a0a612c94f92504d3d3573c9812a068cc inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a0a612c94f92504d3d3573c9812a068cc">More...</a><br /></td></tr>
<tr class="separator:a0a612c94f92504d3d3573c9812a068cc inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7194c5a29c17390d46dd35d13bf02655 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a7194c5a29c17390d46dd35d13bf02655">INEOperator</a> (<a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a7194c5a29c17390d46dd35d13bf02655 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a7194c5a29c17390d46dd35d13bf02655">More...</a><br /></td></tr>
<tr class="separator:a7194c5a29c17390d46dd35d13bf02655 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5860f3d24d5eee1c5103ec1054cedd3 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#af5860f3d24d5eee1c5103ec1054cedd3">operator=</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;)=delete</td></tr>
<tr class="memdesc:af5860f3d24d5eee1c5103ec1054cedd3 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#af5860f3d24d5eee1c5103ec1054cedd3">More...</a><br /></td></tr>
<tr class="separator:af5860f3d24d5eee1c5103ec1054cedd3 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14d9fa00ede181e3d5fe209f3a29eb11 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a14d9fa00ede181e3d5fe209f3a29eb11">operator=</a> (<a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a14d9fa00ede181e3d5fe209f3a29eb11 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a14d9fa00ede181e3d5fe209f3a29eb11">More...</a><br /></td></tr>
<tr class="separator:a14d9fa00ede181e3d5fe209f3a29eb11 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656e5f62c7603eaaf2b00bdd05d56986 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a656e5f62c7603eaaf2b00bdd05d56986">~INEOperator</a> ()</td></tr>
<tr class="memdesc:a656e5f62c7603eaaf2b00bdd05d56986 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a656e5f62c7603eaaf2b00bdd05d56986">More...</a><br /></td></tr>
<tr class="separator:a656e5f62c7603eaaf2b00bdd05d56986 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_n_e_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1experimental_1_1_i_operator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1experimental_1_1_i_operator')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a></td></tr>
<tr class="memitem:a3da3a4cfa91daf144e828fa521760ed5 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_operator"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml#a3da3a4cfa91daf144e828fa521760ed5">~IOperator</a> ()=default</td></tr>
<tr class="memdesc:a3da3a4cfa91daf144e828fa521760ed5 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_operator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1experimental_1_1_i_operator.xhtml#a3da3a4cfa91daf144e828fa521760ed5">More...</a><br /></td></tr>
<tr class="separator:a3da3a4cfa91daf144e828fa521760ed5 inherit pub_methods_classarm__compute_1_1experimental_1_1_i_operator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8e50a5cb5b0d7fda221393e58c2465bb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a8e50a5cb5b0d7fda221393e58c2465bb">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info=<a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>(), const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;weights_info=<a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>())</td></tr>
<tr class="memdesc:a8e50a5cb5b0d7fda221393e58c2465bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a8e50a5cb5b0d7fda221393e58c2465bb">More...</a><br /></td></tr>
<tr class="separator:a8e50a5cb5b0d7fda221393e58c2465bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a07b95f3bbee66d44e4ef66a43ec0e5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a5a07b95f3bbee66d44e4ef66a43ec0e5">has_opt_impl</a> (<a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;expected_weight_format, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info, <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> weights_info)</td></tr>
<tr class="memdesc:a5a07b95f3bbee66d44e4ef66a43ec0e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function that queries whether there exists fixed-format kernel and if it exists it will return in the first argument in what format weights are expected to be reshaped as defined by WeightFormat class.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a5a07b95f3bbee66d44e4ef66a43ec0e5">More...</a><br /></td></tr>
<tr class="separator:a5a07b95f3bbee66d44e4ef66a43ec0e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to compute a Fully Connected layer. </p>
<p>This function calls the following kernels:</p><ol type="1">
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml">kernels::CpuIm2ColKernel</a> (called when the input comes from a convolutional layer)</li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml">kernels::CpuTransposeKernel</a> (if <code>are_weights_reshaped</code> is set to false and transpose_weights is set to true ) (called once)</li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml">CpuGemm</a> or <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_matrix_multiply_core.xhtml">CpuGemmLowpMatrixMultiplyCore</a> (if quantized asymmetric)</li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml">kernels::CpuGemmMatrixAdditionKernel</a> or <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_output_stage.xhtml">CpuGemmLowpOutputStage</a> (if quantized asymmetric) (if <code>biases</code> is not equal to nullptr)</li>
</ol>
<dl class="section note"><dt>Note</dt><dd>The fully connected layer accepts "weights" tensors only with 2 dimensions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8h_source.xhtml#l00055">55</a> of file <a class="el" href="_cpu_fully_connected_8h_source.xhtml">CpuFullyConnected.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad129244c32fe3ad5d682ad57f39dd511"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad129244c32fe3ad5d682ad57f39dd511">&#9670;&nbsp;</a></span>CpuFullyConnected()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    : _flatten(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      _convert_weights(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      _transpose_weights(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      _mm_gemm(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      _mm_gemmlowp(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      _flattened_src(),</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      _converted_weights(),</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      _reshaped_weights(),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      _trans_weights(),</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      _trans_weights_idx(AuxTensorIdx::Count),</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      _aux_mem(Count),</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      _needs_weights_conversion(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      _needs_weights_reshape(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      _is_fc_after_conv(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      _is_quantized_asymmetric(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      _is_prepared(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      _enable_fast_math(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      _fixed_format(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      _weight_format(<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a>),</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      _dynamic_weights(<span class="keyword">false</span>)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="abb5c20cb314bf227c6740d346da29a7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb5c20cb314bf227c6740d346da29a7a">&#9670;&nbsp;</a></span>~CpuFullyConnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa5822d7b90151d245c07e8c12c15a8ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5822d7b90151d245c07e8c12c15a8ab">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>&#160;</td>
          <td class="paramname"><em>fc_info</em> = <code><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights_info</em> = <code><a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the input and output tensors. </p>
<p>Valid data layouts:</p><ul>
<li>NHWC</li>
<li>NCHW</li>
</ul>
<p>Valid data type configurations: </p><table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadLeft">src0 </th><th class="markdownTableHeadLeft">src1 </th><th class="markdownTableHeadLeft">src2 </th><th class="markdownTableHeadLeft">dst  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">F16 </td><td class="markdownTableBodyLeft">F16 </td><td class="markdownTableBodyLeft">F16 </td><td class="markdownTableBodyLeft">F16  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">F32 </td><td class="markdownTableBodyLeft">F32 </td><td class="markdownTableBodyLeft">F32 </td><td class="markdownTableBodyLeft">F32  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">QASYMM8 </td><td class="markdownTableBodyLeft">QASYMM8 </td><td class="markdownTableBodyLeft">S32 </td><td class="markdownTableBodyLeft">QASYMM8  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">QASYMM8_SIGNED </td><td class="markdownTableBodyLeft">QASYMM8_SIGNED </td><td class="markdownTableBodyLeft">S32 </td><td class="markdownTableBodyLeft">QASYMM8_SIGNED  </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Source tensor info. Data type supported: QASYMM8/QASYMM8_SIGNED/F16/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info. The weights must be 2 dimensional. If this function is called after a Convolution Layer, the (transposed) weights will have as many rows as the product of the first 3 input's dimensions. If it is called after another FullyConnected Layer, the (transposed) weights will have as many rows as the input's first dimension. Data type supported: Same as <code>src</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">biases</td><td>Bias tensor info. Can be nullptr. Data type supported: Same as <code>weights</code>, S32 if <code>weights</code> is QASYMM8/QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Destination tensor info. Its shape should be equal to the output of a matrix multiplication between:<ul>
<li>The output of im2col on the input and the (transposed) 2D weights, if the function is called after a Convolution Layer</li>
<li>The input tensor and the (transposed) 2D weights, if the function is called after another FullyConnected Layer. Data type supported: Same as <code>src</code>. </li>
</ul>
</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fc_info</td><td>(Optional) Fully connected layer additional info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_info</td><td>(Optional) Stores neccessary compute information when weights are already reshaped </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00231">231</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Perform validate step</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a8e50a5cb5b0d7fda221393e58c2465bb">CpuFullyConnected::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases != <span class="keyword">nullptr</span> ? biases : <span class="keyword">nullptr</span>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, fc_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, fc_info);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    _needs_weights_conversion = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _needs_weights_reshape    = fc_info.transpose_weights ? !fc_info.are_weights_reshaped : <span class="keyword">false</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    _needs_weights_reshape    = _needs_weights_reshape &amp;&amp; !fc_info.retain_internal_weights;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    _is_fc_after_conv         = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    _is_quantized_asymmetric  = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_type());</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    _is_prepared              = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    _trans_weights_idx        = AuxTensorIdx::Count;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    _enable_fast_math         = fc_info.enable_fast_math;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    _fixed_format             = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format() != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">WeightFormat::UNSPECIFIED</a>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    _weight_format            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    _dynamic_weights          = !weights-&gt;are_values_constant() &amp;&amp; _needs_weights_reshape;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// With the Fully Connected layer we can have 4 different cases:</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">//  1) Convolution layer -&gt; Fully Connected layer without batches</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">//  2) Fully Connected layer -&gt; Fully Connected layer without batches</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">//  3) Convolution layer -&gt; Fully Connected layer with batches</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="comment">//  4) Fully Connected layer -&gt; Fully Connected layer with batches</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> ITensorInfo *weights_to_use = weights;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Check if we have a fully connected layer with batches</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_batched_fc_layer = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(1) &gt; 1;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">if</span> (is_batched_fc_layer)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _is_fc_after_conv = (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> &gt;= 4) &amp;&amp;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                            (std::equal(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape().cbegin() + 3, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape().cend(),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape().cbegin() + 1));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        _is_fc_after_conv = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;num_dimensions() &gt; 1;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Reshape weights if needed</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (_needs_weights_reshape)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="comment">// Reshape the weights</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        _transpose_weights = std::make_unique&lt;kernels::CpuTransposeKernel&gt;();</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        _transpose_weights-&gt;configure(weights, &amp;_reshaped_weights);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        _reshaped_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">set_are_values_constant</a>(weights-&gt;are_values_constant());</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        weights_to_use     = &amp;_reshaped_weights;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        _trans_weights_idx = AuxTensorIdx::TransposedWeights;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// Convert weights if needed</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">if</span> (_is_fc_after_conv &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout() != fc_info.weights_trained_layout))</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="comment">// Convert weights</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        _convert_weights = std::make_unique&lt;CpuConvertFullyConnectedWeights&gt;();</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        _convert_weights-&gt;configure(weights_to_use, &amp;_converted_weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape(),</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                    fc_info.weights_trained_layout);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        _converted_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">set_are_values_constant</a>(weights_to_use-&gt;are_values_constant());</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        weights_to_use            = &amp;_converted_weights;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        _needs_weights_conversion = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        _trans_weights_idx        = AuxTensorIdx::ConvertedWeights;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (_is_fc_after_conv)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="comment">// Fully Connected layer after a Convolution Layer without batches</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        configure_conv_fc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights_to_use, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, fc_info.activation_info);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// Fully Connected layer after a Fully Connected Layer without batches</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        configure_fc_fc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights_to_use, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, fc_info.activation_info);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// Retain the tensorinfo with the weights to use</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span> (_needs_weights_reshape || _needs_weights_conversion)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        _trans_weights = *weights_to_use;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// Set auxiliary memory requirements</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">auto</span> gemm_mem_req = (_is_quantized_asymmetric) ? _mm_gemmlowp-&gt;workspace() : _mm_gemm-&gt;workspace();</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; gemm_mem_req.size(); ++i)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        _aux_mem[i] = gemm_mem_req[i];</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">if</span> (_aux_mem[Pretranspose].size &gt; 0)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// Release permuted weights at the end of prepare as they are further transposed by the assembly dispatch</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="comment">// Do not release them if biases are dynamic and data type is quantized, since the weights tensor will be used for biases offset calculation</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="comment">// Keep all the auxiliary tensors in case of dynamic weights as they are recalculated every time.</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        _aux_mem[TransposedWeights] = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransposedWeights),</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            _dynamic_weights                                                           ? MemoryLifetime::Temporary</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            : (_is_quantized_asymmetric &amp;&amp; biases &amp;&amp; !(biases-&gt;are_values_constant())) ? MemoryLifetime::Persistent</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                                                       : <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">MemoryLifetime::Prepare</a>,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            _reshaped_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        _aux_mem[ConvertedWeights] = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(ConvertedWeights),</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                                _dynamic_weights ? MemoryLifetime::Temporary : <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">MemoryLifetime::Prepare</a>,</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                                _converted_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        _aux_mem[TransposedWeights] = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransposedWeights),</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                                 _dynamic_weights            ? MemoryLifetime::Temporary</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                                 : _needs_weights_conversion ? <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">MemoryLifetime::Prepare</a></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                                             : MemoryLifetime::Persistent,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                 _reshaped_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        _aux_mem[ConvertedWeights] = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(ConvertedWeights), _dynamic_weights ? MemoryLifetime::Temporary : MemoryLifetime::Persistent,</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            _converted_weights.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    _aux_mem[FlattenedSrc] =</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(FlattenedSrc), MemoryLifetime::Temporary, _flattened_src.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00036">FullyConnectedLayerInfo::activation_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">ITensorInfo::are_values_constant()</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00040">FullyConnectedLayerInfo::are_weights_reshaped</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00035">ARM_COMPUTE_LOG_PARAMS</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00042">FullyConnectedLayerInfo::enable_fast_math</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, <a class="el" href="_memory_helpers_8h_source.xhtml#l00038">arm_compute::offset_int_vec()</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::Prepare</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00041">FullyConnectedLayerInfo::retain_internal_weights</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00307">TensorInfo::set_are_values_constant()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::total_size()</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00039">FullyConnectedLayerInfo::transpose_weights</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::UNSPECIFIED</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00376">CpuFullyConnected::validate()</a>, <a class="el" href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">arm_compute::test::validation::weights_info</a>, and <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00038">FullyConnectedLayerInfo::weights_trained_layout</a>.</p>

</div>
</div>
<a id="a5a07b95f3bbee66d44e4ef66a43ec0e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a07b95f3bbee66d44e4ef66a43ec0e5">&#9670;&nbsp;</a></span>has_opt_impl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> has_opt_impl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;&#160;</td>
          <td class="paramname"><em>expected_weight_format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>&#160;</td>
          <td class="paramname"><em>fc_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>&#160;</td>
          <td class="paramname"><em>weights_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function that queries whether there exists fixed-format kernel and if it exists it will return in the first argument in what format weights are expected to be reshaped as defined by WeightFormat class. </p>
<p>Apart from the first argument the rest of the arguments are the same as in <a class="el" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">CpuFullyConnectedLayer::validate()</a> except that all arguments are required.</p>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00359">359</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    GEMMInfo gemm_info;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    gemm_info.set_activation_info(fc_info.activation_info);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    gemm_info.set_fast_math(fc_info.enable_fast_math);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    gemm_info.set_fixed_format(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format() != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">WeightFormat::UNSPECIFIED</a>);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    gemm_info.set_weight_format(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format());</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml#ac91f91cff0bd873c550e162792e32ffe">CpuGemm::has_opt_impl</a>(expected_weight_format, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, gemm_info);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00036">FullyConnectedLayerInfo::activation_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00042">FullyConnectedLayerInfo::enable_fast_math</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00539">CpuGemm::has_opt_impl()</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00285">GEMMInfo::set_activation_info()</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00227">GEMMInfo::set_fast_math()</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00302">GEMMInfo::set_fixed_format()</a>, <a class="el" href="_g_e_m_m_info_8h_source.xhtml#l00316">GEMMInfo::set_weight_format()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::UNSPECIFIED</a>, and <a class="el" href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">arm_compute::test::validation::weights_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00101">NEFullyConnectedLayer::has_opt_impl()</a>.</p>

</div>
</div>
<a id="af4d2c35e9fbc329b2e1b2acb864265aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4d2c35e9fbc329b2e1b2acb864265aa">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>constants</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">constants</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> that contains the constants tensors.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#aff8f5e4223fd2a3020c8b252c8982d3a">INEOperator</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00529">529</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;{</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">if</span> (!_is_prepared || _dynamic_weights)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ASSERTS_ENABLED</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        ++_asrt_prepare_count;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_dynamic_weights &amp;&amp; _asrt_prepare_count &gt; 1);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ASSERTS_ENABLED</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keyword">auto</span> weights = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        CpuAuxTensorHandler reshaped_weights(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransposedWeights), _reshaped_weights, tensors, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        CpuAuxTensorHandler converted_weights(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(ConvertedWeights), _converted_weights, tensors, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="comment">// Pointer to current weights</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keyword">const</span> ITensor *cur_weights = weights;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="comment">// Reshape of the weights (happens only once)</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keywordflow">if</span> (_needs_weights_reshape)</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="comment">// Run reshape weights kernel and mark weights as unused</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            ITensorPack transpose_pack{{<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, weights}, {<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, reshaped_weights.get()}};</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a>(_transpose_weights.get(), <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, _transpose_weights-&gt;window(),</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                           transpose_pack);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160; </div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            cur_weights-&gt;mark_as_unused();</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            cur_weights = reshaped_weights.get();</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="comment">// Convert weights if needed (happens only once)</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">if</span> (_needs_weights_conversion)</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            ITensorPack convert_pack{{<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, cur_weights}, {<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, converted_weights.get()}};</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            _convert_weights-&gt;run(convert_pack);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            cur_weights-&gt;mark_as_unused();</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            cur_weights = converted_weights.get();</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        }</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        ITensorPack gemm_pack = tensors;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        gemm_pack.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, cur_weights);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; </div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="comment">// Prepare GEMM prepare and release unused weights</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">if</span> (!_is_quantized_asymmetric)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        {</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            _mm_gemm-&gt;prepare(gemm_pack);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        {</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            _mm_gemmlowp-&gt;prepare(gemm_pack);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        }</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160; </div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">arm_compute::ACL_DST</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">arm_compute::ACL_SRC</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">arm_compute::ACL_SRC_1</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00048">ITensorPack::add_const_tensor()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_scheduler_8cpp_source.xhtml#l00094">Scheduler::get()</a>, <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00105">CpuAuxTensorHandler::get()</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00053">ITensorPack::get_const_tensor()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00167">ITensor::mark_as_unused()</a>, <a class="el" href="_memory_helpers_8h_source.xhtml#l00038">arm_compute::offset_int_vec()</a>, and <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">IScheduler::schedule_op()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00490">CpuFullyConnected::run()</a>.</p>

</div>
</div>
<a id="a684a54d1fb1634a348a585c6b5e76df0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a684a54d1fb1634a348a585c6b5e76df0">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> that contains the tensors to operate on. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#a684a54d1fb1634a348a585c6b5e76df0">INEOperator</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00490">490</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">prepare</a>(tensors);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160; </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ASSERTS_ENABLED</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    ++_asrt_run_count;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_dynamic_weights &amp;&amp; _asrt_prepare_count != _asrt_run_count);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ASSERTS_ENABLED</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    CpuAuxTensorHandler flattened_src(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(FlattenedSrc), _flattened_src, tensors, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    CpuAuxTensorHandler transformed_wei(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(_trans_weights_idx), _trans_weights, tensors, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160; </div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// Linearize src if it comes from a convolutional layer</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keywordflow">if</span> (_is_fc_after_conv)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        ITensorPack flatten_pack{{<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>}, {<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, flattened_src.get()}};</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        _flatten-&gt;run(flatten_pack);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    ITensorPack gemm_pack = tensors;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    gemm_pack.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, (_is_fc_after_conv) ? flattened_src.get() : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">if</span> (_needs_weights_reshape || _needs_weights_conversion)</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        gemm_pack.add_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, transformed_wei.get());</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// Run matrix multiply</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">if</span> (_is_quantized_asymmetric)</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        _mm_gemmlowp-&gt;run(gemm_pack);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        _mm_gemm-&gt;run(gemm_pack);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">arm_compute::ACL_DST</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">arm_compute::ACL_SRC</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">arm_compute::ACL_SRC_0</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">arm_compute::ACL_SRC_1</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00048">ITensorPack::add_const_tensor()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00105">CpuAuxTensorHandler::get()</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00053">ITensorPack::get_const_tensor()</a>, <a class="el" href="_memory_helpers_8h_source.xhtml#l00038">arm_compute::offset_int_vec()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00529">CpuFullyConnected::prepare()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a8e50a5cb5b0d7fda221393e58c2465bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e50a5cb5b0d7fda221393e58c2465bb">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>&#160;</td>
          <td class="paramname"><em>fc_info</em> = <code><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights_info</em> = <code><a class="el" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a>. </p>
<p>Similar to <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#aa5822d7b90151d245c07e8c12c15a8ab">CpuFullyConnected::configure()</a></p>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00376">376</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(fc_info.retain_internal_weights);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>,</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">is_fixed_format_fast_math</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format()))</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(weights, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        fc_info.activation_info.enabled() &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_type()) &amp;&amp;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        fc_info.activation_info.activation() != ActivationLayerInfo::ActivationFunction::RELU &amp;&amp;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        fc_info.activation_info.activation() != ActivationLayerInfo::ActivationFunction::BOUNDED_RELU &amp;&amp;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        fc_info.activation_info.activation() != ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordtype">bool</span> weights_reshaped = fc_info.transpose_weights ? fc_info.are_weights_reshaped : <span class="keyword">true</span>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordtype">bool</span> is_fc_after_conv = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> ITensorInfo &amp;flatten_src =</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        TensorInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">compute_flatten_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>)));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">const</span> ITensorInfo &amp;reshaped_weights = TensorInfo(</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        weights-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(<a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(*weights)));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> ITensorInfo &amp;converted_weights = weights_reshaped</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                               ? TensorInfo(weights-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding())</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                               : TensorInfo(*reshaped_weights.clone());</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// With the Fully Connected layer we can have 4 different cases:</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">//  1) Convolution layer -&gt; Fully Connected layer without batches</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="comment">//  2) Fully Connected layer -&gt; Fully Connected layer without batches</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">//  3) Convolution layer -&gt; Fully Connected layer with batches</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">//  4) Fully Connected layer -&gt; Fully Connected layer with batches</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> ITensorInfo *src_to_use     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> ITensorInfo *weights_to_use = weights;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// Check if we have a fully connected layer with batches</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_batched_fc_layer = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(1) &gt; 1;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">if</span> (biases != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(biases-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_type()))</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(biases, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, biases);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">if</span> (is_batched_fc_layer)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        is_fc_after_conv = (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> &gt;= 4) &amp;&amp;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                           (std::equal(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape().cbegin() + 3, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape().cend(),</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape().cbegin() + 1));</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        is_fc_after_conv = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;num_dimensions() &gt; 1;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">if</span> (!weights_reshaped)</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="comment">// Validate reshape weights kernel</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml#a1f4089d0d7191158a65d297c6a130682">kernels::CpuTransposeKernel::validate</a>(weights, &amp;reshaped_weights));</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        weights_to_use = &amp;reshaped_weights;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">if</span> (is_fc_after_conv &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout() != fc_info.weights_trained_layout))</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="comment">// Validate convert weights kernel</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml#ae93feaa33d69b47436a8f7e4593c51c2">CpuConvertFullyConnectedWeights::validate</a>(</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            weights_to_use, &amp;converted_weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape(), fc_info.weights_trained_layout));</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        weights_to_use = &amp;converted_weights;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">if</span> (is_fc_after_conv)</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="comment">// Fully Connected layer after a Convolution Layer without batches</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            (weights_to_use-&gt;dimension(1) != (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;dimension(0) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;dimension(1) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;dimension(2))));</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="comment">// Validate flatten kernel</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml#a1f4089d0d7191158a65d297c6a130682">CpuFlatten::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, &amp;flatten_src));</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        src_to_use = &amp;flatten_src;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="comment">// Fully Connected layer after a Fully Connected Layer without batches</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;dimension(0) != weights_to_use-&gt;dimension(1));</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="comment">// Validate matrix multiply kernel</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(src_to_use, weights_to_use, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, fc_info.activation_info,</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                                            fc_info.enable_fast_math, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">weights_info</a>.weight_format()));</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_activation_layer_info_8h_source.xhtml#l00084">ActivationLayerInfo::activation()</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00036">FullyConnectedLayerInfo::activation_info</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00040">FullyConnectedLayerInfo::are_weights_reshaped</a>, <a class="el" href="_error_8h_source.xhtml#l00298">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00838">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::BFLOAT16</a>, <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">ICloneable&lt; T &gt;::clone()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00631">arm_compute::misc::shape_calculator::compute_flatten_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00422">arm_compute::misc::shape_calculator::compute_transposed_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00042">FullyConnectedLayerInfo::enable_fast_math</a>, <a class="el" href="_activation_layer_info_8h_source.xhtml#l00099">ActivationLayerInfo::enabled()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">arm_compute::is_data_type_quantized()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01664">arm_compute::is_fixed_format_fast_math()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00041">FullyConnectedLayerInfo::retain_internal_weights</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00039">FullyConnectedLayerInfo::transpose_weights</a>, <a class="el" href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00046">CpuConvertFullyConnectedWeights::validate()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00764">CpuTransposeKernel::validate()</a>, <a class="el" href="_cpu_flatten_8cpp_source.xhtml#l00046">CpuFlatten::validate()</a>, <a class="el" href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">arm_compute::test::validation::weights_info</a>, and <a class="el" href="_fully_connected_layer_info_8h_source.xhtml#l00038">FullyConnectedLayerInfo::weights_trained_layout</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00231">CpuFullyConnected::configure()</a>, and <a class="el" href="_n_e_fully_connected_layer_8cpp_source.xhtml#l00113">NEFullyConnectedLayer::validate()</a>.</p>

</div>
</div>
<a id="a74ae0d6e96f38fecd38471431786b870"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74ae0d6e96f38fecd38471431786b870">&#9670;&nbsp;</a></span>workspace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> workspace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the memory requirements required by the workspace. </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#aea714e0b46ed9e9d14440dbc0ece4013">INEOperator</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00585">585</a> of file <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;{</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">return</span> _aux_mem;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/cpu/operators/<a class="el" href="_cpu_fully_connected_8h_source.xhtml">CpuFullyConnected.h</a></li>
<li>src/cpu/operators/<a class="el" href="_cpu_fully_connected_8cpp_source.xhtml">CpuFullyConnected.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::DataType::BFLOAT16</a></div><div class="ttdeci">@ BFLOAT16</div><div class="ttdoc">16-bit brain floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a7cb842ebfe255726066039853a4322f0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7cb842ebfe255726066039853a4322f0">arm_compute::test::validation::weights_info</a></div><div class="ttdeci">weights_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_batch_normalization_layer_8cpp_source.xhtml#l00165">BatchNormalizationLayer.cpp:165</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a15103352886ec83d9c250a7f5d5c630f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">arm_compute::IScheduler::schedule_op</a></div><div class="ttdeci">virtual void schedule_op(ICPPKernel *kernel, const Hints &amp;hints, const Window &amp;window, ITensorPack &amp;tensors)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::MemoryLifetime::Prepare</a></div><div class="ttdeci">@ Prepare</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a69cb11b5b37f94a6bea9eaad9d13cccf"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">arm_compute::misc::shape_calculator::compute_transposed_shape</a></div><div class="ttdeci">TensorShape compute_transposed_shape(const ITensorInfo &amp;input)</div><div class="ttdoc">Calculate the transposed shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00422">ShapeCalculator.h:422</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">Validate.h:677</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">Validate.h:952</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1_memory_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">arm_compute::experimental::MemoryInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel_xhtml_a1f4089d0d7191158a65d297c6a130682"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml#a1f4089d0d7191158a65d297c6a130682">arm_compute::cpu::kernels::CpuTransposeKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_transpose_kernel_8cpp_source.xhtml#l00764">CpuTransposeKernel.cpp:764</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aef783de4ec01874dbec6054a5868aea2"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00838">Validate.h:838</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a83efb6708574e67d13965bcd2059ad75"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a83efb6708574e67d13965bcd2059ad75">arm_compute::misc::shape_calculator::compute_flatten_shape</a></div><div class="ttdeci">TensorShape compute_flatten_shape(const ITensorInfo *input)</div><div class="ttdoc">Calculate the flattened output shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00631">ShapeCalculator.h:631</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00094">Scheduler.cpp:94</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdeci">@ QASYMM8_SIGNED</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_flatten_xhtml_a1f4089d0d7191158a65d297c6a130682"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml#a1f4089d0d7191158a65d297c6a130682">arm_compute::cpu::CpuFlatten::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_flatten_8cpp_source.xhtml#l00046">CpuFlatten.cpp:46</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a77e0f184dff4fa2111259c16fba2ecfa"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">arm_compute::TensorInfo::set_are_values_constant</a></div><div class="ttdeci">ITensorInfo &amp; set_are_values_constant(bool are_values_constant) override</div><div class="ttdoc">Set the flag whether the tensor values can change during kernel/function execution.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00307">TensorInfo.h:307</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_fully_connected_xhtml_af4d2c35e9fbc329b2e1b2acb864265aa"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">arm_compute::cpu::CpuFullyConnected::prepare</a></div><div class="ttdeci">void prepare(ITensorPack &amp;tensors) override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_fully_connected_8cpp_source.xhtml#l00529">CpuFullyConnected.cpp:529</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a></div><div class="ttdeci">@ UNSPECIFIED</div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights_xhtml_ae93feaa33d69b47436a8f7e4593c51c2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml#ae93feaa33d69b47436a8f7e4593c51c2">arm_compute::cpu::CpuConvertFullyConnectedWeights::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *dst, const TensorShape &amp;original_src_shape, DataLayout data_layout)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00046">CpuConvertFullyConnectedWeights.cpp:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a36b5c2550292b008aa1f018a7623c6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">arm_compute::is_fixed_format_fast_math</a></div><div class="ttdeci">bool is_fixed_format_fast_math(const WeightFormat &amp;wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01664">Types.h:1664</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_fully_connected_xhtml_a8e50a5cb5b0d7fda221393e58c2465bb"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#a8e50a5cb5b0d7fda221393e58c2465bb">arm_compute::cpu::CpuFullyConnected::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *dst, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo(), const WeightsInfo &amp;weights_info=WeightsInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuFullyConnected.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_fully_connected_8cpp_source.xhtml#l00376">CpuFullyConnected.cpp:376</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a324d709e8fb5568ada56ba4999dfb2f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">arm_compute::offset_int_vec</a></div><div class="ttdeci">int offset_int_vec(int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_helpers_8h_source.xhtml#l00038">MemoryHelpers.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00346">DataTypeUtils.h:346</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdeci">@ ACL_SRC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_log_8h_source.xhtml#l00035">Log.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; size_t &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_gemm_xhtml_ac91f91cff0bd873c550e162792e32ffe"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml#ac91f91cff0bd873c550e162792e32ffe">arm_compute::cpu::CpuGemm::has_opt_impl</a></div><div class="ttdeci">static Status has_opt_impl(arm_compute::WeightFormat &amp;weight_format, const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *d, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Indicates whether or not there is an optimal assembly implementation that can be used to process the ...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_8cpp_source.xhtml#l00539">CpuGemm.cpp:539</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:11 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
