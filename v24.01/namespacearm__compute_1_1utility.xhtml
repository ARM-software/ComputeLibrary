<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::utility Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1utility.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::utility Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1utility_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memTemplParams" colspan="2">template&lt;std::size_t N, typename Iterator &gt; </td></tr>
<tr class="memitem:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; typename std::iterator_traits&lt; <a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> &gt;::value_type, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">make_array</a> (<a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> first, <a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> last)</td></tr>
<tr class="separator:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96efecf997f13a914609ddf1eb67f624"><td class="memTemplParams" colspan="2">template&lt;typename DataType , typename RangeType  = DataType&gt; </td></tr>
<tr class="memitem:a96efecf997f13a914609ddf1eb67f624"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;n, const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;lower=std::numeric_limits&lt; RangeType &gt;::lowest(), const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;upper=std::numeric_limits&lt; RangeType &gt;::max())</td></tr>
<tr class="memdesc:a96efecf997f13a914609ddf1eb67f624"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs clamping among a lower and upper value.  <a href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">More...</a><br /></td></tr>
<tr class="separator:a96efecf997f13a914609ddf1eb67f624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a067ebd28103d827b6ec17032e2344064"><td class="memTemplParams" colspan="2">template&lt;typename F &gt; </td></tr>
<tr class="memitem:a067ebd28103d827b6ec17032e2344064"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">for_each</a> (F &amp;&amp;)</td></tr>
<tr class="memdesc:a067ebd28103d827b6ec17032e2344064"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of for_each.  <a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">More...</a><br /></td></tr>
<tr class="separator:a067ebd28103d827b6ec17032e2344064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9abd222389b46fd918cd07673c1d836d"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a9abd222389b46fd918cd07673c1d836d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a9abd222389b46fd918cd07673c1d836d">for_each</a> (F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a9abd222389b46fd918cd07673c1d836d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the function for each of the arguments.  <a href="namespacearm__compute_1_1utility.xhtml#a9abd222389b46fd918cd07673c1d836d">More...</a><br /></td></tr>
<tr class="separator:a9abd222389b46fd918cd07673c1d836d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memTemplItemLeft" align="right" valign="top">T &amp;&amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">foldl</a> (F &amp;&amp;, T &amp;&amp;value)</td></tr>
<tr class="memdesc:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">More...</a><br /></td></tr>
<tr class="separator:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9092f01a5deb8985e310f346ea81774"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U , typename... Us&gt; </td></tr>
<tr class="memitem:af9092f01a5deb8985e310f346ea81774"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#af9092f01a5deb8985e310f346ea81774">foldl</a> (F &amp;&amp;func, T &amp;&amp;initial, U &amp;&amp;value, Us &amp;&amp;...values) -&gt; decltype(func(std::forward&lt; T &gt;(initial), std::forward&lt; U &gt;(value)))</td></tr>
<tr class="memdesc:af9092f01a5deb8985e310f346ea81774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="namespacearm__compute_1_1utility.xhtml#af9092f01a5deb8985e310f346ea81774">More...</a><br /></td></tr>
<tr class="separator:af9092f01a5deb8985e310f346ea81774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c1a72cd100958036bb59f0625f0613f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0c1a72cd100958036bb59f0625f0613f"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; size_t &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a0c1a72cd100958036bb59f0625f0613f">sort_indices</a> (const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="memdesc:a0c1a72cd100958036bb59f0625f0613f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform an index sort of a given vector.  <a href="namespacearm__compute_1_1utility.xhtml#a0c1a72cd100958036bb59f0625f0613f">More...</a><br /></td></tr>
<tr class="separator:a0c1a72cd100958036bb59f0625f0613f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cd4923f17276faa2f7a1a60e7acb17"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">endswith</a> (const std::string &amp;str, const std::string &amp;suffix)</td></tr>
<tr class="memdesc:af8cd4923f17276faa2f7a1a60e7acb17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a string contains a given suffix.  <a href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">More...</a><br /></td></tr>
<tr class="separator:af8cd4923f17276faa2f7a1a60e7acb17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a9eed476cf46a22a3ce6ebd8ba22e8945">check_aligned</a> (void *ptr, const size_t alignment)</td></tr>
<tr class="memdesc:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a pointer complies with a given alignment.  <a href="namespacearm__compute_1_1utility.xhtml#a9eed476cf46a22a3ce6ebd8ba22e8945">More...</a><br /></td></tr>
<tr class="separator:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb96ad5c7071ec3a47ea5f07e817a636"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">tolower</a> (std::string string)</td></tr>
<tr class="memdesc:abb96ad5c7071ec3a47ea5f07e817a636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string to lower case.  <a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">More...</a><br /></td></tr>
<tr class="separator:abb96ad5c7071ec3a47ea5f07e817a636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa805ec7ff4b1f0598b0f3a6164540817"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">getenv</a> (const std::string &amp;env_name)</td></tr>
<tr class="memdesc:aa805ec7ff4b1f0598b0f3a6164540817"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get environment variable as a string.  <a href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">More...</a><br /></td></tr>
<tr class="separator:aa805ec7ff4b1f0598b0f3a6164540817"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a9eed476cf46a22a3ce6ebd8ba22e8945"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eed476cf46a22a3ce6ebd8ba22e8945">&#9670;&nbsp;</a></span>check_aligned()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::utility::check_aligned </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if a pointer complies with a given alignment. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Alignment value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the pointer is aligned else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00193">193</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">reinterpret_cast&lt;</span>std::uintptr_t<span class="keyword">&gt;</span>(ptr) % alignment) == 0;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator::import_memory()</a>, and <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00255">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a96efecf997f13a914609ddf1eb67f624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96efecf997f13a914609ddf1eb67f624">&#9670;&nbsp;</a></span>clamp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> arm_compute::utility::clamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>lower</em> = <code>std::numeric_limits&lt;RangeType&gt;::lowest()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;&#160;</td>
          <td class="paramname"><em>upper</em> = <code>std::numeric_limits&lt;RangeType&gt;::max()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs clamping among a lower and upper value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Value to clamp. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lower</td><td>Lower threshold. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper</td><td>Upper threshold.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Clamped value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00102">102</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> std::max(lower, std::min(n, upper));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="tensor__transform_8cpp_source.xhtml#l00073">arm_compute::helpers::tensor_transform::calculate_end_on_index()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00039">arm_compute::helpers::tensor_transform::calculate_start_on_index()</a>, <a class="el" href="warp__helpers_8h_source.xhtml#l00035">clamp_to_border_with_size()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00267">arm_compute::cpu::compute_region_coordinate()</a>, <a class="el" href="_writer_helper_8h_source.xhtml#l00137">arm_compute::experimental::dynamic_fusion::create_boundary_aware_2d_sampler()</a>, <a class="el" href="nchw_2pooling__layer_8cl_source.xhtml#l00246">pooling_layer_2_nchw_indices()</a>, <a class="el" href="reference_2_r_o_i_align_layer_8cpp_source.xhtml#l00140">arm_compute::test::validation::reference::roi_align_layer()</a>, <a class="el" href="roi__pooling__layer_8cl_source.xhtml#l00151">roi_pooling_layer()</a>, <a class="el" href="nchw_2scale_8cl_source.xhtml#l00158">scale_bilinear_nchw()</a>, and <a class="el" href="nchw_2scale_8cl_source.xhtml#l00091">scale_nearest_neighbour_nchw()</a>.</p>

</div>
</div>
<a id="af8cd4923f17276faa2f7a1a60e7acb17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cd4923f17276faa2f7a1a60e7acb17">&#9670;&nbsp;</a></span>endswith()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::utility::endswith </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if a string contains a given suffix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>Input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to check for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the string ends with the given suffix else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00177">177</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.size() &lt; suffix.size())</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> std::equal(suffix.rbegin(), suffix.rend(), <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.rbegin());</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8h_source.xhtml#l00505">arm_compute::graph_utils::get_input_accessor()</a>.</p>

</div>
</div>
<a id="a043270c1f50c73bf9f91fcc4570ccf0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a043270c1f50c73bf9f91fcc4570ccf0c">&#9670;&nbsp;</a></span>foldl() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T&amp;&amp; arm_compute::utility::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00133">133</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> std::forward&lt;T&gt;(value);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_utility_8h_source.xhtml#l00146">foldl()</a>, and <a class="el" href="_window_helpers_8h_source.xhtml#l00064">arm_compute::intersect_valid_regions()</a>.</p>

</div>
</div>
<a id="af9092f01a5deb8985e310f346ea81774"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9092f01a5deb8985e310f346ea81774">&#9670;&nbsp;</a></span>foldl() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::utility::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>initial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Us &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype(func(std::forward&lt;T&gt;(initial), std::forward&lt;U&gt;(value)))
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fold left. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Function to be called </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">initial</td><td>Initial value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Argument passed to the function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Remaining arguments </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00146">146</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#af9092f01a5deb8985e310f346ea81774">foldl</a>(std::forward&lt;F&gt;(func), func(std::forward&lt;T&gt;(initial), std::forward&lt;U&gt;(value)),</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                 std::forward&lt;Us&gt;(values)...);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00133">foldl()</a>.</p>

</div>
</div>
<a id="a067ebd28103d827b6ec17032e2344064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a067ebd28103d827b6ec17032e2344064">&#9670;&nbsp;</a></span>for_each() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utility::for_each </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of for_each. </p>
<p>Does nothing. </p>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00111">111</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_tensor_shape_8h_source.xhtml#l00214">TensorShape::broadcast_shape()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00332">ITensorInfo::broadcast_shape_and_valid_region()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00210">arm_compute::graph::detail::call_all_input_node_accessors()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00261">arm_compute::graph::detail::call_all_output_node_accessors()</a>, <a class="el" href="_layers_8h_source.xhtml#l00299">ConcatLayer::ConcatLayer()</a>, <a class="el" href="_utility_8h_source.xhtml#l00122">for_each()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, <a class="el" href="_layers_8h_source.xhtml#l01357">StackLayer::StackLayer()</a>, <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00158">SchedulerClock&lt; output_timestamps &gt;::test_start()</a>, <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00228">SchedulerClock&lt; output_timestamps &gt;::test_stop()</a>, and <a class="el" href="_window_helpers_8h_source.xhtml#l00046">arm_compute::update_window_and_padding()</a>.</p>

</div>
</div>
<a id="a9abd222389b46fd918cd07673c1d836d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9abd222389b46fd918cd07673c1d836d">&#9670;&nbsp;</a></span>for_each() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utility::for_each </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call the function for each of the arguments. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Function to be called </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arg</td><td>Argument passed to the function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Remaining arguments </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00122">122</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    func(std::forward&lt;T&gt;(arg));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a9abd222389b46fd918cd07673c1d836d">for_each</a>(std::forward&lt;F&gt;(func), std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="_utility_8h_source.xhtml#l00111">for_each()</a>.</p>

</div>
</div>
<a id="aa805ec7ff4b1f0598b0f3a6164540817"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa805ec7ff4b1f0598b0f3a6164540817">&#9670;&nbsp;</a></span>getenv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::utility::getenv </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>env_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get environment variable as a string. </p>
<dl class="section note"><dt>Note</dt><dd>Return empty string on bare-metal</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">env_name</td><td>Name of the Environment variable to retrieve</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Environment variable content, or empty string if the variable is undefined or on bare-metal </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00218">218</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#ifdef BARE_METAL</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(env_name);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> std::string{};</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#else  // BARE_METAL</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> env_chr = <a class="code" href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">std::getenv</a>(env_name.c_str());</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> env_chr == <span class="keyword">nullptr</span> ? std::string{} : std::string{env_chr};</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#endif // BARE_METAL</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="ab7c665e19081aef1a68ec0090b4c7be6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7c665e19081aef1a68ec0090b4c7be6">&#9670;&nbsp;</a></span>make_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;typename std::iterator_traits&lt;<a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&gt;::value_type, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>&gt; arm_compute::utility::make_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(last);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">detail::make_array</a>(first, index_sequence_t&lt;N&gt;{});</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_utility_8h_source.xhtml#l00080">arm_compute::utility::detail::make_array()</a>.</p>

</div>
</div>
<a id="a0c1a72cd100958036bb59f0625f0613f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c1a72cd100958036bb59f0625f0613f">&#9670;&nbsp;</a></span>sort_indices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;size_t&gt; arm_compute::utility::sort_indices </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform an index sort of a given vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> to sort</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sorted index vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00160">160</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;size_t&gt; idx(v.size());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::iota(idx.begin(), idx.end(), 0);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::sort(idx.begin(), idx.end(), [&amp;v](<span class="keywordtype">size_t</span> i1, <span class="keywordtype">size_t</span> i2) { return v[i1] &lt; v[i2]; });</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> idx;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_instruments_stats_8cpp_source.xhtml#l00033">InstrumentsStats::InstrumentsStats()</a>.</p>

</div>
</div>
<a id="abb96ad5c7071ec3a47ea5f07e817a636"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb96ad5c7071ec3a47ea5f07e817a636">&#9670;&nbsp;</a></span>tolower()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::utility::tolower </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string to lower case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">string</td><td>To be converted string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Lower case string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00204">204</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::transform(<span class="keywordtype">string</span>.begin(), <span class="keywordtype">string</span>.<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), <span class="keywordtype">string</span>.begin(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">std::tolower</a>(c); });</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> string;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00104">ClScaleKernel::configure()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00078">arm_compute::graph::Convolution_method_from_name()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00032">arm_compute::data_layout_from_name()</a>, <a class="el" href="_data_type_utils_8cpp_source.xhtml#l00058">arm_compute::data_type_from_name()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00102">arm_compute::graph::depthwise_convolution_method_from_name()</a>, <a class="el" href="_string_utils_8cpp_source.xhtml#l00038">arm_compute::lower_string()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00052">arm_compute::utils::operator&gt;&gt;()</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00116">CommandLineParser::parse()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00055">arm_compute::graph::target_from_name()</a>, and <a class="el" href="_c_l_tuner_types_8h_source.xhtml#l00057">arm_compute::tuner_mode_from_name()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a9abd222389b46fd918cd07673c1d836d"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a9abd222389b46fd918cd07673c1d836d">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;...args)</div><div class="ttdoc">Call the function for each of the arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00122">Utility.h:122</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00204">Utility.h:204</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_ab7c665e19081aef1a68ec0090b4c7be6"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">arm_compute::utility::make_array</a></div><div class="ttdeci">std::array&lt; typename std::iterator_traits&lt; Iterator &gt;::value_type, N &gt; make_array(Iterator first, Iterator last)</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00087">Utility.h:87</a></div></div>
<div class="ttc" id="anamespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_aa805ec7ff4b1f0598b0f3a6164540817"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">arm_compute::utility::getenv</a></div><div class="ttdeci">std::string getenv(const std::string &amp;env_name)</div><div class="ttdoc">Get environment variable as a string.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00218">Utility.h:218</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_af9092f01a5deb8985e310f346ea81774"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#af9092f01a5deb8985e310f346ea81774">arm_compute::utility::foldl</a></div><div class="ttdeci">auto foldl(F &amp;&amp;func, T &amp;&amp;initial, U &amp;&amp;value, Us &amp;&amp;...values) -&gt; decltype(func(std::forward&lt; T &gt;(initial), std::forward&lt; U &gt;(value)))</div><div class="ttdoc">Fold left.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00146">Utility.h:146</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utility.xhtml">utility</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
