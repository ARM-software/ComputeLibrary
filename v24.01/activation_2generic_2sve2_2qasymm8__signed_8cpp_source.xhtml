<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/activation/generic/sve2/qasymm8_signed.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">qasymm8_signed.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="activation_2generic_2sve2_2qasymm8__signed_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_activation_layer_info_8h.xhtml">arm_compute/function_info/ActivationLayerInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_s_v_e_asymm_8h.xhtml">src/core/NEON/SVEAsymm.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_s_v_e_math_8h.xhtml">src/core/NEON/SVEMath.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;arm_sve.h&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#abbe60f4e3af40412c448c9fb6f202cd3">   40</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abbe60f4e3af40412c448c9fb6f202cd3">sve2_qasymm8_signed_activation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                    <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>                   *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>              &amp;window)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_collapsed = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(window, <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win_collapsed.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qi_in           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qi_out          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va              = svdup_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb              = svdup_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_0         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(0.f, qi_in);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_0        = svdup_n_s8(const_0);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1        = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va_f32          = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb_f32          = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_6_f32     = svdup_n_f32(6.f);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_0_f32     = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_3_f32     = svdup_n_f32(3.f);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_inv_6_f32 = svdup_n_f32(0.166666667f);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">bool</span> requant = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> == qi_out.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &amp;&amp; qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> == qi_out.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        requant = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">float</span> s  = qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / qi_out.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">float</span> o  = -qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> * s + qi_out.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">auto</span>  vs = svdup_n_f32(s);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span>  vo = svdup_n_f32(o);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization with int32_t</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> voffset_in = svdup_n_s32(qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    int32_t    s_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    int32_t    o_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(o * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_s32     = svdup_n_s32(s_s32);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_s32     = svdup_n_s32(o_s32);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization for leaky relu</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    int32_t    s_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    int32_t    o_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>((-qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> * s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() + qi_out.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) * (1 &lt;&lt; 8),</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_leaky_s32 = svdup_n_s32(s_leaky_s32);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_leaky_s32 = svdup_n_s32(o_leaky_s32);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            svint8_t tmp;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1_s8(pg, input_ptr + x);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    tmp = svmax_s8_z(pg, vconst_0, vin);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    tmp = svmin_s8_z(pg, va, svmax_s8_z(pg, vconst_0, vin));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    tmp = svmin_s8_z(pg, va, svmax_s8_z(pg, vb, vin));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 0))))),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 1))))),</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 2))))),</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 3))))));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 0), vb_f32))),</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 1), vb_f32))),</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 2), vb_f32))),</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 3), vb_f32))));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 0),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 0),</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 1),</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 1),</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 2),</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 2),</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 3),</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 3),</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                                                                    const_3_f32))))));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    svbool_t    p0, p1, p2, p3;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    svint32x4_t tmp_dep;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="comment">// Expand to int32</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> svint32x4_t vin_s32 =</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        svcreate4_s32(svmovlb_s32(svmovlb_s16(vin)), svmovlt_s32(svmovlb_s16(vin)),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                      svmovlb_s32(svmovlt_s16(vin)), svmovlt_s32(svmovlt_s16(vin)));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="comment">// Compare elements to input offset</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keywordflow">if</span> (qi_in.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> &gt;= 0)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        p0 = svcmplt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                        p1 = svcmplt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        p2 = svcmplt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        p3 = svcmplt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        p0 = svcmpgt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        p1 = svcmpgt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        p2 = svcmpgt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        p3 = svcmpgt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment">// Multiply negative elements and requantize if necessary</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordflow">if</span> (requant)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                          svmla_s32_m(pg, svsel(p0, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 0),</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                      svsel(p0, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                          8),</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                          svmla_s32_m(pg, svsel(p1, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 1),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                      svsel(p1, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                          8),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                          svmla_s32_m(pg, svsel(p2, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 2),</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                      svsel(p2, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                          8),</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                          svmla_s32_m(pg, svsel(p3, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 3),</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                      svsel(p3, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                          8));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                            svasr_n_s32_m(p0, svmad_s32_m(p0, svget4_s32(vin_s32, 0), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            svasr_n_s32_m(p1, svmad_s32_m(p1, svget4_s32(vin_s32, 1), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            svasr_n_s32_m(p2, svmad_s32_m(p2, svget4_s32(vin_s32, 2), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                            svasr_n_s32_m(p3, svmad_s32_m(p3, svget4_s32(vin_s32, 3), vs_leaky_s32, vo_leaky_s32), 8));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="comment">// Convert uint32 vectors to uint16 vectors (with saturation)</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_low_s16  = svqxtnt_s32(svqxtnb_s32(svget4_s32(tmp_dep, 0)), svget4_s32(tmp_dep, 1));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_high_s16 = svqxtnt_s32(svqxtnb_s32(svget4_s32(tmp_dep, 2)), svget4_s32(tmp_dep, 3));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="comment">// convert uint16 vectors to uint8 vectors (with saturation)</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    tmp = svqxtnt_s16(svqxtnb_s16(v_low_s16), v_high_s16);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                svst1_s8(pg, output_ptr + x, tmp);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                x += svcntb();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(svptrue_b8(), pg));</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        },</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="a_s_v_e_asymm_8h_xhtml"><div class="ttname"><a href="_s_v_e_asymm_8h.xhtml">SVEAsymm.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="a_activation_layer_info_8h_xhtml"><div class="ttname"><a href="_activation_layer_info_8h.xhtml">ActivationLayerInfo.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a663ce71e1992366180fcb85b0a874e2f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions between first and last if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00072">Window.inl:72</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="a_s_v_e_math_8h_xhtml"><div class="ttname"><a href="_s_v_e_math_8h.xhtml">SVEMath.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00061">ActivationLayerInfo.h:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00147">Helpers.inl:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00309">QuantizationInfo.h:309</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00041">ActivationLayerInfo.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00036">Rounding.cpp:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_abbe60f4e3af40412c448c9fb6f202cd3"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abbe60f4e3af40412c448c9fb6f202cd3">arm_compute::cpu::sve2_qasymm8_signed_activation</a></div><div class="ttdeci">void sve2_qasymm8_signed_activation(const ITensor *src, ITensor *dst, const ActivationLayerInfo &amp;act_info, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">qasymm8_signed.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_2e9db72303743e246212143d27c33218.xhtml">activation</a></li><li class="navelem"><a class="el" href="dir_0eda15e1c70fe142771981aa2f90fcba.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_786ac30ce336b1408dd66fec40d803eb.xhtml">sve2</a></li><li class="navelem"><a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp.xhtml">qasymm8_signed.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:19:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
