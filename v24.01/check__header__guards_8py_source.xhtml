<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: scripts/check_header_guards.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('check__header__guards_8py_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">check_header_guards.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="check__header__guards_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml">    1</a></span>&#160;<span class="comment">#!/usr/bin/env python3</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2023 Arm Limited.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"># SOFTWARE.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">import</span> argparse</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> typing <span class="keyword">import</span> List, Tuple</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> logging</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> re</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a0b14e488ae28d98d262453f3e9cd6e4d">   31</a></span>&#160;logger = logging.getLogger(<span class="stringliteral">&quot;check_header_guards&quot;</span>)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ad25af49a5cb0d22a61f0398311998870">   33</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#ad25af49a5cb0d22a61f0398311998870">find_code_boundaries</a>(lines: List[str]) -&gt; (int, int):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    inside_comment : bool = <span class="keyword">False</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    start = len(lines)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    end = -1</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    line_num = 0</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        stripped_line : str = line.strip()</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span> stripped_line.startswith(<span class="stringliteral">&quot;/*&quot;</span>):    <span class="comment"># block comment start</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            inside_comment = <span class="keyword">True</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> inside_comment <span class="keywordflow">and</span> <span class="keywordflow">not</span> stripped_line.startswith(<span class="stringliteral">&quot;//&quot;</span>) <span class="keywordflow">and</span> stripped_line != <span class="stringliteral">&quot;&quot;</span>:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            start = min(line_num, start)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            end = line_num</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">if</span> inside_comment <span class="keywordflow">and</span> stripped_line.endswith(<span class="stringliteral">&quot;*/&quot;</span>):</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            inside_comment = <span class="keyword">False</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        line_num += 1</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> start, end</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#add5cbf1ca0374c618662577b47b219d2">   56</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#add5cbf1ca0374c618662577b47b219d2">is_define</a>(line: str) -&gt; bool:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> line.strip().startswith(<span class="stringliteral">&quot;#define&quot;</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a1c8e75da40fbf79f17d86fd12904a766">   59</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#a1c8e75da40fbf79f17d86fd12904a766">is_endif</a>(line: str) -&gt; bool:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> line.strip().startswith(<span class="stringliteral">&quot;#endif&quot;</span>)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#aba25bd2611301306680b67d3c53a50f8">   62</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#aba25bd2611301306680b67d3c53a50f8">is_ifndef</a>(line: str) -&gt; bool:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> line.strip().startswith(<span class="stringliteral">&quot;#ifndef&quot;</span>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"># Strips the given line from // and /* */ blocks</span></div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#aa2fd0d037400581a336a3be43a213678">   66</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#aa2fd0d037400581a336a3be43a213678">strip_comments</a>(line: str) -&gt; str:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    line = re.sub(<span class="stringliteral">r&quot;/\*.*\*/&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, line)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    line = re.sub(<span class="stringliteral">r&quot;//.*&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, line)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> line.strip()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"># If the line</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">#   1) startswith #ifndef</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">#   2) is all uppercase</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">#   3) does not start with double underscore, i.e. __</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"># Then</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">#   It &quot;looks&quot; like a header guard</span></div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ac3ae035abce5465ca90caf3014c3bc34">   77</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#ac3ae035abce5465ca90caf3014c3bc34">looks_like_header_guard</a>(line: str) -&gt; bool:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    sline = line.strip()</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    guard_candidate = <a class="code" href="namespacecheck__header__guards.xhtml#aa2fd0d037400581a336a3be43a213678">strip_comments</a>(sline[len(<span class="stringliteral">&quot;#ifndef&quot;</span>):])</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#aba25bd2611301306680b67d3c53a50f8">is_ifndef</a>(sline) <span class="keywordflow">and</span> <span class="keywordflow">not</span> guard_candidate.startswith(<span class="stringliteral">&quot;__&quot;</span>) <span class="keywordflow">and</span> guard_candidate.isupper()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ac163450f78aaf6836a7c6c211588773b">   84</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#ac163450f78aaf6836a7c6c211588773b">fix_header_guard</a>(lines: List[str], expected_header_guard: str, comment_style: str) -&gt; Tuple[List[str], bool]:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    start_line, next_line, last_line = <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    start_index, last_index = <a class="code" href="namespacecheck__header__guards.xhtml#ad25af49a5cb0d22a61f0398311998870">find_code_boundaries</a>(lines)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    guards_updated: bool = <span class="keyword">True</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> start_index &lt; len(lines):</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment"># if not, the file is full of comments</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        start_line = lines[start_index]</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span> start_index + 1 &lt; len(lines):</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment"># if not, the file has only one line of code</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        next_line = lines[start_index + 1]</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> last_index &lt; len(lines) <span class="keywordflow">and</span> last_index &gt; start_index + 1:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment"># if not, either the file is full of comments OR it has less than three code lines</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        last_line = lines[last_index]</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    expected_start_line = f<span class="stringliteral">&quot;#ifndef {expected_header_guard}\n&quot;</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    expected_next_line = f<span class="stringliteral">&quot;#define {expected_header_guard}\n&quot;</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> comment_style == <span class="stringliteral">&#39;double_slash&#39;</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        expected_last_line = f<span class="stringliteral">&quot;#endif // {expected_header_guard}\n&quot;</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">elif</span> comment_style == <span class="stringliteral">&#39;slash_asterix&#39;</span>:</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        expected_last_line = f<span class="stringliteral">&quot;#endif /* {expected_header_guard} */\n&quot;</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    empty_line = <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> <a class="code" href="namespacecheck__header__guards.xhtml#ac3ae035abce5465ca90caf3014c3bc34">looks_like_header_guard</a>(start_line) <span class="keywordflow">and</span> <a class="code" href="namespacecheck__header__guards.xhtml#add5cbf1ca0374c618662577b47b219d2">is_define</a>(next_line) <span class="keywordflow">and</span> <a class="code" href="namespacecheck__header__guards.xhtml#a1c8e75da40fbf79f17d86fd12904a766">is_endif</a>(last_line):</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment"># modify the current header guard if necessary</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        lines = lines[:start_index] + [expected_start_line, expected_next_line] + \</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            lines[start_index+2:last_index] + [expected_last_line] + lines[last_index+1:]</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        guards_updated = (start_line != expected_start_line) <span class="keywordflow">or</span> (next_line != expected_next_line) \</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">or</span> (last_line != expected_last_line)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment"># header guard could not be detected, add header guards</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        lines = lines[:start_index] + [empty_line, expected_start_line, expected_next_line] + \</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            [empty_line] + lines[start_index:] + [empty_line, expected_last_line]</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> lines, guards_updated</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ad67317661679535708e32a2188af1e8c">  127</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#ad67317661679535708e32a2188af1e8c">find_expected_header_guard</a>(filepath: str, prefix: str, add_extension: str, drop_outermost_subdir: str) -&gt; str:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> drop_outermost_subdir:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        arr : List[str] = filepath.split(<span class="stringliteral">&quot;/&quot;</span>)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        arr = arr[min(1, len(arr)-1):]</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        filepath = <span class="stringliteral">&quot;/&quot;</span>.<a class="code" href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">join</a>(arr)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> add_extension:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        filepath = <span class="stringliteral">&quot;.&quot;</span>.<a class="code" href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">join</a>(filepath.split(<span class="stringliteral">&quot;.&quot;</span>)[:-1])</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    guard = filepath.replace(<span class="stringliteral">&quot;/&quot;</span>, <span class="stringliteral">&quot;_&quot;</span>).replace(<span class="stringliteral">&quot;.&quot;</span>, <span class="stringliteral">&quot;_&quot;</span>).upper()    <span class="comment"># snake case full path</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> prefix + <span class="stringliteral">&quot;_&quot;</span> + guard</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a92b098faa9dfbfe2c30dbef1af49316a">  140</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespacecheck__header__guards.xhtml#a92b098faa9dfbfe2c30dbef1af49316a">skip_file</a>(filepath: str, extensions: List[str], exclude: List[str], include: List[str]) -&gt; bool:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    extension = filepath.split(<span class="stringliteral">&quot;.&quot;</span>)[-1]</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> extension.lower() <span class="keywordflow">not</span> <span class="keywordflow">in</span> extensions:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> exclude <span class="keywordflow">and</span> any([filepath.startswith(exc) <span class="keywordflow">for</span> exc <span class="keywordflow">in</span> exclude]):</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        print(exclude)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> include:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <span class="keywordflow">not</span> any([filepath.startswith(inc) <span class="keywordflow">for</span> inc <span class="keywordflow">in</span> include])</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&quot;__main__&quot;</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a90eee7a4677ca8b1ed116364a24367f9">  157</a></span>&#160;    parser = argparse.ArgumentParser(</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            formatter_class=argparse.RawDescriptionHelpFormatter,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            description=<span class="stringliteral">&quot;Header Guard Checker. It adds full path snake case header guards with or without extension.&quot;</span>,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    )</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">  162</a></span>&#160;    parser.add_argument(<span class="stringliteral">&quot;files&quot;</span>, type=str, nargs=<span class="stringliteral">&quot;+&quot;</span>, help=<span class="stringliteral">&quot;Files to check the header guards&quot;</span>)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--extensions&quot;</span>, type=str, help=<span class="stringliteral">&quot;Comma separated list of extensions to run the checks. \</span></div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ae81948490ddf54e80a22593640178350">  164</a></span>&#160;<span class="stringliteral">        If the input file does not have any of the extensions, it&#39;ll be skipped&quot;</span>, required=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a364cdd17dd69b9ddcc95e8733eb18272">  165</a></span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--comment_style&quot;</span>, choices=[<span class="stringliteral">&#39;double_slash&#39;</span>, <span class="stringliteral">&#39;slash_asterix&#39;</span>], required=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#affb1327b18bf08a379d19eef89cf1ed1">  166</a></span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--exclude&quot;</span>, type=str, help=<span class="stringliteral">&quot;Comma separated list of paths to exclude from header guard checks&quot;</span>, default=<span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--include&quot;</span>, type=str, help=<span class="stringliteral">&quot;Comma separated list of paths to include. Defaults to empty string, \</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">        which means all the paths are included&quot;</span>, default=<span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--prefix&quot;</span>, help=<span class="stringliteral">&quot;Prefix to apply to header guards&quot;</span>, required=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a2f4ab7bf743142dae2e459aa18f9f1d4">  170</a></span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--add_extension&quot;</span>, action=<span class="stringliteral">&quot;store_true&quot;</span>, help=<span class="stringliteral">&quot;If true, it adds the file extension to the end of the guard&quot;</span>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    parser.add_argument(<span class="stringliteral">&quot;--drop_outermost_subdir&quot;</span>, action=<span class="stringliteral">&quot;store_true&quot;</span>, help=<span class="stringliteral">&quot;If true, it&#39;ll not use the outermost folder in the path. \</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">        This is intended for using in subdirs with different rules&quot;</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a8187411843a6284ffb964ef3fb9fcab3">  174</a></span>&#160;    args = parser.parse_args()</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#afafecb95aca5e0525fd6959a5602fb89">  176</a></span>&#160;    files = args.files</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a4397ebd547b206a8f60555ec1d1e0397">  177</a></span>&#160;    extensions = args.extensions.split(<span class="stringliteral">&quot;,&quot;</span>)</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a2e942a3e16ea6281458cb06cedb9a8a4">  178</a></span>&#160;    exclude = args.exclude.split(<span class="stringliteral">&quot;,&quot;</span>) <span class="keywordflow">if</span> args.exclude != <span class="stringliteral">&#39;&#39;</span> <span class="keywordflow">else</span> []</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#af41dc620231ab9c2278a677cf579f05d">  179</a></span>&#160;    include = args.include.split(<span class="stringliteral">&quot;,&quot;</span>) <span class="keywordflow">if</span> args.include != <span class="stringliteral">&#39;&#39;</span> <span class="keywordflow">else</span> []</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">  180</a></span>&#160;    prefix = args.prefix</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a1743e08ea7b3011b8b75cd03e03b2c4a">  181</a></span>&#160;    add_extension = args.add_extension</div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#ad1ad39e57e0ffad8c9a142a2934ad9b6">  182</a></span>&#160;    drop_outermost_subdir = args.drop_outermost_subdir</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a2aac646044498e2caa6e302621a8bc35">  183</a></span>&#160;    comment_style = args.comment_style</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a05b240734aa0ab5756d163cc6b03d6e1">  185</a></span>&#160;    logging_level = logging.INFO</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#afde8e18a788ccc92fc61cab298bca7e3">  186</a></span>&#160;    logging.basicConfig(level=logging_level)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">  188</a></span>&#160;    retval = 0</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">for</span> file <span class="keywordflow">in</span> files:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespacecheck__header__guards.xhtml#a92b098faa9dfbfe2c30dbef1af49316a">skip_file</a>(file, extensions, exclude, include):</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            logger.info(f<span class="stringliteral">&quot;File {file} is SKIPPED&quot;</span>)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        expected_header_guard : str = <a class="code" href="namespacecheck__header__guards.xhtml#ad67317661679535708e32a2188af1e8c">find_expected_header_guard</a>(file, prefix, add_extension, drop_outermost_subdir)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">with</span> open(file, <span class="stringliteral">&quot;r&quot;</span>) <span class="keyword">as</span> fd:</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a17b4022430bcb8cf112cada5d768cdd4">  197</a></span>&#160;            lines: List = fd.readlines()</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="namespacecheck__header__guards.xhtml#a5713f4ecaf7003f1863980b1a6725130">  199</a></span>&#160;        new_lines, guards_updated = <a class="code" href="namespacecheck__header__guards.xhtml#ac163450f78aaf6836a7c6c211588773b">fix_header_guard</a>(lines, expected_header_guard, comment_style)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">with</span> open(file, <span class="stringliteral">&quot;w&quot;</span>) <span class="keyword">as</span> fd:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            fd.writelines([f<span class="stringliteral">&quot;{line}&quot;</span> <span class="keywordflow">for</span> line <span class="keywordflow">in</span> new_lines])</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">if</span> guards_updated:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            logger.info(<span class="stringliteral">&quot;File has been modified&quot;</span>)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            retval = 1</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    exit(retval)</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a92b098faa9dfbfe2c30dbef1af49316a"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a92b098faa9dfbfe2c30dbef1af49316a">check_header_guards.skip_file</a></div><div class="ttdeci">bool skip_file(str filepath, List[str] extensions, List[str] exclude, List[str] include)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00140">check_header_guards.py:140</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_aba25bd2611301306680b67d3c53a50f8"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#aba25bd2611301306680b67d3c53a50f8">check_header_guards.is_ifndef</a></div><div class="ttdeci">bool is_ifndef(str line)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00062">check_header_guards.py:62</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_ad67317661679535708e32a2188af1e8c"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#ad67317661679535708e32a2188af1e8c">check_header_guards.find_expected_header_guard</a></div><div class="ttdeci">str find_expected_header_guard(str filepath, str prefix, str add_extension, str drop_outermost_subdir)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00127">check_header_guards.py:127</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_aa2fd0d037400581a336a3be43a213678"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#aa2fd0d037400581a336a3be43a213678">check_header_guards.strip_comments</a></div><div class="ttdeci">str strip_comments(str line)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00066">check_header_guards.py:66</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_add5cbf1ca0374c618662577b47b219d2"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#add5cbf1ca0374c618662577b47b219d2">check_header_guards.is_define</a></div><div class="ttdeci">bool is_define(str line)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00056">check_header_guards.py:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5277640d2fd61696201c28a01c3de703"><div class="ttname"><a href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">arm_compute::join</a></div><div class="ttdeci">std::string join(const std::vector&lt; std::string &gt; strings, const std::string &amp;sep)</div><div class="ttdoc">Join a sequence of strings with separator sep.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00066">StringUtils.cpp:66</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_ad25af49a5cb0d22a61f0398311998870"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#ad25af49a5cb0d22a61f0398311998870">check_header_guards.find_code_boundaries</a></div><div class="ttdeci">(int, int) find_code_boundaries(List[str] lines)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00033">check_header_guards.py:33</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_ac163450f78aaf6836a7c6c211588773b"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#ac163450f78aaf6836a7c6c211588773b">check_header_guards.fix_header_guard</a></div><div class="ttdeci">Tuple[List[str], bool] fix_header_guard(List[str] lines, str expected_header_guard, str comment_style)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00084">check_header_guards.py:84</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_ac3ae035abce5465ca90caf3014c3bc34"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#ac3ae035abce5465ca90caf3014c3bc34">check_header_guards.looks_like_header_guard</a></div><div class="ttdeci">bool looks_like_header_guard(str line)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00077">check_header_guards.py:77</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a1c8e75da40fbf79f17d86fd12904a766"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a1c8e75da40fbf79f17d86fd12904a766">check_header_guards.is_endif</a></div><div class="ttdeci">bool is_endif(str line)</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00059">check_header_guards.py:59</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_53e6fa9553ac22a5646d2a2b2d7b97a1.xhtml">scripts</a></li><li class="navelem"><a class="el" href="check__header__guards_8py.xhtml">check_header_guards.py</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:19:55 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
