<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/Utils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('tests_2_utils_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Utils.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_coordinates_8h_source.xhtml">arm_compute/core/Coordinates.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_error_8h_source.xhtml">arm_compute/core/Error.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_size2_d_8h_source.xhtml">arm_compute/core/Size2D.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_tensor_info_8h_source.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_tensor_shape_8h_source.xhtml">arm_compute/core/TensorShape.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">arm_compute/core/Types.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_string_support_8h_source.xhtml">support/StringSupport.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_toolchain_support_8h_source.xhtml">support/ToolchainSupport.h</a>&quot;</code><br />
<code>#include &lt;cmath&gt;</code><br />
<code>#include &lt;cstddef&gt;</code><br />
<code>#include &lt;limits&gt;</code><br />
<code>#include &lt;memory&gt;</code><br />
<code>#include &lt;random&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;type_traits&gt;</code><br />
<code>#include &lt;vector&gt;</code><br />
<code>#include &quot;<a class="el" href="_conv2d_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/Conv2dAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_c_p_p_scheduler_8h_source.xhtml">arm_compute/runtime/CPP/CPPScheduler.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_runtime_context_8h_source.xhtml">arm_compute/runtime/RuntimeContext.h</a>&quot;</code><br />
</div>
<p><a href="tests_2_utils_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote a type.  <a href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml">promote&lt; uint8_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote uint8_t to uint16_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml">promote&lt; int8_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote int8_t to int16_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml">promote&lt; uint16_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote uint16_t to uint32_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml">promote&lt; int16_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote int16_t to int32_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml">promote&lt; uint32_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote uint32_t to uint64_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml">promote&lt; int32_t &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote int32_t to int64_t.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml">promote&lt; float &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote float to float.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4.xhtml">promote&lt; half &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote half to half.  <a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">common_promoted_signed_type&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the signed promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml">common_promoted_unsigned_type&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the unsigned promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1traits"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml">arm_compute::test::traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ac20ca549fa27b2eed44367745055a233"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac20ca549fa27b2eed44367745055a233"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">promote_t</a> = typename promote&lt; T &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="memdesc:ac20ca549fa27b2eed44367745055a233"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get promoted type.  <a href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">More...</a><br /></td></tr>
<tr class="separator:ac20ca549fa27b2eed44367745055a233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5351f49d449d49f82e2bf942b7a13da6"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5351f49d449d49f82e2bf942b7a13da6"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml#a5351f49d449d49f82e2bf942b7a13da6">make_signed_conditional_t</a> = typename std::conditional&lt; std::is_integral&lt; T &gt;::value, std::make_signed&lt; T &gt;, std::common_type&lt; T &gt; &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a5351f49d449d49f82e2bf942b7a13da6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af423fd0ba931db9db07bd355e77a2164"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af423fd0ba931db9db07bd355e77a2164"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml#af423fd0ba931db9db07bd355e77a2164">make_unsigned_conditional_t</a> = typename std::conditional&lt; std::is_integral&lt; T &gt;::value, std::make_unsigned&lt; T &gt;, std::common_type&lt; T &gt; &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:af423fd0ba931db9db07bd355e77a2164"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">round_half_up</a> (T value)</td></tr>
<tr class="memdesc:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to positive infinity.  <a href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">More...</a><br /></td></tr>
<tr class="separator:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">round_half_even</a> (T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</td></tr>
<tr class="memdesc:ad93bb148a873f19ad7692756e59617f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to nearest even.  <a href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">More...</a><br /></td></tr>
<tr class="separator:ad93bb148a873f19ad7692756e59617f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa337ab76176f3c4193642ac6de3a61cf"><td class="memItemLeft" align="right" valign="top">Format&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a> (Channel channel)</td></tr>
<tr class="memdesc:aa337ab76176f3c4193642ac6de3a61cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Look up the format corresponding to a channel.  <a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">More...</a><br /></td></tr>
<tr class="separator:aa337ab76176f3c4193642ac6de3a61cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memItemLeft" align="right" valign="top">Format&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">get_channel_format</a> (Channel channel)</td></tr>
<tr class="memdesc:ac7dbe33793790fc37a5eda11ed6b0273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the format of a channel.  <a href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">More...</a><br /></td></tr>
<tr class="separator:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a> (F &amp;&amp;, const T &amp;value)</td></tr>
<tr class="memdesc:a1ebbb23b0094d47c51226d58e17e6447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">More...</a><br /></td></tr>
<tr class="separator:a1ebbb23b0094d47c51226d58e17e6447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U &gt; </td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">foldl</a> (F &amp;&amp;func, T &amp;&amp;value1, U &amp;&amp;value2) -&gt; decltype(func(value1, value2))</td></tr>
<tr class="memdesc:ad933f996ccb22854ae56dd86de8cbbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">More...</a><br /></td></tr>
<tr class="separator:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplParams" colspan="2">template&lt;typename F , typename I , typename T , typename... Vs&gt; </td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplItemLeft" align="right" valign="top">I&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">foldl</a> (F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</td></tr>
<tr class="memdesc:a92a5aaf033153828aef41d3354c204d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">More...</a><br /></td></tr>
<tr class="separator:a92a5aaf033153828aef41d3354c204d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8103df0e6c416f55f40106aa49072b42"><td class="memItemLeft" align="right" valign="top">ValidRegion&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a> (const TensorShape &amp;a_shape, bool border_undefined=false, BorderSize border_size=BorderSize(0))</td></tr>
<tr class="memdesc:a8103df0e6c416f55f40106aa49072b42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region based on tensor shape, border mode and border size.  <a href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">More...</a><br /></td></tr>
<tr class="separator:a8103df0e6c416f55f40106aa49072b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a> (void *ptr, T value, DataType data_type)</td></tr>
<tr class="memdesc:a1e6934e95738573214c2ce1d6648d116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write the value after casting the pointer according to <code>data_type</code>.  <a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">More...</a><br /></td></tr>
<tr class="separator:a1e6934e95738573214c2ce1d6648d116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplParams" colspan="2">template&lt;typename U , typename T &gt; </td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a> (T val)</td></tr>
<tr class="memdesc:a4965b2f6821e0cf0afee738158bd8377"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturate a value of type T against the numeric limits of type U.  <a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">More...</a><br /></td></tr>
<tr class="separator:a4965b2f6821e0cf0afee738158bd8377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memItemLeft" align="right" valign="top">Coordinates&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a> (const TensorShape &amp;shape, int index)</td></tr>
<tr class="memdesc:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a linear index into n-dimensional coordinates.  <a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">More...</a><br /></td></tr>
<tr class="separator:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a> (const TensorShape &amp;shape, const Coordinates &amp;coord)</td></tr>
<tr class="memdesc:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearise the given coordinate.  <a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">More...</a><br /></td></tr>
<tr class="separator:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a> (const ValidRegion &amp;valid_region, Coordinates coord)</td></tr>
<tr class="memdesc:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a coordinate is within a valid region.  <a href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">More...</a><br /></td></tr>
<tr class="separator:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a6a747b1db241e659f9f6a9da40a2fcf2">create_tensor</a> (const TensorInfo &amp;info, IRuntimeContext *ctx=nullptr)</td></tr>
<tr class="memdesc:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#a6a747b1db241e659f9f6a9da40a2fcf2">More...</a><br /></td></tr>
<tr class="separator:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae3f0d4980b4c5bfc29ee9451fe6b7e01">create_tensor</a> (const TensorShape &amp;shape, DataType data_type, int num_channels=1, QuantizationInfo quantization_info=QuantizationInfo(), DataLayout data_layout=DataLayout::NCHW, IRuntimeContext *ctx=nullptr)</td></tr>
<tr class="memdesc:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#ae3f0d4980b4c5bfc29ee9451fe6b7e01">More...</a><br /></td></tr>
<tr class="separator:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac350f5959bbdddae52937f2219d58076"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac350f5959bbdddae52937f2219d58076"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac350f5959bbdddae52937f2219d58076">create_tensor</a> (const TensorShape &amp;shape, Format format, IRuntimeContext *ctx=nullptr)</td></tr>
<tr class="memdesc:ac350f5959bbdddae52937f2219d58076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#ac350f5959bbdddae52937f2219d58076">More...</a><br /></td></tr>
<tr class="separator:ac350f5959bbdddae52937f2219d58076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a000a9b9acb976222ee72275cf8852a3f">generate_random_real</a> (unsigned int num_values, T min, T max, std::random_device::result_type seed)</td></tr>
<tr class="memdesc:a000a9b9acb976222ee72275cf8852a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a vector with a uniform distribution of floating point values across the specified range.  <a href="namespacearm__compute_1_1test.xhtml#a000a9b9acb976222ee72275cf8852a3f">More...</a><br /></td></tr>
<tr class="separator:a000a9b9acb976222ee72275cf8852a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplParams" colspan="2">template&lt;typename T , typename ArrayAccessor_T &gt; </td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac35e7a1ad467f5fe8620cbbc5793d53b">fill_array</a> (ArrayAccessor_T &amp;&amp;array, const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="separator:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47155d6186155ec4da9295764b3c05a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">get_typestring</a> (DataType data_type)</td></tr>
<tr class="memdesc:ae47155d6186155ec4da9295764b3c05a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obtain numpy type string from DataType.  <a href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">More...</a><br /></td></tr>
<tr class="separator:ae47155d6186155ec4da9295764b3c05a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a5967bb62a612be6b300aa96049a2166a">sync_if_necessary</a> ()</td></tr>
<tr class="memdesc:a5967bb62a612be6b300aa96049a2166a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync if necessary.  <a href="namespacearm__compute_1_1test.xhtml#a5967bb62a612be6b300aa96049a2166a">More...</a><br /></td></tr>
<tr class="separator:a5967bb62a612be6b300aa96049a2166a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a619736e19838c20cac8f668ab13aae37">sync_tensor_if_necessary</a> (TensorType &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a619736e19838c20cac8f668ab13aae37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync tensor if necessary.  <a href="namespacearm__compute_1_1test.xhtml#a619736e19838c20cac8f668ab13aae37">More...</a><br /></td></tr>
<tr class="separator:a619736e19838c20cac8f668ab13aae37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ab69f8e70173ef637e48967af41c8ae"><td class="memItemLeft" align="right" valign="top">ITensorInfo::TensorDimsState&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">construct_dims_state</a> (int32_t value)</td></tr>
<tr class="memdesc:a8ab69f8e70173ef637e48967af41c8ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the given value.  <a href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">More...</a><br /></td></tr>
<tr class="separator:a8ab69f8e70173ef637e48967af41c8ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="memItemLeft" align="right" valign="top">ITensorInfo::TensorDimsState&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">construct_dynamic_dims_state</a> ()</td></tr>
<tr class="memdesc:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the value for dynamic state.  <a href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">More...</a><br /></td></tr>
<tr class="separator:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0cf4577fe9753a2dde691439c0c4581"><td class="memItemLeft" align="right" valign="top">ITensorInfo::TensorDimsState&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">construct_static_dims_state</a> ()</td></tr>
<tr class="memdesc:ab0cf4577fe9753a2dde691439c0c4581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the value for non-dynamic state.  <a href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">More...</a><br /></td></tr>
<tr class="separator:ab0cf4577fe9753a2dde691439c0c4581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab53ce08b9e532e8b076c9831908597e6"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:ab53ce08b9e532e8b076c9831908597e6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab53ce08b9e532e8b076c9831908597e6">set_tensor_dynamic</a> (TensorType &amp;t)</td></tr>
<tr class="memdesc:ab53ce08b9e532e8b076c9831908597e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the dimension states of the given tensor to dynamic.  <a href="namespacearm__compute_1_1test.xhtml#ab53ce08b9e532e8b076c9831908597e6">More...</a><br /></td></tr>
<tr class="separator:ab53ce08b9e532e8b076c9831908597e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8e1c85e80e1784f08ca535a18feacf2"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:af8e1c85e80e1784f08ca535a18feacf2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af8e1c85e80e1784f08ca535a18feacf2">set_tensor_static</a> (TensorType &amp;t)</td></tr>
<tr class="memdesc:af8e1c85e80e1784f08ca535a18feacf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the dimension states of the given tensor to state.  <a href="namespacearm__compute_1_1test.xhtml#af8e1c85e80e1784f08ca535a18feacf2">More...</a><br /></td></tr>
<tr class="separator:af8e1c85e80e1784f08ca535a18feacf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ce32989fb2426d6cef29e7b8e2b2d68"><td class="memItemLeft" align="right" valign="top">experimental::dynamic_fusion::Conv2dAttributes&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ce32989fb2426d6cef29e7b8e2b2d68">convert_pad_stride_info_to_conv_attr</a> (const PadStrideInfo &amp;info, const Size2D &amp;dialation)</td></tr>
<tr class="separator:a1ce32989fb2426d6cef29e7b8e2b2d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="tests_2_utils_8h.xhtml">Utils.h</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:05 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
