<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: IKernel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_kernel.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">IKernel Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Common information for all the kernels.  
 <a href="classarm__compute_1_1_i_kernel.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_kernel_8h_source.xhtml">IKernel.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7250cb8cbaa4104a93a2d77155085507"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">IKernel</a> ()</td></tr>
<tr class="memdesc:a7250cb8cbaa4104a93a2d77155085507"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">More...</a><br /></td></tr>
<tr class="separator:a7250cb8cbaa4104a93a2d77155085507"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b60d15a5e12a5b8f3825194dd3b12"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">~IKernel</a> ()=default</td></tr>
<tr class="memdesc:a341b60d15a5e12a5b8f3825194dd3b12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">More...</a><br /></td></tr>
<tr class="separator:a341b60d15a5e12a5b8f3825194dd3b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0466ee6ce6552c87595f0e88e73eeb1b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a> () const</td></tr>
<tr class="memdesc:a0466ee6ce6552c87595f0e88e73eeb1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates whether or not the kernel is parallelisable.  <a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">More...</a><br /></td></tr>
<tr class="separator:a0466ee6ce6552c87595f0e88e73eeb1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b3a97ba5dded504a2f2261c078493dd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">border_size</a> () const</td></tr>
<tr class="memdesc:a4b3a97ba5dded504a2f2261c078493dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the border for that kernel.  <a href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">More...</a><br /></td></tr>
<tr class="separator:a4b3a97ba5dded504a2f2261c078493dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34a46f53686c12a5c5e717cc9617fb6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a> () const</td></tr>
<tr class="memdesc:ad34a46f53686c12a5c5e717cc9617fb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum window the kernel can be executed on.  <a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">More...</a><br /></td></tr>
<tr class="separator:ad34a46f53686c12a5c5e717cc9617fb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ab3ad0302912c7da52204042727a44"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">is_window_configured</a> () const</td></tr>
<tr class="memdesc:a32ab3ad0302912c7da52204042727a44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to check if the embedded window of this kernel has been configured.  <a href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">More...</a><br /></td></tr>
<tr class="separator:a32ab3ad0302912c7da52204042727a44"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Common information for all the kernels. </p>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_i_kernel_8h_source.xhtml">IKernel.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7250cb8cbaa4104a93a2d77155085507"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7250cb8cbaa4104a93a2d77155085507">&#9670;&nbsp;</a></span>IKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                 : _window()</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// Create an empty window to make sure the children classes set the window values themselves</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    _window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 1));</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    _window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 1));</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, and <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>.</p>

</div>
</div>
<a id="a341b60d15a5e12a5b8f3825194dd3b12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a341b60d15a5e12a5b8f3825194dd3b12">&#9670;&nbsp;</a></span>~IKernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4b3a97ba5dded504a2f2261c078493dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b3a97ba5dded504a2f2261c078493dd">&#9670;&nbsp;</a></span>border_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size of the border for that kernel. </p>
<dl class="section return"><dt>Returns</dt><dd>The width in number of elements of the border. </dd></dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">CLNormalizationLayerKernel</a>, and <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_input_transform_kernel.xhtml#a423f9a45a52983b4de5e2b347f4369c7">ClWinogradInputTransformKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_c_l_simple_kernel_8cpp_source.xhtml#l00039">ICLSimpleKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00105">NEFillBorderKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, and <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00059">CLFillBorderKernel::configure()</a>.</p>

</div>
</div>
<a id="a0466ee6ce6552c87595f0e88e73eeb1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0466ee6ce6552c87595f0e88e73eeb1b">&#9670;&nbsp;</a></span>is_parallelisable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_parallelisable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Indicates whether or not the kernel is parallelisable. </p>
<p>If the kernel is parallelisable then the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a> can be split into sub-windows which can then be run in parallel.</p>
<p>If the kernel is not parallelisable then only the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a> can be passed to <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run()</a></p>
<dl class="section return"><dt>Returns</dt><dd>True if the kernel is parallelisable </dd></dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">CLFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">CPPBoxWithNonMaximaSuppressionLimitKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">CPPTopKVKernel</a>, and <a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml#a4370ae5fda7bd455a171fc8ed4d3f283">CPPUpsampleKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>.</p>

</div>
</div>
<a id="a32ab3ad0302912c7da52204042727a44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32ab3ad0302912c7da52204042727a44">&#9670;&nbsp;</a></span>is_window_configured()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_window_configured </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to check if the embedded window of this kernel has been configured. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the windows has been configured </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> !((_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() == _window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>()) &amp;&amp; (_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() == 0));</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_validate_8cpp_source.xhtml#l00163">arm_compute::error_on_unconfigured_kernel()</a>.</p>

</div>
</div>
<a id="ad34a46f53686c12a5c5e717cc9617fb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad34a46f53686c12a5c5e717cc9617fb6">&#9670;&nbsp;</a></span>window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp; window </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The maximum window the kernel can be executed on. </p>
<dl class="section return"><dt>Returns</dt><dd>The maximum window the kernel can be executed on. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> _window;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00172">ICLKernel::add_1D_array_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00186">ICLKernel::add_1D_tensor_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00197">ICLKernel::add_1D_tensor_argument_if()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00210">ICLKernel::add_2D_tensor_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00221">ICLKernel::add_2D_tensor_argument_if()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00234">ICLKernel::add_3D_tensor_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00244">ICLKernel::add_4D_tensor_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00254">ICLKernel::add_5D_tensor_argument()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00539">ICLKernel::add_array_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">ICLKernel::add_tensor_argument()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00085">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00141">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00144">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00146">CpuSubKernel::get_mws()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00208">CpuAddKernel::get_mws()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00349">CpuArithmeticKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00400">CpuDivisionKernel::get_mws()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00194">ICLKernel::gws_from_window()</a>, <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00057">ICPPKernel::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00086">NEBitwiseNotKernel::run()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00096">NEBitwiseAndKernel::run()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00093">NEBitwiseOrKernel::run()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00092">NEBitwiseXorKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00103">CLBitwiseKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00176">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00176">NEChannelShuffleLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00118">NEFFTScaleKernel::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00156">NEComputeAllAnchorsKernel::run()</a>, <a class="el" href="_cpu_gemm_assembly_wrapper_kernel_8h_source.xhtml#l00074">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;::run()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00134">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00169">NEInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00105">NEReorgLayerKernel::run()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00179">NEReverseKernel::run()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00154">CPPPermuteKernel::run()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00138">CPPTopKVKernel::run()</a>, <a class="el" href="_n_e_prior_box_layer_kernel_8cpp_source.xhtml#l00245">NEPriorBoxLayerKernel::run()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00168">NEQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00201">CLChannelShuffleLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00432">CPPBoxWithNonMaximaSuppressionLimitKernel::run()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00153">NEMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00156">NERangeKernel::run()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00270">NEFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00145">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00211">NEGatherKernel::run()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00188">NENormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00179">NESelectKernel::run()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01139">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_n_e_reduction_operation_kernel_8cpp_source.xhtml#l01871">NEReductionOperationKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00136">CLRangeKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00141">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00141">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00136">CLGatherKernel::run()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00183">NEBoundingBoxTransformKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00221">NEStackLayerKernel::run()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00270">NEPadLayerKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00181">NEROIAlignLayerKernel::run()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_kernel_8cpp_source.xhtml#l00115">CPPNonMaximumSuppressionKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00212">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00315">NECropKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00178">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00236">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00286">NEBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00309">NEFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00220">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00340">ICLKernel::run()</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00070">ICPPKernel::run_nd()</a>, <a class="el" href="_cpu_gemm_assembly_wrapper_kernel_8h_source.xhtml#l00087">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;::run_nd()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00787">CpuTransposeKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00381">CpuDequantizeKernel::run_op()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00192">CpuReshapeKernel::run_op()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, <a class="el" href="_cl_kernel_runtime_8cpp_source.xhtml#l00238">ClKernelRuntime::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00105">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cpu_permute_kernel_8cpp_source.xhtml#l00256">CpuPermuteKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_batch_kernel_8cpp_source.xhtml#l00202">CpuConcatenateBatchKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00289">CpuQuantizeKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00038">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00147">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00163">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00126">ClHeightConcatenateKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00123">ClWidthConcatenateKernel::run_op()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00321">NELogicalKernel::run_op()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00254">ClPool3dKernel::run_op()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00181">CpuSoftmaxKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00138">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00260">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00124">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_depth_kernel_8cpp_source.xhtml#l00200">CpuConcatenateDepthKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00106">CpuFloorKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00195">CpuGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00184">ClSoftmaxKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00248">CpuElementwiseUnaryKernel::run_op()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00090">CpuConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00161">CpuPool3dKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_m_m_u_l_kernel_8cpp_source.xhtml#l00230">ClMatMulLowpNativeMMULKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00182">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00115">ClConvertFullyConnectedWeightsKernel::run_op()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00165">ClWinogradFilterTransformKernel::run_op()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00196">CpuSubKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00124">CpuMaxUnpoolingLayerKernel::run_op()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00343">CpuActivationKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00193">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00521">CpuDirectConv2dOutputStageKernel::run_op()</a>, <a class="el" href="_cpu_gemm_matrix_addition_kernel_8cpp_source.xhtml#l00088">CpuGemmMatrixAdditionKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00231">ClMatMulLowpNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00271">CpuCastKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00318">CpuGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00182">CpuAddKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00169">ClGemmReshapeRhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00154">ClIndirectConv2dAddressPrecalculationKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00399">CpuGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00106">CpuWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00212">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00166">CpuDepthwiseConv2dNativeKernel::run_op()</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00088">ICPPKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00284">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00177">NEFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00225">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00327">CpuDepthwiseConv2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00224">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00339">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00500">CpuScaleKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00187">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00186">CpuGemmMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01734">CpuMulKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00178">CpuAddMulAddKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00072">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_m_m_u_l_kernel_8cpp_source.xhtml#l00199">ClMatMulNativeMMULKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00462">ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00145">NEStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00961">CpuGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00400">CpuGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01812">CpuComplexMulKernel::run_op()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00352">ICLKernel::run_op()</a>, <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00038">SingleThreadScheduler::schedule()</a>, <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00051">OMPScheduler::schedule()</a>, <a class="el" href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00552">CPPScheduler::schedule()</a>, and <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00093">ClFillKernel::validate()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/<a class="el" href="_i_kernel_8h_source.xhtml">IKernel.h</a></li>
<li>src/core/<a class="el" href="_i_kernel_8cpp_source.xhtml">IKernel.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00239">Types.h:239</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
