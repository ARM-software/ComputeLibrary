<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/elementwise_binary/generic/sve/integer.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('elementwise__binary_2generic_2sve_2integer_8cpp.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">integer.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">arm_compute/core/Helpers.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">src/cpu/kernels/elementwise_binary/generic/sve/impl.h</a>&quot;</code><br />
</div>
<p><a href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">arm_compute::cpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aaaf811068ee1b93b346bed157516baaf"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:aaaf811068ee1b93b346bed157516baaf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">sve_s32_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aaaf811068ee1b93b346bed157516baaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5123f3ad297040d12571b93b7b175dc4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5123f3ad297040d12571b93b7b175dc4">sve_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a5123f3ad297040d12571b93b7b175dc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8a5bdf06d4d0540165863c7202a11ea"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab8a5bdf06d4d0540165863c7202a11ea">sve_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ab8a5bdf06d4d0540165863c7202a11ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add1739093ecca6210c06c628d5606112"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#add1739093ecca6210c06c628d5606112">sve_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:add1739093ecca6210c06c628d5606112"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afca779fe4d06c69e187a1b02b684c4b6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afca779fe4d06c69e187a1b02b684c4b6">sve_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:afca779fe4d06c69e187a1b02b684c4b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82c00d67f2ff19378e13bb41acbc9193"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82c00d67f2ff19378e13bb41acbc9193">sve_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a82c00d67f2ff19378e13bb41acbc9193"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d5148c90d1c207a0d7c29b92e80793f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7d5148c90d1c207a0d7c29b92e80793f">sve_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a7d5148c90d1c207a0d7c29b92e80793f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6745544148d28e221195fecda70f837c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6745544148d28e221195fecda70f837c">sve_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6745544148d28e221195fecda70f837c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ca1be328b9aa1346a52fa1cbfb6939b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2ca1be328b9aa1346a52fa1cbfb6939b">sve_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2ca1be328b9aa1346a52fa1cbfb6939b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">sve_s16_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bb80197ffeedd6c6320406551ed7199"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3bb80197ffeedd6c6320406551ed7199">sve_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3bb80197ffeedd6c6320406551ed7199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb41a3a123953953908d673afc6d931"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6bb41a3a123953953908d673afc6d931">sve_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6bb41a3a123953953908d673afc6d931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45090ead2f890c4ca3d80496cf49ca5e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45090ead2f890c4ca3d80496cf49ca5e">sve_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a45090ead2f890c4ca3d80496cf49ca5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa956575ffcc07bd978c6e5ebd32baecc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa956575ffcc07bd978c6e5ebd32baecc">sve_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa956575ffcc07bd978c6e5ebd32baecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8faee508ea0f1c15da7db9c11285ea05"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8faee508ea0f1c15da7db9c11285ea05">sve_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a8faee508ea0f1c15da7db9c11285ea05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6f88f73843af6e83339f45164625064"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6f88f73843af6e83339f45164625064">sve_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac6f88f73843af6e83339f45164625064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cd151e43c3ee27e45f73b33ec1031d6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5cd151e43c3ee27e45f73b33ec1031d6">sve_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a5cd151e43c3ee27e45f73b33ec1031d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad341fee8320dae165cb5f476e8ac886e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad341fee8320dae165cb5f476e8ac886e">sve_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad341fee8320dae165cb5f476e8ac886e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52656637b2039572e6a51a10d9384823"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a52656637b2039572e6a51a10d9384823"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">sve_u8_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a52656637b2039572e6a51a10d9384823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d141d930d36dc163914160758e1f831"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4d141d930d36dc163914160758e1f831">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4d141d930d36dc163914160758e1f831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2261d1ae0d3f14bfee980cee8bb20367"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2261d1ae0d3f14bfee980cee8bb20367">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2261d1ae0d3f14bfee980cee8bb20367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e19625bfb223cbdd32d0e16ceeda021"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e19625bfb223cbdd32d0e16ceeda021">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a5e19625bfb223cbdd32d0e16ceeda021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad82c8006a7d3836bf07a99ccb918db87"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad82c8006a7d3836bf07a99ccb918db87">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad82c8006a7d3836bf07a99ccb918db87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a011aee7952393c8bdd5013964a526c5a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a011aee7952393c8bdd5013964a526c5a">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a011aee7952393c8bdd5013964a526c5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a466970007f65bc27a53326e90961dddd"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a466970007f65bc27a53326e90961dddd">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a466970007f65bc27a53326e90961dddd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b16389b2a82a84265a682a75c010d1"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a49b16389b2a82a84265a682a75c010d1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">sve_s16_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a49b16389b2a82a84265a682a75c010d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf7b66ba4d9fd274b32eaedfab958d1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7cf7b66ba4d9fd274b32eaedfab958d1">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a7cf7b66ba4d9fd274b32eaedfab958d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af171684aa5092d42ee1c19b9394e47df"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af171684aa5092d42ee1c19b9394e47df">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af171684aa5092d42ee1c19b9394e47df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04b9502d6d1490ed94ea0b40103ee04a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a04b9502d6d1490ed94ea0b40103ee04a">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a04b9502d6d1490ed94ea0b40103ee04a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3594cfaf53e53e953183c0df893cf006"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3594cfaf53e53e953183c0df893cf006">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3594cfaf53e53e953183c0df893cf006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac37db9604164425c8af90176d8ee03d7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac37db9604164425c8af90176d8ee03d7">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac37db9604164425c8af90176d8ee03d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad39a3517b07c7a672d80275e81d2f458"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad39a3517b07c7a672d80275e81d2f458">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad39a3517b07c7a672d80275e81d2f458"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd0e30e25070c711398b9dd70a0efcec"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:abd0e30e25070c711398b9dd70a0efcec"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">sve_s32_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:abd0e30e25070c711398b9dd70a0efcec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee8c4e7eaaa3128833e155c2cadef62"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acee8c4e7eaaa3128833e155c2cadef62">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:acee8c4e7eaaa3128833e155c2cadef62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c4496a042e47d86d98db772eab20601"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c4496a042e47d86d98db772eab20601">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4c4496a042e47d86d98db772eab20601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7382dcd41afd0835a27912f35328c82"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7382dcd41afd0835a27912f35328c82">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa7382dcd41afd0835a27912f35328c82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f4cf6d08469389ce4a2ff0fa5422abc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8f4cf6d08469389ce4a2ff0fa5422abc">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a8f4cf6d08469389ce4a2ff0fa5422abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650e38245db43187e0f29ed6dbc45679"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a650e38245db43187e0f29ed6dbc45679">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a650e38245db43187e0f29ed6dbc45679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac94c8f6370b6d2330ad9fe9d86828deb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac94c8f6370b6d2330ad9fe9d86828deb">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac94c8f6370b6d2330ad9fe9d86828deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_66520ab4814343cef4d99a57e61c0978.xhtml">elementwise_binary</a></li><li class="navelem"><a class="el" href="dir_8009c81bd03a5456d0f628033db7357f.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_a1dbdf61f57a1531ff253117d44bbf21.xhtml">sve</a></li><li class="navelem"><a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp.xhtml">integer.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:06 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
