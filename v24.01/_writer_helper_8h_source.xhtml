<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/WriterHelper.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_writer_helper_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">WriterHelper.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_writer_helper_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ACL_SRC_DYNAMIC_FUSION_SKETCH_GPU_CKW_DRIVER_COMPONENTS_UTILS_WRITERHELPER_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ACL_SRC_DYNAMIC_FUSION_SKETCH_GPU_CKW_DRIVER_COMPONENTS_UTILS_WRITERHELPER_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utility_8h.xhtml">arm_compute/core/utils/misc/Utility.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;ckw/TensorTileSampler.h&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_component_argument_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwComponentArgument.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_kernel_writer_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwKernelWriter.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_scoped_kernel_writer_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwScopedKernelWriter.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceckw.xhtml">ckw</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4352825c53b7dbf542a03a0e54e792b6">   44</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4352825c53b7dbf542a03a0e54e792b6">SamplerCreator</a> = std::function&lt;TensorTileSampler(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> &amp;, int32_t <span class="comment">/* m0 */</span>, int32_t <span class="comment">/* n0 */</span>)&gt;;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/** Load src and dst tiles of dimension [m0, n0] only when not loaded and prepare the sampler</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aec993a62b6886508bee9f49673c9c4d6">   48</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aec993a62b6886508bee9f49673c9c4d6">load_src_dst_tiles_and_prepare_sampler</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> &amp;writer,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                                   <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a>  *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                                   <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a>  *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                                   int32_t                   m0,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                                   int32_t                   n0,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4352825c53b7dbf542a03a0e54e792b6">SamplerCreator</a>            create_sampler)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;has_tile())</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> sampler = create_sampler(writer, m0, n0);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        writer-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_kernel_writer.xhtml#a24194a93eb654bcef394f820d28be8ec">op_load_once</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, sampler);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;sampler = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tile_sampler();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        writer-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_kernel_writer.xhtml#a24194a93eb654bcef394f820d28be8ec">op_load_once</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, sampler);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">auto</span>       &amp;src_tile = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tile();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;sampler  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tile_sampler();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Prepare the output tile.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;has_tile())</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a3744347976f5c2cb8f3ecd016a588454">tile</a> = writer-&gt;declare_tile(<span class="stringliteral">&quot;dst_tile&quot;</span>, src_tile.tile_info());</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;init_virtual_tensor(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a3744347976f5c2cb8f3ecd016a588454">tile</a>, sampler);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/** Get boundary aware coordinate along one axis. Load and store of size step_v at the coordinate will not be out of bound</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in,out] writer          Writer</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @param[out]    coord           Resultant coordinate</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in]     gid             Global work item id</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in]     step_v          Step size / vector size</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in]     leftover_step_v Leftover step size at the boundary</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @param[in]     prefix          Prefix to all the tiles declared within this function</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @param[in]     const_0         Constant tile of value 0</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">   87</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">get_coord</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                      TileOperand             &amp;coord,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                      <span class="keyword">const</span> TileOperand       &amp;gid,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                      int32_t                  step_v,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                      int32_t                  leftover_step_v,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                      <span class="keyword">const</span> std::string       &amp;<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a>,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                      <span class="keyword">const</span> TileOperand       &amp;const_0)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>          = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;step&quot;</span>, step_v);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">auto</span> &amp;leftover_step = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;leftover_step&quot;</span>, leftover_step_v);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// step - leftover_step</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">auto</span> &amp;step_minus_leftover = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;step_minus_leftover&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    writer-&gt;op_binary_expression(step_minus_leftover, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, ckw::BinaryOp::Sub, leftover_step);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// (step - leftover_step) % step</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">auto</span> &amp;coord_correction = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;coord_correction&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    writer-&gt;op_binary_expression(coord_correction, step_minus_leftover, ckw::BinaryOp::Mod, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// (gid * step)</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">auto</span> &amp;raw_coord = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;raw_coord&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    writer-&gt;op_binary_expression(raw_coord, gid, ckw::BinaryOp::Mul, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// (gid * step) - (step - leftover_step) % step</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> &amp;corrected_coord = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;corrected_coord&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    writer-&gt;op_binary_expression(corrected_coord, raw_coord, ckw::BinaryOp::Sub, coord_correction);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// max((gid * step) - (step - leftover_step) % step, 0)</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    writer-&gt;op_binary_elementwise_function(coord, ckw::BinaryFunction::Max, corrected_coord, const_0);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">/** Declare coordinate tiles &quot;{prefix}_dim0_coord&quot; and &quot;{prefix}_dim1_coord&quot;, and create a boundary-aware sampler from tile of size [n0, m0], against the overall dimensions [dim0, dim1]</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * The load and store of tile [n0, m0] will never be out of bound of [dim0, dim1]</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/** Declare coordinate tiles &quot;{prefix}_dim0_coord&quot; and &quot;{prefix}_dim1_coord&quot;, and create a boundary-aware sampler from tile of size [n0, m0], against the overall dimensions [dim0, dim1]</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * The load and store of tile [n0, m0] will never be out of bound of [dim0, dim1]</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> * @param[in,out] writer  Writer</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @param[in]     gid_0   Global work item id 0</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @param[in]     gid_1   Global work item id 1</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @param[in]     dim0_v  Dimension 0</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in]     dim1_v  Dimension 1</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in]     n0_v    Tile size dimension 0</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * @param[in]     m0_v    Tile size dimension 1</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @param[in]     prefix  Prefix to all the tiles declared within this function</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * @param[in]     const_0 Constant tile of value 0</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @return TensorTileSampler</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0f3f928f8b4b82ac4a23a93177a139d4">  137</a></span>&#160;<span class="keyword">inline</span> TensorTileSampler <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0f3f928f8b4b82ac4a23a93177a139d4">create_boundary_aware_2d_sampler</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                          TileOperand             &amp;gid_0,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                          TileOperand             &amp;gid_1,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                          int32_t                  dim0_v,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                                          int32_t                  dim1_v,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                          int32_t                  n0_v,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                          int32_t                  m0_v,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                          <span class="keyword">const</span> std::string        <a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a>,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                          TileOperand             &amp;const_0)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Clamp tile size [n0, m0] against dimension [dim0, dim1]</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// This is needed to:</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// * Guard against tile sizes are bigger than the tensor dimensions</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// * Handle broadcasting tiles (e.g. src tensor is of size 1 in one of the dimensions)</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    n0_v                       = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">utility::clamp</a>(n0_v, 1, dim0_v);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    m0_v                       = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">utility::clamp</a>(m0_v, 1, dim1_v);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> int32_t partial_n0_v = dim0_v % n0_v;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> int32_t partial_m0_v = dim1_v % m0_v;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Declare #prefix_dim0_coord and #prefix_dim1_coord</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">auto</span> &amp;dim0_coord = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;dim0_coord&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">get_coord</a>(writer, dim0_coord, gid_0, n0_v, partial_n0_v, <a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;dim0_&quot;</span>, const_0);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">auto</span> &amp;dim1_coord = writer-&gt;declare_tile(<a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;dim1_coord&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">get_coord</a>(writer, dim1_coord, gid_1, m0_v, partial_m0_v, <a class="code" href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">prefix</a> + <span class="stringliteral">&quot;dim1_&quot;</span>, const_0);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Set sampler</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Only set fields related to boundary aware loading/storing. Other info (e.g. format) is not responsibility of this function</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    TensorTileSampler sampler;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    sampler.x(dim0_coord);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    sampler.y(dim1_coord);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    sampler.width(n0_v);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    sampler.height(m0_v);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    sampler.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    sampler.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    sampler.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> sampler;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#endif // ACL_SRC_DYNAMIC_FUSION_SKETCH_GPU_CKW_DRIVER_COMPONENTS_UTILS_WRITERHELPER_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a4352825c53b7dbf542a03a0e54e792b6"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4352825c53b7dbf542a03a0e54e792b6">arm_compute::experimental::dynamic_fusion::SamplerCreator</a></div><div class="ttdeci">std::function&lt; TensorTileSampler(GpuCkwScopedKernelWriter &amp;, int32_t, int32_t)&gt; SamplerCreator</div><div class="ttdef"><b>Definition:</b> <a href="_writer_helper_8h_source.xhtml#l00044">WriterHelper.h:44</a></div></div>
<div class="ttc" id="anamespaceckw_xhtml"><div class="ttname"><a href="namespaceckw.xhtml">ckw</a></div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8h_source.xhtml#l00030">GpuCkwComponentArgument.h:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aec993a62b6886508bee9f49673c9c4d6"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aec993a62b6886508bee9f49673c9c4d6">arm_compute::experimental::dynamic_fusion::load_src_dst_tiles_and_prepare_sampler</a></div><div class="ttdeci">void load_src_dst_tiles_and_prepare_sampler(GpuCkwScopedKernelWriter &amp;writer, GpuCkwComponentArgument *src, GpuCkwComponentArgument *dst, int32_t m0, int32_t n0, SamplerCreator create_sampler)</div><div class="ttdoc">Load src and dst tiles of dimension [m0, n0] only when not loaded and prepare the sampler.</div><div class="ttdef"><b>Definition:</b> <a href="_writer_helper_8h_source.xhtml#l00048">WriterHelper.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="a_gpu_ckw_kernel_writer_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_kernel_writer_8h.xhtml">GpuCkwKernelWriter.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument</a></div><div class="ttdoc">The argument of a dynamic fusion component which can be either user tensor or virtual tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8h_source.xhtml#l00044">GpuCkwComponentArgument.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a3744347976f5c2cb8f3ecd016a588454"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a3744347976f5c2cb8f3ecd016a588454">arm_compute::test::validation::reference::tile</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; tile(const SimpleTensor&lt; T &gt; &amp;src, const Multiples &amp;multiples)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_tile_8cpp_source.xhtml#l00038">Tile.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a96efecf997f13a914609ddf1eb67f624"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">arm_compute::utility::clamp</a></div><div class="ttdeci">DataType clamp(const DataType &amp;n, const DataType &amp;lower=std::numeric_limits&lt; RangeType &gt;::lowest(), const DataType &amp;upper=std::numeric_limits&lt; RangeType &gt;::max())</div><div class="ttdoc">Performs clamping among a lower and upper value.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00102">Utility.h:102</a></div></div>
<div class="ttc" id="a_utility_8h_xhtml"><div class="ttname"><a href="_utility_8h.xhtml">Utility.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0f3f928f8b4b82ac4a23a93177a139d4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0f3f928f8b4b82ac4a23a93177a139d4">arm_compute::experimental::dynamic_fusion::create_boundary_aware_2d_sampler</a></div><div class="ttdeci">TensorTileSampler create_boundary_aware_2d_sampler(GpuCkwScopedKernelWriter writer, TileOperand &amp;gid_0, TileOperand &amp;gid_1, int32_t dim0_v, int32_t dim1_v, int32_t n0_v, int32_t m0_v, const std::string prefix, TileOperand &amp;const_0)</div><div class="ttdoc">Declare coordinate tiles &quot;{prefix}_dim0_coord&quot; and &quot;{prefix}_dim1_coord&quot;, and create a boundary-aware...</div><div class="ttdef"><b>Definition:</b> <a href="_writer_helper_8h_source.xhtml#l00137">WriterHelper.h:137</a></div></div>
<div class="ttc" id="a_gpu_ckw_scoped_kernel_writer_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_scoped_kernel_writer_8h.xhtml">GpuCkwScopedKernelWriter.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_abd9eddc31ead31aebb93c3b844a27fe3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">arm_compute::experimental::dynamic_fusion::get_coord</a></div><div class="ttdeci">void get_coord(GpuCkwScopedKernelWriter writer, TileOperand &amp;coord, const TileOperand &amp;gid, int32_t step_v, int32_t leftover_step_v, const std::string &amp;prefix, const TileOperand &amp;const_0)</div><div class="ttdoc">Get boundary aware coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_writer_helper_8h_source.xhtml#l00087">WriterHelper.h:87</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="a_gpu_ckw_component_argument_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_component_argument_8h.xhtml">GpuCkwComponentArgument.h</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_ace96d70a929a737bb705aa0f539decaa"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#ace96d70a929a737bb705aa0f539decaa">check_header_guards.prefix</a></div><div class="ttdeci">prefix</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00180">check_header_guards.py:180</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_kernel_writer_xhtml_a24194a93eb654bcef394f820d28be8ec"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_kernel_writer.xhtml#a24194a93eb654bcef394f820d28be8ec">arm_compute::experimental::dynamic_fusion::GpuCkwKernelWriter::op_load_once</a></div><div class="ttdeci">void op_load_once(GpuCkwComponentArgument *tensor_or_tile, const ckw::TensorTileSampler &amp;sampler)</div><div class="ttdoc">Load the user tensor to the tile in the same component argument if it hasn't been loaded.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_kernel_writer_8cpp_source.xhtml#l00043">GpuCkwKernelWriter.cpp:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwScopedKernelWriter</a></div><div class="ttdoc">Helper to automatically manage kernel writer ID space.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_scoped_kernel_writer_8h_source.xhtml#l00040">GpuCkwScopedKernelWriter.h:40</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="dir_41286eb82ab9bcc453374927cfc10252.xhtml">ckw_driver</a></li><li class="navelem"><a class="el" href="dir_510767539347664ee40808f8989f21cf.xhtml">components</a></li><li class="navelem"><a class="el" href="dir_213aed628caee9f2ccbaa58c5778ac89.xhtml">utils</a></li><li class="navelem"><a class="el" href="_writer_helper_8h.xhtml">WriterHelper.h</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
