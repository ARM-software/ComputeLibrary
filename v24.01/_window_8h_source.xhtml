<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/Window.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_window_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Window.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_window_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2020, 2022-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ACL_ARM_COMPUTE_CORE_WINDOW_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ACL_ARM_COMPUTE_CORE_WINDOW_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2math_2_math_8h.xhtml">arm_compute/core/utils/math/Math.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/** Describe a multidimensional execution window. */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml">   39</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_window.xhtml">Window</a></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">    /** Alias for dimension 0 also known as X dimension */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">   43</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">DimX</a> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Alias for dimension 1 also known as Y dimension */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">   45</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">DimY</a> = 1;<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /** Alias for dimension 2 also known as Z dimension */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">   47</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">DimZ</a> = 2;<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Alias for dimension 3 also known as W dimension */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">   49</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">DimW</a> = 3;<span class="comment"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /** Alias for dimension 4 also known as V dimension */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a92b721b1285e3bfc30c6739decc26fd4">   51</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a92b721b1285e3bfc30c6739decc26fd4">DimV</a> = 4;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    /** Default constructor: create a window containing a single element. */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">   54</a></span>&#160;    constexpr <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a>()</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        : _dims(), _is_broadcasted(utility::generate_array&lt;bool, <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>::num_max_dimensions, false&gt;::value)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /** Copy constructor</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @param[in] src Copy the values from src to a new object</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);<span class="comment"></span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /** Copy assignment operator</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * @param[in] rhs Copy the values from rhs to the current object</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * @return Reference to the updated object</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /** Describe one of the image&#39;s dimensions with a start, end and step.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * Iteration through the elements of the dimension is done like this:</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     * for(int v = start(); v &lt; end(); v += step())</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * {</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     *   ...</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * }</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml">   79</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">        /** Constructor, by default creates a dimension of 1.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">         * @param[in] start Start of the dimension</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">         * @param[in] end   End of the dimension</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">         * @param[in] step  Step between two elements of the dimension when iterating.</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a2c532d398a5661ff04367252701fa3d4">   89</a></span>&#160;        constexpr <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a2c532d398a5661ff04367252701fa3d4">Dimension</a>(<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a> = 0, <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a> = 1, <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a> = 1) : _start(<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>), _end(<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>), _step(<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a2c532d398a5661ff04367252701fa3d4">Dimension</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;d) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">        /** Default assignment operator to allow dimensions to be copied */</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a7768b7b80a8b640dae911af38e3315a2">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;d) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">        /** Return the start of the dimension */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">   96</a></span>&#160;        constexpr <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> _start;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">        /** Return the end of the dimension */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">  101</a></span>&#160;        constexpr <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">return</span> _end;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">        /** Return the step of the dimension */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">  106</a></span>&#160;        constexpr <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">return</span> _step;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        /** Set the dimension&#39;s step</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">         * @param[in] step The new step</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#aa84a724344a983832279fe13f047b52d">  114</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#aa84a724344a983832279fe13f047b52d">set_step</a>(<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            _step = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        /** Set the dimension&#39;s end</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">         * @param[in] end The new end</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ad04b3b858cfdad2a7c64a6a014c3b773">  122</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ad04b3b858cfdad2a7c64a6a014c3b773">set_end</a>(<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            _end = <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">        /** Check whether two Dimensions are equal.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">         * @param[in] lhs LHS Dimensions</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">         * @param[in] rhs RHS Dimensions</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">         * @return True if the Dimensions are the same.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window_1_1_dimension.xhtml#aab18df84e994fd7b67686fa9741a4f0a">  133</a></span>&#160;        <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#aab18df84e994fd7b67686fa9741a4f0a">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;rhs)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> (lhs._start == rhs._start) &amp;&amp; (lhs._end == rhs._end) &amp;&amp; (lhs._step == rhs._step);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordtype">int</span> _start; <span class="comment">/**&lt; Start of the dimension */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">int</span> _end;   <span class="comment">/**&lt; End of the dimension */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">int</span> _step;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    };</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    /** Read only access to a given dimension of the window</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * @note Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * @param[in] dimension The dimension to access</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * @return The requested dimension</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    constexpr <span class="keyword">const</span> Dimension &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">operator[]</a>(<span class="keywordtype">size_t</span> dimension) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">    /** Alias to access the first dimension of the window</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * @return First dimension of the window</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">  158</a></span>&#160;    constexpr <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">    /** Alias to access the second dimension of the window</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     * @return Second dimension of the window</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">  167</a></span>&#160;    constexpr <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">    /** Alias to access the third dimension of the window</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @return Third dimension of the window</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">  176</a></span>&#160;    constexpr <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">    /** Set the values of a given dimension</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * @param[in] dimension The dimension to set</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @param[in] dim       The values to set the dimension to</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<span class="keywordtype">size_t</span> dimension, <span class="keyword">const</span> Dimension &amp;dim);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /** Set the dimension as broadcasted dimension</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * @param[in] dimension The dimension to set</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">set_broadcasted</a>(<span class="keywordtype">size_t</span> dimension);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">    /** Return whether a dimension has been broadcasted</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * @param[in] dimension The requested dimension</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @return true if the dimension has been broadcasted</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a>(<span class="keywordtype">size_t</span> dimension) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">    /** Use the tensor&#39;s dimensions to fill the window dimensions.</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     * @param[in] shape           @ref TensorShape to copy the dimensions from.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     * @param[in] first_dimension Only copy dimensions which are greater or equal to this value.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>, <span class="keywordtype">size_t</span> first_dimension = <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">    /** Shift the values of a given dimension by the given shift_value</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     * @param[in] dimension   The dimension to shift</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     * @param[in] shift_value Value to shift the start and end values of.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">shift</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> shift_value);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /** Shift down all the dimensions of a window starting from the specified dimension.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     * new_dims[i] = old_dims[i]             for all i &lt; start_dim.</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * new_dims[i] = old_dims[i+shift_value] for all i &gt;= start_dim.</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @param[in] shift_value Number of dimensions to shift the window by.</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * @param[in] start_dim   The dimension from which the dimensions start to shift.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * @return The window with the shifted dimensions.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#adf1ebf1e03a551e47f6bdac4bcf04f17">shift_dimensions</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shift_value, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_dim = 0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">    /** Adjust the start or end of a given dimension by the given value</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     * @param[in] dimension    The dimension to adjust</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * @param[in] adjust_value The adjusted value.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     * @param[in] is_at_start  The flag to indicate whether adjust the start or end of the dimension.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">adjust</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> adjust_value, <span class="keywordtype">bool</span> is_at_start);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">    /** Scale the values of a given dimension by the given scale_value</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * @note The end of the window is rounded up to be a multiple of step after the scaling.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     * @param[in] dimension   The dimension to scale</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * @param[in] scale_value Value to scale the start, end and step values of.</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">scale</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">float</span> scale_value);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /** Set the step of a given dimension.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * @param[in] dimension Dimension to update</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     * @param[in] step      The new dimension&#39;s step value</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">set_dimension_step</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">    /** Will validate all the window&#39;s dimensions&#39; values when asserts are enabled</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     * No-op when asserts are disabled</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">    /** Return the number of iterations needed to iterate through a given dimension</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">     * @param[in] dimension The requested dimension</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">     * @return The number of iterations</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    constexpr <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(<span class="keywordtype">size_t</span> dimension) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">    /** Return the total number of iterations needed to iterate through the entire window</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     * @return Number of total iterations</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">num_iterations_total</a>() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /** Return the shape of the window in number of steps */</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">    /** Split a window into a set of sub windows along a given dimension</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">     * For example to split a window into 3 sub-windows along the Y axis, you would have to do:&lt;br/&gt;</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">     * Window sub0 = window.split_window( 1, 0, 3);&lt;br/&gt;</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">     * Window sub1 = window.split_window( 1, 1, 3);&lt;br/&gt;</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">     * Window sub2 = window.split_window( 1, 2, 3);&lt;br/&gt;</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">     * @param[in] dimension Dimension along which the split will be performed</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">     * @param[in] id        Id of the sub-window to return. Must be in the range (0, total-1)</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">     * @param[in] total     Total number of sub-windows the window will be split into.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     * @return The subwindow &quot;id&quot; out of &quot;total&quot;</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">split_window</a>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">size_t</span> <span class="keywordtype">id</span>, <span class="keywordtype">size_t</span> total) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">    /** First 1D slice of the window</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">     * @return The first slice of the window.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a54486ab629d17bf891146deb4b616717">  290</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a54486ab629d17bf891146deb4b616717">first_slice_window_1D</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;1&gt;();</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    };<span class="comment"></span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">    /** First 2D slice of the window</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     * @return The first slice of the window.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a016fdd5b1c05ce7d06088891a0d36bff">  298</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a016fdd5b1c05ce7d06088891a0d36bff">first_slice_window_2D</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;2&gt;();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    };<span class="comment"></span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">    /** First 3D slice of the window</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">     * @return The first slice of the window.</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a30ca5bdbb60ee281d7f1ab34f7a4ee40">  306</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a30ca5bdbb60ee281d7f1ab34f7a4ee40">first_slice_window_3D</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;3&gt;();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    };<span class="comment"></span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">    /** First 4D slice of the window</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">     * @return The first slice of the window.</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a14bbbcfa75deb1a56c83406bfc37eec2">  314</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a14bbbcfa75deb1a56c83406bfc37eec2">first_slice_window_4D</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;4&gt;();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    };<span class="comment"></span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">    /** Slide the passed 1D window slice.</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">     * If slice contains the last slice then it will remain unchanged and false will be returned.</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">     * @param[in,out] slice Current slice, to be updated to the next slice.</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">     * @return true if slice contains a new slice, false if slice already contained the last slice</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ad1a2b580ba9e1a3ed7124c3f37179bca">  326</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ad1a2b580ba9e1a3ed7124c3f37179bca">slide_window_slice_1D</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">    /** Slide the passed 2D window slice.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * If slice contains the last slice then it will remain unchanged and false will be returned.</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     * @param[in,out] slice Current slice, to be updated to the next slice.</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * @return true if slice contains a new slice, false if slice already contained the last slice</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#af72109ea9b9b75839d5601e39d8394de">  338</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#af72109ea9b9b75839d5601e39d8394de">slide_window_slice_2D</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;2&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">    /** Slide the passed 3D window slice.</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">     * If slice contains the last slice then it will remain unchanged and false will be returned.</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">     * @param[in,out] slice Current slice, to be updated to the next slice.</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">     * @return true if slice contains a new slice, false if slice already contained the last slice</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#aac792e3a11bc73bafafc4f4284c7f215">  350</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#aac792e3a11bc73bafafc4f4284c7f215">slide_window_slice_3D</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;3&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">    /** Slide the passed 4D window slice.</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     * If slice contains the last slice then it will remain unchanged and false will be returned.</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     * @param[in,out] slice Current slice, to be updated to the next slice.</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * @return true if slice contains a new slice, false if slice already contained the last slice</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#ad41f3f5322c2797798363be2ec3fde85">  362</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ad41f3f5322c2797798363be2ec3fde85">slide_window_slice_4D</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;4&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">    /** Collapse the dimensions between @p first and @p last if possible.</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">     * A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">     * @param[in]  full_window   Full window @p window has been created from.</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">     * @param[in]  first         Start dimension into which the following are collapsed.</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     * @param[in]  last          End (exclusive) dimension to collapse.</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     * @param[out] has_collapsed (Optional) Whether the window was collapsed.</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">     * @return Collapsed window.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, <span class="keywordtype">size_t</span> first, <span class="keywordtype">size_t</span> last, <span class="keywordtype">bool</span> *has_collapsed = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">    /** Collapse the dimensions higher than @p first if possible.</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     * A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">     * @param[in]  full_window   Full window @p window has been created from.</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">     * @param[in]  first         Start dimension into which the following are collapsed.</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">     * @param[out] has_collapsed (Optional) Whether the window was collapsed.</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">     * @return Collapsed window.</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#aa46c9cd851caf7cca518accb86f9bcd7">  390</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#aa46c9cd851caf7cca518accb86f9bcd7">collapse_if_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, <span class="keywordtype">size_t</span> first, <span class="keywordtype">bool</span> *has_collapsed = <span class="keyword">nullptr</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(full_window, first, <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>, has_collapsed);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">    /** Collapse the dimensions between @p first and @p last.</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">     * A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">     * @param[in] full_window Full window @p window has been created from.</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">     * @param[in] first       Start dimension into which the following are collapsed.</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">     * @param[in] last        End (exclusive) dimension to collapse.</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">     * @return Collapsed window if successful.</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">collapse</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, <span class="keywordtype">size_t</span> first, <span class="keywordtype">size_t</span> last = <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">    /** Don&#39;t advance in the dimension where @p shape is less equal to 1.</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">     * @param[in] shape A TensorShape.</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">     * @return Broadcast window.</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">    /** Don&#39;t advance in the dimension where shape of @p info is less equal to 1.</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">     * @param[in] info An ITensorInfo.</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">     * @return Broadcast window.</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_window.xhtml#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">  421</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1_window.xhtml#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">broadcast_if_dimension_le_one</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape());</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">    /** Friend function that swaps the contents of two windows</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">     * @param[in] lhs First window to swap.</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">     * @param[in] rhs Second window to swap.</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">swap</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs);<span class="comment"></span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">    /** Check whether two Windows are equal.</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">     * @param[in] lhs LHS window</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">     * @param[in] rhs RHS window</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">     * @return True if the given windows are the same.</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">    /** First slice of the window</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * @return The first slice of the window.</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_dimension&gt;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">    /** Slide the passed window slice.</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">     * If slice contains the last slice then it will remain unchanged and false will be returned.</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">     * @param[in,out] slice Current slice, to be updated to the next slice.</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">     * @return true if slice contains a new slice, false if slice already contained the last slice</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_dimension&gt;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordtype">bool</span> slide_window_slice(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    std::array&lt;Dimension, Coordinates::num_max_dimensions&gt; _dims;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    std::array&lt;bool, Coordinates::num_max_dimensions&gt;      _is_broadcasted;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;};</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8inl.xhtml">Window.inl</a>&quot;</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="preprocessor">#endif // ACL_ARM_COMPUTE_CORE_WINDOW_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="aarm__compute_2core_2utils_2math_2_math_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2math_2_math_8h.xhtml">Math.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a5e8e5ab06329702df09ab7eb07e9b84d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">arm_compute::Window::scale</a></div><div class="ttdeci">void scale(size_t dimension, float scale_value)</div><div class="ttdoc">Scale the values of a given dimension by the given scale_value.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00169">Window.inl:169</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a92b721b1285e3bfc30c6739decc26fd4"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a92b721b1285e3bfc30c6739decc26fd4">arm_compute::Window::DimV</a></div><div class="ttdeci">static constexpr size_t DimV</div><div class="ttdoc">Alias for dimension 4 also known as V dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00051">Window.h:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a663ce71e1992366180fcb85b0a874e2f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions between first and last if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00072">Window.inl:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor's dimensions to fill the window dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00290">Window.inl:290</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ad04b3b858cfdad2a7c64a6a014c3b773"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ad04b3b858cfdad2a7c64a6a014c3b773">arm_compute::Window::Dimension::set_end</a></div><div class="ttdeci">void set_end(int end)</div><div class="ttdoc">Set the dimension's end.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00122">Window.h:122</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00196">Window.inl:196</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_adf1ebf1e03a551e47f6bdac4bcf04f17"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#adf1ebf1e03a551e47f6bdac4bcf04f17">arm_compute::Window::shift_dimensions</a></div><div class="ttdeci">Window shift_dimensions(unsigned int shift_value, unsigned int start_dim=0) const</div><div class="ttdoc">Shift down all the dimensions of a window starting from the specified dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00107">Window.inl:107</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae688f3eb6c2673216d12d5490e1e88dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">arm_compute::Window::shift</a></div><div class="ttdeci">void shift(size_t dimension, int shift_value)</div><div class="ttdoc">Shift the values of a given dimension by the given shift_value.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00147">Window.inl:147</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_af72109ea9b9b75839d5601e39d8394de"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#af72109ea9b9b75839d5601e39d8394de">arm_compute::Window::slide_window_slice_2D</a></div><div class="ttdeci">bool slide_window_slice_2D(Window &amp;slice) const</div><div class="ttdoc">Slide the passed 2D window slice.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00338">Window.h:338</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a54486ab629d17bf891146deb4b616717"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a54486ab629d17bf891146deb4b616717">arm_compute::Window::first_slice_window_1D</a></div><div class="ttdeci">Window first_slice_window_1D() const</div><div class="ttdoc">First 1D slice of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00290">Window.h:290</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="a_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad82ac0dcf7e7a862a3b73f1be3ca98f1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">arm_compute::Window::split_window</a></div><div class="ttdeci">Window split_window(size_t dimension, size_t id, size_t total) const</div><div class="ttdoc">Split a window into a set of sub windows along a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00203">Window.inl:203</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a55ed4ad2395fd25ba847cbf6c54b85e4"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">arm_compute::Window::set_dimension_step</a></div><div class="ttdeci">void set_dimension_step(size_t dimension, int step)</div><div class="ttdoc">Set the step of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00181">Window.inl:181</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a7768b7b80a8b640dae911af38e3315a2"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a7768b7b80a8b640dae911af38e3315a2">arm_compute::Window::Dimension::operator=</a></div><div class="ttdeci">Dimension &amp; operator=(const Dimension &amp;d)=default</div><div class="ttdoc">Default assignment operator to allow dimensions to be copied.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_aab18df84e994fd7b67686fa9741a4f0a"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#aab18df84e994fd7b67686fa9741a4f0a">arm_compute::Window::Dimension::operator==</a></div><div class="ttdeci">friend bool operator==(const Dimension &amp;lhs, const Dimension &amp;rhs)</div><div class="ttdoc">Check whether two Dimensions are equal.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00133">Window.h:133</a></div></div>
<div class="ttc" id="a_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ab242a9d3683ac8f480f7944ff6f40534"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">arm_compute::Window::Window</a></div><div class="ttdeci">constexpr Window()</div><div class="ttdoc">Default constructor: create a window containing a single element.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00054">Window.h:54</a></div></div>
<div class="ttc" id="a_window_8inl_xhtml"><div class="ttname"><a href="_window_8inl.xhtml">Window.inl</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_af6303f954929d2bdac13a4712ecf9711"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">arm_compute::Window::collapse</a></div><div class="ttdeci">Window collapse(const Window &amp;full_window, size_t first, size_t last=Coordinates::num_max_dimensions) const</div><div class="ttdoc">Collapse the dimensions between first and last.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00125">Window.inl:125</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae181d6e147a7230d02611fb9077959f0"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">arm_compute::Window::swap</a></div><div class="ttdeci">friend void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdoc">Friend function that swaps the contents of two windows.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00318">Window.inl:318</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a8a8a12cc3cc3d07d9914cfa5f94b3ee5"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const ITensorInfo &amp;info) const</div><div class="ttdoc">Don't advance in the dimension where shape of info is less equal to 1.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00421">Window.h:421</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_abfa164a379c0c401a662792d7d0ccfba"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">arm_compute::Window::shape</a></div><div class="ttdeci">TensorShape shape() const</div><div class="ttdoc">Return the shape of the window in number of steps.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00298">Window.inl:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00167">Window.h:167</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a60f2e7a76af978d4eb6be4ac6e8044d1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">arm_compute::Window::DimW</a></div><div class="ttdeci">static constexpr size_t DimW</div><div class="ttdoc">Alias for dimension 3 also known as W dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00049">Window.h:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">arm_compute::Window::validate</a></div><div class="ttdeci">void validate() const</div><div class="ttdoc">Will validate all the window's dimensions' values when asserts are enabled.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00187">Window.inl:187</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a97b2f08fa5b45ffc8dcde9c01adee28f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">arm_compute::Window::operator==</a></div><div class="ttdeci">friend bool operator==(const Window &amp;lhs, const Window &amp;rhs)</div><div class="ttdoc">Check whether two Windows are equal.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00323">Window.inl:323</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a6e77b72655c2e465435a83497961bdcb"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">arm_compute::Window::is_broadcasted</a></div><div class="ttdeci">bool is_broadcasted(size_t dimension) const</div><div class="ttdoc">Return whether a dimension has been broadcasted.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00066">Window.inl:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_aa84a724344a983832279fe13f047b52d"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#aa84a724344a983832279fe13f047b52d">arm_compute::Window::Dimension::set_step</a></div><div class="ttdeci">void set_step(int step)</div><div class="ttdoc">Set the dimension's step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00114">Window.h:114</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aac792e3a11bc73bafafc4f4284c7f215"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aac792e3a11bc73bafafc4f4284c7f215">arm_compute::Window::slide_window_slice_3D</a></div><div class="ttdeci">bool slide_window_slice_3D(Window &amp;slice) const</div><div class="ttdoc">Slide the passed 3D window slice.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00350">Window.h:350</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a920f28ad2a867b3a6c0fa538a5183e11"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">arm_compute::Window::operator=</a></div><div class="ttdeci">Window &amp; operator=(const Window &amp;rhs)</div><div class="ttdoc">Copy assignment operator.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00040">Window.inl:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a29b98c579478c77b57c0f75c92bd647e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">arm_compute::Window::set_broadcasted</a></div><div class="ttdeci">void set_broadcasted(size_t dimension)</div><div class="ttdoc">Set the dimension as broadcasted dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00059">Window.inl:59</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a30ca5bdbb60ee281d7f1ab34f7a4ee40"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a30ca5bdbb60ee281d7f1ab34f7a4ee40">arm_compute::Window::first_slice_window_3D</a></div><div class="ttdeci">Window first_slice_window_3D() const</div><div class="ttdoc">First 3D slice of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00306">Window.h:306</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ac13b9cd31178cde1e6b25302d619ea05"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">arm_compute::Window::operator[]</a></div><div class="ttdeci">constexpr const Dimension &amp; operator[](size_t dimension) const</div><div class="ttdoc">Read only access to a given dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00047">Window.inl:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa46c9cd851caf7cca518accb86f9bcd7"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa46c9cd851caf7cca518accb86f9bcd7">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions higher than first if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00390">Window.h:390</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a2c532d398a5661ff04367252701fa3d4"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a2c532d398a5661ff04367252701fa3d4">arm_compute::Window::Dimension::Dimension</a></div><div class="ttdeci">constexpr Dimension(int start=0, int end=1, int step=1)</div><div class="ttdoc">Constructor, by default creates a dimension of 1.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00089">Window.h:89</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a0654fca130488c15b4b66a9b7131c142"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">arm_compute::Window::num_iterations_total</a></div><div class="ttdeci">size_t num_iterations_total() const</div><div class="ttdoc">Return the total number of iterations needed to iterate through the entire window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00308">Window.inl:308</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae20ec28555d4473419cae37cf120f35d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const TensorShape &amp;shape) const</div><div class="ttdoc">Don't advance in the dimension where shape is less equal to 1.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00134">Window.inl:134</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a14bbbcfa75deb1a56c83406bfc37eec2"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14bbbcfa75deb1a56c83406bfc37eec2">arm_compute::Window::first_slice_window_4D</a></div><div class="ttdeci">Window first_slice_window_4D() const</div><div class="ttdoc">First 4D slice of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00314">Window.h:314</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad1a2b580ba9e1a3ed7124c3f37179bca"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad1a2b580ba9e1a3ed7124c3f37179bca">arm_compute::Window::slide_window_slice_1D</a></div><div class="ttdeci">bool slide_window_slice_1D(Window &amp;slice) const</div><div class="ttdoc">Slide the passed 1D window slice.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00326">Window.h:326</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad41f3f5322c2797798363be2ec3fde85"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad41f3f5322c2797798363be2ec3fde85">arm_compute::Window::slide_window_slice_4D</a></div><div class="ttdeci">bool slide_window_slice_4D(Window &amp;slice) const</div><div class="ttdoc">Slide the passed 4D window slice.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00362">Window.h:362</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a548131b3d37da47a2e9d32111c88dfe1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">arm_compute::test::validation::reference::slice</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; slice(const SimpleTensor&lt; T &gt; &amp;src, Coordinates starts, Coordinates ends)</div><div class="ttdef"><b>Definition:</b> <a href="_slice_operations_8cpp_source.xhtml#l00038">SliceOperations.cpp:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a016fdd5b1c05ce7d06088891a0d36bff"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a016fdd5b1c05ce7d06088891a0d36bff">arm_compute::Window::first_slice_window_2D</a></div><div class="ttdeci">Window first_slice_window_2D() const</div><div class="ttdoc">First 2D slice of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00298">Window.h:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a51a8c7a9d2fa20943c213e85eb8d9caf"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">arm_compute::Window::z</a></div><div class="ttdeci">constexpr const Dimension &amp; z() const</div><div class="ttdoc">Alias to access the third dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00176">Window.h:176</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a69496c7cb46a4101813d7456a6bd097b"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">arm_compute::Window::adjust</a></div><div class="ttdeci">void adjust(size_t dimension, int adjust_value, bool is_at_start)</div><div class="ttdoc">Adjust the start or end of a given dimension by the given value.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00154">Window.inl:154</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="_window_8h.xhtml">Window.h</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:19:54 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
