<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/graph_deepspeech_v0_4_1.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('graph__deepspeech__v0__4__1_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">graph_deepspeech_v0_4_1.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="graph__deepspeech__v0__4__1_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_8h.xhtml">arm_compute/graph.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_common_graph_options_8h.xhtml">utils/CommonGraphOptions.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_utils_8h.xhtml">utils/GraphUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;utils/Utils.h&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils.xhtml">arm_compute::utils</a>;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph.xhtml">arm_compute::graph</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph_1_1frontend.xhtml">arm_compute::graph::frontend</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/** Example demonstrating how to implement DeepSpeech v0.4.1&#39;s network using the Compute Library&#39;s graph API */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">class </span>GraphDeepSpeechExample : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    GraphDeepSpeechExample() : cmd_parser(), common_opts(cmd_parser), common_params(), graph(0, <span class="stringliteral">&quot;DeepSpeech v0.4.1&quot;</span>)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">bool</span> do_setup(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)<span class="keyword"> override</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="comment">// Parse arguments</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        cmd_parser.parse(argc, argv);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        cmd_parser.validate();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">// Consume common parameters</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        common_params = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a2593e1f13f425f627658900657f73dc3">consume_common_graph_parameters</a>(common_opts);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="comment">// Return when help menu is requested</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">if</span> (common_params.help)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            cmd_parser.print_help(argv[0]);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// Print parameter values</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        std::cout &lt;&lt; common_params &lt;&lt; std::endl;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// Get trainable parameters data path</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::string       data_path  = common_params.data_path;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> std::string model_path = <span class="stringliteral">&quot;/cnn_data/deepspeech_model/&quot;</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span> (!data_path.empty())</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            data_path += model_path;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// How many timesteps to process at once, higher values mean more latency</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Notice that this corresponds to the number of LSTM cells that will be instantiated</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_steps = 16;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="comment">// ReLU clipping value for non-recurrent layers</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> cell_clip = 20.f;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// Create input descriptor</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape =</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">permute_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(26U, 19U, n_steps, 1U), <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>, common_params.data_layout);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> input_descriptor =</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>(tensor_shape, common_params.data_type).<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2497d23622ec1343e507331ae1388f00">set_layout</a>(common_params.data_layout);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Set weights trained layout</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> weights_layout = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        graph &lt;&lt; common_params.target &lt;&lt; common_params.fast_math_hint</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">InputLayer</a>(input_descriptor,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;input_values_x&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">std::to_string</a>(n_steps) + <span class="stringliteral">&quot;.npy&quot;</span>,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                 weights_layout))</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;input_node&quot;</span>);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (common_params.data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml">PermuteLayer</a>(<a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2U, 0U, 1U), common_params.data_layout).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;permute_to_nhwc&quot;</span>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml">ReshapeLayer</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(494U, n_steps)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Reshape_input&quot;</span>)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;              <span class="comment">// Layer 1</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(2048U, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;h1_transpose.npy&quot;</span>, weights_layout),</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                     <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;MatMul_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;fc0&quot;</span>)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::BOUNDED_RELU, cell_clip))</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Relu&quot;</span>)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;              <span class="comment">// Layer 2</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(2048U, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;h2_transpose.npy&quot;</span>, weights_layout),</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                     <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;MatMul_1_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;fc1&quot;</span>)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::BOUNDED_RELU, cell_clip))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Relu_1&quot;</span>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;              <span class="comment">// Layer 3</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(2048U, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;h3_transpose.npy&quot;</span>, weights_layout),</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                     <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;MatMul_2_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;fc2&quot;</span>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::BOUNDED_RELU, cell_clip))</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Relu_2&quot;</span>)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;              <span class="comment">// Layer 4</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml">ReshapeLayer</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(2048U, 1U, n_steps)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Reshape_1&quot;</span>);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Unstack Layer (using SplitLayerNode)</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> unstack_params = {<span class="stringliteral">&quot;unstack&quot;</span>, graph.hints().target_hint};</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     unstack_nid =</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            GraphBuilder::add_split_node(graph.graph(), unstack_params, {graph.tail_node(), 0}, n_steps, 2);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="comment">// Create input state descriptor</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> state_descriptor =</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(2048U), common_params.data_type).<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2497d23622ec1343e507331ae1388f00">set_layout</a>(common_params.data_layout);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> previous_state(graph);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> add_y(graph);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Initial state for LSTM is all zeroes for both state_h and state_c, therefore only one input is created</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        previous_state &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">InputLayer</a>(state_descriptor, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;zeros.npy&quot;</span>))</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                              .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;previous_state_c_h&quot;</span>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        add_y &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">InputLayer</a>(state_descriptor, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;ones.npy&quot;</span>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;add_y&quot;</span>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">// Create LSTM Fully Connected weights and bias descriptors</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> lstm_weights_descriptor =</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(4096U, 8192U), common_params.data_type).<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2497d23622ec1343e507331ae1388f00">set_layout</a>(common_params.data_layout);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> lstm_bias_descriptor =</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(8192U), common_params.data_type).<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2497d23622ec1343e507331ae1388f00">set_layout</a>(common_params.data_layout);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> lstm_fc_weights(graph);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> lstm_fc_bias(graph);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        lstm_fc_weights &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">ConstantLayer</a>(</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                               lstm_weights_descriptor,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                               <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;rnn_lstm_cell_kernel_transpose.npy&quot;</span>, weights_layout))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                               .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;h5/transpose&quot;</span>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        lstm_fc_bias &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">ConstantLayer</a>(lstm_bias_descriptor,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;rnn_lstm_cell_MatMul_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                            .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;MatMul_3_bias&quot;</span>);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// LSTM Block</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_1 =</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            add_lstm_cell(unstack_nid, 0, previous_state, previous_state, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_2 =</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            add_lstm_cell(unstack_nid, 1, new_state_1.first, new_state_1.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_3 =</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            add_lstm_cell(unstack_nid, 2, new_state_2.first, new_state_2.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_4 =</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            add_lstm_cell(unstack_nid, 3, new_state_3.first, new_state_3.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_5 =</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            add_lstm_cell(unstack_nid, 4, new_state_4.first, new_state_4.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_6 =</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            add_lstm_cell(unstack_nid, 5, new_state_5.first, new_state_5.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_7 =</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            add_lstm_cell(unstack_nid, 6, new_state_6.first, new_state_6.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_8 =</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            add_lstm_cell(unstack_nid, 7, new_state_7.first, new_state_7.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_9 =</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            add_lstm_cell(unstack_nid, 8, new_state_8.first, new_state_8.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_10 =</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            add_lstm_cell(unstack_nid, 9, new_state_9.first, new_state_9.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_11 = add_lstm_cell(</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            unstack_nid, 10, new_state_10.first, new_state_10.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_12 = add_lstm_cell(</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            unstack_nid, 11, new_state_11.first, new_state_11.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_13 = add_lstm_cell(</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            unstack_nid, 12, new_state_12.first, new_state_12.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_14 = add_lstm_cell(</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            unstack_nid, 13, new_state_13.first, new_state_13.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_15 = add_lstm_cell(</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            unstack_nid, 14, new_state_14.first, new_state_14.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        std::pair&lt;SubStream, SubStream&gt; new_state_16 = add_lstm_cell(</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            unstack_nid, 15, new_state_15.first, new_state_15.second, add_y, lstm_fc_weights, lstm_fc_bias);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Concatenate new states on height</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> axis = 1;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a>(axis, std::move(new_state_1.second), std::move(new_state_2.second),</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            std::move(new_state_3.second), std::move(new_state_4.second), std::move(new_state_5.second),</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                            std::move(new_state_6.second), std::move(new_state_7.second), std::move(new_state_8.second),</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                            std::move(new_state_9.second), std::move(new_state_10.second),</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            std::move(new_state_11.second), std::move(new_state_12.second),</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                            std::move(new_state_13.second), std::move(new_state_14.second),</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                            std::move(new_state_15.second), std::move(new_state_16.second))</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;concat&quot;</span>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(2048U, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;h5_transpose.npy&quot;</span>, weights_layout),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                     <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;MatMul_3_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;fc3&quot;</span>)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::BOUNDED_RELU, cell_clip))</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;Relu3&quot;</span>)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(29U, <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;h6_transpose.npy&quot;</span>, weights_layout),</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                     <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;MatMul_4_bias.npy&quot;</span>))</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;fc3&quot;</span>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml">SoftmaxLayer</a>().<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;logits&quot;</span>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">OutputLayer</a>(<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ae3d177d243f5fb34544105a4ee4e1f58">get_output_accessor</a>(common_params, 5));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="comment">// Finalize graph</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml">GraphConfig</a> config;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a08963f7335eef295237ab460863bc3d5">num_threads</a>        = common_params.threads;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a9da74af255a3e6ea61180d4a03192a48">use_tuner</a>          = common_params.enable_tuner;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a5cabfb35cd0014387f7ec2a0c362c20f">tuner_file</a>         = common_params.tuner_file;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a11c0bd1d663fbaa516fac9160ec96d4b">mlgo_file</a>          = common_params.mlgo_file;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a1c63a70031e72b9eaba259286f06ee2c">use_synthetic_type</a> = <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a>(common_params.data_type);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        config.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a19f999dddb4ef5efd7fef82f8c01f228">synthetic_type</a>     = common_params.data_type;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        graph.finalize(common_params.target, config);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">void</span> do_run()<span class="keyword"> override</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="comment">// Run graph</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        graph.run();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">CommandLineParser</a>  cmd_parser;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml">CommonGraphOptions</a> common_opts;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a>  common_params;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml">Stream</a>             graph;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> set_node_params(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid, <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> &amp;params)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(nid);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(!node);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">set_common_node_parameters</a>(params);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::pair&lt;SubStream, SubStream&gt; add_lstm_cell(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>       unstack_nid,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> unstack_idx,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                  <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>    previous_state_c,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                  <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>    previous_state_h,</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                  <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>    add_y,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                  <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>    lstm_fc_weights,</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                                  <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>    lstm_fc_bias)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keyword">const</span> std::string         cell_name(<span class="stringliteral">&quot;rnn/lstm_cell_&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">std::to_string</a>(unstack_idx));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> concat_dim =</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            (common_params.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#aa56f0562febf49bc0e29a4257551191b">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>) ? <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a> : <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// Concatenate result of Unstack with previous_state_h</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> concat_params = {cell_name + <span class="stringliteral">&quot;/concat&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     concat_nid    = graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a>&gt;(2, concat_dim);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(unstack_nid, unstack_idx, concat_nid, 0);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(previous_state_h.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0, concat_nid, 1);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        set_node_params(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), concat_nid, concat_params);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a3d1067259b70c7d8753be5062a4b9f6d">forward_tail</a>(concat_nid);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>(8192U, lstm_fc_weights, lstm_fc_bias).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/BiasAdd&quot;</span>);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="comment">// Split Layer</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_splits = 4;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> split_axis = 0;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> split_params = {cell_name + <span class="stringliteral">&quot;/split&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     split_nid =</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            GraphBuilder::add_split_node(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), split_params, {graph.tail_node(), 0}, num_splits, split_axis);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> sigmoid_1_params = {cell_name + <span class="stringliteral">&quot;/Sigmoid_1&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> add_params       = {cell_name + <span class="stringliteral">&quot;/add&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> sigmoid_2_params = {cell_name + <span class="stringliteral">&quot;/Sigmoid_2&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> tanh_params      = {cell_name + <span class="stringliteral">&quot;/Tanh&quot;</span>, graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a>};</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">// Sigmoid 1 (first split)</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> sigmoid_1_nid = graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a>&gt;(</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::LOGISTIC));</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(split_nid, 0, sigmoid_1_nid, 0);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        set_node_params(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), sigmoid_1_nid, sigmoid_1_params);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="comment">// Tanh (second split)</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> tanh_nid = graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a>&gt;(</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::TANH, 1.f, 1.f));</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(split_nid, 1, tanh_nid, 0);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        set_node_params(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), tanh_nid, tanh_params);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> tanh_ss(graph);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        tanh_ss.forward_tail(tanh_nid);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Add (third split)</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_nid =</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a>&gt;(<a class="code" href="structarm__compute_1_1graph_1_1descriptors_1_1_eltwise_layer_descriptor.xhtml">descriptors::EltwiseLayerDescriptor</a>{EltwiseOperation::Add});</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(split_nid, 2, add_nid, 0);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(add_y.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0, add_nid, 1);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        set_node_params(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), add_nid, add_params);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="comment">// Sigmoid 2 (fourth split)</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> sigmoid_2_nid = graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a>&gt;(</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::LOGISTIC));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(split_nid, 3, sigmoid_2_nid, 0);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        set_node_params(graph.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">graph</a>(), sigmoid_2_nid, sigmoid_2_params);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> sigmoid_1_ss(graph);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        sigmoid_1_ss.forward_tail(sigmoid_1_nid);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> mul_1_ss(sigmoid_1_ss);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        mul_1_ss &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">EltwiseLayer</a>(std::move(sigmoid_1_ss), std::move(tanh_ss), EltwiseOperation::Mul)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/mul_1&quot;</span>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> tanh_1_ss_tmp(graph);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        tanh_1_ss_tmp.forward_tail(add_nid);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        tanh_1_ss_tmp &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::LOGISTIC))</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                             .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/Sigmoid&quot;</span>);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> tanh_1_ss_tmp2(tanh_1_ss_tmp);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        tanh_1_ss_tmp2 &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">EltwiseLayer</a>(std::move(tanh_1_ss_tmp), std::move(previous_state_c), EltwiseOperation::Mul)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                              .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/mul&quot;</span>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> tanh_1_ss(tanh_1_ss_tmp2);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        tanh_1_ss &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">EltwiseLayer</a>(std::move(tanh_1_ss_tmp2), std::move(mul_1_ss), EltwiseOperation::Add)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                         .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/new_state_c&quot;</span>);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> new_state_c(tanh_1_ss);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        tanh_1_ss &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(ActivationLayerInfo::ActivationFunction::TANH, 1.f, 1.f))</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                         .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/Tanh_1&quot;</span>);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> sigmoid_2_ss(graph);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        sigmoid_2_ss.forward_tail(sigmoid_2_nid);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">EltwiseLayer</a>(std::move(sigmoid_2_ss), std::move(tanh_1_ss), EltwiseOperation::Mul)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(cell_name + <span class="stringliteral">&quot;/new_state_h&quot;</span>);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> new_state_h(graph);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;SubStream, SubStream&gt;(new_state_c, new_state_h);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;};</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">/** Main program for DeepSpeech v0.4.1</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * Model is based on:</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> *      https://arxiv.org/abs/1412.5567</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> *      &quot;Deep Speech: Scaling up end-to-end speech recognition&quot;</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *      Awni Hannun, Carl Case, Jared Casper, Bryan Catanzaro, Greg Diamos, Erich Elsen, Ryan Prenger, Sanjeev Satheesh, Shubho Sengupta, Adam Coates, Andrew Y. Ng</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> * Provenance: https://github.com/mozilla/DeepSpeech</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> * @note To list all the possible arguments execute the binary appended with the --help option</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> * @param[in] argc Number of arguments</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"> * @param[in] argv Arguments</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"> * @return Return code</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="graph__deepspeech__v0__4__1_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">  355</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="graph__deepspeech__v0__4__1_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> arm_compute::utils::run_example&lt;GraphDeepSpeechExample&gt;(argc, argv);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdeci">@ NCHW</div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_node_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml">arm_compute::graph::NodeParams</a></div><div class="ttdoc">Common node parameters.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00223">Types.h:223</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a9da74af255a3e6ea61180d4a03192a48"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a9da74af255a3e6ea61180d4a03192a48">arm_compute::graph::GraphConfig::use_tuner</a></div><div class="ttdeci">bool use_tuner</div><div class="ttdoc">Use a tuner in tunable backends.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00092">Types.h:92</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_a30bee0b52a919bbcb1dc48b1b6546a16"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">arm_compute::graph_utils::get_weights_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_weights_accessor(const std::string &amp;path, const std::string &amp;data_file, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Generates appropriate weights accessor according to the specified path.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00484">GraphUtils.h:484</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a08963f7335eef295237ab460863bc3d5"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a08963f7335eef295237ab460863bc3d5">arm_compute::graph::GraphConfig::num_threads</a></div><div class="ttdeci">int num_threads</div><div class="ttdoc">Number of threads to use (thread capable backends), if 0 the backend will auto-initialize,...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00096">Types.h:96</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a11c0bd1d663fbaa516fac9160ec96d4b"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a11c0bd1d663fbaa516fac9160ec96d4b">arm_compute::graph::GraphConfig::mlgo_file</a></div><div class="ttdeci">std::string mlgo_file</div><div class="ttdoc">Filename to load MLGO heuristics from.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00099">Types.h:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_softmax_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml">arm_compute::graph::frontend::SoftmaxLayer</a></div><div class="ttdoc">Softmax Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01324">Layers.h:1324</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdeci">@ CHANNEL</div><div class="ttdoc">channel</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">arm_compute::graph::EltwiseLayerNode</a></div><div class="ttdoc">Eltwise Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00034">EltwiseLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00121">CoreTypes.h:121</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">arm_compute::graph::frontend::FullyConnectedLayer</a></div><div class="ttdoc">Fully Connected Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00714">Layers.h:714</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_input_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">arm_compute::graph::frontend::InputLayer</a></div><div class="ttdoc">Input Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00044">Layers.h:44</a></div></div>
<div class="ttc" id="a_common_graph_options_8h_xhtml"><div class="ttname"><a href="_common_graph_options_8h.xhtml">CommonGraphOptions.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_sub_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">arm_compute::graph::frontend::SubStream</a></div><div class="ttdoc">Sub stream class.</div><div class="ttdef"><b>Definition:</b> <a href="_sub_stream_8h_source.xhtml#l00047">SubStream.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_reshape_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml">arm_compute::graph::frontend::ReshapeLayer</a></div><div class="ttdoc">Reshape Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01194">Layers.h:1194</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_constant_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">arm_compute::graph::frontend::ConstantLayer</a></div><div class="ttdoc">Constant Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00068">Layers.h:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00061">ActivationLayerInfo.h:61</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml">arm_compute::graph::GraphConfig</a></div><div class="ttdoc">Graph configuration structure.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00087">Types.h:87</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_aa56f0562febf49bc0e29a4257551191b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#aa56f0562febf49bc0e29a4257551191b">arm_compute::utils::CommonGraphParams::data_layout</a></div><div class="ttdeci">arm_compute::DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00100">CommonGraphOptions.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00038">CoreTypes.h:38</a></div></div>
<div class="ttc" id="agraph__deepspeech__v0__4__1_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="graph__deepspeech__v0__4__1_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main program for DeepSpeech v0.4.1.</div><div class="ttdef"><b>Definition:</b> <a href="graph__deepspeech__v0__4__1_8cpp_source.xhtml#l00355">graph_deepspeech_v0_4_1.cpp:355</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">arm_compute::graph::ConcatenateLayerNode</a></div><div class="ttdoc">Concatenation Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8h_source.xhtml#l00034">ConcatenateLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_command_line_parser_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">arm_compute::utils::CommandLineParser</a></div><div class="ttdoc">Class to parse command line arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00044">CommandLineParser.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a538f789bf074c367457a6f8f32b83d2d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">arm_compute::graph::Graph::add_connection</a></div><div class="ttdeci">EdgeID add_connection(NodeID source, size_t source_idx, NodeID sink, size_t sink_idx)</div><div class="ttdoc">Adds a connection between two nodes.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00069">Graph.cpp:69</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a3d1067259b70c7d8753be5062a4b9f6d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a3d1067259b70c7d8753be5062a4b9f6d">arm_compute::graph::frontend::IStream::forward_tail</a></div><div class="ttdeci">void forward_tail(NodeID nid)</div><div class="ttdoc">Forwards tail of stream to a given nid.</div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00081">IStream.h:81</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_common_graph_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml">arm_compute::utils::CommonGraphOptions</a></div><div class="ttdoc">Common command line options used to configure the graph examples.</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00134">CommonGraphOptions.h:134</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1frontend_1_1_stream_hints_xhtml_a81d9ddb43e3c89a5bf3334d475f9d74b"><div class="ttname"><a href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">arm_compute::graph::frontend::StreamHints::target_hint</a></div><div class="ttdeci">Target target_hint</div><div class="ttdoc">Target execution hint.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00063">Types.h:63</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ab3a897163a7fe23208f1d9c618062ee2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">arm_compute::graph_utils::permute_shape</a></div><div class="ttdeci">TensorShape permute_shape(TensorShape tensor_shape, DataLayout in_data_layout, DataLayout out_data_layout)</div><div class="ttdoc">Permutes a given tensor shape given the input and output data layout.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00673">GraphUtils.h:673</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_activation_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">arm_compute::graph::ActivationLayerNode</a></div><div class="ttdoc">Activation Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8h_source.xhtml#l00034">ActivationLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_i_layer_xhtml_af664a2598e05f8de28fb9f94e3902886"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">arm_compute::graph::frontend::ILayer::set_name</a></div><div class="ttdeci">ILayer &amp; set_name(std::string name)</div><div class="ttdoc">Sets the name of the layer.</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00055">ILayer.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a110fbabe5b6b600f0f5b1fec06ab1484"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">arm_compute::graph::frontend::IStream::tail_node</a></div><div class="ttdeci">NodeID tail_node()</div><div class="ttdoc">Returns the tail node of the Stream.</div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00065">IStream.h:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">arm_compute::graph::frontend::StackLayer</a></div><div class="ttdoc">Stack Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01347">Layers.h:1347</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a2593e1f13f425f627658900657f73dc3"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a2593e1f13f425f627658900657f73dc3">arm_compute::utils::consume_common_graph_parameters</a></div><div class="ttdeci">void consume_common_graph_parameters(CommonGraphValidateOptions &amp;options, CommonParams &amp;common_params)</div><div class="ttdoc">Consumes the consume_common_graph_parameters graph options and creates a structure containing any inf...</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00312">graph_validate_utils.h:312</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_permute_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml">arm_compute::graph::frontend::PermuteLayer</a></div><div class="ttdoc">Permute Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00956">Layers.h:956</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a3ffda41b00085a84a5d4bc46f1106e17"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">arm_compute::graph::Graph::add_node</a></div><div class="ttdeci">NodeID add_node(Ts &amp;&amp;...args)</div><div class="ttdoc">Adds a node to the graph.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00234">Graph.h:234</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1frontend_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1frontend.xhtml">arm_compute::graph::frontend</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00031">ILayer.h:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00072">Types.h:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00208">Graph.cpp:208</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a19f999dddb4ef5efd7fef82f8c01f228"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a19f999dddb4ef5efd7fef82f8c01f228">arm_compute::graph::GraphConfig::synthetic_type</a></div><div class="ttdeci">DataType synthetic_type</div><div class="ttdoc">The data type of the synthetic graph</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00094">Types.h:94</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a75ce23fbe59cc58db22e1b6d072b10c6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">arm_compute::graph::frontend::IStream::hints</a></div><div class="ttdeci">StreamHints &amp; hints()</div><div class="ttdoc">Returns the stream hints that are currently used.</div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00073">IStream.h:73</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">arm_compute::graph::frontend::EltwiseLayer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00668">Layers.h:668</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml">arm_compute::graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8h_source.xhtml#l00033">TopologicalSort.h:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ae3d177d243f5fb34544105a4ee4e1f58"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ae3d177d243f5fb34544105a4ee4e1f58">arm_compute::graph_utils::get_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_output_accessor(const arm_compute::utils::CommonGraphParams &amp;graph_parameters, size_t top_n=5, bool is_validation=false, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate output accessor according to the specified graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00549">GraphUtils.h:549</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml">arm_compute::utils::Example</a></div><div class="ttdoc">Abstract Example class.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00074">Utils.h:74</a></div></div>
<div class="ttc" id="a_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00044">GraphUtils.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a062b90d0a8defe70b0cd19300fee2825"><div class="ttname"><a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const ClComponentElementwiseBinary::Attributes::ElementwiseOp &amp;op)</div><div class="ttdoc">Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...</div><div class="ttdef"><b>Definition:</b> <a href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">ElementwiseBinary.h:68</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a2497d23622ec1343e507331ae1388f00"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2497d23622ec1343e507331ae1388f00">arm_compute::graph::TensorDescriptor::set_layout</a></div><div class="ttdeci">TensorDescriptor &amp; set_layout(DataLayout data_layout)</div><div class="ttdoc">Sets tensor descriptor data layout.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00090">TensorDescriptor.h:90</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml">arm_compute::utils</a></div><div class="ttdef"><b>Definition:</b> <a href="_safe_ops_8h_source.xhtml#l00035">SafeOps.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml">arm_compute::graph::frontend::Stream</a></div><div class="ttdoc">Stream frontend class to construct simple graphs in a stream fashion.</div><div class="ttdef"><b>Definition:</b> <a href="_stream_8h_source.xhtml#l00044">Stream.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_stream_xhtml_a7e4fdf6dbe73cb6da5cc36976cff9fa7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml#a7e4fdf6dbe73cb6da5cc36976cff9fa7">arm_compute::graph::frontend::Stream::graph</a></div><div class="ttdeci">Graph &amp; graph() override</div><div class="ttdoc">Returns the underlying graph.</div><div class="ttdef"><b>Definition:</b> <a href="_stream_8cpp_source.xhtml#l00057">Stream.cpp:57</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_output_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">arm_compute::graph::frontend::OutputLayer</a></div><div class="ttdoc">Output Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00092">Layers.h:92</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00052">Graph.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">arm_compute::utils::CommonGraphParams</a></div><div class="ttdoc">Structure holding all the common graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00093">CommonGraphOptions.h:93</a></div></div>
<div class="ttc" id="a_graph_utils_8h_xhtml"><div class="ttname"><a href="_graph_utils_8h.xhtml">GraphUtils.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1descriptors_1_1_eltwise_layer_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1descriptors_1_1_eltwise_layer_descriptor.xhtml">arm_compute::graph::descriptors::EltwiseLayerDescriptor</a></div><div class="ttdoc">Elementwise layer descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_layer_descriptors_8h_source.xhtml#l00067">LayerDescriptors.h:67</a></div></div>
<div class="ttc" id="a_graph_8h_xhtml"><div class="ttname"><a href="_graph_8h.xhtml">graph.h</a></div><div class="ttdoc">Includes all the Graph headers at once.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_aeadb909ea02bec78f92ca35ff0ccbaea"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">arm_compute::graph::INode::set_common_node_parameters</a></div><div class="ttdeci">void set_common_node_parameters(NodeParams common_params)</div><div class="ttdoc">Sets common node parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00061">INode.cpp:61</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a5cabfb35cd0014387f7ec2a0c362c20f"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a5cabfb35cd0014387f7ec2a0c362c20f">arm_compute::graph::GraphConfig::tuner_file</a></div><div class="ttdeci">std::string tuner_file</div><div class="ttdoc">File to load/store tuning values from.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00098">Types.h:98</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1frontend_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">arm_compute::graph::frontend::ActivationLayer</a></div><div class="ttdoc">Activation Layer.</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00118">Layers.h:118</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_graph_config_xhtml_a1c63a70031e72b9eaba259286f06ee2c"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a1c63a70031e72b9eaba259286f06ee2c">arm_compute::graph::GraphConfig::use_synthetic_type</a></div><div class="ttdeci">bool use_synthetic_type</div><div class="ttdoc">Convert graph to a synthetic graph for a data type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00093">Types.h:93</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="graph__deepspeech__v0__4__1_8cpp.xhtml">graph_deepspeech_v0_4_1.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:19:55 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
