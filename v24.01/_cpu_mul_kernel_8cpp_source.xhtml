<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/CpuMulKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_cpu_mul_kernel_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuMulKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_mul_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_mul_kernel_8h.xhtml">src/cpu/kernels/CpuMulKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2common_2_registrars_8h.xhtml">src/core/common/Registrars.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_asymm_8h.xhtml">src/core/NEON/NEAsymm.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_symm_8h.xhtml">src/core/NEON/NESymm.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cpu_2kernels_2mul_2generic_2neon_2list_8h.xhtml">src/cpu/kernels/mul/generic/neon/list.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP32_KERNELS)</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> default_mws_N1_fp32_neon = 22447;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> default_mws_V1_fp32_neon = 38982;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_FP32_KERNELS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> default_mws_other_platforms_1d_tensor = 10240;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">namespace </span>kernels</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">const</span> <span class="keywordtype">float</span>       scale255_constant      = 1.f / 255.f;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">const</span> float32x4_t scale255_constant_f32q = vdupq_n_f32(scale255_constant);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">const</span> float32x4_t positive_round_f32q    = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">inline</span> Status <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(<span class="keyword">const</span> ITensorInfo *src1,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                 <span class="keyword">const</span> ITensorInfo *src2,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                 <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                 <span class="keywordtype">float</span>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                 <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>      overflow_policy,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                 <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>     rounding_policy)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(overflow_policy);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(rounding_policy);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(src1);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src1, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src2, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(src1-&gt;data_type()) || <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(src2-&gt;data_type()))</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(src1, src2);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(overflow_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a>,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                        <span class="stringliteral">&quot;ConvertPolicy cannot be WRAP if datatype is quantized&quot;</span>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;total_size() &gt; 0)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">const</span> TensorShape &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1-&gt;tensor_shape(), src2-&gt;tensor_shape());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(out_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), 0),</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                        <span class="stringliteral">&quot;Wrong shape for dst&quot;</span>);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(out_shape.total_size() == 0, <span class="stringliteral">&quot;Inputs are not broadcast compatible&quot;</span>);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="comment">// clang-format off</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            !(src1-&gt;data_type() == src2-&gt;data_type() &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type()) &amp;&amp;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            !(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>) &amp;&amp;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            !(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>) &amp;&amp;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            !(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>) &amp;&amp;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            !(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>) &amp;&amp;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            !(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            , <span class="stringliteral">&quot;Invalid data type combination&quot;</span>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// clang-format on</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> &amp;&amp;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> != 1.f,</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                        <span class="stringliteral">&quot;Unsupported scale for QSYMM16 inputs and S32 dst&quot;</span>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (std::abs(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> - scale255_constant) &lt; 0.00001f)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(rounding_policy != <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a> &amp;&amp;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                    rounding_policy != <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(src1-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> &amp;&amp; src2-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> &amp;&amp;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                        <span class="stringliteral">&quot;Scale == 1/255 is not supported if input and dst are of data type S32&quot;</span>);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(rounding_policy != <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordtype">int</span>         exponent            = 0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> normalized_mantissa = std::frexp(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, &amp;exponent);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// Use int scaling if factor is equal to 1/2^n for 0 &lt;= n &lt;= 15</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// frexp returns 0.5 as mantissa which means that the exponent will be in the range of -1 &lt;= e &lt;= 14</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="comment">// Moreover, it will be negative as we deal with 1/2^n</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!((normalized_mantissa == 0.5f) &amp;&amp; (-14 &lt;= exponent) &amp;&amp; (exponent &lt;= 1)),</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                        <span class="stringliteral">&quot;Scale value not supported (Should be 1/(2^n) or 1/255&quot;</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/* Scales a given vector by 1/255.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @note This does not work for all cases. e.g. for float of 0.49999999999999994 and large floats.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * @param in Input vector to scale.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> * @return   Scaled dst rounded to nearest (round half up).</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">inline</span> int32x4_t scale255_S32_S32(int32x4_t in)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Scale</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> float32x4_t tmp = vmulq_f32(vcvtq_f32_s32(in), scale255_constant_f32q);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Round to nearest (round half up)</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Add +0.5 for all values</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Afterwards vcvt rounds toward zero</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> vcvtq_s32_f32(vaddq_f32(tmp, positive_round_f32q));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">inline</span> uint16x8_t scale255_U16_U16(uint16x8_t in)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> int32x4_t tmp_s1 = scale255_S32_S32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(in))));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> int32x4_t tmp_s2 = scale255_S32_S32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(in))));</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> vreinterpretq_u16_s16(vcombine_s16(vmovn_s32(tmp_s2), vmovn_s32(tmp_s1)));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">inline</span> <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, int8_t&gt;::value, int8x16_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(float32x4x4_t val, <span class="keyword">const</span> UniformQuantizationInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(val, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">inline</span> <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, uint8_t&gt;::value, uint8x16_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(float32x4x4_t val, <span class="keyword">const</span> UniformQuantizationInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(val, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordtype">void</span> mul_saturate_quantized_8(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src1-&gt;info()-&gt;tensor_shape().x() != src2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qua_info = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo tmp_qua_info    = {output_qua_info.scale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, output_qua_info.offset};</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        non_broadcast_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, window_step_x&gt;::tag_type;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            win,</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    <span class="keyword">const</span> float32x4x4_t in1_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(non_broadcast_v, non_broadcast_qinfo);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keyword">const</span> float32x4x4_t in2_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(broadcast_value_vec, broadcast_qinfo);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keyword">const</span> float32x4x4_t out_f32x4x4 = {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        vmulq_f32(in1_f32x4x4.val[0], in2_f32x4x4.val[0]),</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        vmulq_f32(in1_f32x4x4.val[1], in2_f32x4x4.val[1]),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        vmulq_f32(in1_f32x4x4.val[2], in2_f32x4x4.val[2]),</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        vmulq_f32(in1_f32x4x4.val[3], in2_f32x4x4.val[3]),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    };</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="comment">// Quantize dst</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = vquantize&lt;T&gt;(out_f32x4x4, tmp_qua_info);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, result);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="keyword">const</span> T     src1    = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_in1 = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;T&gt;::dequantize</a>(src1, non_broadcast_qinfo);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_in2 = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;T&gt;::dequantize</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_f   = tmp_in1 * tmp_in2;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="comment">// Quantize dst</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tmp_qua = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">Qasymm8QuantizationHelper&lt;T&gt;::quantize</a>(tmp_f, tmp_qua_info);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    *(output_ptr + x)  = tmp_qua;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            },</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            broadcast_input, non_broadcast_input, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qua_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qua_info = src2-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            win,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input1_q = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input2_q = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <span class="keyword">const</span> float32x4x4_t in1_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(input1_q, input1_qua_info);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <span class="keyword">const</span> float32x4x4_t in2_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(input2_q, input2_qua_info);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keyword">const</span> float32x4x4_t out_f32x4x4 = {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        vmulq_f32(in1_f32x4x4.val[0], in2_f32x4x4.val[0]),</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        vmulq_f32(in1_f32x4x4.val[1], in2_f32x4x4.val[1]),</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        vmulq_f32(in1_f32x4x4.val[2], in2_f32x4x4.val[2]),</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        vmulq_f32(in1_f32x4x4.val[3], in2_f32x4x4.val[3]),</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    };</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    <span class="comment">// Quantize dst</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = vquantize&lt;T&gt;(out_f32x4x4, tmp_qua_info);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, result);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="keyword">const</span> T     src1    = *(input1_ptr + x);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keyword">const</span> T     src2    = *(input2_ptr + x);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_in1 = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;T&gt;::dequantize</a>(src1, input1_qua_info);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_in2 = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;T&gt;::dequantize</a>(src2, input2_qua_info);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> tmp_f   = tmp_in1 * tmp_in2;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="comment">// Quantize dst</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tmp_qua = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">Qasymm8QuantizationHelper&lt;T&gt;::quantize</a>(tmp_f, tmp_qua_info);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    *(output_ptr + x)  = tmp_qua;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            },</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keywordtype">bool</span> mul_q8_neon_fixedpoint_possible(<span class="keyword">const</span> ITensorInfo *src0,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                     <span class="keyword">const</span> ITensorInfo *src1,</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                     <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                     <span class="keywordtype">float</span>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0 = src0-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1 = src1-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> multiplier = ((iq0.scale * iq1.scale) / oq.scale) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">if</span> (multiplier &lt; -8191.f || multiplier &gt; 8191.f)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">//The multiplier cannot be stored as a 14.18 signed fixed-point number</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> offset_out = float(oq.offset);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_result = multiplier * (256) * (256) + offset_out;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (max_result &gt; 8191.f)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">//It might not be possible to store the result as a 14.18 signed fixed-point number.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ScalarType&gt;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keywordtype">void</span> mul_q8_neon_fixedpoint(<span class="keyword">const</span> ITensor *src0, <span class="keyword">const</span> ITensor *src1, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_info = src0-&gt;info();</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_info = src1-&gt;info();</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in0_shape = in0_info-&gt;tensor_shape();</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in1_shape = in1_info-&gt;tensor_shape();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="comment">// Create input windows.</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    Window in0_win = window.broadcast_if_dimension_le_one(in0_shape);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    Window in1_win = window.broadcast_if_dimension_le_one(in1_shape);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = window.x().start();</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = window.x().end();</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    is_broadcast_across_x = in0_shape.x() != in1_shape.x();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0_info = in0_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1_info = in1_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_offset = iq0_info.offset;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_offset = iq1_info.offset;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_offset = oq_info.offset;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> multiplier = ((iq0_info.scale * iq1_info.scale) / oq_info.scale) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    constexpr int32_t two_pwr18i = 262144;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    constexpr <span class="keywordtype">float</span>   two_pwr18f = 262144.f;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_offset_16p0  = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(in0_offset);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_offset_16p0  = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(in1_offset);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_offset_14p18 = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(out_offset * two_pwr18i);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> multiplier_14p18 = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(multiplier * two_pwr18f);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="comment">// Prefix: a = non-broadcast, b = broadcast.</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> is_broadcast_input_1 = in1_win.x().step() == 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keyword">auto</span>       a_win                = is_broadcast_input_1 ? in0_win : in1_win;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keyword">auto</span>       b_win                = is_broadcast_input_1 ? in1_win : in0_win;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_tensor             = is_broadcast_input_1 ? src0 : src1;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_tensor             = is_broadcast_input_1 ? src1 : src0;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_offset_16p0 = is_broadcast_input_1 ? in0_offset_16p0 : in1_offset_16p0;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_offset_16p0 = is_broadcast_input_1 ? in1_offset : in0_offset;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_offset = is_broadcast_input_1 ? in0_offset : in1_offset;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_offset = is_broadcast_input_1 ? in1_offset : in0_offset;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_voffset_16p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(a_offset_16p0, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        a_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        Iterator a_input_it(a_tensor, a_win);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        Iterator b_input_it(b_tensor, b_win);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        Iterator out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            win,</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(a_input_it.ptr());</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(b_input_it.ptr());</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_val            = *b_ptr;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_offseted_32p0  = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(b_val - b_offset_16p0);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_voffseted_32p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(b_offseted_32p0, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vmultiplier_14p18 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(multiplier_14p18, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> voffsetout_14p18  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(out_offset_14p18, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                    <span class="comment">// Load the inputs.</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(a_ptr + x);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                    <span class="comment">// Widen the non-broadcast elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted_32p0_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_0), a_voffset_16p0);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted_32p0_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_0), a_voffset_16p0);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted_32p0_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_1), a_voffset_16p0);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted_32p0_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_1), a_voffset_16p0);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted_32p0_00, b_voffseted_32p0);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted_32p0_01, b_voffseted_32p0);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted_32p0_10, b_voffseted_32p0);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted_32p0_11, b_voffseted_32p0);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_00, vmultiplier_14p18);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_01, vmultiplier_14p18);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_10, vmultiplier_14p18);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_11, vmultiplier_14p18);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="comment">// These shift rights are to revert the multiplication by twopwr18. Hard limit of a maximum shift by 8 requires multiple shift instructions to achieve this.</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_00 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_00));</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_01 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_01));</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_10 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_10));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_11 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_11));</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(vout_15p1_00, vout_15p1_01);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_15p1_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(vout_15p1_10, vout_15p1_11);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr     = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;2&gt;(vout_15p1_0), wrapper::vqrshrn&lt;2&gt;(vout_15p1_1));</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                <span class="comment">//Process the left-over elements.</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;2&gt;(wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                        (multiplier_14p18 * (int32_t(a_ptr[x]) - a_offset_16p0) * (int32_t(b_val) - b_offset_16p0)) +</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                        out_offset_14p18)));</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    out_ptr[x] = utility::clamp&lt;int32_t, ScalarType&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                        multiplier * ((<span class="keywordtype">float</span>(a_ptr[x]) - a_offset) * (<span class="keywordtype">float</span>(b_val) - b_offset)) + <span class="keywordtype">float</span>(out_offset)));</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            },</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            a_input_it, b_input_it, out_it);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset0_16p0     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in0_offset_16p0, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset1_16p0     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in1_offset_16p0, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffsetout_14p18  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(out_offset_14p18, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vmultiplier_14p18 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(multiplier_14p18, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        in0_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        in1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160; </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        Iterator in0_it(src0, in0_win);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        Iterator in1_it(src1, in1_win);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        Iterator out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            win,</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            {</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in0_it.ptr());</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in1_it.ptr());</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    <span class="comment">// Load the inputs.</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in0_ptr + x);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in1_ptr + x);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    <span class="comment">// Widen the input elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_8p0)));</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_8p0)));</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_8p0)));</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_8p0)));</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted0_32p0_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_0), voffset0_16p0);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted0_32p0_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_0), voffset0_16p0);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted0_32p0_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_1), voffset0_16p0);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted0_32p0_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_1), voffset0_16p0);</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160; </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted1_32p0_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_0), voffset1_16p0);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted1_32p0_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_0), voffset1_16p0);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted1_32p0_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_1), voffset1_16p0);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> voffseted1_32p0_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">wrapper::vsubl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_1), voffset1_16p0);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted0_32p0_00, voffseted1_32p0_00);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted0_32p0_01, voffseted1_32p0_01);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted0_32p0_10, voffseted1_32p0_10);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vinnermul_32p0_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(voffseted0_32p0_11, voffseted1_32p0_11);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_00, vmultiplier_14p18);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_01, vmultiplier_14p18);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_10, vmultiplier_14p18);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p18_11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffsetout_14p18, vinnermul_32p0_11, vmultiplier_14p18);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="comment">// These shift rights are to revert the multiplication by twopwr18. Hard limit of a maximum shift by 8 requires multiple shift instructions to achieve this.</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_00 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_00));</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_01 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_01));</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_10 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_10));</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_11 = wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(wrapper::vshrq_n&lt;8&gt;(vout_14p18_11));</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(vout_14p2_00, vout_14p2_01);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160; </div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_14p2_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(vout_14p2_10, vout_14p2_11);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;2&gt;(vout_14p2_0), wrapper::vqrshrn&lt;2&gt;(vout_14p2_1));</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                <span class="comment">//Process the left-over elements.</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;2&gt;(wrapper::vqrshrn_ex&lt;8, ScalarType&gt;(</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                        wrapper::vshrq_n&lt;8&gt;((multiplier_14p18 * (int32_t(in0_ptr[x]) - in0_offset_16p0) *</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                             (int32_t(in1_ptr[x]) - in1_offset_16p0)) +</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                            out_offset_14p18)));</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    out_ptr[x] = utility::clamp&lt;int32_t, ScalarType&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                        multiplier * ((<span class="keywordtype">float</span>(in0_ptr[x]) - in0_offset) * (<span class="keywordtype">float</span>(in1_ptr[x]) - in1_offset)) +</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                        <span class="keywordtype">float</span>(out_offset)));</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            },</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            in0_it, in1_it, out_it);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="keywordtype">void</span> mul_saturate_QSYMM16_QSYMM16_QSYMM16(</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;{</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo input1_qua_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo input2_qua_info = src2-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qua_info = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160; </div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo tmp_qua_info = {output_qua_info.scale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, output_qua_info.offset};</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        win,</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160; </div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> input1_q = {{</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    vld1q_s16(input1_ptr + x),</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                    vld1q_s16(input1_ptr + x + 8),</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                }};</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> input2_q = {{</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                    vld1q_s16(input2_ptr + x),</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                    vld1q_s16(input2_ptr + x + 8),</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                }};</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160; </div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                <span class="keyword">const</span> float32x4x4_t in1_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(input1_q, input1_qua_info);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="keyword">const</span> float32x4x4_t in2_f32x4x4 = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(input2_q, input2_qua_info);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160; </div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="keyword">const</span> float32x4x4_t out_f32x4x4 = {</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                    vmulq_f32(in1_f32x4x4.val[0], in2_f32x4x4.val[0]),</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                    vmulq_f32(in1_f32x4x4.val[1], in2_f32x4x4.val[1]),</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                    vmulq_f32(in1_f32x4x4.val[2], in2_f32x4x4.val[2]),</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                    vmulq_f32(in1_f32x4x4.val[3], in2_f32x4x4.val[3]),</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                };</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> result = <a class="code" href="namespacearm__compute.xhtml#a926c75703af37a5677a6bac0198902b0">vquantize_qsymm16</a>(out_f32x4x4, tmp_qua_info);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                vst1q_s16(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                vst1q_s16(output_ptr + x + 8, result.val[1]);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            }</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            {</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                <span class="comment">// Dequantize inputs</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="keywordtype">float</span> tmp_in1 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*(input1_ptr + x)) * input1_qua_info.scale;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                <span class="keywordtype">float</span> tmp_in2 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*(input2_ptr + x)) * input2_qua_info.scale;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                <span class="keywordtype">float</span> tmp_f   = tmp_in1 * tmp_in2;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                <span class="comment">// Quantize dst, lrintf() has same rounding mode as vcombine_s16</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                int32_t   tmp = lrintf(tmp_f / tmp_qua_info.scale);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> tmp_qua =</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a><span class="keyword">&gt;</span>(tmp &gt; SHRT_MAX) ? SHRT_MAX : ((tmp &lt; SHRT_MIN) ? SHRT_MIN : tmp);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                *(output_ptr + x) = tmp_qua;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            }</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        },</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160; </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keywordtype">void</span> mul_QSYMM16_QSYMM16_S32(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160; </div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        win,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160; </div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            {</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> input1_q = {{</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                    vld1q_s16(input1_ptr + x),</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    vld1q_s16(input1_ptr + x + 8),</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                }};</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">qsymm16x8x2_t</a> input2_q = {{</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                    vld1q_s16(input2_ptr + x),</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                    vld1q_s16(input2_ptr + x + 8),</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                }};</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                <span class="keyword">const</span> int32x4x4_t in1_s32 = {{</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    vmovl_s16(vget_low_s16(input1_q.val[0])),</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                    vmovl_s16(vget_high_s16(input1_q.val[0])),</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                    vmovl_s16(vget_low_s16(input1_q.val[1])),</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    vmovl_s16(vget_high_s16(input1_q.val[1])),</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                }};</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                <span class="keyword">const</span> int32x4x4_t in2_s32 = {{</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    vmovl_s16(vget_low_s16(input2_q.val[0])),</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                    vmovl_s16(vget_high_s16(input2_q.val[0])),</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                    vmovl_s16(vget_low_s16(input2_q.val[1])),</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    vmovl_s16(vget_high_s16(input2_q.val[1])),</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                }};</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160; </div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                <span class="keyword">const</span> int32x4x4_t result = {{</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                    vmulq_s32(in1_s32.val[0], in2_s32.val[0]),</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                    vmulq_s32(in1_s32.val[1], in2_s32.val[1]),</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    vmulq_s32(in1_s32.val[2], in2_s32.val[2]),</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    vmulq_s32(in1_s32.val[3], in2_s32.val[3]),</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                }};</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                vst1q_s32(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                vst1q_s32(output_ptr + x + 4, result.val[1]);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                vst1q_s32(output_ptr + x + 8, result.val[2]);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                vst1q_s32(output_ptr + x + 12, result.val[3]);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            }</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160; </div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            {</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                int32_t tmp       = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            }</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        },</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;}</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="keywordtype">void</span> mul_U8_U8_U8(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;{</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160; </div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160; </div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160; </div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(uint8_t);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        win,</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160; </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            {</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="keyword">const</span> uint8x16_t ta1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                <span class="keyword">const</span> uint8x16_t ta2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160; </div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                uint16x8_t       tmp1_high = vmovl_u8(vget_high_u8(ta1));</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                <span class="keyword">const</span> uint16x8_t tmp2_high = vmovl_u8(vget_high_u8(ta2));</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                uint16x8_t       tmp1_low  = vmovl_u8(vget_low_u8(ta1));</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                <span class="keyword">const</span> uint16x8_t tmp2_low  = vmovl_u8(vget_low_u8(ta2));</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160; </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                tmp1_high = vmulq_u16(tmp1_high, tmp2_high);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                tmp1_low  = vmulq_u16(tmp1_low, tmp2_low);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160; </div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                    tmp1_high = scale255_U16_U16(tmp1_high);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                    tmp1_low  = scale255_U16_U16(tmp1_low);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                }</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                    <span class="keyword">const</span> int16x8_t vn = vdupq_n_s16(-n);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160; </div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                    {</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                        tmp1_high = vqshlq_u16(tmp1_high, vn);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                        tmp1_low  = vqshlq_u16(tmp1_low, vn);</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                    }</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                    {</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                        tmp1_high = vshlq_u16(tmp1_high, vn);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                        tmp1_low  = vshlq_u16(tmp1_low, vn);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                    }</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                {</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(vqmovn_u16(tmp1_low), vqmovn_u16(tmp1_high)));</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                {</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(vmovn_u16(tmp1_low), vmovn_u16(tmp1_high)));</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                }</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160; </div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            {</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                uint16_t tmp = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160; </div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(tmp) * scale255_constant;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                    tmp         = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(tmp_f + 0.5f);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                {</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                    tmp &gt;&gt;= n;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                }</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                <span class="keywordflow">if</span> (is_sat &amp;&amp; tmp &gt; 255)</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                    tmp = 255;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                }</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            }</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        },</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;}</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160; </div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="keyword">inline</span> int16x8_t mul_S16_S16_S16_n_loop(<span class="keyword">const</span> int16x8_t &amp;src1, <span class="keyword">const</span> int16x8_t &amp;src2, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;{</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    int32x4_t       tmp1_high = vmovl_s16(vget_high_s16(src1));</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keyword">const</span> int32x4_t tmp2_high = vmovl_s16(vget_high_s16(src2));</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    int32x4_t       tmp1_low  = vmovl_s16(vget_low_s16(src1));</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keyword">const</span> int32x4_t tmp2_low  = vmovl_s16(vget_low_s16(src2));</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160; </div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    tmp1_high = vmulq_s32(tmp1_high, tmp2_high);</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    tmp1_low  = vmulq_s32(tmp1_low, tmp2_low);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160; </div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        tmp1_high = scale255_S32_S32(tmp1_high);</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        tmp1_low  = scale255_S32_S32(tmp1_low);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    }</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    {</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <span class="comment">// Right shift amount</span></div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <span class="keyword">const</span> int32x4_t vn = vdupq_n_s32(-n);</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="comment">// Left shift amount</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        <span class="keyword">const</span> int32x4_t vnl = vdupq_n_s32(n);</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <span class="comment">// Calculate conversion bit</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keyword">const</span> uint32x4_t tmp1_high_u  = vreinterpretq_u32_s32(tmp1_high);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keyword">const</span> uint32x4_t tmp1_low_u   = vreinterpretq_u32_s32(tmp1_low);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keyword">const</span> uint32x4_t sign_high    = vshrq_n_u32(tmp1_high_u, 31);</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keyword">const</span> uint32x4_t sign_low     = vshrq_n_u32(tmp1_low_u, 31);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="keyword">const</span> int32x4_t  sign_high_s  = vreinterpretq_s32_u32(sign_high);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <span class="keyword">const</span> int32x4_t  sign_low_s   = vreinterpretq_s32_u32(sign_low);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keyword">const</span> int32x4_t  convert_high = vsubq_s32(vshlq_s32(sign_high_s, vnl), sign_high_s);</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <span class="keyword">const</span> int32x4_t  convert_low  = vsubq_s32(vshlq_s32(sign_low_s, vnl), sign_low_s);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        {</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            tmp1_high = vqshlq_s32(vaddq_s32(tmp1_high, convert_high), vn);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            tmp1_low  = vqshlq_s32(vaddq_s32(tmp1_low, convert_low), vn);</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        }</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        {</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;            tmp1_high = vshlq_s32(vaddq_s32(tmp1_high, convert_high), vn);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            tmp1_low  = vshlq_s32(vaddq_s32(tmp1_low, convert_low), vn);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    }</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160; </div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    {</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;        <span class="keywordflow">return</span> vcombine_s16(vqmovn_s32(tmp1_low), vqmovn_s32(tmp1_high));</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    {</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <span class="keywordflow">return</span> vcombine_s16(vmovn_s32(tmp1_low), vmovn_s32(tmp1_high));</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    }</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;}</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160; </div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="keyword">inline</span> int16x8x2_t mul_S16_S16_S16_n_k(<span class="keyword">const</span> int16x8x2_t &amp;src1, <span class="keyword">const</span> int16x8x2_t &amp;src2, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;{</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keyword">const</span> int16x8x2_t result = {{<span class="comment">// First 8 elements</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                 mul_S16_S16_S16_n_loop&lt;is_scale255, is_sat&gt;(src1.val[0], src2.val[0], n),</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                 <span class="comment">// Second 8 elements</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                 mul_S16_S16_S16_n_loop&lt;is_scale255, is_sat&gt;(src1.val[1], src2.val[1], n)}};</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160; </div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;}</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160; </div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="keywordtype">void</span> mul_S16_S16_S16(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;{</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160; </div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160; </div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160; </div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16;</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160; </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        win,</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        {</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160; </div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;            {</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                <span class="keyword">const</span> int16x8x2_t ta1    = {{</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                       vld1q_s16(input1_ptr + x),</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                       vld1q_s16(input1_ptr + x + 8),</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                }};</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                <span class="keyword">const</span> int16x8x2_t ta2    = {{</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                       vld1q_s16(input2_ptr + x),</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                       vld1q_s16(input2_ptr + x + 8),</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                }};</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                <span class="keyword">const</span> int16x8x2_t result = mul_S16_S16_S16_n_k&lt;is_scale255, is_sat&gt;(ta1, ta2, n);</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160; </div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                vst1q_s16(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                vst1q_s16(output_ptr + x + 8, result.val[1]);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            }</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160; </div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            {</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                int32_t tmp = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160; </div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(tmp) * scale255_constant;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160; </div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                    tmp = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(tmp_f + 0.5f);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                }</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                {</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                    <span class="keywordflow">if</span> (tmp &gt;= 0)</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                    {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                        tmp &gt;&gt;= n;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    }</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                    {</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                        uint32_t mask = (1u &lt;&lt; n) - 1;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                        tmp           = (tmp + <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(mask)) &gt;&gt; n;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                    }</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                }</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                {</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                    tmp = (tmp &gt; SHRT_MAX) ? SHRT_MAX : ((tmp &lt; SHRT_MIN) ? SHRT_MIN : tmp);</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                }</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            }</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        },</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;}</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160; </div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="keyword">inline</span> int32x4_t mul_S32_S32_S32_n_loop(<span class="keyword">const</span> int32x4_t &amp;src1, <span class="keyword">const</span> int32x4_t &amp;src2, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;{</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <span class="keyword">const</span> int32x2_t input1_1 = vget_low_s32(src1);</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keyword">const</span> int32x2_t input2_1 = vget_low_s32(src2);</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="keyword">const</span> int32x2_t input1_2 = vget_high_s32(src1);</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keyword">const</span> int32x2_t input2_2 = vget_high_s32(src2);</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160; </div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    int64x2_t tmp_1 = vmull_s32(input1_1, input2_1);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    int64x2_t tmp_2 = vmull_s32(input1_2, input2_2);</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160; </div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="comment">// Apply scaling, conversion and rounding (round to zero)</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="comment">// Right shift amount</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keyword">const</span> int64x2_t vn = vdupq_n_s64(-n);</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    <span class="comment">// Left shift amount</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keyword">const</span> int64x2_t vnl = vdupq_n_s64(n);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <span class="comment">// Calculate conversion bit</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <span class="keyword">const</span> uint64x2_t tmp_1_u   = vreinterpretq_u64_s64(tmp_1);</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keyword">const</span> uint64x2_t sign_1    = vshrq_n_u64(tmp_1_u, 63);</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    <span class="keyword">const</span> int64x2_t  sign_1_s  = vreinterpretq_s64_u64(sign_1);</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <span class="keyword">const</span> int64x2_t  convert_1 = vsubq_s64(vshlq_s64(sign_1_s, vnl), sign_1_s);</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160; </div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keyword">const</span> uint64x2_t tmp_2_u   = vreinterpretq_u64_s64(tmp_2);</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <span class="keyword">const</span> uint64x2_t sign_2    = vshrq_n_u64(tmp_2_u, 63);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keyword">const</span> int64x2_t  sign_2_s  = vreinterpretq_s64_u64(sign_2);</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    <span class="keyword">const</span> int64x2_t  convert_2 = vsubq_s64(vshlq_s64(sign_2_s, vnl), sign_2_s);</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    {</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        tmp_1 = vqshlq_s64(vaddq_s64(tmp_1, convert_1), vn);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        tmp_2 = vqshlq_s64(vaddq_s64(tmp_2, convert_2), vn);</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordflow">return</span> vcombine_s32(vqmovn_s64(tmp_1), vqmovn_s64(tmp_2));</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    }</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    {</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        tmp_1 = vshlq_s64(vaddq_s64(tmp_1, convert_1), vn);</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        tmp_2 = vshlq_s64(vaddq_s64(tmp_2, convert_2), vn);</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="keywordflow">return</span> vcombine_s32(vmovn_s64(tmp_1), vmovn_s64(tmp_2));</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    }</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;}</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160; </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="keyword">inline</span> int32x4x2_t mul_S32_S32_S32_n_k(<span class="keyword">const</span> int32x4x2_t &amp;src1, <span class="keyword">const</span> int32x4x2_t &amp;src2, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;{</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">const</span> int32x4x2_t result = {{<span class="comment">// First 4 elements</span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                 mul_S32_S32_S32_n_loop&lt;is_sat&gt;(src1.val[0], src2.val[0], n),</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                 <span class="comment">// Second 4 elements</span></div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                 mul_S32_S32_S32_n_loop&lt;is_sat&gt;(src1.val[1], src2.val[1], n)}};</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160; </div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;}</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160; </div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="keywordtype">void</span> mul_S32_S32_S32(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;{</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160; </div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    Window win = window;</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160; </div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 8;</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src1-&gt;info()-&gt;tensor_shape().x() != src2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160; </div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    {</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160; </div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        non_broadcast_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160; </div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160; </div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;            win,</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;            {</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160; </div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                <span class="keyword">const</span> int32_t broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    broadcast_value_vec = vdupq_n_s32(broadcast_value);</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160; </div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                {</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                    <span class="keyword">const</span> int32x4x2_t broadcast_v     = {{</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                            broadcast_value_vec,</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                            broadcast_value_vec,</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                    }};</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;                    <span class="keyword">const</span> int32x4x2_t non_broadcast_v = {{</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                        vld1q_s32(non_broadcast_input_ptr + x),</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                        vld1q_s32(non_broadcast_input_ptr + x + 4),</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                    }};</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                    <span class="keyword">const</span> int32x4x2_t result          = mul_S32_S32_S32_n_k&lt;is_sat&gt;(broadcast_v, non_broadcast_v, n);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160; </div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                    vst1q_s32(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                    vst1q_s32(output_ptr + x + 4, result.val[1]);</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                }</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160; </div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                {</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                    int64_t tmp =</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                        <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(broadcast_value) * <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x));</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160; </div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                    <span class="keywordflow">if</span> (tmp &gt;= 0)</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                    {</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                        tmp &gt;&gt;= n;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    }</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                    {</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                        uint64_t mask = ((uint64_t)1u &lt;&lt; n) - 1;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                        tmp           = (tmp + <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(mask)) &gt;&gt; n;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                    }</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                    {</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                        tmp = utility::clamp&lt;int64_t, int32_t&gt;(tmp);</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                    }</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                    *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                }</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            },</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;            broadcast_input, non_broadcast_input, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    }</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    {</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160; </div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160; </div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;            win,</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            {</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160; </div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                {</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                    <span class="keyword">const</span> int32x4x2_t ta1    = {{</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                           vld1q_s32(input1_ptr + x),</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                           vld1q_s32(input1_ptr + x + 4),</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                    }};</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                    <span class="keyword">const</span> int32x4x2_t ta2    = {{</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                           vld1q_s32(input2_ptr + x),</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                           vld1q_s32(input2_ptr + x + 4),</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                    }};</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                    <span class="keyword">const</span> int32x4x2_t result = mul_S32_S32_S32_n_k&lt;is_sat&gt;(ta1, ta2, n);</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160; </div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                    vst1q_s32(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                    vst1q_s32(output_ptr + x + 4, result.val[1]);</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;                }</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160; </div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                {</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                    int64_t tmp = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160; </div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                    <span class="keywordflow">if</span> (tmp &gt;= 0)</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                    {</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                        tmp &gt;&gt;= n;</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                    }</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                    {</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                        uint64_t mask = ((uint64_t)1u &lt;&lt; n) - 1;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                        tmp           = (tmp + <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(mask)) &gt;&gt; n;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                    }</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                    {</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                        tmp = utility::clamp&lt;int64_t, int32_t&gt;(tmp);</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                    }</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                    *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                }</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;            },</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;            input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    }</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160; </div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="keywordtype">void</span> c_mul_F32_F32_F32_n(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window)</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;{</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160; </div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    Window win = window;</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160; </div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 8 / <span class="keyword">sizeof</span>(float);</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src1-&gt;info()-&gt;tensor_shape().x() != src2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160; </div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;float, 2&gt;::tag_type;</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160; </div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    {</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160; </div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        non_broadcast_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160; </div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160; </div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;            win,</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;            {</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160; </div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> broadcast_value = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160; </div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                {</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>  a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + 2 * x);</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                    float32x4_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vdupq_n_f32(broadcast_value);</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160; </div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                    <span class="keyword">const</span> float32x4_t mask  = {-1.0f, 1.0f, -1.0f, 1.0f};</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 0), ExactTagType{});</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 1), ExactTagType{});</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 2), ExactTagType{});</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 3), ExactTagType{});</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160; </div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                    <span class="keyword">const</span> float32x4_t tmp0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(tmp00, tmp10);</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                    <span class="keyword">const</span> float32x4_t tmp1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(tmp01, tmp11);</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160; </div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                    float32x4_t res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(tmp0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, mask);</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160; </div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                    res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(res, tmp1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + 2 * x, res);</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                }</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160; </div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                {</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_value0 = *(non_broadcast_input_ptr + 2 * x);</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_value1 = *(non_broadcast_input_ptr + 2 * x + 1);</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                    <span class="keyword">auto</span>       res1                 = broadcast_value * (non_broadcast_value0 - non_broadcast_value1);</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                    <span class="keyword">auto</span>       res2                 = broadcast_value * (non_broadcast_value1 + non_broadcast_value0);</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                    *(output_ptr + 2 * x)           = res1;</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                    *(output_ptr + 2 * x + 1)       = res2;</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                }</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;            },</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            broadcast_input, non_broadcast_input, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    }</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    {</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160; </div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160; </div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            win,</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;            {</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160; </div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;                {</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                    <span class="keyword">const</span> float32x4_t a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + 2 * x);</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                    float32x4_t       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + 2 * x);</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160; </div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                    <span class="keyword">const</span> float32x4_t mask  = {-1.0f, 1.0f, -1.0f, 1.0f};</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 0), ExactTagType{});</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 1), ExactTagType{});</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 2), ExactTagType{});</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                    <span class="keyword">const</span> float32x2_t tmp11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, 3), ExactTagType{});</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160; </div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                    <span class="keyword">const</span> float32x4_t tmp0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(tmp00, tmp10);</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                    <span class="keyword">const</span> float32x4_t tmp1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(tmp01, tmp11);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160; </div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                    float32x4_t res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(tmp0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160; </div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">wrapper::vrev64</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, mask);</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160; </div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                    res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(res, tmp1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + 2 * x, res);</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                }</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160; </div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                {</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a0             = *(input1_ptr + 2 * x);</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a1             = *(input1_ptr + 2 * x + 1);</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b0             = *(input2_ptr + 2 * x);</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b1             = *(input2_ptr + 2 * x + 1);</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                    <span class="keyword">auto</span>       res1           = a0 * b0 - a1 * b1;</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                    <span class="keyword">auto</span>       res2           = a0 * b1 + a1 * b0;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                    *(output_ptr + 2 * x)     = res1;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                    *(output_ptr + 2 * x + 1) = res2;</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                }</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;            },</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;            input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    }</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;}</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160; </div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;<span class="keywordtype">void</span> mul_U8_U8_S16(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;{</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160; </div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160; </div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160; </div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(uint8_t);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160; </div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        win,</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        {</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160; </div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;            {</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                <span class="keyword">const</span> uint8x16_t bv = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                <span class="keyword">const</span> uint8x16_t av = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160; </div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                uint16x8_t tmp_low  = vmovl_u8(vget_low_u8(av));</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                uint16x8_t tmp_high = vmovl_u8(vget_high_u8(av));</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                tmp_low             = vmulq_u16(tmp_low, vmovl_u8(vget_low_u8(bv)));</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                tmp_high            = vmulq_u16(tmp_high, vmovl_u8(vget_high_u8(bv)));</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160; </div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                {</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                    tmp_low  = scale255_U16_U16(tmp_low);</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                    tmp_high = scale255_U16_U16(tmp_high);</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                }</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                {</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                    <span class="keyword">const</span> int16x8_t vn = vdupq_n_s16(-n);</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160; </div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                    <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                    {</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                        tmp_low  = vqshlq_u16(tmp_low, vn);</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                        tmp_high = vqshlq_u16(tmp_high, vn);</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                    }</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;                    {</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;                        tmp_low  = vshlq_u16(tmp_low, vn);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                        tmp_high = vshlq_u16(tmp_high, vn);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                    }</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                }</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160; </div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                {</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> uint16x8_t max = vdupq_n_u16(SHRT_MAX);</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160; </div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                    tmp_low  = vminq_u16(tmp_low, max);</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                    tmp_high = vminq_u16(tmp_high, max);</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                }</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160; </div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                vst1q_s16(output_ptr + x, vreinterpretq_s16_u16(tmp_low));</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;                vst1q_s16(output_ptr + x + 8, vreinterpretq_s16_u16(tmp_high));</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;            }</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160; </div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;            {</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                int32_t tmp = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160; </div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;                {</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(tmp) * scale255_constant;</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                    tmp         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(tmp_f + 0.5f);</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                }</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                {</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                    tmp &gt;&gt;= n;</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                }</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160; </div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                {</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                    tmp = (tmp &gt; SHRT_MAX) ? SHRT_MAX : tmp;</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                }</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160; </div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            }</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        },</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;}</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160; </div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="keywordtype">void</span> mul_S16_U8_S16(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;{</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    Window win        = window;</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160; </div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160; </div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160; </div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16;</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160; </div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;        win,</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        {</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160; </div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;            <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;            {</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                <span class="keyword">const</span> int16x8x2_t ta1  = {{</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                     vld1q_s16(input1_ptr + x),</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                     vld1q_s16(input1_ptr + x + 8),</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                }};</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                <span class="keyword">const</span> uint8x8x2_t ta2u = {{</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;                    vld1_u8(input2_ptr + x),</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;                    vld1_u8(input2_ptr + x + 8),</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                }};</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;                <span class="keyword">const</span> int16x8x2_t ta2  = {</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;                     {vreinterpretq_s16_u16(vmovl_u8(ta2u.val[0])), vreinterpretq_s16_u16(vmovl_u8(ta2u.val[1]))}};</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160; </div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                <span class="keyword">const</span> int16x8x2_t result = mul_S16_S16_S16_n_k&lt;is_scale255, is_sat&gt;(ta1, ta2, n);</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160; </div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                vst1q_s16(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                vst1q_s16(output_ptr + x + 8, result.val[1]);</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;            }</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160; </div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;            {</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                int32_t tmp = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input1_ptr + x)) * <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(input2_ptr + x));</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160; </div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                <span class="keywordflow">if</span> (is_scale255)</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                {</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(tmp) * scale255_constant;</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160; </div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                    tmp = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(tmp_f + 0.5f);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;                }</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                {</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                    <span class="keywordflow">if</span> (tmp &gt;= 0)</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                    {</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                        tmp &gt;&gt;= n;</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                    }</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                    {</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                        uint32_t mask = (1u &lt;&lt; n) - 1;</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                        tmp           = (tmp + <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(mask)) &gt;&gt; n;</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                    }</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                }</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;                <span class="keywordflow">if</span> (is_sat)</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;                {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;                    tmp = (tmp &gt; SHRT_MAX) ? SHRT_MAX : ((tmp &lt; SHRT_MIN) ? SHRT_MIN : tmp);</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                }</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;            }</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;        },</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;        input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;}</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160; </div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> is_scale255, <span class="keywordtype">bool</span> is_sat&gt;</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="keywordtype">void</span> mul_U8_S16_S16(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;{</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="comment">// Simply swap the two input buffers</span></div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    mul_S16_U8_S16&lt;is_scale255, is_sat&gt;(src2, src1, out, window, n);</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;}</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160; </div>
<div class="line"><a name="l01503"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#adbb705173f17344d6485396a534e277b"> 1503</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#adbb705173f17344d6485396a534e277b">CpuMulKernel::configure</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>   *src1,</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>   *src2,</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>   *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;                             <span class="keywordtype">float</span>          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>,</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                             <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>  overflow_policy,</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;                             <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;{</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(rounding_policy);</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160; </div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, overflow_policy, rounding_policy));</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160; </div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), src2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160; </div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="comment">// Auto initialize dst if not initialized</span></div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6bd175f94838df9aed06d32452df92d3">set_shape_if_empty</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, out_shape);</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160; </div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    _scale          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    _scale_exponent = 0;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    _func_quantized = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    _func_int       = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    _func_float     = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160; </div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="keywordtype">bool</span> is_scale_255 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="comment">// Check and validate scaling factor</span></div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    <span class="keywordflow">if</span> (std::abs(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> - scale255_constant) &lt; 0.00001f)</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    {</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        is_scale_255 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    }</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    {</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;        <span class="keywordtype">int</span> exponent = 0;</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160; </div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;        std::frexp(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, &amp;exponent);</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160; </div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        <span class="comment">// Store the positive exponent. We know that we compute 1/2^n</span></div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        <span class="comment">// Additionally we need to subtract 1 to compensate that frexp used a mantissa of 0.5</span></div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        _scale_exponent = std::abs(exponent - 1);</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    }</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160; </div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_input1 = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>();</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_input2 = src2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>();</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_output = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type();</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_sat    = (overflow_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160; </div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <span class="keywordflow">switch</span> (dt_input1)</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    {</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;            <span class="keywordflow">if</span> (dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; dt_output == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;            {</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;                <span class="keywordflow">if</span> (mul_q8_neon_fixedpoint_possible(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>))</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;                {</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;                    _func_quantized = &amp;mul_q8_neon_fixedpoint&lt;uint8_t&gt;;</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;                }</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;                {</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                    _func_quantized = &amp;mul_saturate_quantized_8&lt;uint8_t&gt;;</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                }</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;            }</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;            <span class="keywordflow">if</span> (dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;            {</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;                <span class="keywordflow">if</span> (mul_q8_neon_fixedpoint_possible(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>))</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;                {</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;                    _func_quantized = &amp;mul_q8_neon_fixedpoint&lt;int8_t&gt;;</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                }</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;                {</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                    _func_quantized = &amp;mul_saturate_quantized_8&lt;int8_t&gt;;</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                }</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;            }</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;            <span class="keywordflow">if</span> (dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; dt_output == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>)</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;            {</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;                _func_quantized = &amp;mul_saturate_QSYMM16_QSYMM16_QSYMM16;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;            }</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dt_input2 == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; dt_output == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;            {</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;                _func_int = &amp;mul_QSYMM16_QSYMM16_S32;</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;            }</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;            {</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;                <span class="keywordflow">if</span> (is_scale_255)</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;                {</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;                    _func_int = is_sat ? &amp;mul_S16_U8_S16&lt;true, true&gt; : &amp;mul_S16_U8_S16&lt;true, false&gt;;</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;                }</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;                {</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;                    _func_int = is_sat ? &amp;mul_S16_U8_S16&lt;false, true&gt; : &amp;mul_S16_U8_S16&lt;false, false&gt;;</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;                }</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;            }</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;            {</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;                <span class="keywordflow">if</span> (is_scale_255)</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;                {</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;                    _func_int = is_sat ? &amp;mul_S16_S16_S16&lt;true, true&gt; : &amp;mul_S16_S16_S16&lt;true, false&gt;;</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;                }</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;                {</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                    _func_int = is_sat ? &amp;mul_S16_S16_S16&lt;false, true&gt; : &amp;mul_S16_S16_S16&lt;false, false&gt;;</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                }</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;            }</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> == dt_output)</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;            {</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                _func_int = is_sat ? &amp;mul_S32_S32_S32&lt;true&gt; : &amp;mul_S32_S32_S32&lt;false&gt;;</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;            }</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_output)</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;            {</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;                <span class="keywordflow">if</span> (is_scale_255)</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;                {</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_U8_U8&lt;true, true&gt; : &amp;mul_U8_U8_U8&lt;true, false&gt;;</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;                }</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;                {</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_U8_U8&lt;false, true&gt; : &amp;mul_U8_U8_U8&lt;false, false&gt;;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;                }</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;            }</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;            {</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;                <span class="keywordflow">if</span> (is_scale_255)</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;                {</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_U8_S16&lt;true, true&gt; : &amp;mul_U8_U8_S16&lt;true, false&gt;;</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;                }</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;                {</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_U8_S16&lt;false, true&gt; : &amp;mul_U8_U8_S16&lt;false, false&gt;;</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;                }</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;            }</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_input2 &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a> == dt_output)</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;            {</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;                <span class="keywordflow">if</span> (is_scale_255)</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;                {</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_S16_S16&lt;true, true&gt; : &amp;mul_U8_S16_S16&lt;true, false&gt;;</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;                }</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;                {</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;                    _func_int = is_sat ? &amp;mul_U8_S16_S16&lt;false, true&gt; : &amp;mul_U8_S16_S16&lt;false, false&gt;;</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;                }</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            }</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;            _func_float = <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a26fa1b6549066348f60eabe7c9bb53df">REGISTER_FP16_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aca645d55b58aed670b5fea206486df9a">cpu::mul_F16_F16_F16</a>);</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;            _func_float = <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a682bd642e8e78633d42922f0158858c1">REGISTER_FP32_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a01fe446199ad99735bc0fcc4c4734b01">cpu::mul_F32_F32_F32</a>);</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;You called with the wrong img formats&quot;</span>);</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    }</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160; </div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <span class="comment">// Configure kernel window</span></div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    std::tie(win, _split_dimension) = <a class="code" href="namespacearm__compute.xhtml#a8efcd2283ad0db0f90c88e146a27f01d">calculate_squashed_or_max_window</a>(*src1, *src2);</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160; </div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    ICpuKernel::configure(win);</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;}</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160; </div>
<div class="line"><a name="l01668"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#ae84c81edc1474e79618df29c6a621797"> 1668</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuMulKernel::get_mws</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;platform, <span class="keywordtype">size_t</span> thread_count)<span class="keyword"> const</span></div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(thread_count);</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160; </div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP32_KERNELS)</span></div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    <span class="keywordflow">if</span> (this-&gt;_func_float == &amp;<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a01fe446199ad99735bc0fcc4c4734b01">mul_F32_F32_F32</a>)</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;    {</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        <span class="keywordtype">size_t</span> mws = <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">ICPPKernel::default_mws</a>;</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;        <span class="keywordflow">if</span> (platform.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a1d1a4992ced850f18f97b27492bbb081">get_cpu_model</a>() == <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">CPUModel::N1</a>)</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        {</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;            mws = default_mws_N1_fp32_neon;</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        }</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (platform.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a1d1a4992ced850f18f97b27492bbb081">get_cpu_model</a>() == <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">CPUModel::V1</a>)</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;        {</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;            mws = default_mws_V1_fp32_neon;</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        }</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;        {</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;            <span class="keywordflow">if</span> (_split_dimension == <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;            {</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;                <span class="comment">// Don&#39;t split the work load too small if the tensor has been reinterpreted as 1D.</span></div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;                <span class="comment">// This number is loosely chosen as threading overhead in each platform varies wildly.</span></div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;                <span class="keywordflow">return</span> default_mws_other_platforms_1d_tensor;</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;            }</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">default_mws</a>;</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        }</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160; </div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        <span class="comment">// tensor is 1D or was re-interpreted as 1D</span></div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>().<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>().num_dimensions() == 1)</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;        {</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;            <span class="keywordflow">return</span> mws;</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        }</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        {</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;            <span class="comment">// scale mws down by the number of elements along all the dimensions (x, z, w, etc) except the one</span></div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;            <span class="comment">// that we parallelize along (the y dimension). This allows for parallelization when the Y_SIZE is small</span></div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;            <span class="comment">// but the other sizes are large, which boosts performance.</span></div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;            mws = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(mws / (this-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>().<a class="code" href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">num_iterations_total</a>() / this-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>().<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(1)));</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;            <span class="keywordflow">return</span> std::max(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(1), mws);</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;        }</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    }</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* ENABLE_FP32_KERNELS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(platform);</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_FP32_KERNELS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    <span class="keywordflow">if</span> (_split_dimension == <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    {</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;        <span class="comment">// Don&#39;t split the work load too small if the tensor has been reinterpreted as 1D.</span></div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;        <span class="comment">// This number is loosely chosen as threading overhead in each platform varies wildly.</span></div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="keywordflow">return</span> default_mws_other_platforms_1d_tensor;</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    }</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">default_mws</a>;</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;}</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160; </div>
<div class="line"><a name="l01721"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a1780225eecd330e643da5acc69ba8af0"> 1721</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a1780225eecd330e643da5acc69ba8af0">CpuMulKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1,</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src2,</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;                              <span class="keywordtype">float</span>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>,</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>      overflow_policy,</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>     rounding_policy)</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;{</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, overflow_policy, rounding_policy));</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160; </div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;}</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160; </div>
<div class="line"><a name="l01734"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da"> 1734</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuMulKernel::run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;{</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160; </div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    <span class="keyword">auto</span> src1 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    <span class="keyword">auto</span> src2 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>  = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160; </div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;    <span class="keywordflow">if</span> (_func_quantized != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    {</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        (*_func_quantized)(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _scale);</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    }</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_func_int != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    {</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        (*_func_int)(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _scale_exponent);</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    }</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    {</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func_float == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        (*_func_float)(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, _scale);</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    }</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;}</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160; </div>
<div class="line"><a name="l01759"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd"> 1759</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuMulKernel::name</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuMulKernel&quot;</span>;</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;}</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160; </div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;{</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> validate_arguments_complex(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;{</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src1, 2, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src2, 2, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160; </div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), src2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160; </div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(out_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a>() == 0, <span class="stringliteral">&quot;Inputs are not broadcast compatible&quot;</span>);</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160; </div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    <span class="comment">// Validate in case of configured dst</span></div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;total_size() &gt; 0)</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    {</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, 2, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(out_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), 0),</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;                                        <span class="stringliteral">&quot;Wrong shape for dst&quot;</span>);</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    }</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160; </div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;}</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160; </div>
<div class="line"><a name="l01787"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#acd418ce12068afeffc4f4df5b383dbdf"> 1787</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#acd418ce12068afeffc4f4df5b383dbdf">CpuComplexMulKernel::configure</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;{</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(validate_arguments_complex(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>));</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160; </div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), src2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160; </div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    <span class="comment">// Auto initialize dst if not initialized</span></div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> out_info(out_shape, src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a>(), src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>());</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, out_info);</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160; </div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    <span class="comment">// Configure kernel window</span></div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(out_shape);</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160; </div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    ICpuKernel::configure(win);</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;}</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160; </div>
<div class="line"><a name="l01804"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a5d9d75c02e61acb032453627e81ead23"> 1804</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a5d9d75c02e61acb032453627e81ead23">CpuComplexMulKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;{</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_arguments_complex(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>));</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160; </div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;}</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160; </div>
<div class="line"><a name="l01812"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da"> 1812</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuComplexMulKernel::run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;{</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160; </div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    <span class="keyword">auto</span> src1 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;    <span class="keyword">auto</span> src2 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>  = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160; </div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;    c_mul_F32_F32_F32_n(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;}</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160; </div>
<div class="line"><a name="l01825"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd"> 1825</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuComplexMulKernel::name</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuComplexMulKernel&quot;</span>;</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;}</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;} <span class="comment">// namespace kernels</span></div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel_xhtml_aef1a10d4d6422ca58d53d8414d5954bd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">arm_compute::cpu::kernels::CpuComplexMulKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01825">CpuMulKernel.cpp:1825</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">arm_compute::CPUModel::N1</a></div><div class="ttdeci">@ N1</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00410">NEAsymm.h:410</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a926c75703af37a5677a6bac0198902b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a926c75703af37a5677a6bac0198902b0">arm_compute::vquantize_qsymm16</a></div><div class="ttdeci">qsymm16x8x2_t vquantize_qsymm16(const float32x4x4_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 16 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00191">NESymm.h:191</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_ad7829ae79223ab87f9da4c0bd7d229ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">arm_compute::ITensorInfo::num_channels</a></div><div class="ttdeci">virtual size_t num_channels() const =0</div><div class="ttdoc">The number of channels for each tensor element.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="acpu_2kernels_2mul_2generic_2neon_2list_8h_xhtml"><div class="ttname"><a href="cpu_2kernels_2mul_2generic_2neon_2list_8h.xhtml">list.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ab4daca084ad9eabfc8de231929477ed6">arm_compute::CPUModel::V1</a></div><div class="ttdeci">@ V1</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">CpuDirectConv2dKernel.cpp:57</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l01079">Validate.h:1079</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel_xhtml_a1780225eecd330e643da5acc69ba8af0"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a1780225eecd330e643da5acc69ba8af0">arm_compute::cpu::kernels::CpuMulKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01721">CpuMulKernel.cpp:1721</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel_xhtml_acd418ce12068afeffc4f4df5b383dbdf"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#acd418ce12068afeffc4f4df5b383dbdf">arm_compute::cpu::kernels::CpuComplexMulKernel::configure</a></div><div class="ttdeci">void configure(ITensorInfo *src1, ITensorInfo *src2, ITensorInfo *dst)</div><div class="ttdoc">Initialise the kernel's src, dst and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01787">CpuMulKernel.cpp:1787</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00196">Window.inl:196</a></div></div>
<div class="ttc" id="a_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="a_n_e_asymm_8h_xhtml"><div class="ttname"><a href="_n_e_asymm_8h.xhtml">NEAsymm.h</a></div></div>
<div class="ttc" id="a_n_e_symm_8h_xhtml"><div class="ttname"><a href="_n_e_symm_8h.xhtml">NESymm.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00063">ITensorPack.cpp:63</a></div></div>
<div class="ttc" id="asrc_2core_2common_2_registrars_8h_xhtml_a26fa1b6549066348f60eabe7c9bb53df"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml#a26fa1b6549066348f60eabe7c9bb53df">REGISTER_FP16_NEON</a></div><div class="ttdeci">#define REGISTER_FP16_NEON(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_registrars_8h_source.xhtml#l00048">Registrars.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="asrc_2core_2common_2_registrars_8h_xhtml"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml">Registrars.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel_xhtml_a883429dd6cf828bfdd64b255afc458da"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">arm_compute::cpu::kernels::CpuComplexMulKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01812">CpuMulKernel.cpp:1812</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">Validate.h:677</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">Validate.h:952</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00066">CPPTypes.h:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdeci">@ QSYMM16</div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="asrc_2core_2common_2_registrars_8h_xhtml_a682bd642e8e78633d42922f0158858c1"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml#a682bd642e8e78633d42922f0158858c1">REGISTER_FP32_NEON</a></div><div class="ttdeci">#define REGISTER_FP32_NEON(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_registrars_8h_source.xhtml#l00074">Registrars.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdeci">@ TO_NEAREST_UP</div><div class="ttdoc">Rounds to nearest value; half rounds away from zero.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">arm_compute::ConvertPolicy::WRAP</a></div><div class="ttdeci">@ WRAP</div><div class="ttdoc">Wrap around.</div></div>
<div class="ttc" id="astructarm__compute_1_1_qasymm8_quantization_helper_xhtml_a66704ef21ed85f31075f412a965b9b7b"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">arm_compute::Qasymm8QuantizationHelper::quantize</a></div><div class="ttdeci">static QUANTIZED_TYPE quantize(float value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Quantize a value given a 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00214">QuantizationInfo.h:214</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_rounding_8h_source.xhtml#l00030">Rounding.h:30</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a000c70e9839ed364ab7343de880a4d35"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">arm_compute::ITensorPack::get_const_tensor</a></div><div class="ttdeci">const ITensor * get_const_tensor(int id) const</div><div class="ttdoc">Get constant tensor of a given id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00053">ITensorPack.cpp:53</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_af3f7b591c3d178847a92ea92c4bb1d43"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#af3f7b591c3d178847a92ea92c4bb1d43">arm_compute::wrapper::vsubl</a></div><div class="ttdeci">int16x8_t vsubl(const int8x8_t &amp;a, const int8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00107">sub.h:107</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="asrc_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00117">Validate.h:117</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00043">AutoConfiguration.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a0fdcb923dfd4c74858cc2bc326321efb"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const</div><div class="ttdoc">Collapses all dimensions to a single linear total size.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00175">TensorShape.h:175</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::DataType::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">unsigned 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::DataType::S16</a></div><div class="ttdeci">@ S16</div><div class="ttdoc">signed 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a45d610a8bc262f7007c934293361e888"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">arm_compute::detail::have_different_dimensions</a></div><div class="ttdeci">bool have_different_dimensions(const Dimensions&lt; T &gt; &amp;dim1, const Dimensions&lt; T &gt; &amp;dim2, unsigned int upper_dim)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00051">Validate.h:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdeci">@ QASYMM8_SIGNED</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00203">Validate.h:203</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdeci">@ SATURATE</div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel_xhtml_aef1a10d4d6422ca58d53d8414d5954bd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">arm_compute::cpu::kernels::CpuMulKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01759">CpuMulKernel.cpp:1759</a></div></div>
<div class="ttc" id="a_cpu_mul_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_mul_kernel_8h.xhtml">CpuMulKernel.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_qasymm8_quantization_helper_xhtml_a912f8a4d002b2f74c071627a99469463"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">arm_compute::Qasymm8QuantizationHelper::dequantize</a></div><div class="ttdeci">static float dequantize(QUANTIZED_TYPE value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00266">QuantizationInfo.h:266</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel_xhtml_adbb705173f17344d6485396a534e277b"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#adbb705173f17344d6485396a534e277b">arm_compute::cpu::kernels::CpuMulKernel::configure</a></div><div class="ttdeci">void configure(ITensorInfo *src1, ITensorInfo *src2, ITensorInfo *dst, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Initialise the kernel's input, dst and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel.cpp:1503</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00180">CPPTypes.h:180</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6bd175f94838df9aed06d32452df92d3"><div class="ttname"><a href="namespacearm__compute.xhtml#a6bd175f94838df9aed06d32452df92d3">arm_compute::set_shape_if_empty</a></div><div class="ttdeci">bool set_shape_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape)</div><div class="ttdoc">Set the shape to the specified value if the current assignment is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00095">AutoConfiguration.h:95</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00041">TensorInfo.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9ad60d47682e81883cb85a8ca97f3460"><div class="ttname"><a href="namespacearm__compute.xhtml#a9ad60d47682e81883cb85a8ca97f3460">arm_compute::qsymm16x8x2_t</a></div><div class="ttdeci">int16x8x2_t qsymm16x8x2_t</div><div class="ttdoc">16 bit quantized symmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00039">NESymm.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="asrc_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aca645d55b58aed670b5fea206486df9a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aca645d55b58aed670b5fea206486df9a">arm_compute::cpu::mul_F16_F16_F16</a></div><div class="ttdeci">void mul_F16_F16_F16(const ITensor *src1, const ITensor *src2, ITensor *out, const Window &amp;window, float scale)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a33d1899b4ff31e4a36f93fa618978196"><div class="ttname"><a href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">arm_compute::qsymm16_t</a></div><div class="ttdeci">int16_t qsymm16_t</div><div class="ttdoc">16 bit quantized symmetric scalar value</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00038">QuantizationInfo.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00245">Error.h:245</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8efcd2283ad0db0f90c88e146a27f01d"><div class="ttname"><a href="namespacearm__compute.xhtml#a8efcd2283ad0db0f90c88e146a27f01d">arm_compute::calculate_squashed_or_max_window</a></div><div class="ttdeci">std::pair&lt; Window, size_t &gt; calculate_squashed_or_max_window(const ITensorInfo &amp;src0, const ITensorInfo &amp;src1)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00256">WindowHelpers.cpp:256</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00591">NEAsymm.h:591</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00353">Types.h:353</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdeci">@ TO_ZERO</div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a0654fca130488c15b4b66a9b7131c142"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">arm_compute::Window::num_iterations_total</a></div><div class="ttdeci">size_t num_iterations_total() const</div><div class="ttdoc">Return the total number of iterations needed to iterate through the entire window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00308">Window.inl:308</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a58838fbdce5b5330d84e62329b45ff7d"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;...shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00214">TensorShape.h:214</a></div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel_xhtml_a5d9d75c02e61acb032453627e81ead23"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a5d9d75c02e61acb032453627e81ead23">arm_compute::cpu::kernels::CpuComplexMulKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01804">CpuMulKernel.cpp:1804</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a01fe446199ad99735bc0fcc4c4734b01"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a01fe446199ad99735bc0fcc4c4734b01">arm_compute::cpu::mul_F32_F32_F32</a></div><div class="ttdeci">void mul_F32_F32_F32(const ITensor *src1, const ITensor *src2, ITensor *out, const Window &amp;window, float scale)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">fp32.cpp:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel_xhtml_a883429dd6cf828bfdd64b255afc458da"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">arm_compute::cpu::kernels::CpuMulKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01734">CpuMulKernel.cpp:1734</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00616">NEAsymm.h:616</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00083">CoreTypes.h:83</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_ad6dda2ca87714e265e1521607c2fa7d0"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">arm_compute::ICPPKernel::default_mws</a></div><div class="ttdeci">static constexpr size_t default_mws</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00041">ICPPKernel.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel_xhtml_ae84c81edc1474e79618df29c6a621797"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">arm_compute::cpu::kernels::CpuMulKernel::get_mws</a></div><div class="ttdeci">size_t get_mws(const CPUInfo &amp;platform, size_t thread_count) const override</div><div class="ttdoc">Return minimum workload size of the relevant kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel.cpp:1668</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa7a641703a9c98932d775d915bf7a3e5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">arm_compute::wrapper::vrev64</a></div><div class="ttdeci">uint8x8_t vrev64(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="rev64_8h_source.xhtml#l00039">rev64.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_a1d1a4992ced850f18f97b27492bbb081"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a1d1a4992ced850f18f97b27492bbb081">arm_compute::CPUInfo::get_cpu_model</a></div><div class="ttdeci">CPUModel get_cpu_model(unsigned int cpuid) const</div><div class="ttdoc">Gets the cpu model for a given cpuid.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00119">CPPTypes.cpp:119</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a452ce01d9794d6b04de3699ddbf4d2d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">arm_compute::support::cpp11::lround</a></div><div class="ttdeci">long lround(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero and cast to long.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00200">ToolchainSupport.h:200</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_cpu_mul_kernel_8cpp.xhtml">CpuMulKernel.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
