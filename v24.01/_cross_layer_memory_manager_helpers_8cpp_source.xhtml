<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/detail/CrossLayerMemoryManagerHelpers.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_cross_layer_memory_manager_helpers_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CrossLayerMemoryManagerHelpers.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cross_layer_memory_manager_helpers_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cross_layer_memory_manager_helpers_8h.xhtml">arm_compute/graph/detail/CrossLayerMemoryManagerHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_registry_8h.xhtml">arm_compute/graph/backends/BackendRegistry.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_context_8h.xhtml">arm_compute/graph/GraphContext.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_manager_8h.xhtml">arm_compute/graph/GraphManager.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_node_8h.xhtml">arm_compute/graph/INode.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>graph</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span>detail</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">using</span> HandleCountPair     = std::pair&lt;ITensorHandle *, unsigned int&gt;;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">using</span> HandleCounter       = std::map&lt;HandleCountPair::first_type, HandleCountPair::second_type&gt;;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">using</span> TargetHandleCounter = std::map&lt;Target, HandleCounter&gt;;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/** Holds managed IO tensor handles if a task */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">struct </span>TaskHandles</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a7e6d1c3bf0d5e12010091e0bd57b11bf">   56</a></span>&#160;    std::vector&lt;std::pair&lt;ITensorHandle *, IMemoryGroup *&gt;&gt; <a class="code" href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a7e6d1c3bf0d5e12010091e0bd57b11bf">input_handles</a>  = {}; <span class="comment">/**&lt; Input handles to a task */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a9efbfa7013d05d44dcfcfb06ec686566">   57</a></span>&#160;    std::vector&lt;std::pair&lt;ITensorHandle *, IMemoryGroup *&gt;&gt; <a class="code" href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a9efbfa7013d05d44dcfcfb06ec686566">output_handles</a> = {}; <span class="comment">/**&lt; Output handles of a task */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/** Returns memory group depending on handle backend type</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * @param[in] ctx    Graph context</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * @param[in] handle Tensor handle</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @return Memory groupb</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;IMemoryGroup *get_memory_group_from_handle(GraphContext &amp;ctx, ITensorHandle *handle)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(handle == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> ctx.memory_management_ctx(handle-&gt;target())-&gt;cross_group.get();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/** Get handles of const tensors of graph</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @param[in] g Graph</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @return Handles of const tensors of graph</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;std::set&lt;ITensorHandle *&gt; get_const_handles(<span class="keyword">const</span> Graph &amp;g)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::set&lt;NodeType&gt; const_node_types = {<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">NodeType::Input</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">NodeType::Const</a>};</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::set&lt;ITensorHandle *&gt; const_tensors;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;node : nodes)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// If its a const node:</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (node != <span class="keyword">nullptr</span> &amp;&amp; const_node_types.find(node-&gt;type()) != <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(const_node_types))</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="comment">// TODO (geopin01) : Create IO iterator wrappers</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// Add all its inputs / outputs to the list of constant handles</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node-&gt;num_inputs(); ++i)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">if</span> (node-&gt;input(i) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    const_tensors.insert(node-&gt;input(i)-&gt;handle()-&gt;parent_handle());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node-&gt;num_outputs(); ++i)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> (node-&gt;output(i) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    const_tensors.insert(node-&gt;output(i)-&gt;handle()-&gt;parent_handle());</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> const_tensors;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/** Builds a list of all the transition handles (Handles that are used to link two nodes)</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * @param[in] ctx           Graph context</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @param[in] task          Workload task</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @param[in] const_tensors Constant tensors</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @return List of transition handles</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;TaskHandles</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;get_transition_handles(GraphContext &amp;ctx, ExecutionTask &amp;task, <span class="keyword">const</span> std::set&lt;ITensorHandle *&gt; &amp;const_tensors)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(task.node == <span class="keyword">nullptr</span> || (task.task == <span class="keyword">nullptr</span> &amp;&amp; !<a class="code" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a>(task.node)));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    INode &amp;node = *task.node;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    TaskHandles transition_handles;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Add input handles</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.input_edges().size(); ++i)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        Edge *input_edge = node.input_edge(i);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// If this input is the output of another node</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span> (input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;tensor() != <span class="keyword">nullptr</span> &amp;&amp;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            const_tensors.find(input_edge-&gt;tensor()-&gt;handle()-&gt;parent_handle()) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(const_tensors))</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// Then add it to the list of transition buffers</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            ITensorHandle *tensor_handle = input_edge-&gt;tensor()-&gt;handle()-&gt;parent_handle();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            IMemoryGroup  *mm_group      = get_memory_group_from_handle(ctx, tensor_handle);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            transition_handles.input_handles.emplace_back(std::make_pair(tensor_handle, mm_group));</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Add output handles</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.num_outputs(); ++i)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> *output_tensor = node.output(i);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// If this output is used as an input for another node</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> (output_tensor != <span class="keyword">nullptr</span> &amp;&amp;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            const_tensors.find(output_tensor-&gt;handle()-&gt;parent_handle()) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(const_tensors))</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            ITensorHandle *tensor_handle = output_tensor-&gt;handle()-&gt;parent_handle();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            IMemoryGroup  *mm_group      = get_memory_group_from_handle(ctx, tensor_handle);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            transition_handles.output_handles.emplace_back(std::make_pair(tensor_handle, mm_group));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> transition_handles;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">/** Counts handles refcount for each input handle of each target</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"> * @param[in]     task           Execution task containing the managed handles</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> * @param[in,out] handle_counter Data structure that keeps the handles reference count</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keywordtype">void</span> count_input_handles_per_target(<span class="keyword">const</span> TaskHandles &amp;task_handles, TargetHandleCounter &amp;handle_counter)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;handle : task_handles.input_handles)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        ITensorHandle *key            = handle.first;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        HandleCounter &amp;target_counter = handle_counter[key-&gt;target()];</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> (target_counter.find(key) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(target_counter))</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            target_counter.emplace(std::make_pair(key, 1));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            ++target_counter[key];</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">/** Calculates the lifetime of each tensor handle</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * @param[in, out] tasks_handles Tensor handles for each task</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> * @param[in]      hc            Data structure that keeps the handles reference count</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keywordtype">void</span> configure_handle_lifetime(std::vector&lt;TaskHandles&gt; &amp;tasks_handles, <span class="keyword">const</span> HandleCounter &amp;hc)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Identify max number of tensors in flight</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    HandleCounter tensors_in_flight;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Acquires the given handles and sets them as in flight if they aren&#39;t already</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">auto</span> acquire = [&amp;](std::vector&lt;std::pair&lt;ITensorHandle *, IMemoryGroup *&gt;&gt; &amp;handles)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;handle : handles)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            ITensorHandle *parent_handle = handle.first;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(parent_handle == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="comment">// If the tensor is not already in flight:</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">if</span> (tensors_in_flight.find(parent_handle) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(tensors_in_flight))</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(hc.find(parent_handle) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(hc));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="comment">// Then add it to the list of in flight tensors</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                tensors_in_flight.insert(std::make_pair(parent_handle, hc.at(parent_handle)));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="comment">// Start of allocation&#39;s lifetime</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                parent_handle-&gt;manage(handle.second);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    };</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;task_handle : tasks_handles)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Marking all the input and output tensors of the task as in flight</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        acquire(task_handle.input_handles);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        acquire(task_handle.output_handles);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="comment">// Releasing the input tensors</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;input_handle : task_handle.input_handles)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            ITensorHandle *ihandle = input_handle.first;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(ihandle == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensors_in_flight.find(ihandle) == <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(tensors_in_flight));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            --tensors_in_flight[ihandle];</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordflow">if</span> (tensors_in_flight[ihandle] &lt;= 0)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                <span class="comment">// Remove tensor for tensors in flight</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                tensors_in_flight.erase(ihandle);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">// End of allocation&#39;s lifetime</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                ihandle-&gt;allocate();</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa94e771d284b85d820f94b797eecee98">  237</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa94e771d284b85d820f94b797eecee98">configure_transition_manager</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a> &amp;workload)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Get const tensors (un-managed)</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    std::set&lt;ITensorHandle *&gt; const_tensors = get_const_handles(g);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::vector&lt;TaskHandles&gt; tasks_handles;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    TargetHandleCounter      target_handle_count;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Count handles</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;task : workload.<a class="code" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">tasks</a>)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">// Populates IO handles</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        tasks_handles.push_back(get_transition_handles(ctx, task, const_tensors));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// Count handles</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        count_input_handles_per_target(tasks_handles.back(), target_handle_count);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Setup memory managers</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;hc : target_handle_count)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml">MemoryManagerContext</a> *mm_ctx = ctx.<a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml#a65394a2dba58e82644502daf2c29c663">memory_management_ctx</a>(hc.first);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">if</span> (mm_ctx != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">if</span> (mm_ctx-&gt;<a class="code" href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml#a4e1e0a2d09540e4c286f7ef4b5a02053">cross_mm</a> != <span class="keyword">nullptr</span> &amp;&amp; mm_ctx-&gt;<a class="code" href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml#a9a1a8b3c7023ca46b49d051c2ac25489">cross_group</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="comment">// Manage and allocate tensors</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                configure_handle_lifetime(tasks_handles, hc.second);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;} <span class="comment">// namespace detail</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;} <span class="comment">// namespace graph</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_context_xhtml_a65394a2dba58e82644502daf2c29c663"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml#a65394a2dba58e82644502daf2c29c663">arm_compute::graph::GraphContext::memory_management_ctx</a></div><div class="ttdeci">MemoryManagerContext * memory_management_ctx(Target target)</div><div class="ttdoc">Gets a memory manager context for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8cpp_source.xhtml#l00067">GraphContext.cpp:67</a></div></div>
<div class="ttc" id="a_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="a_cross_layer_memory_manager_helpers_8cpp_xhtml_a9efbfa7013d05d44dcfcfb06ec686566"><div class="ttname"><a href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a9efbfa7013d05d44dcfcfb06ec686566">output_handles</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; ITensorHandle *, IMemoryGroup * &gt; &gt; output_handles</div><div class="ttdoc">Output handles of a task.</div><div class="ttdef"><b>Definition:</b> <a href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml#l00057">CrossLayerMemoryManagerHelpers.cpp:57</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_execution_workload_xhtml_ae7d2dcab167d9eba3483a1fa1f330c7f"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#ae7d2dcab167d9eba3483a1fa1f330c7f">arm_compute::graph::ExecutionWorkload::tasks</a></div><div class="ttdeci">std::vector&lt; ExecutionTask &gt; tasks</div><div class="ttdoc">Execution workload.</div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00101">Workload.h:101</a></div></div>
<div class="ttc" id="a_i_node_8h_xhtml"><div class="ttname"><a href="_i_node_8h.xhtml">INode.h</a></div></div>
<div class="ttc" id="a_graph_context_8h_xhtml"><div class="ttname"><a href="_graph_context_8h.xhtml">GraphContext.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_memory_manager_context_xhtml_a9a1a8b3c7023ca46b49d051c2ac25489"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml#a9a1a8b3c7023ca46b49d051c2ac25489">arm_compute::graph::MemoryManagerContext::cross_group</a></div><div class="ttdeci">std::shared_ptr&lt; arm_compute::IMemoryGroup &gt; cross_group</div><div class="ttdoc">Cross-function memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00044">GraphContext.h:44</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_memory_manager_context_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml">arm_compute::graph::MemoryManagerContext</a></div><div class="ttdoc">Contains structs required for memory management.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00039">GraphContext.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_adaf571380533c75338da47ba3a68c199"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">arm_compute::graph::is_utility_node</a></div><div class="ttdeci">bool is_utility_node(INode *node)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">Utils.h:37</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div><div class="ttdeci">@ Tensor</div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_execution_workload_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">arm_compute::graph::ExecutionWorkload</a></div><div class="ttdoc">Execution workload.</div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00097">Workload.h:97</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::NodeType::Input</a></div><div class="ttdeci">@ Input</div></div>
<div class="ttc" id="a_backend_registry_8h_xhtml"><div class="ttname"><a href="_backend_registry_8h.xhtml">BackendRegistry.h</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_memory_manager_context_xhtml_a4e1e0a2d09540e4c286f7ef4b5a02053"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml#a4e1e0a2d09540e4c286f7ef4b5a02053">arm_compute::graph::MemoryManagerContext::cross_mm</a></div><div class="ttdeci">std::shared_ptr&lt; arm_compute::IMemoryManager &gt; cross_mm</div><div class="ttdoc">Cross-function memory manager.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00043">GraphContext.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::NodeType::Const</a></div><div class="ttdeci">@ Const</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="agraph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00052">Graph.h:52</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00056">GraphContext.h:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="a_cross_layer_memory_manager_helpers_8cpp_xhtml_a7e6d1c3bf0d5e12010091e0bd57b11bf"><div class="ttname"><a href="_cross_layer_memory_manager_helpers_8cpp.xhtml#a7e6d1c3bf0d5e12010091e0bd57b11bf">input_handles</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; ITensorHandle *, IMemoryGroup * &gt; &gt; input_handles</div><div class="ttdoc">Input handles to a task.</div><div class="ttdef"><b>Definition:</b> <a href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml#l00056">CrossLayerMemoryManagerHelpers.cpp:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_aa94e771d284b85d820f94b797eecee98"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aa94e771d284b85d820f94b797eecee98">arm_compute::graph::detail::configure_transition_manager</a></div><div class="ttdeci">void configure_transition_manager(Graph &amp;g, GraphContext &amp;ctx, ExecutionWorkload &amp;workload)</div><div class="ttdoc">Configures transition manager and execution workload.</div><div class="ttdef"><b>Definition:</b> <a href="_cross_layer_memory_manager_helpers_8cpp_source.xhtml#l00237">CrossLayerMemoryManagerHelpers.cpp:237</a></div></div>
<div class="ttc" id="agraph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="a_graph_manager_8h_xhtml"><div class="ttname"><a href="_graph_manager_8h.xhtml">GraphManager.h</a></div></div>
<div class="ttc" id="a_cross_layer_memory_manager_helpers_8h_xhtml"><div class="ttname"><a href="_cross_layer_memory_manager_helpers_8h.xhtml">CrossLayerMemoryManagerHelpers.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_860cb336d74994b1303832ed3557228e.xhtml">detail</a></li><li class="navelem"><a class="el" href="_cross_layer_memory_manager_helpers_8cpp.xhtml">CrossLayerMemoryManagerHelpers.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
