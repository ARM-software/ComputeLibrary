<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Graph Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1graph_1_1_graph.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">Graph Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> class.  
 <a href="classarm__compute_1_1graph_1_1_graph.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="graph_2_graph_8h_source.xhtml">Graph.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0c40af42cad207665228815f0359bbd3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a> ()=default</td></tr>
<tr class="separator:a0c40af42cad207665228815f0359bbd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ec832327fd0a641f93af7cea4df3018"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a9ec832327fd0a641f93af7cea4df3018">Graph</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>, std::string <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>)</td></tr>
<tr class="memdesc:a9ec832327fd0a641f93af7cea4df3018"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a9ec832327fd0a641f93af7cea4df3018">More...</a><br /></td></tr>
<tr class="separator:a9ec832327fd0a641f93af7cea4df3018"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2249ab41ba672900ae7703ba6975179"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#aa2249ab41ba672900ae7703ba6975179">Graph</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;)=delete</td></tr>
<tr class="memdesc:aa2249ab41ba672900ae7703ba6975179"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#aa2249ab41ba672900ae7703ba6975179">More...</a><br /></td></tr>
<tr class="separator:aa2249ab41ba672900ae7703ba6975179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbe0278ebf263a33f3d0b9b4be834961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">operator=</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;)=delete</td></tr>
<tr class="memdesc:acbe0278ebf263a33f3d0b9b4be834961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy assigned (As this class contains pointers)  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">More...</a><br /></td></tr>
<tr class="separator:acbe0278ebf263a33f3d0b9b4be834961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6920039a211f8f50842081c3c4204d2d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a6920039a211f8f50842081c3c4204d2d">Graph</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;)=delete</td></tr>
<tr class="memdesc:a6920039a211f8f50842081c3c4204d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being moved (As this class contains non movable objects)  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a6920039a211f8f50842081c3c4204d2d">More...</a><br /></td></tr>
<tr class="separator:a6920039a211f8f50842081c3c4204d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec01ee4402c9101ea8f4e6ca8fa35e22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#aec01ee4402c9101ea8f4e6ca8fa35e22">operator=</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;)=delete</td></tr>
<tr class="memdesc:aec01ee4402c9101ea8f4e6ca8fa35e22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being moved (As this class contains non movable objects)  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#aec01ee4402c9101ea8f4e6ca8fa35e22">More...</a><br /></td></tr>
<tr class="separator:aec01ee4402c9101ea8f4e6ca8fa35e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memTemplParams" colspan="2">template&lt;typename NT , typename... Ts&gt; </td></tr>
<tr class="memitem:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a3ffda41b00085a84a5d4bc46f1106e17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">More...</a><br /></td></tr>
<tr class="separator:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09f8d22de4cd2a2881730ad58096c7c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid)</td></tr>
<tr class="memdesc:a09f8d22de4cd2a2881730ad58096c7c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the node with the given ID.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">More...</a><br /></td></tr>
<tr class="separator:a09f8d22de4cd2a2881730ad58096c7c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538f789bf074c367457a6f8f32b83d2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> source, size_t source_idx, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> sink, size_t sink_idx)</td></tr>
<tr class="memdesc:a538f789bf074c367457a6f8f32b83d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a connection between two nodes.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">More...</a><br /></td></tr>
<tr class="separator:a538f789bf074c367457a6f8f32b83d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">remove_connection</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> eid)</td></tr>
<tr class="memdesc:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an edge (connection)  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">More...</a><br /></td></tr>
<tr class="separator:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d89c28bd42ba9a52da008bb69367171"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a> () const</td></tr>
<tr class="memdesc:a1d89c28bd42ba9a52da008bb69367171"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph name.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">More...</a><br /></td></tr>
<tr class="separator:a1d89c28bd42ba9a52da008bb69367171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc44e75669b55a1347b89c7debdf037"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a> () const</td></tr>
<tr class="memdesc:a0fc44e75669b55a1347b89c7debdf037"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">More...</a><br /></td></tr>
<tr class="separator:a0fc44e75669b55a1347b89c7debdf037"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a979250f01a5edba059a02748b10ea3"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a8a979250f01a5edba059a02748b10ea3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph input nodes.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">More...</a><br /></td></tr>
<tr class="separator:a8a979250f01a5edba059a02748b10ea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1a5793264cc6b8c412dca38679630e8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#aa1a5793264cc6b8c412dca38679630e8">nodes</a> ()</td></tr>
<tr class="memdesc:aa1a5793264cc6b8c412dca38679630e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns nodes of graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#aa1a5793264cc6b8c412dca38679630e8">More...</a><br /></td></tr>
<tr class="separator:aa1a5793264cc6b8c412dca38679630e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5261e7e4f379268b08c58731ba603d11"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a5261e7e4f379268b08c58731ba603d11">nodes</a> () const</td></tr>
<tr class="memdesc:a5261e7e4f379268b08c58731ba603d11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns nodes of graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a5261e7e4f379268b08c58731ba603d11">More...</a><br /></td></tr>
<tr class="separator:a5261e7e4f379268b08c58731ba603d11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ee4bc06b30fd45b1de82e716fb11bd5"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1ee4bc06b30fd45b1de82e716fb11bd5">edges</a> () const</td></tr>
<tr class="memdesc:a1ee4bc06b30fd45b1de82e716fb11bd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns edges of graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a1ee4bc06b30fd45b1de82e716fb11bd5">More...</a><br /></td></tr>
<tr class="separator:a1ee4bc06b30fd45b1de82e716fb11bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afad4f503ee7e7a4996198b3692abba86"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#afad4f503ee7e7a4996198b3692abba86">tensors</a> ()</td></tr>
<tr class="memdesc:afad4f503ee7e7a4996198b3692abba86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns tensors of graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#afad4f503ee7e7a4996198b3692abba86">More...</a><br /></td></tr>
<tr class="separator:afad4f503ee7e7a4996198b3692abba86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab48442d973c2ffbe4fc7d3f4d82170e7"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#ab48442d973c2ffbe4fc7d3f4d82170e7">tensors</a> () const</td></tr>
<tr class="memdesc:ab48442d973c2ffbe4fc7d3f4d82170e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns tensors of graph.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#ab48442d973c2ffbe4fc7d3f4d82170e7">More...</a><br /></td></tr>
<tr class="separator:ab48442d973c2ffbe4fc7d3f4d82170e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8baf1f3da6d42a94d0569395ece882a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>) const</td></tr>
<tr class="memdesc:af8baf1f3da6d42a94d0569395ece882a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get node object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">More...</a><br /></td></tr>
<tr class="separator:af8baf1f3da6d42a94d0569395ece882a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af03a199882fdad91c9d20fc3e6ee2a57"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#af03a199882fdad91c9d20fc3e6ee2a57">node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>)</td></tr>
<tr class="memdesc:af03a199882fdad91c9d20fc3e6ee2a57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get node object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#af03a199882fdad91c9d20fc3e6ee2a57">More...</a><br /></td></tr>
<tr class="separator:af03a199882fdad91c9d20fc3e6ee2a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ea47db036b1c140af002ee1494dcb6f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>) const</td></tr>
<tr class="memdesc:a0ea47db036b1c140af002ee1494dcb6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get edge object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">More...</a><br /></td></tr>
<tr class="separator:a0ea47db036b1c140af002ee1494dcb6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93f40299c6399505192f5300cda1997c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a93f40299c6399505192f5300cda1997c">edge</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>)</td></tr>
<tr class="memdesc:a93f40299c6399505192f5300cda1997c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get edge object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a93f40299c6399505192f5300cda1997c">More...</a><br /></td></tr>
<tr class="separator:a93f40299c6399505192f5300cda1997c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91bccd842a1caad3149523a05f150ee6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>) const</td></tr>
<tr class="memdesc:a91bccd842a1caad3149523a05f150ee6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">More...</a><br /></td></tr>
<tr class="separator:a91bccd842a1caad3149523a05f150ee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20bec19168fda73806782acd54554168"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a20bec19168fda73806782acd54554168">tensor</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>)</td></tr>
<tr class="memdesc:a20bec19168fda73806782acd54554168"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor object given its id.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#a20bec19168fda73806782acd54554168">More...</a><br /></td></tr>
<tr class="separator:a20bec19168fda73806782acd54554168"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> class. </p>
<p>Represents a multiple source - multiple sink directed graph </p>

<p class="definition">Definition at line <a class="el" href="graph_2_graph_8h_source.xhtml#l00052">52</a> of file <a class="el" href="graph_2_graph_8h_source.xhtml">Graph.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0c40af42cad207665228815f0359bbd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c40af42cad207665228815f0359bbd3">&#9670;&nbsp;</a></span>Graph() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ec832327fd0a641f93af7cea4df3018"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ec832327fd0a641f93af7cea4df3018">&#9670;&nbsp;</a></span>Graph() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> identification number. Can be used to differentiate between graphs. Default value 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> name. Default value empty string </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : _id(<span class="keywordtype">id</span>), _name(std::move(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>)), _nodes(), _edges(), _tensors(), _tagged_nodes(), _mtx()</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2249ab41ba672900ae7703ba6975179"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2249ab41ba672900ae7703ba6975179">&#9670;&nbsp;</a></span>Graph() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a6920039a211f8f50842081c3c4204d2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6920039a211f8f50842081c3c4204d2d">&#9670;&nbsp;</a></span>Graph() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being moved (As this class contains non movable objects) </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a538f789bf074c367457a6f8f32b83d2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a538f789bf074c367457a6f8f32b83d2d">&#9670;&nbsp;</a></span>add_connection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> add_connection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>source_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>sink</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>sink_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a connection between two nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">source</td><td>ID of the source node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">source_idx</td><td>Output index of the source node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sink</td><td>ID of the sink node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sink_idx</td><td>Input index of the sink node</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ID of this connection </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;arm_compute::Mutex&gt;</a> lock(_mtx);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Check if node index is valid, if node exists and finally if the connection index is valid</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((source &gt;= _nodes.size()) || (_nodes[source] == <span class="keyword">nullptr</span>) ||</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                         (source_idx &gt;= _nodes[source]-&gt;num_outputs()));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((sink &gt;= _nodes.size()) || (_nodes[sink] == <span class="keyword">nullptr</span>) ||</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                         (sink_idx &gt;= _nodes[sink]-&gt;num_inputs()));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Get nodes</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::unique_ptr&lt;INode&gt; &amp;source_node = _nodes[source];</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::unique_ptr&lt;INode&gt; &amp;sink_node   = _nodes[sink];</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Check for duplicate connections (Check only sink node)</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    Edge *sink_node_edge = sink_node-&gt;input_edge(sink_idx);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> ((sink_node_edge != <span class="keyword">nullptr</span>) &amp;&amp; (sink_node_edge-&gt;producer_id() == source) &amp;&amp;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        (sink_node_edge-&gt;producer_idx() == source_idx) &amp;&amp; (sink_node_edge-&gt;consumer_id() == sink) &amp;&amp;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        (sink_node_edge-&gt;consumer_idx() == sink_idx))</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> sink_node_edge-&gt;id();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Check if there is already a tensor associated with output if not create one</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid = source_node-&gt;output_id(source_idx);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (tid == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">NullTensorID</a>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        tid = create_tensor();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::unique_ptr&lt;Tensor&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a> = _tensors[tid];</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Create connections</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> eid = _edges.size();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">auto</span>   connection =</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        std::make_unique&lt;Edge&gt;(eid, source_node.get(), source_idx, sink_node.get(), sink_idx, <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a>.get());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    _edges.push_back(std::move(connection));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Add connections to source and sink nodes</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    source_node-&gt;_output_edges.insert(eid);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    sink_node-&gt;_input_edges[sink_idx] = eid;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Set tensor output node</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    source_node-&gt;_outputs[source_idx] = tid;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// Bind tensor to the edge</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a37a56fcfb4c6a506d63f11d88e0981c0">bind_edge</a>(eid);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Try and propagate shapes in sink node</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    sink_node-&gt;forward_descriptors();</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> eid;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00109">Tensor::bind_edge()</a>, <a class="el" href="_edge_8h_source.xhtml#l00086">Edge::consumer_id()</a>, <a class="el" href="_edge_8h_source.xhtml#l00118">Edge::consumer_idx()</a>, <a class="el" href="_edge_8h_source.xhtml#l00070">Edge::id()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00077">arm_compute::graph::NullTensorID</a>, <a class="el" href="_edge_8h_source.xhtml#l00078">Edge::producer_id()</a>, <a class="el" href="_edge_8h_source.xhtml#l00110">Edge::producer_idx()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00228">Graph::tensor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00165">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00222">GraphBuilder::add_bounding_box_transform_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00443">GraphBuilder::add_detection_output_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00465">GraphBuilder::add_detection_post_process_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00506">GraphBuilder::add_elementwise_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00527">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00611">GraphBuilder::add_generate_proposals_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00643">GraphBuilder::add_normalize_planar_yuv_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00132">GraphBuilder::add_output_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00681">GraphBuilder::add_prelu_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00710">GraphBuilder::add_priorbox_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00756">GraphBuilder::add_roi_align_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00839">GraphBuilder::add_yolo_node()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00080">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00164">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00278">arm_compute::graph::detail::fuse_pad_with_convolution()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00046">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node()</a>.</p>

</div>
</div>
<a id="a3ffda41b00085a84a5d4bc46f1106e17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ffda41b00085a84a5d4bc46f1106e17">&#9670;&nbsp;</a></span>add_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_node </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a node to the graph. </p>
<dl class="section note"><dt>Note</dt><dd>Models a single output node</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">NT</td><td>Node operation </td></tr>
    <tr><td class="paramname">Ts</td><td>Arguments to operation</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Node arguments</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ID of the node </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">234</a> of file <a class="el" href="graph_2_graph_8h_source.xhtml">Graph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;arm_compute::Mutex&gt;</a> lock(_mtx);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Create node</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid  = _nodes.size();</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span>   <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a> = std::make_unique&lt;NT&gt;(std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a>(nid);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Keep track of input nodes</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _tagged_nodes[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>()].push_back(nid);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Associate a new tensor with each output</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;output : <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;_outputs)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        output = create_tensor();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Propagate node shape if possible</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">forward_descriptors</a>();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// Add node to the graph nodes</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    _nodes.push_back(std::move(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">INode::forward_descriptors()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00050">INode::set_graph()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00056">INode::set_id()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00165">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00222">GraphBuilder::add_bounding_box_transform_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00115">GraphBuilder::add_const_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00443">GraphBuilder::add_detection_output_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00465">GraphBuilder::add_detection_post_process_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00506">GraphBuilder::add_elementwise_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00527">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00611">GraphBuilder::add_generate_proposals_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00124">GraphBuilder::add_input_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00643">GraphBuilder::add_normalize_planar_yuv_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00132">GraphBuilder::add_output_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00681">GraphBuilder::add_prelu_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00710">GraphBuilder::add_priorbox_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00756">GraphBuilder::add_roi_align_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00839">GraphBuilder::add_yolo_node()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00080">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00164">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>.</p>

</div>
</div>
<a id="a93f40299c6399505192f5300cda1997c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93f40299c6399505192f5300cda1997c">&#9670;&nbsp;</a></span>edge() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> * edge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get edge object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge.">Edge</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual edge object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00223">223</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _edges.size()) ? nullptr : _edges[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

</div>
</div>
<a id="a0ea47db036b1c140af002ee1494dcb6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ea47db036b1c140af002ee1494dcb6f">&#9670;&nbsp;</a></span>edge() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> * edge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get edge object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge.">Edge</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual edge object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _edges.size()) ? nullptr : _edges[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">arm_compute::graph::detail::all_inputs_are_visited()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">arm_compute::graph::dfs()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00320">arm_compute::graph::detail::fuse_layer()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00200">arm_compute::graph::get_driver_nodes()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00180">arm_compute::graph::get_driving_nodes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00150">INode::input()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00171">INode::input_edge()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00137">INode::input_id()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00379">NodeFusionMutator::mutate()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00122">Graph::remove_connection()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00076">INode::set_output_tensor()</a>.</p>

</div>
</div>
<a id="a1ee4bc06b30fd45b1de82e716fb11bd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ee4bc06b30fd45b1de82e716fb11bd5">&#9670;&nbsp;</a></span>edges()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> &gt; &gt; &amp; edges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns edges of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Edges can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Edges of graph </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> _edges;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0fc44e75669b55a1347b89c7debdf037"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fc44e75669b55a1347b89c7debdf037">&#9670;&nbsp;</a></span>id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph id. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> id </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> _id;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00218">Graph::edge()</a>, <a class="el" href="_graph_manager_8cpp_source.xhtml#l00124">GraphManager::execute_graph()</a>, <a class="el" href="_graph_manager_8cpp_source.xhtml#l00046">GraphManager::finalize_graph()</a>, <a class="el" href="_graph_manager_8cpp_source.xhtml#l00151">GraphManager::invalidate_graph()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00228">Graph::tensor()</a>.</p>

</div>
</div>
<a id="a1d89c28bd42ba9a52da008bb69367171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d89c28bd42ba9a52da008bb69367171">&#9670;&nbsp;</a></span>name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph name. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> name </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> _name;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="af03a199882fdad91c9d20fc3e6ee2a57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af03a199882fdad91c9d20fc3e6ee2a57">&#9670;&nbsp;</a></span>node() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> * node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get node object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Node ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual node object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00213">213</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _nodes.size()) ? nullptr : _nodes[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

</div>
</div>
<a id="af8baf1f3da6d42a94d0569395ece882a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8baf1f3da6d42a94d0569395ece882a">&#9670;&nbsp;</a></span>node() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> * node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get node object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Node ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual node object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00208">208</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _nodes.size()) ? nullptr : _nodes[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00165">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00465">GraphBuilder::add_detection_post_process_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00527">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00643">GraphBuilder::add_normalize_planar_yuv_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00771">GraphBuilder::add_scale_layer()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00839">GraphBuilder::add_yolo_node()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00134">arm_compute::graph::detail::configure_all_nodes()</a>, <a class="el" href="_layers_8h_source.xhtml#l00339">ConcatLayer::create_layer()</a>, <a class="el" href="_layers_8h_source.xhtml#l01393">StackLayer::create_layer()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">arm_compute::graph::dfs()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00080">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00164">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00320">arm_compute::graph::detail::fuse_layer()</a>, <a class="el" href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator::mutate()</a>, <a class="el" href="_depth_concat_sub_tensor_mutator_8cpp_source.xhtml#l00050">DepthConcatSubTensorMutator::mutate()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>.</p>

</div>
</div>
<a id="aa1a5793264cc6b8c412dca38679630e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1a5793264cc6b8c412dca38679630e8">&#9670;&nbsp;</a></span>nodes() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &gt; &gt; &amp; nodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns nodes of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Nodes can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Nodes of graph </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00183">183</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> _nodes;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5261e7e4f379268b08c58731ba603d11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5261e7e4f379268b08c58731ba603d11">&#9670;&nbsp;</a></span>nodes() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a>&gt; &gt;&amp; nodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns nodes of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Nodes can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Nodes of graph </dd></dl>

</div>
</div>
<a id="a8a979250f01a5edba059a02748b10ea3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a979250f01a5edba059a02748b10ea3">&#9670;&nbsp;</a></span>nodes() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp; nodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph input nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Type of nodes to return</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>vector containing the graph node of given type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00178">178</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> _tagged_nodes[<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>];</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00099">arm_compute::graph::detail::allocate_const_tensors()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00194">arm_compute::graph::detail::call_all_const_node_accessors()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00134">arm_compute::graph::detail::configure_all_nodes()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">arm_compute::graph::dfs()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00053">arm_compute::graph::force_target_to_graph()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00320">arm_compute::graph::detail::fuse_layer()</a>, <a class="el" href="_in_place_operation_mutator_8cpp_source.xhtml#l00223">InPlaceOperationMutator::mutate()</a>, <a class="el" href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator::mutate()</a>, <a class="el" href="_depth_concat_sub_tensor_mutator_8cpp_source.xhtml#l00050">DepthConcatSubTensorMutator::mutate()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00039">arm_compute::graph::detail::validate_all_nodes()</a>.</p>

</div>
</div>
<a id="acbe0278ebf263a33f3d0b9b4be834961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbe0278ebf263a33f3d0b9b4be834961">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copy assigned (As this class contains pointers) </p>

</div>
</div>
<a id="aec01ee4402c9101ea8f4e6ca8fa35e22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec01ee4402c9101ea8f4e6ca8fa35e22">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being moved (As this class contains non movable objects) </p>

</div>
</div>
<a id="a4c8c62ae543a38ec4aac8f1a167fbb51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8c62ae543a38ec4aac8f1a167fbb51">&#9670;&nbsp;</a></span>remove_connection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool remove_connection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>eid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes an edge (connection) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eid</td><td>Connection to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the removal took place else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (eid &gt;= _edges.size())</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    std::unique_ptr&lt;Edge&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a> = _edges[eid];</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// Remove node connections</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Get tensor bound to the edge</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0839be1697496b3a951e030627f9e69b">unbind_edge</a>(eid);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// Remove edges from source node</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>()-&gt;_output_edges.erase(eid);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="comment">// Remove edges from sink node</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">if</span> ((<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>() != <span class="keyword">nullptr</span>) &amp;&amp; (<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a494ac7ad19390258426e1e0577c71c91">consumer_idx</a>() &lt; <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>()-&gt;_input_edges.size()))</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>()-&gt;_input_edges[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a494ac7ad19390258426e1e0577c71c91">consumer_idx</a>()] = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a8e0b093eda0649ddbce791bb5076104f">EmptyEdgeID</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// Clear edge</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a> = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_edge_8h_source.xhtml#l00102">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00118">Edge::consumer_idx()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00218">Graph::edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00081">arm_compute::graph::EmptyEdgeID</a>, <a class="el" href="_edge_8h_source.xhtml#l00094">Edge::producer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00126">Edge::tensor()</a>, and <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00114">Tensor::unbind_edge()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00035">Graph::remove_node()</a>.</p>

</div>
</div>
<a id="a09f8d22de4cd2a2881730ad58096c7c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09f8d22de4cd2a2881730ad58096c7c1">&#9670;&nbsp;</a></span>remove_node()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool remove_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>nid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the node with the given ID. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nid</td><td>ID of the node to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the removal took place else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (nid &gt;= _nodes.size())</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::unique_ptr&lt;INode&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a> = _nodes[nid];</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="comment">// Remove input connections</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;input_eid : <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;_input_edges)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">remove_connection</a>(input_eid);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// Remove output connections</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        std::set&lt;EdgeID&gt; output_edges_copy = <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;output_eid : output_edges_copy)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">remove_connection</a>(output_eid);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// Remove nid from tagged nodes</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        std::vector&lt;NodeID&gt; &amp;tnodes = _tagged_nodes.at(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        tnodes.erase(std::remove(tnodes.begin(), tnodes.end(), nid), tnodes.end());</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a> = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00132">INode::output_edges()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00122">Graph::remove_connection()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00080">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00164">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00278">arm_compute::graph::detail::fuse_pad_with_convolution()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00046">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node()</a>.</p>

</div>
</div>
<a id="a20bec19168fda73806782acd54554168"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20bec19168fda73806782acd54554168">&#9670;&nbsp;</a></span>tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> * tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get tensor object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if tensor was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual tensor object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _tensors.size()) ? nullptr : _tensors[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

</div>
</div>
<a id="a91bccd842a1caad3149523a05f150ee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91bccd842a1caad3149523a05f150ee6">&#9670;&nbsp;</a></span>tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> * tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get tensor object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if tensor was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual tensor object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00228">228</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">id</span> &gt;= _tensors.size()) ? nullptr : _tensors[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>].get();</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00173">Graph::id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00158">INode::output()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00076">INode::set_output_tensor()</a>.</p>

</div>
</div>
<a id="afad4f503ee7e7a4996198b3692abba86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afad4f503ee7e7a4996198b3692abba86">&#9670;&nbsp;</a></span>tensors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> &gt; &gt; &amp; tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns tensors of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Tensors of graph </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> _tensors;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00120">arm_compute::graph::detail::allocate_all_tensors()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00056">arm_compute::graph::detail::configure_all_tensors()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00053">arm_compute::graph::force_target_to_graph()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00120">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00177">arm_compute::graph::detail::release_unused_tensors()</a>.</p>

</div>
</div>
<a id="ab48442d973c2ffbe4fc7d3f4d82170e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab48442d973c2ffbe4fc7d3f4d82170e7">&#9670;&nbsp;</a></span>tensors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>&gt; &gt;&amp; tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns tensors of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Tensors of graph </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/graph/<a class="el" href="graph_2_graph_8h_source.xhtml">Graph.h</a></li>
<li>src/graph/<a class="el" href="_graph_8cpp_source.xhtml">Graph.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a0ea47db036b1c140af002ee1494dcb6f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">arm_compute::graph::Graph::edge</a></div><div class="ttdeci">const Edge * edge(EdgeID id) const</div><div class="ttdoc">Get edge object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00218">Graph.cpp:218</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a18809773edf57d061fc2826abf0dab5e"><div class="ttname"><a href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard</a></div><div class="ttdeci">std::lock_guard&lt; Mutex &gt; lock_guard</div><div class="ttdoc">Wrapper of lock_guard data-object.</div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00037">Mutex.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a8e0b093eda0649ddbce791bb5076104f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a8e0b093eda0649ddbce791bb5076104f">arm_compute::graph::EmptyEdgeID</a></div><div class="ttdeci">constexpr EdgeID EmptyEdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00081">Types.h:81</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_abbf8678d888561b348dd1c34d9e34af9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const</div><div class="ttdoc">Returns output edge set.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00132">INode.cpp:132</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a0fc44e75669b55a1347b89c7debdf037"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">arm_compute::graph::Graph::id</a></div><div class="ttdeci">GraphID id() const</div><div class="ttdoc">Returns graph id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00173">Graph.cpp:173</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a5edbd8a4a1b75060bb3b49bc0ba2c6b0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">arm_compute::graph::INode::forward_descriptors</a></div><div class="ttdeci">virtual bool forward_descriptors()=0</div><div class="ttdoc">Forwards descriptor information to outputs if possible.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_a592a2c76b00960964a3f6f2ef792a7f0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">arm_compute::graph::Edge::consumer</a></div><div class="ttdeci">INode * consumer() const</div><div class="ttdoc">Returns consumer node.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00102">Edge.h:102</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_aff6b38772acc09675f4f64e510e31055"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">arm_compute::graph::Edge::tensor</a></div><div class="ttdeci">Tensor * tensor() const</div><div class="ttdoc">Returns the tensor associated with this edge.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00126">Edge.h:126</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a37a56fcfb4c6a506d63f11d88e0981c0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a37a56fcfb4c6a506d63f11d88e0981c0">arm_compute::graph::Tensor::bind_edge</a></div><div class="ttdeci">void bind_edge(EdgeID eid)</div><div class="ttdoc">Binds the tensor with an edge.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00109">Tensor.cpp:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a0839be1697496b3a951e030627f9e69b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0839be1697496b3a951e030627f9e69b">arm_compute::graph::Tensor::unbind_edge</a></div><div class="ttdeci">void unbind_edge(EdgeID eid)</div><div class="ttdoc">Unbinds an edge from a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00114">Tensor.cpp:114</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a3ace781433ede299fb1dc8d0b02667b9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">arm_compute::graph::INode::set_graph</a></div><div class="ttdeci">void set_graph(Graph *g)</div><div class="ttdoc">Sets the graph that this node is registered to.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00050">INode.cpp:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00072">Types.h:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node's type.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00208">Graph.cpp:208</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a91bccd842a1caad3149523a05f150ee6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">arm_compute::graph::Graph::tensor</a></div><div class="ttdeci">const Tensor * tensor(TensorID id) const</div><div class="ttdoc">Get tensor object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00228">Graph.cpp:228</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::Graph::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns graph name.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00168">Graph.cpp:168</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_a494ac7ad19390258426e1e0577c71c91"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a494ac7ad19390258426e1e0577c71c91">arm_compute::graph::Edge::consumer_idx</a></div><div class="ttdeci">unsigned int consumer_idx() const</div><div class="ttdoc">Returns the index of the input that consumes the result in the consumer node.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00118">Edge.h:118</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa94938a3eb11fda4724c362c53c28f24"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">arm_compute::graph::NullTensorID</a></div><div class="ttdeci">constexpr TensorID NullTensorID</div><div class="ttdoc">Constant NodeID specifying an equivalent of null node.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00077">Types.h:77</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_acef46a426a99b126a412e361125f2ce9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">arm_compute::graph::Edge::producer</a></div><div class="ttdeci">INode * producer() const</div><div class="ttdoc">Returns producer node.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00094">Edge.h:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a483b76accbb02199c359bd5cf23dd476"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">arm_compute::graph::INode::set_id</a></div><div class="ttdeci">void set_id(NodeID id)</div><div class="ttdoc">Sets the node id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00056">INode.cpp:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a4c8c62ae543a38ec4aac8f1a167fbb51"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">arm_compute::graph::Graph::remove_connection</a></div><div class="ttdeci">bool remove_connection(EdgeID eid)</div><div class="ttdoc">Removes an edge (connection)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00122">Graph.cpp:122</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_abba17a56bbf16c7cbc7acd4aa54abcea"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">arm_compute::graph::EdgeID</a></div><div class="ttdeci">unsigned int EdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">Types.h:73</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
