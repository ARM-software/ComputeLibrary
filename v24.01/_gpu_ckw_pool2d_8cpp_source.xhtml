<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwPool2d.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_gpu_ckw_pool2d_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GpuCkwPool2d.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gpu_ckw_pool2d_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_pool2d_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwPool2d.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_adjust_vec_size_8h.xhtml">arm_compute/core/utils/helpers/AdjustVecSize.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;ckw/TensorTileSampler.h&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="dynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/type_converter/Common.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_writer_helper_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/WriterHelper.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_kernel_writer_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwKernelWriter.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_scoped_kernel_writer_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwScopedKernelWriter.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_variable_table_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwVariableTable.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_kernel_argument_8h.xhtml">src/dynamic_fusion/sketch/gpu/GpuKernelArgument.h</a>&quot;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_kernel_component_group_8h.xhtml">src/dynamic_fusion/sketch/gpu/GpuKernelComponentGroup.h</a>&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceckw.xhtml">ckw</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#aa3c122a0360587baf822ff878f874f7d">   48</a></span>&#160;GpuCkwPool2d::GpuCkwPool2d(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a>                      <span class="keywordtype">id</span>,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;ITensorInfo&gt;</a> &amp;tensors,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Attributes</a>                &amp;attributes,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">Settings</a>                  &amp;settings)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">IGpuCkwComponentDriver</a>{<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>}, _src{}, _dst{}, _attributes{attributes}, _settings{settings}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    _src = this-&gt;tensors().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _dst = this-&gt;tensors().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">TensorType::ACL_DST_0</a>);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(_src, _dst);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ac794f053c37af9bdaf61039dbff80cac">   60</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ac794f053c37af9bdaf61039dbff80cac">GpuCkwPool2d::write_component_code</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">ComponentGroup</a>    &amp;comp_group,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">GpuCkwVariableTable</a>     &amp;vtable,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer)<span class="keyword"> const</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>         root_window = comp_group.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a7b0b398a61f9445132382fd9c065435b">ckw_component_driver</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a66df3fbb8781a4dfa011885356e1495f">get_window</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0          = root_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m0          = root_window.y().step();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> =</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        vtable.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a8f0011b59fc660a6e9a34d4e56b48175">declare_variable</a>(comp_group, writer, _src, TensorStorageType::ClBufferUint8Ptr, <span class="stringliteral">&quot;src&quot;</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> =</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        vtable.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a8f0011b59fc660a6e9a34d4e56b48175">declare_variable</a>(comp_group, writer, _dst, TensorStorageType::ClBufferUint8Ptr, <span class="stringliteral">&quot;dst&quot;</span>);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    TileOperand &amp;gid_0 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_0&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    TileOperand &amp;gid_1 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_1&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    TileOperand &amp;gid_2 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_2&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    writer-&gt;op_get_global_id(gid_0, 0);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    writer-&gt;op_get_global_id(gid_1, 1);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    writer-&gt;op_get_global_id(gid_2, 2);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Data Layout is NHWC</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    constexpr <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>  = 1;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    constexpr <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a> = 2;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> int32_t pool_size_x   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a3add973b1d02c7ce7b7838005f141091">pool_size</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>());</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> int32_t pool_size_y   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a3add973b1d02c7ce7b7838005f141091">pool_size</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> int32_t pad_x         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0fa3ae99193fd9fd7c7874ddd5d5e00f">pad</a>().<a class="code" href="structarm__compute_1_1_padding2_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> int32_t pad_y         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0fa3ae99193fd9fd7c7874ddd5d5e00f">pad</a>().<a class="code" href="structarm__compute_1_1_padding2_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> int32_t src_width     = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> int32_t src_height    = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    src_data_type = _src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>();</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Check if this is global pooling path</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_global_pooling =</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        (pool_size_x == src_width) &amp;&amp; (pool_size_y == src_height) &amp;&amp; (pad_x == 0) &amp;&amp; (pad_y == 0);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Check if this a case of FP_MIXED_PRECISION</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> use_fp_mixed_precision =</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        (src_data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>) &amp;&amp; _settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#a762f833df97843db10c0a582bac29d4e">mixed_precision</a>() &amp;&amp; _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() != <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> acc_data_type = (use_fp_mixed_precision) ? (<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>) : (src_data_type);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    TileOperand       &amp;const_0            = writer-&gt;declare_tile(<span class="stringliteral">&quot;0&quot;</span>, 0);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> TileOperand &amp;const_1            = writer-&gt;declare_tile(<span class="stringliteral">&quot;1&quot;</span>, 1);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> TileOperand &amp;const_lowest_value = writer-&gt;declare_tile(<span class="stringliteral">&quot;LOWEST_VALUE&quot;</span>, <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> TileOperand &amp;pool_size_x_tile   = writer-&gt;declare_tile(<span class="stringliteral">&quot;POOL_SIZE_X&quot;</span>, pool_size_x);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> TileOperand &amp;pool_size_y_tile   = writer-&gt;declare_tile(<span class="stringliteral">&quot;POOL_SIZE_Y&quot;</span>, pool_size_y);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> TileOperand &amp;stride_x_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;STRIDE_X&quot;</span>, <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a209aaa95451601c08871f2e9b04ae467">stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>()));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> TileOperand &amp;stride_y_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;STRIDE_Y&quot;</span>, <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a209aaa95451601c08871f2e9b04ae467">stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>()));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> TileOperand &amp;pad_x_tile    = writer-&gt;declare_tile(<span class="stringliteral">&quot;PAD_X&quot;</span>, pad_x);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> TileOperand &amp;pad_y_tile    = writer-&gt;declare_tile(<span class="stringliteral">&quot;PAD_Y&quot;</span>, pad_y);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> TileOperand &amp;dst_height_tile =</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        writer-&gt;declare_tile(<span class="stringliteral">&quot;DST_HEIGHT&quot;</span>, <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>)));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> TileOperand &amp;src_height_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;SRC_HEIGHT&quot;</span>, src_height);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> TileOperand &amp;src_width_tile  = writer-&gt;declare_tile(<span class="stringliteral">&quot;SRC_WIDTH&quot;</span>, src_width);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    TileOperand &amp;idx_out_n = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_out_n&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    TileOperand &amp;idx_out_h = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_out_h&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    TileOperand &amp;idx_out_w = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_out_w&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    TileOperand &amp;idx_out_c = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_out_c&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> int32_t dst_partial_n0_v = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0] % n0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">get_coord</a>(writer, idx_out_c, gid_0, n0, dst_partial_n0_v, <span class="stringliteral">&quot;dst_x_&quot;</span>, const_0);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">get_coord</a>(writer, idx_out_w, gid_1, 1, 0, <span class="stringliteral">&quot;dst_y_&quot;</span>, const_0);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    writer-&gt;op_binary_expression(idx_out_h, gid_2, BinaryOp::Mod, dst_height_tile); <span class="comment">// gid_2 % h</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    writer-&gt;op_binary_expression(idx_out_n, gid_2, BinaryOp::Div, dst_height_tile); <span class="comment">// gid_2 / h</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    TensorTileSampler src_sampler;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    src_sampler.width(n0);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    src_sampler.height(m0);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    src_sampler.format(TensorSamplerFormat::C_W_H);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    src_sampler.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    src_sampler.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    src_sampler.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    src_sampler.x(idx_out_c);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    src_sampler.b(idx_out_n);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    TensorTileSampler dst_sampler;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    dst_sampler.width(n0);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    dst_sampler.height(m0);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    dst_sampler.format(TensorSamplerFormat::C_W_H);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    dst_sampler.address_mode_x(TensorSamplerAddressModeX::OverlappingMin);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    dst_sampler.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    dst_sampler.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    dst_sampler.x(idx_out_c);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    dst_sampler.y(idx_out_w);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    dst_sampler.z(idx_out_h);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    dst_sampler.b(idx_out_n);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Prepare dst tensor and tile</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    TileInfo dst_tile_info = TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acbae697336efd01a1b964274b4212767">to_ckw</a>(src_data_type), m0, n0);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;has_tile())</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        TileOperand &amp;dst_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;dst_tile&quot;</span>, dst_tile_info);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;init_virtual_tensor(dst_tile, dst_sampler);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> TileOperand &amp;dst_tile = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tile();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// A tile used to temporarily store results or as an accumulator in case of AVG and L2 pooling.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> TileOperand &amp;res_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;res_tile&quot;</span>, TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acbae697336efd01a1b964274b4212767">to_ckw</a>(acc_data_type), m0, n0));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Initialise result tile with appropriate value</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span> (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#a08c5da6acaf271d940199dc16e249c8a">use_inf_as_limit</a>())</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af1518fd5d8941b4135c16b736a3dccb8">TileContainer</a>            minus_inf_tile_container;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            std::vector&lt;std::string&gt; value = std::vector&lt;std::string&gt;(n0, <span class="stringliteral">&quot;(-INFINITY)&quot;</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            minus_inf_tile_container.push_back({value});</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keyword">const</span> TileOperand &amp;minus_inf =</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                writer-&gt;declare_tile(<span class="stringliteral">&quot;minus_inf_const&quot;</span>, minus_inf_tile_container, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acbae697336efd01a1b964274b4212767">to_ckw</a>(acc_data_type));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            writer-&gt;op_assign(res_tile, minus_inf);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            writer-&gt;op_assign(res_tile, const_lowest_value);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        writer-&gt;op_assign(res_tile, const_0);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// idx_in_w = idx_out_w * STRIDE_X - PAD_X</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    TileOperand &amp;idx_in_w = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_in_w&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    writer-&gt;op_binary_expression(idx_in_w, idx_out_w, BinaryOp::Mul, stride_x_tile);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    writer-&gt;op_binary_expression(idx_in_w, idx_in_w, BinaryOp::Sub, pad_x_tile);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// idx_in_h = idx_out_h * STRIDE_Y - PAD_Y</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    TileOperand &amp;idx_in_h = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_in_h&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    writer-&gt;op_binary_expression(idx_in_h, idx_out_h, BinaryOp::Mul, stride_y_tile);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    writer-&gt;op_binary_expression(idx_in_h, idx_in_h, BinaryOp::Sub, pad_y_tile);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    TileOperand &amp;minus_idx_in_w = writer-&gt;declare_tile(<span class="stringliteral">&quot;minus_idx_in_w&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    TileOperand &amp;minus_idx_in_h = writer-&gt;declare_tile(<span class="stringliteral">&quot;minus_idx_in_h&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    writer-&gt;op_unary_expression(minus_idx_in_w, UnaryOp::Negate, idx_in_w);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    writer-&gt;op_unary_expression(minus_idx_in_h, UnaryOp::Negate, idx_in_h);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// Pooling starting/ending offsets for X dim</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    TileOperand &amp;pool_x_s = writer-&gt;declare_tile(<span class="stringliteral">&quot;pool_x_s&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    TileOperand &amp;pool_x_e = writer-&gt;declare_tile(<span class="stringliteral">&quot;pool_x_e&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    writer-&gt;op_binary_elementwise_function(pool_x_s, BinaryFunction::Max, const_0, minus_idx_in_w);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    writer-&gt;op_binary_expression(pool_x_e, src_width_tile, BinaryOp::Add, minus_idx_in_w);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    writer-&gt;op_binary_elementwise_function(pool_x_e, BinaryFunction::Min, pool_size_x_tile, pool_x_e);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Pooling starting/ending offsets for Y dim</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    TileOperand &amp;pool_y_s = writer-&gt;declare_tile(<span class="stringliteral">&quot;pool_y_s&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    TileOperand &amp;pool_y_e = writer-&gt;declare_tile(<span class="stringliteral">&quot;pool_y_e&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    writer-&gt;op_binary_elementwise_function(pool_y_s, BinaryFunction::Max, const_0, minus_idx_in_h);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    writer-&gt;op_binary_expression(pool_y_e, src_height_tile, BinaryOp::Add, minus_idx_in_h);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    writer-&gt;op_binary_elementwise_function(pool_y_e, BinaryFunction::Min, pool_size_y_tile, pool_y_e);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> TileOperand &amp;filter_size = writer-&gt;declare_tile(<span class="stringliteral">&quot;filter_size&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">if</span> (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a2a5bf4ca18389e1f61f5fac9044a2c85">exclude_padding</a>())</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keyword">const</span> TileOperand &amp;y_diff = writer-&gt;declare_tile(<span class="stringliteral">&quot;y_diff&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keyword">const</span> TileOperand &amp;x_diff = writer-&gt;declare_tile(<span class="stringliteral">&quot;x_diff&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        writer-&gt;op_binary_expression(y_diff, pool_y_e, BinaryOp::Sub, pool_y_s);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        writer-&gt;op_binary_expression(x_diff, pool_x_e, BinaryOp::Sub, pool_x_s);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        writer-&gt;op_binary_expression(filter_size, y_diff, BinaryOp::Mul, x_diff);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        writer-&gt;op_binary_expression(filter_size, pool_size_x_tile, BinaryOp::Mul, pool_size_y_tile);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> TileOperand &amp;x = writer-&gt;declare_tile(<span class="stringliteral">&quot;x&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> TileOperand &amp;y = writer-&gt;declare_tile(<span class="stringliteral">&quot;y&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">if</span> (is_global_pooling)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        writer-&gt;op_assign(x, const_0);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        writer-&gt;op_assign(y, const_0);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        writer-&gt;op_assign(pool_y_e, pool_size_y_tile);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        writer-&gt;op_assign(pool_x_e, pool_size_x_tile);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        writer-&gt;op_assign(x, pool_x_s);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        writer-&gt;op_assign(y, pool_y_s);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Y dim for-loop</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    writer-&gt;op_for_loop(</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        y, BinaryOp::Less, pool_y_e, y, AssignmentOp::Increment, const_1,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        [&amp;]()</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">// Reset the iterator for the inner loop</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">if</span> (is_global_pooling)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                writer-&gt;op_assign(x, const_0);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                writer-&gt;op_assign(x, pool_x_s);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            TileOperand &amp;a_y = writer-&gt;declare_tile(<span class="stringliteral">&quot;a_y&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            writer-&gt;op_binary_expression(a_y, idx_in_h, BinaryOp::Add, y);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="comment">// X dim for-loop</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            writer-&gt;op_for_loop(</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                x, BinaryOp::Less, pool_x_e, x, AssignmentOp::Increment, const_1,</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                [&amp;]()</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    TileOperand &amp;a_x = writer-&gt;declare_tile(<span class="stringliteral">&quot;a_x&quot;</span>, ckw::DataType::Int32);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    writer-&gt;op_binary_expression(a_x, idx_in_w, BinaryOp::Add, x);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    TileOperand &amp;src_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;src_tile&quot;</span>, TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acbae697336efd01a1b964274b4212767">to_ckw</a>(acc_data_type), m0, n0));</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    src_sampler.y(a_x);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    src_sampler.z(a_y);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="comment">// Load src tile</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="keywordflow">if</span> (use_fp_mixed_precision)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        TileOperand &amp;src_uncasted_tile = writer-&gt;declare_tile(<span class="stringliteral">&quot;uncasted_src_tile&quot;</span>, dst_tile_info);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        writer-&gt;op_load(src_uncasted_tile, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor(), src_sampler);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        writer-&gt;op_cast_expression(src_tile, src_uncasted_tile, <a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::ConvertPolicy::None</a>);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        writer-&gt;op_load(src_tile, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor(), src_sampler);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="comment">// Take the square of the input, for L2 Pooling</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    <span class="keywordflow">if</span> (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        writer-&gt;op_binary_expression(src_tile, src_tile, BinaryOp::Mul, src_tile);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <span class="comment">// Perfom Pooling op</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    if (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        writer-&gt;op_binary_elementwise_function(res_tile, BinaryFunction::Max, res_tile, src_tile);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        writer-&gt;op_binary_expression(res_tile, res_tile, BinaryOp::Add, src_tile);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                });</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        });</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> ((_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>) || (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>))</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="comment">// filter_size is automatically broadcasted in the operation</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        writer-&gt;op_binary_expression(res_tile, res_tile, BinaryOp::Div, filter_size);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Take square root of the result in L2 pooling</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">if</span> (_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">pool_type</a>() == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        writer-&gt;op_unary_elementwise_function(res_tile, UnaryFunction::Sqrt, res_tile);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Store the results and do casting if FP_MIXED_PRECISION</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span> (use_fp_mixed_precision)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        writer-&gt;op_cast_expression(dst_tile, res_tile, <a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::ConvertPolicy::None</a>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        writer-&gt;op_assign(dst_tile, res_tile);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">  333</a></span>&#160;<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">GpuCkwPool2d::get_window</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a>() == 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, <span class="stringliteral">&quot;Destination tensor is not initialized&quot;</span>);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vec_size = <a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(((_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>) ? 2 : 4), _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="comment">// Create and configure kernel window</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">auto</span> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(vec_size));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    win      = win.collapse_if_possible(win, <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>); <span class="comment">// collapse window on batch size.</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> win;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">  345</a></span>&#160;std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">GpuCkwPool2d::get_name</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">ComponentGroup</a> &amp;comp_group)<span class="keyword"> const</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(comp_group);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;pool2dMxN&quot;</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings_xhtml_a762f833df97843db10c0a582bac29d4e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#a762f833df97843db10c0a582bac29d4e">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings::mixed_precision</a></div><div class="ttdeci">bool mixed_precision() const</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_pool2d_8cpp_source.xhtml#l00072">GpuPool2d.cpp:72</a></div></div>
<div class="ttc" id="anamespaceckw_xhtml"><div class="ttname"><a href="namespaceckw.xhtml">ckw</a></div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8h_source.xhtml#l00030">GpuCkwComponentArgument.h:30</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00082">Size2D.h:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings_xhtml_a08c5da6acaf271d940199dc16e249c8a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#a08c5da6acaf271d940199dc16e249c8a">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings::use_inf_as_limit</a></div><div class="ttdeci">bool use_inf_as_limit() const</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_pool2d_8cpp_source.xhtml#l00083">GpuPool2d.cpp:83</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a></div><div class="ttdoc">Operator backend specific settings.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_pool2d_8h_source.xhtml#l00042">GpuPool2d.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="a_adjust_vec_size_8h_xhtml"><div class="ttname"><a href="_adjust_vec_size_8h.xhtml">AdjustVecSize.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d_xhtml_a57fa0fc38a7a23597a14423a4c6d5dc8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">arm_compute::experimental::dynamic_fusion::GpuCkwPool2d::get_name</a></div><div class="ttdeci">std::string get_name(const ComponentGroup &amp;comp_group) const override</div><div class="ttdoc">Generate the name of the component.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00345">GpuCkwPool2d.cpp:345</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdeci">@ L2</div><div class="ttdoc">L2 Pooling.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">TensorShape output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">LSTMLayerQuantized.cpp:469</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a132a3a85495f9c5fe8ef684035cd94c8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_root_component</a></div><div class="ttdeci">ComponentPtr get_root_component() const</div><div class="ttdoc">Get the root (first) component of this group.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00304">GpuKernelComponentGroup.cpp:304</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d_xhtml_ae744fb5fb66aa1ce9db14ba93eab24e3"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">arm_compute::experimental::dynamic_fusion::GpuCkwPool2d::get_window</a></div><div class="ttdeci">Window get_window() const override</div><div class="ttdoc">Generate the execution window for the component.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00333">GpuCkwPool2d.cpp:333</a></div></div>
<div class="ttc" id="a_gpu_ckw_kernel_writer_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_kernel_writer_8h.xhtml">GpuCkwKernelWriter.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml_a209aaa95451601c08871f2e9b04ae467"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a209aaa95451601c08871f2e9b04ae467">arm_compute::experimental::dynamic_fusion::Pool2dAttributes::stride</a></div><div class="ttdeci">Size2D stride() const</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8cpp_source.xhtml#l00068">Pool2dAttributes.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument</a></div><div class="ttdoc">The argument of a dynamic fusion component which can be either user tensor or virtual tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8h_source.xhtml#l00044">GpuCkwComponentArgument.h:44</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding2_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1_padding2_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::Padding2D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimension on the top, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00617">Types.h:617</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">arm_compute::experimental::dynamic_fusion::ArgumentPack</a></div><div class="ttdoc">This is a generic class that packs the arguments of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00046">ArgumentPack.h:46</a></div></div>
<div class="ttc" id="a_gpu_kernel_component_group_8h_xhtml"><div class="ttname"><a href="_gpu_kernel_component_group_8h.xhtml">GpuKernelComponentGroup.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a2b1fb10e2eeb3bcea23a8bd60296ca7c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::id</a></div><div class="ttdeci">ComponentId id() const</div><div class="ttdoc">Get component id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00127">IGpuCkwComponentDriver.h:127</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwVariableTable</a></div><div class="ttdoc">A table of all the variables used in the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_variable_table_8h_source.xhtml#l00049">GpuCkwVariableTable.h:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component_xhtml_a7b0b398a61f9445132382fd9c065435b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a7b0b398a61f9445132382fd9c065435b">arm_compute::experimental::dynamic_fusion::IGpuKernelComponent::ckw_component_driver</a></div><div class="ttdeci">virtual const IGpuCkwComponentDriver * ckw_component_driver() const</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00107">IGpuKernelComponent.h:107</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml_a0937a25aa5674160de423a38014781b7"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0937a25aa5674160de423a38014781b7">arm_compute::experimental::dynamic_fusion::Pool2dAttributes::pool_type</a></div><div class="ttdeci">PoolingType pool_type() const</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8cpp_source.xhtml#l00035">Pool2dAttributes.cpp:35</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding2_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1_padding2_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::Padding2D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimension on the left, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00615">Types.h:615</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdeci">@ ACL_DST_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdeci">@ AVG</div><div class="ttdoc">Average Pooling.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a0fdcb923dfd4c74858cc2bc326321efb"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const</div><div class="ttdoc">Collapses all dimensions to a single linear total size.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00175">TensorShape.h:175</a></div></div>
<div class="ttc" id="a_writer_helper_8h_xhtml"><div class="ttname"><a href="_writer_helper_8h.xhtml">WriterHelper.h</a></div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver</a></div><div class="ttdoc">An interface used by GpuCkwDriver to write source code for a kernel component.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00066">IGpuCkwComponentDriver.h:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml_a0fa3ae99193fd9fd7c7874ddd5d5e00f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a0fa3ae99193fd9fd7c7874ddd5d5e00f">arm_compute::experimental::dynamic_fusion::Pool2dAttributes::pad</a></div><div class="ttdeci">Padding2D pad() const</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8cpp_source.xhtml#l00046">Pool2dAttributes.cpp:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00073">Size2D.h:73</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_gpu_ckw_scoped_kernel_writer_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_scoped_kernel_writer_8h.xhtml">GpuCkwScopedKernelWriter.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml_a2a5bf4ca18389e1f61f5fac9044a2c85"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a2a5bf4ca18389e1f61f5fac9044a2c85">arm_compute::experimental::dynamic_fusion::Pool2dAttributes::exclude_padding</a></div><div class="ttdeci">bool exclude_padding() const</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8cpp_source.xhtml#l00079">Pool2dAttributes.cpp:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a></div><div class="ttdoc">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8h_source.xhtml#l00038">Pool2dAttributes.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_abd9eddc31ead31aebb93c3b844a27fe3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abd9eddc31ead31aebb93c3b844a27fe3">arm_compute::experimental::dynamic_fusion::get_coord</a></div><div class="ttdeci">void get_coord(GpuCkwScopedKernelWriter writer, TileOperand &amp;coord, const TileOperand &amp;gid, int32_t step_v, int32_t leftover_step_v, const std::string &amp;prefix, const TileOperand &amp;const_0)</div><div class="ttdoc">Get boundary aware coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_writer_helper_8h_source.xhtml#l00087">WriterHelper.h:87</a></div></div>
<div class="ttc" id="a_gpu_kernel_argument_8h_xhtml"><div class="ttname"><a href="_gpu_kernel_argument_8h.xhtml">GpuKernelArgument.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afff13da4ff0bb0cd14e24f19743c8225"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">arm_compute::experimental::dynamic_fusion::ComponentId</a></div><div class="ttdeci">int32_t ComponentId</div><div class="ttdoc">Uniquely identifies a kernel component within a workload.</div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">Types.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a66df3fbb8781a4dfa011885356e1495f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a66df3fbb8781a4dfa011885356e1495f">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::get_window</a></div><div class="ttdeci">virtual Window get_window() const</div><div class="ttdoc">Generate the execution window for the component.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00101">IGpuCkwComponentDriver.h:101</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::PoolingType::MAX</a></div><div class="ttdeci">@ MAX</div><div class="ttdoc">Max Pooling.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes_xhtml_a3add973b1d02c7ce7b7838005f141091"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#a3add973b1d02c7ce7b7838005f141091">arm_compute::experimental::dynamic_fusion::Pool2dAttributes::pool_size</a></div><div class="ttdeci">Size2D pool_size() const</div><div class="ttdef"><b>Definition:</b> <a href="_pool2d_attributes_8cpp_source.xhtml#l00057">Pool2dAttributes.cpp:57</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_acbae697336efd01a1b964274b4212767"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#acbae697336efd01a1b964274b4212767">arm_compute::experimental::dynamic_fusion::to_ckw</a></div><div class="ttdeci">ckw::DataType to_ckw(DataType dt)</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h_source.xhtml#l00040">Common.h:40</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="a_gpu_ckw_pool2d_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_pool2d_8h.xhtml">GpuCkwPool2d.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_af1518fd5d8941b4135c16b736a3dccb8"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af1518fd5d8941b4135c16b736a3dccb8">arm_compute::experimental::dynamic_fusion::TileContainer</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; std::string &gt; &gt; TileContainer</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00050">GpuCkwDirectConv2d.cpp:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d_xhtml_ac794f053c37af9bdaf61039dbff80cac"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml#ac794f053c37af9bdaf61039dbff80cac">arm_compute::experimental::dynamic_fusion::GpuCkwPool2d::write_component_code</a></div><div class="ttdeci">virtual void write_component_code(const ComponentGroup &amp;comp_group, GpuCkwVariableTable &amp;vtable, GpuCkwScopedKernelWriter writer) const override</div><div class="ttdoc">Generate kernel component code.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00060">GpuCkwPool2d.cpp:60</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7be62dcb9603165af78bca6f2ca8ec15"><div class="ttname"><a href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">arm_compute::adjust_vec_size</a></div><div class="ttdeci">unsigned int adjust_vec_size(unsigned int vec_size, size_t dim0)</div><div class="ttdoc">Returns the adjusted vector size in case it is less than the input's first dimension,...</div><div class="ttdef"><b>Definition:</b> <a href="_adjust_vec_size_8h_source.xhtml#l00038">AdjustVecSize.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="adynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h_xhtml"><div class="ttname"><a href="dynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h.xhtml">Common.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a6c87c6e19567bc42bc52d166728c4461"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::tensors</a></div><div class="ttdeci">ArgumentPack&lt; ITensorInfo &gt; tensors() const</div><div class="ttdoc">Get tensor arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00096">IGpuCkwComponentDriver.h:96</a></div></div>
<div class="ttc" id="a_gpu_ckw_variable_table_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_variable_table_8h.xhtml">GpuCkwVariableTable.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table_xhtml_a8f0011b59fc660a6e9a34d4e56b48175"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a8f0011b59fc660a6e9a34d4e56b48175">arm_compute::experimental::dynamic_fusion::GpuCkwVariableTable::declare_variable</a></div><div class="ttdeci">GpuCkwComponentArgument * declare_variable(const GpuKernelComponentGroup &amp;comp_group, GpuCkwScopedKernelWriter &amp;writer, const ITensorInfo *tensor, TensorStorageType storage, const std::string &amp;alias=&quot;unnamed&quot;)</div><div class="ttdoc">Declare a kernel component variable(argument) for the corresponding tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_variable_table_8cpp_source.xhtml#l00040">GpuCkwVariableTable.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup</a></div><div class="ttdoc">A group of gpu kernel components to be fused together PRECONDITIONS:</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00061">GpuKernelComponentGroup.h:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2daf774ab1f2b95de283245a361d455f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">arm_compute::cpu::width_idx</a></div><div class="ttdeci">const size_t width_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">impl.h:37</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa6d92f521dc4f05ac7f4c856dcfe263e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">arm_compute::cpu::height_idx</a></div><div class="ttdeci">const size_t height_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwScopedKernelWriter</a></div><div class="ttdoc">Helper to automatically manage kernel writer ID space.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_scoped_kernel_writer_8h_source.xhtml#l00040">GpuCkwScopedKernelWriter.h:40</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="dir_41286eb82ab9bcc453374927cfc10252.xhtml">ckw_driver</a></li><li class="navelem"><a class="el" href="dir_510767539347664ee40808f8989f21cf.xhtml">components</a></li><li class="navelem"><a class="el" href="_gpu_ckw_pool2d_8cpp.xhtml">GpuCkwPool2d.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
