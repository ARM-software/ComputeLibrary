<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/depthwise/depthwise_planar.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('depthwise__planar_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthwise_planar.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwise__planar_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="depthwise_2depthfirst__driver_8hpp.xhtml">depthfirst_driver.hpp</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="generic_8hpp.xhtml">interleaves/generic.hpp</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a> {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise</a> {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputStage&gt;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">   34</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">IPlanarStrategy</a></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#aab3f37de8a1a9aa8ff4760b790539719">~IPlanarStrategy</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a6c8638e3ab7202c5a708a21e7a505a54">get_output_rows</a>(<span class="keywordtype">void</span>) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="namespacearm__gemm.xhtml#a764ff3bbe137fc7792aee26f022aa29d">arm_gemm::VLType</a> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a04c0b802f64715731ca9e57dd44eda1f">get_vl_type</a>(<span class="keywordtype">void</span>) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a817eaa797135fb50acd5ec5a9472e5b7">get_storage_size</a>(<span class="keyword">const</span> DepthwiseArgs &amp;) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#afa691bbe2c2eb0d98c4876b39294b01b">pack_parameters</a>(</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keywordtype">void</span> *buffer,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *biases, <span class="keyword">const</span> OutputStage &amp;,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *weights, <span class="keywordtype">size_t</span> ld_weight_col, <span class="keywordtype">size_t</span> ld_weight_row</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  ) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TWeight, <span class="keyword">typename</span> TOutput, <span class="keyword">typename</span> TAccum,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;          <span class="keyword">typename</span> OutputStage&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">   52</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">PlanarKernelType</a>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TWeight, <span class="keyword">typename</span> TOutput, <span class="keyword">typename</span> TAccum&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml">   55</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">PlanarKernelType</a>&lt;TInput, TWeight, TOutput, TAccum, Nothing&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml#af698b468a5157e13732120579986b7c6">   57</a></span>&#160;  <span class="keyword">typedef</span> void (*Type)(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> TInput *, <span class="keywordtype">size_t</span> ld_in_row, <span class="keywordtype">size_t</span> ld_in_col, <span class="keywordtype">size_t</span> ld_in_vl,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_cols,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> TWeight *, <span class="keyword">const</span> TAccum *,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    TOutput **, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_channels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_channels,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    TAccum act_min, TAccum act_max</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  );</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> WorkspaceType&gt;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml#ab0991b179f278ef493d1ab41606fce31">   68</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml#ab0991b179f278ef493d1ab41606fce31">execute</a>(</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> Type fn,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> TInput *inptr, <span class="keywordtype">size_t</span> ld_in_row, <span class="keywordtype">size_t</span> ld_in_col, <span class="keywordtype">size_t</span> ld_in_vl,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_cols,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> TWeight *weights, <span class="keyword">const</span> TAccum *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    TOutput **outptrs, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *outlds, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *outvllds, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_channel, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_channels,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> WorkspaceType *ws</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  )</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    fn(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      inptr, ld_in_row, ld_in_col, ld_in_vl,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      pad_top, valid_input_rows,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      pad_left, valid_input_cols,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      outptrs, outlds, outvllds, output_cols,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      start_channel, valid_channels,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      ws-&gt;activation_min, ws-&gt;activation_max</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    );</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;};</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TWeight, <span class="keyword">typename</span> TOutput&gt;</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml">   92</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">PlanarKernelType</a>&lt;TInput, TWeight, TOutput, int32_t, <a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a>::Requantize32&gt;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml#ad2210205f815f67a259eb0e6ded03044">   94</a></span>&#160;  <span class="keyword">typedef</span> void (*Type)(</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> TInput *, <span class="keywordtype">size_t</span> ld_in_row, <span class="keywordtype">size_t</span> ld_in_col, <span class="keywordtype">size_t</span> ld_in_vl,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_cols,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> TWeight *,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    TOutput **, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_channel, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_channels,</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  );</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> WorkspaceType&gt;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml#ae8c0e5ad8328408f3f3cf03bef80f4c5">  105</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml#ae8c0e5ad8328408f3f3cf03bef80f4c5">execute</a>(</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> Type fn,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> TInput *inptr, <span class="keywordtype">size_t</span> ld_in_row, <span class="keywordtype">size_t</span> ld_in_col, <span class="keywordtype">size_t</span> ld_in_vl,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_cols,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> TWeight *weights, <span class="keyword">const</span> int32_t *,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    TOutput **outptrs, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *outlds, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *outldvls, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_channel, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_channels,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp, <span class="keyword">const</span> WorkspaceType *</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  )</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    fn(</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      inptr, ld_in_row, ld_in_col, ld_in_vl,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      pad_top, valid_input_rows,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      pad_left, valid_input_cols,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      weights,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      outptrs, outlds, outldvls, output_cols,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      first_channel, valid_channels,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      qp</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    );</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TWeight=TInput, <span class="keyword">typename</span> TOutput=TInput,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;          <span class="keyword">typename</span> TAccum=<span class="keyword">typename</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_default_t_accum.xhtml#a19462713b2aab2dae2c87c15f262c1df">DefaultTAccum&lt;TOutput&gt;::Type</a>,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;          <span class="keyword">typename</span> OutputStage=<span class="keyword">typename</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_default_output_stage.xhtml#ad1c388be4cf6c188965e6b72059cfcfc">DefaultOutputStage&lt;TOutput&gt;::Type</a>&gt;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml">  132</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml">PlanarStrategy</a> : <span class="keyword">public</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">IPlanarStrategy</a>&lt;OutputStage&gt;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_kernel_rows, m_kernel_cols;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_stride_rows, m_stride_cols;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_output_rows;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <a class="code" href="namespacearm__gemm.xhtml#a764ff3bbe137fc7792aee26f022aa29d">arm_gemm::VLType</a> m_vl_type;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> get_kernel_packing_point(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;y)<span class="keyword"> const</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Get the kernel point to pack at the given index; return false to</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// indicate that this index (and all greater indices) is out of range.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (m_kernel_rows * m_kernel_cols &lt;= index)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    y = index % m_kernel_cols;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    x = index / m_kernel_cols;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">interleaves::PackingArguments</a> get_kernel_packing_arguments(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">interleaves::PackingArguments</a>(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      m_kernel_rows, m_kernel_cols, <span class="keyword">sizeof</span>(TWeight),</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      <span class="keyword">false</span>, <span class="keyword">sizeof</span>(TAccum), <span class="keyword">true</span>,  <span class="comment">// Don&#39;t pack the bias</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      m_vl_type, <span class="keyword">sizeof</span>(TAccum), 1,  <span class="comment">// Accumulator depth of 1 TODO</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      [<span class="keyword">this</span>] (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;y) -&gt; <span class="keywordtype">bool</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      { <span class="keywordflow">return</span> this-&gt;get_kernel_packing_point(idx, x, y); }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    );</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#ae5cfad07d55035a32979e077f3160e6d">  164</a></span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#ae5cfad07d55035a32979e077f3160e6d">PlanarStrategy</a>(</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_cols,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_cols,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_rows,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearm__gemm.xhtml#a764ff3bbe137fc7792aee26f022aa29d">arm_gemm::VLType</a> vl_type</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  ) : m_kernel_rows(kernel_rows), m_kernel_cols(kernel_cols),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      m_stride_rows(stride_rows), m_stride_cols(stride_cols),</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      m_output_rows(output_rows), m_vl_type(vl_type)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#add77891bbea9460f2067351f1cab7f7d">  175</a></span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#add77891bbea9460f2067351f1cab7f7d">get_output_rows</a>(<span class="keywordtype">void</span>)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_output_rows; }</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a3f549ec2869cd48051635efa4c2a257b">  176</a></span>&#160;  <a class="code" href="namespacearm__gemm.xhtml#a764ff3bbe137fc7792aee26f022aa29d">arm_gemm::VLType</a> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a3f549ec2869cd48051635efa4c2a257b">get_vl_type</a>(<span class="keywordtype">void</span>)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_vl_type; }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a1acb91503a7760505b240fc04bbab5ad">  178</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a1acb91503a7760505b240fc04bbab5ad">get_storage_size</a>(<span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">interleaves::get_storage_size_generic</a>(this-&gt;get_kernel_packing_arguments(), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#af41768f9bbd652f57eec14b53afd6059">  183</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#af41768f9bbd652f57eec14b53afd6059">pack_parameters</a>(</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keywordtype">void</span> *buffer,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *biases, <span class="keyword">const</span> OutputStage &amp;,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *weights, <span class="keywordtype">size_t</span> ld_weight_col, <span class="keywordtype">size_t</span> ld_weight_row</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  )<span class="keyword"> const override</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#a3b433ad9e7b77bf0702700e2006e4210">interleaves::pack_parameters_generic</a>(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      this-&gt;get_kernel_packing_arguments(), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      buffer, biases, weights, ld_weight_col, ld_weight_row</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    );</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a4963f1018ee3db0d9de9ce2520161285">  195</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a4963f1018ee3db0d9de9ce2520161285">KernelType</a> = <span class="keyword">typename</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">PlanarKernelType&lt;TInput, TWeight, TOutput, TAccum, OutputStage&gt;::Type</a>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a4963f1018ee3db0d9de9ce2520161285">KernelType</a> <a class="code" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a213a049a509b6b12d98016281ece3452">get_kernel</a>(<span class="keywordtype">void</span>) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">namespace </span>{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">struct </span>OutputRowPtrsElement</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">struct </span>Workspace</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  {</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="depthwise__planar_8hpp.xhtml#a52b3c35640da9f5fb9ff501739859382">  207</a></span>&#160;    T **<a class="code" href="depthwise__planar_8hpp.xhtml#a52b3c35640da9f5fb9ff501739859382">output_row_ptrs</a>;</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="depthwise__planar_8hpp.xhtml#a2e94f2c356e506f2f2d35b842bc93f20">  208</a></span>&#160;    <span class="keywordtype">size_t</span> *<a class="code" href="depthwise__planar_8hpp.xhtml#a2e94f2c356e506f2f2d35b842bc93f20">output_ld_cols</a>;</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="depthwise__planar_8hpp.xhtml#a63b405f823b093182b82067c5f27f491">  209</a></span>&#160;    <span class="keywordtype">size_t</span> *<a class="code" href="depthwise__planar_8hpp.xhtml#a63b405f823b093182b82067c5f27f491">output_ld_vls</a>;  <span class="comment">// Stride between vectors of channels</span></div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="depthwise__planar_8hpp.xhtml#a72195d830d58ef665fc5b08d5d7ed2ea">  210</a></span>&#160;    T *<a class="code" href="depthwise__planar_8hpp.xhtml#a72195d830d58ef665fc5b08d5d7ed2ea">output_padding_buffer</a>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  };</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputStage&gt;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">size_t</span> get_element_size(<span class="keyword">const</span> WorkspaceArgs&lt;IPlanarStrategy&lt;OutputStage&gt;, OutputStage&gt; &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// We need one pointer and stride for each row of output, and an additional</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// blob of memory into which padded stores can go.</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.strategy-&gt;get_output_rows() * (<span class="keyword">sizeof</span>(T *) + 2*<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>)) +</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;           get_vector_length&lt;char&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.strategy-&gt;get_vl_type());</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> WorkspaceType, <span class="keyword">typename</span> OutputStage&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> *initialise(WorkspaceType *ws, <span class="keywordtype">void</span> *buffer,</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                          <span class="keyword">const</span> WorkspaceArgs&lt;IPlanarStrategy&lt;OutputStage&gt;, OutputStage&gt; &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> n_rows = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.strategy-&gt;get_output_rows();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    ws-&gt;output_row_ptrs = <span class="keyword">reinterpret_cast&lt;</span>T **<span class="keyword">&gt;</span>(buffer);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    ws-&gt;output_ld_cols = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">size_t</span> *<span class="keyword">&gt;</span>(ws-&gt;output_row_ptrs + n_rows);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    ws-&gt;output_ld_vls = ws-&gt;output_ld_cols + n_rows;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    ws-&gt;output_padding_buffer = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(ws-&gt;output_ld_vls + n_rows);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> ws-&gt;output_padding_buffer + get_vector_length&lt;T&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.strategy-&gt;get_vl_type());</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;};</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}  <span class="comment">// namespace {anonymous}</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TInput, <span class="keyword">typename</span> TWeight=TInput, <span class="keyword">typename</span> TOutput=TInput,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;          <span class="keyword">typename</span> TAccum=<span class="keyword">typename</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_default_t_accum.xhtml#a19462713b2aab2dae2c87c15f262c1df">DefaultTAccum&lt;TOutput&gt;::Type</a>,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;          <span class="keyword">typename</span> OutputStage=<span class="keyword">typename</span> <a class="code" href="structarm__conv_1_1depthwise_1_1_default_output_stage.xhtml#ad1c388be4cf6c188965e6b72059cfcfc">DefaultOutputStage&lt;TOutput&gt;::Type</a>&gt;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml">  241</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml">DepthwisePlanar</a> : <span class="keyword">public</span> DepthwiseCommon&lt;TInput, TWeight, TOutput&gt;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">using</span> Parent = DepthwiseCommon&lt;TInput, TWeight, TOutput&gt;;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keyword">using</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">StrategyType</a> = <a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">IPlanarStrategy&lt;OutputStage&gt;</a>;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keyword">using</span> WorkspaceManager = Workspace&lt;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    OutputRowPtrsElement&lt;TOutput&gt;,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    ActivationsElement&lt;TAccum, OutputStage&gt;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  &gt;;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keyword">using</span> WorkspaceType = <span class="keyword">typename</span> WorkspaceManager::WorkspaceType;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  std::unique_ptr&lt;StrategyType&gt; m_strat;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keyword">const</span> TAccum *m_bias;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  OutputStage m_os;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">  256</a></span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">DepthwisePlanar</a>(<a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">StrategyType</a> *<span class="keyword">const</span> strat, <span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> OutputStage &amp;os = {})</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  : Parent(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), m_strat(strat), m_bias(<span class="keyword">nullptr</span>), m_os(os)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">DepthwisePlanar</a>(<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">DepthwisePlanar</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">DepthwisePlanar</a> &amp;<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#ae22790f397765965c07c2eeacb09421a">operator=</a>(<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">DepthwisePlanar</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a6de6182e7c12d5492f092057f5b32d30">  264</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a6de6182e7c12d5492f092057f5b32d30">get_storage_size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">return</span> m_strat-&gt;get_storage_size(this-&gt;m_args);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a4e86e96b1933ec8bd8eae5f55654d111">  269</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a4e86e96b1933ec8bd8eae5f55654d111">pack_parameters</a>(</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordtype">void</span> *buffer, <span class="keyword">const</span> <span class="keywordtype">void</span> *biases,</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *weights, <span class="keywordtype">size_t</span> ld_weight_col, <span class="keywordtype">size_t</span> ld_weight_row</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  )<span class="keyword"> override</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    m_strat-&gt;pack_parameters(this-&gt;m_args, buffer, biases, {}, weights, ld_weight_col, ld_weight_row);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    this-&gt;m_bias = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TAccum *<span class="keyword">&gt;</span>(biases);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    depthwise_depthfirst::stash_bias(this-&gt;m_os, biases);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">  279</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">get_working_size</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> this-&gt;get_working_size_per_thread() * n_threads;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="comment">/* Compute the amount of working space required for a single thread. */</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> get_working_size_per_thread(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> WorkspaceManager::get_sizeof_workspace(</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      WorkspaceArgs&lt;<a class="code" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">IPlanarStrategy&lt;OutputStage&gt;</a>, OutputStage&gt;(m_strat.get(), this-&gt;m_args, m_os));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="comment">/* Initialise the working space for a thread. */</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> initialise_working_space(<span class="keywordtype">void</span> *buffer)<span class="keyword"> const</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    WorkspaceManager::initialise(</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      buffer,</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      WorkspaceArgs&lt;IPlanarStrategy&lt;OutputStage&gt;, OutputStage&gt;(m_strat.get(), this-&gt;m_args, m_os)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    );</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="comment">/* Execute the kernel for a given chunk of work. */</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> execute_kernel(</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">const</span> TInput *inptr, <span class="keywordtype">size_t</span> ld_in_row, <span class="keywordtype">size_t</span> ld_in_col, <span class="keywordtype">size_t</span> ld_in_vl,</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows,</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_cols,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">const</span> TWeight *weights, <span class="keyword">const</span> TAccum *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    TOutput *outptr, <span class="keywordtype">size_t</span> ld_out_row, <span class="keywordtype">size_t</span> ld_out_col, <span class="keywordtype">size_t</span> ld_out_vl,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_cols,</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_channel, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_channels,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    WorkspaceType *ws</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  )<span class="keyword"> const</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// Initialise the output pointers</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; m_strat-&gt;get_output_rows(); i++)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="comment">// Point at the output tensor for all valid rows; otherwise point at the</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      <span class="comment">// padding buffer.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      ws-&gt;output_row_ptrs[i] = i &lt; valid_output_rows ? outptr : ws-&gt;output_padding_buffer;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      ws-&gt;output_ld_cols[i] = i &lt; valid_output_rows ? ld_out_col : 0;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      ws-&gt;output_ld_vls[i] = i &lt; valid_output_rows ? ld_out_vl : 0;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      outptr += ld_out_row;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Execute the kernel</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    PlanarKernelType&lt;TInput, TWeight, TOutput, TAccum, OutputStage&gt;::template execute&lt;WorkspaceType&gt;(</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>PlanarStrategy&lt;TInput, TWeight, TOutput, TAccum, OutputStage&gt; *<span class="keyword">&gt;</span>(m_strat.get())-&gt;get_kernel(),</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      inptr, ld_in_row, ld_in_col, ld_in_vl,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      pad_top, valid_input_rows, pad_left, valid_input_cols,</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      ws-&gt;output_row_ptrs, ws-&gt;output_ld_cols, ws-&gt;output_ld_vls,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      valid_output_cols, first_channel, valid_channels,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      this-&gt;m_os, ws</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    );</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordtype">void</span> execute_internal(</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordtype">size_t</span> ld_input_col,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">size_t</span> ld_input_row,</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">size_t</span> ld_input_batch,</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">void</span> *output,</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">size_t</span> ld_output_col,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">size_t</span> ld_output_row,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">size_t</span> ld_output_batch,</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">void</span> *working_space,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_id,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  )<span class="keyword"> const override</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// Get and initialise the working space for this thread.</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">void</span> *thread_working_space =</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;      <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(working_space) + thread_id * this-&gt;get_working_size_per_thread();</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    this-&gt;initialise_working_space(thread_working_space);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">auto</span> ws = <span class="keyword">reinterpret_cast&lt;</span>WorkspaceType *<span class="keyword">&gt;</span>(thread_working_space);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> n_output_channels = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vl = get_vector_length&lt;TAccum&gt;(m_strat-&gt;get_vl_type());</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Get typed pointers</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">auto</span> input_batch = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TInput *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">auto</span> output_batch = <span class="keyword">reinterpret_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(output);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">auto</span> weights = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TWeight *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="comment">// Iterate over batches</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a> = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.n_batches; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>--)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <span class="comment">// NOTE: Other loop orderings are possible and it would be worth</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="comment">// investigating them.</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;      <span class="comment">// Within a batch, stripe threads across rows.</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> start_output_i = thread_id * m_strat-&gt;get_output_rows();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;           start_output_i &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.output_rows;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;           start_output_i += n_threads * m_strat-&gt;get_output_rows())</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="comment">// Determine what (if any padding) is required on the top/bottom of</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// this row of the convolution.</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_input_i = start_output_i * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.stride_rows - <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.padding.top;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_pad_top = start_input_i &lt; 0 ? -start_input_i : 0;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_i = start_input_i &lt; 0 ? 0 : start_input_i;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_input_rows = input_i &gt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_rows ? 0 : <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_rows - input_i;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_rows = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.output_rows - start_output_i;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">auto</span> inptr_row = input_batch + input_i*ld_input_row;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">auto</span> outptr_row = output_batch + start_output_i * ld_output_row;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="comment">// Execute the kernel</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        this-&gt;execute_kernel(</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;          inptr_row, ld_input_row, ld_input_col, vl,</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;          input_pad_top, valid_input_rows, <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.padding.left, <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_cols,</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;          weights, this-&gt;m_bias,</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;          outptr_row, ld_output_row, ld_output_col, vl,</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;          valid_output_rows, <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.output_cols,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;          0 <span class="comment">/* first channel */</span>, n_output_channels,</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;          ws</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        );</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      <span class="comment">// Update the input and output pointers to account for batch</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;      input_batch += ld_input_batch;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      output_batch += ld_output_batch;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;};</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}  <span class="comment">// namespace depthwise</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}  <span class="comment">// namespace arm_conv</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="adepthwise_2depthfirst__driver_8hpp_xhtml"><div class="ttname"><a href="depthwise_2depthfirst__driver_8hpp.xhtml">depthfirst_driver.hpp</a></div></div>
<div class="ttc" id="adepthwise__planar_8hpp_xhtml_a2e94f2c356e506f2f2d35b842bc93f20"><div class="ttname"><a href="depthwise__planar_8hpp.xhtml#a2e94f2c356e506f2f2d35b842bc93f20">output_ld_cols</a></div><div class="ttdeci">size_t * output_ld_cols</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00208">depthwise_planar.hpp:208</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_ae5cfad07d55035a32979e077f3160e6d"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#ae5cfad07d55035a32979e077f3160e6d">arm_conv::depthwise::PlanarStrategy::PlanarStrategy</a></div><div class="ttdeci">PlanarStrategy(unsigned int kernel_rows, unsigned int kernel_cols, unsigned int stride_rows, unsigned int stride_cols, unsigned int output_rows, arm_gemm::VLType vl_type)</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00164">depthwise_planar.hpp:164</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments_xhtml"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">arm_conv::depthwise::interleaves::PackingArguments</a></div><div class="ttdef"><b>Definition:</b> <a href="generic_8hpp_source.xhtml#l00036">generic.hpp:36</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_af41768f9bbd652f57eec14b53afd6059"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#af41768f9bbd652f57eec14b53afd6059">arm_conv::depthwise::PlanarStrategy::pack_parameters</a></div><div class="ttdeci">void pack_parameters(const DepthwiseArgs &amp;args, void *buffer, const void *biases, const OutputStage &amp;, const void *weights, size_t ld_weight_col, size_t ld_weight_row) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00183">depthwise_planar.hpp:183</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1depthwise_xhtml_a301c401a1e9a5ac74367c4719a185aa4"><div class="ttname"><a href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">arm_conv::depthwise::depthwise</a></div><div class="ttdeci">template UniqueDepthwiseCommon&lt; float &gt; depthwise(const DepthwiseArgs &amp;, const Nothing &amp;)</div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml_aab3f37de8a1a9aa8ff4760b790539719"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#aab3f37de8a1a9aa8ff4760b790539719">arm_conv::depthwise::IPlanarStrategy::~IPlanarStrategy</a></div><div class="ttdeci">virtual ~IPlanarStrategy()=default</div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml_ae2ca173a7d8633ac958e775fb614b1e1"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#ae2ca173a7d8633ac958e775fb614b1e1">arm_conv::depthwise::DepthwisePlanar::get_working_size</a></div><div class="ttdeci">size_t get_working_size(unsigned int n_threads) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00279">depthwise_planar.hpp:279</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe_xhtml_ae8c0e5ad8328408f3f3cf03bef80f4c5"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml#ae8c0e5ad8328408f3f3cf03bef80f4c5">arm_conv::depthwise::PlanarKernelType&lt; TInput, TWeight, TOutput, int32_t, arm_gemm::Requantize32 &gt;::execute</a></div><div class="ttdeci">static void execute(const Type fn, const TInput *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const TWeight *weights, const int32_t *, TOutput **outptrs, const size_t *outlds, const size_t *outldvls, unsigned int output_cols, unsigned int first_channel, unsigned int valid_channels, const arm_gemm::Requantize32 &amp;qp, const WorkspaceType *)</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00105">depthwise_planar.hpp:105</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1depthwise_1_1interleaves_xhtml_a3b433ad9e7b77bf0702700e2006e4210"><div class="ttname"><a href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#a3b433ad9e7b77bf0702700e2006e4210">arm_conv::depthwise::interleaves::pack_parameters_generic</a></div><div class="ttdeci">void pack_parameters_generic(const PackingArguments &amp;packing_args, const DepthwiseArgs &amp;args, void *buffer_raw, const void *biases_raw, const void *weights_raw, size_t ld_weight_col, size_t ld_weight_row)</div><div class="ttdef"><b>Definition:</b> <a href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00067">generic.cpp:67</a></div></div>
<div class="ttc" id="adepthwise__planar_8hpp_xhtml_a52b3c35640da9f5fb9ff501739859382"><div class="ttname"><a href="depthwise__planar_8hpp.xhtml#a52b3c35640da9f5fb9ff501739859382">output_row_ptrs</a></div><div class="ttdeci">T ** output_row_ptrs</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00207">depthwise_planar.hpp:207</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_a4963f1018ee3db0d9de9ce2520161285"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a4963f1018ee3db0d9de9ce2520161285">arm_conv::depthwise::PlanarStrategy&lt; uint8_t, int8_t &gt;::KernelType</a></div><div class="ttdeci">typename PlanarKernelType&lt; uint8_t, int8_t, uint8_t, typename DefaultTAccum&lt; uint8_t &gt;::Type, typename DefaultOutputStage&lt; uint8_t &gt;::Type &gt;::Type KernelType</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00195">depthwise_planar.hpp:195</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml_a6c8638e3ab7202c5a708a21e7a505a54"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a6c8638e3ab7202c5a708a21e7a505a54">arm_conv::depthwise::IPlanarStrategy::get_output_rows</a></div><div class="ttdeci">virtual unsigned int get_output_rows(void) const =0</div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml">arm_conv::depthwise::PlanarStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00132">depthwise_planar.hpp:132</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml_afa691bbe2c2eb0d98c4876b39294b01b"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#afa691bbe2c2eb0d98c4876b39294b01b">arm_conv::depthwise::IPlanarStrategy::pack_parameters</a></div><div class="ttdeci">virtual void pack_parameters(const DepthwiseArgs &amp;args, void *buffer, const void *biases, const OutputStage &amp;, const void *weights, size_t ld_weight_col, size_t ld_weight_row) const =0</div></div>
<div class="ttc" id="anamespacearm__conv_1_1depthwise_1_1interleaves_xhtml_af85eedd0781815c14baa970aeecb8c88"><div class="ttname"><a href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">arm_conv::depthwise::interleaves::get_storage_size_generic</a></div><div class="ttdeci">size_t get_storage_size_generic(const PackingArguments &amp;packing_args, const DepthwiseArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00045">generic.cpp:45</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_a1acb91503a7760505b240fc04bbab5ad"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a1acb91503a7760505b240fc04bbab5ad">arm_conv::depthwise::PlanarStrategy::get_storage_size</a></div><div class="ttdeci">size_t get_storage_size(const DepthwiseArgs &amp;args) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00178">depthwise_planar.hpp:178</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00105">CpuGemmAssemblyDispatch.cpp:105</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1_default_output_stage_xhtml_ad1c388be4cf6c188965e6b72059cfcfc"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1_default_output_stage.xhtml#ad1c388be4cf6c188965e6b72059cfcfc">arm_conv::depthwise::DefaultOutputStage::Type</a></div><div class="ttdeci">Nothing Type</div><div class="ttdef"><b>Definition:</b> <a href="depthwise_2depthfirst__driver_8hpp_source.xhtml#l00037">depthfirst_driver.hpp:37</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml_ae22790f397765965c07c2eeacb09421a"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#ae22790f397765965c07c2eeacb09421a">arm_conv::depthwise::DepthwisePlanar::operator=</a></div><div class="ttdeci">DepthwisePlanar &amp; operator=(DepthwisePlanar &amp;)=delete</div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml_acdcfef4103a34e00f9b158dfd97086d8"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#acdcfef4103a34e00f9b158dfd97086d8">arm_conv::depthwise::DepthwisePlanar::DepthwisePlanar</a></div><div class="ttdeci">DepthwisePlanar(StrategyType *const strat, const DepthwiseArgs &amp;args, const OutputStage &amp;os={})</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00256">depthwise_planar.hpp:256</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">arm_conv::depthwise::IPlanarStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00034">depthwise_planar.hpp:34</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_a3f549ec2869cd48051635efa4c2a257b"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a3f549ec2869cd48051635efa4c2a257b">arm_conv::depthwise::PlanarStrategy::get_vl_type</a></div><div class="ttdeci">arm_gemm::VLType get_vl_type(void) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00176">depthwise_planar.hpp:176</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1_planar_kernel_type_xhtml"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">arm_conv::depthwise::PlanarKernelType</a></div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00052">depthwise_planar.hpp:52</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1_default_t_accum_xhtml_a19462713b2aab2dae2c87c15f262c1df"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1_default_t_accum.xhtml#a19462713b2aab2dae2c87c15f262c1df">arm_conv::depthwise::DefaultTAccum::Type</a></div><div class="ttdeci">T Type</div><div class="ttdef"><b>Definition:</b> <a href="depthwise_2depthfirst__driver_8hpp_source.xhtml#l00033">depthfirst_driver.hpp:33</a></div></div>
<div class="ttc" id="astructarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4_xhtml_ab0991b179f278ef493d1ab41606fce31"><div class="ttname"><a href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml#ab0991b179f278ef493d1ab41606fce31">arm_conv::depthwise::PlanarKernelType&lt; TInput, TWeight, TOutput, TAccum, Nothing &gt;::execute</a></div><div class="ttdeci">static void execute(const Type fn, const TInput *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const TWeight *weights, const TAccum *bias, TOutput **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const Nothing &amp;, const WorkspaceType *ws)</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00068">depthwise_planar.hpp:68</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml_a04c0b802f64715731ca9e57dd44eda1f"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a04c0b802f64715731ca9e57dd44eda1f">arm_conv::depthwise::IPlanarStrategy::get_vl_type</a></div><div class="ttdeci">virtual arm_gemm::VLType get_vl_type(void) const =0</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_abb222b6342b2b9056ec65056984d5e21"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">arm_compute::test::parameters</a></div><div class="ttdeci">std::unique_ptr&lt; ParametersLibrary &gt; parameters</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00046">Framework.cpp:46</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a764ff3bbe137fc7792aee26f022aa29d"><div class="ttname"><a href="namespacearm__gemm.xhtml#a764ff3bbe137fc7792aee26f022aa29d">arm_gemm::VLType</a></div><div class="ttdeci">VLType</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00080">utils.hpp:80</a></div></div>
<div class="ttc" id="adepthwise__planar_8hpp_xhtml_a72195d830d58ef665fc5b08d5d7ed2ea"><div class="ttname"><a href="depthwise__planar_8hpp.xhtml#a72195d830d58ef665fc5b08d5d7ed2ea">output_padding_buffer</a></div><div class="ttdeci">T * output_padding_buffer</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00210">depthwise_planar.hpp:210</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_a213a049a509b6b12d98016281ece3452"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#a213a049a509b6b12d98016281ece3452">arm_conv::depthwise::PlanarStrategy::get_kernel</a></div><div class="ttdeci">virtual KernelType get_kernel(void) const =0</div></div>
<div class="ttc" id="adepthwise__planar_8hpp_xhtml_a63b405f823b093182b82067c5f27f491"><div class="ttname"><a href="depthwise__planar_8hpp.xhtml#a63b405f823b093182b82067c5f27f491">output_ld_vls</a></div><div class="ttdeci">size_t * output_ld_vls</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00209">depthwise_planar.hpp:209</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml">arm_conv::depthwise::DepthwisePlanar</a></div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00241">depthwise_planar.hpp:241</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_i_planar_strategy_xhtml_a817eaa797135fb50acd5ec5a9472e5b7"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml#a817eaa797135fb50acd5ec5a9472e5b7">arm_conv::depthwise::IPlanarStrategy::get_storage_size</a></div><div class="ttdeci">virtual size_t get_storage_size(const DepthwiseArgs &amp;) const =0</div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_planar_strategy_xhtml_add77891bbea9460f2067351f1cab7f7d"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml#add77891bbea9460f2067351f1cab7f7d">arm_conv::depthwise::PlanarStrategy::get_output_rows</a></div><div class="ttdeci">unsigned int get_output_rows(void) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00175">depthwise_planar.hpp:175</a></div></div>
<div class="ttc" id="anamespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00030">addressing.cpp:30</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00186">arm_gemm.hpp:186</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml_a6de6182e7c12d5492f092057f5b32d30"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a6de6182e7c12d5492f092057f5b32d30">arm_conv::depthwise::DepthwisePlanar::get_storage_size</a></div><div class="ttdeci">size_t get_storage_size(void) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00264">depthwise_planar.hpp:264</a></div></div>
<div class="ttc" id="aclassarm__conv_1_1depthwise_1_1_depthwise_planar_xhtml_a4e86e96b1933ec8bd8eae5f55654d111"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml#a4e86e96b1933ec8bd8eae5f55654d111">arm_conv::depthwise::DepthwisePlanar::pack_parameters</a></div><div class="ttdeci">void pack_parameters(void *buffer, const void *biases, const void *weights, size_t ld_weight_col, size_t ld_weight_row) override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__planar_8hpp_source.xhtml#l00269">depthwise_planar.hpp:269</a></div></div>
<div class="ttc" id="ageneric_8hpp_xhtml"><div class="ttname"><a href="generic_8hpp.xhtml">generic.hpp</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="dir_abb214ad2a926c78a0f27cabc6cb4a00.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="depthwise__planar_8hpp.xhtml">depthwise_planar.hpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:19:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
