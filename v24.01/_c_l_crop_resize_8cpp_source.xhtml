<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/functions/CLCropResize.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_crop_resize_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLCropResize.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_crop_resize_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_crop_resize_8h.xhtml">arm_compute/runtime/CL/functions/CLCropResize.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_c_l_2_c_l_helpers_8h.xhtml">arm_compute/core/CL/CLHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2common_2utils_2_log_8h.xhtml">src/common/utils/Log.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_fill_border_kernel_8h.xhtml">src/core/CL/kernels/CLFillBorderKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> configure_crop(<span class="keyword">const</span> ICLTensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                           ICLTensor       *crop_boxes,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                           ICLTensor       *box_ind,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                           ICLTensor       *output,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                           uint32_t         crop_box_ind,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                           Coordinates     &amp;start,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                           Coordinates     &amp;<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                           uint32_t        &amp;batch_index)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    batch_index = *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(box_ind-&gt;ptr_to_element(Coordinates(crop_box_ind))));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// _crop_box_ind is used to index crop_boxes and retrieve the appropriate crop box.</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// The crop box is specified by normalized coordinates [y0, x0, y1, x1].</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> x0 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(crop_boxes-&gt;ptr_to_element(Coordinates(1, crop_box_ind)));</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> y0 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(crop_boxes-&gt;ptr_to_element(Coordinates(0, crop_box_ind)));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> x1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(crop_boxes-&gt;ptr_to_element(Coordinates(3, crop_box_ind)));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> y1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(crop_boxes-&gt;ptr_to_element(Coordinates(2, crop_box_ind)));</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// The normalized coordinates are scaled to retrieve the floating point image coordinates which are rounded to integers.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    start = Coordinates(std::floor(x0 * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[1] - 1) + 0.5f),</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        std::floor(y0 * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[2] - 1) + 0.5f));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = Coordinates(std::floor(x1 * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[1] - 1) + 0.5f),</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                        std::floor(y1 * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[2] - 1) + 0.5f));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> TensorShape out_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[0], <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(abs(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0] - start[0])) + 1,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(abs(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1] - start[1])) + 1);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    output-&gt;info()-&gt;set_tensor_shape(out_shape);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ab776ea56c9004a561a4c19f323aa4e9d">   68</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ab776ea56c9004a561a4c19f323aa4e9d">CLCropResize::CLCropResize</a>()</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    : _input(nullptr),</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      _boxes(nullptr),</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      _box_ind(nullptr),</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      _output(nullptr),</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      _num_boxes(0),</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      _method(),</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      _extrapolation_value(0),</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      _scale(),</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      _copy(),</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      _crop_results(),</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      _scaled_results(),</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      _internal_functions()</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a5762deba97768db65fffbf72eb3bdca5">CLCropResize::~CLCropResize</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a50ea7a28151a85dbbe7483ac032a3886">   86</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a50ea7a28151a85dbbe7483ac032a3886">CLCropResize::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>  *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                              <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>        *boxes,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                              <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>        *box_ind,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>  *output,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                              <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a>       crop_size,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> method,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                              <span class="keywordtype">float</span>               extrapolation_value)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a> &lt;= 0 || crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a> &lt;= 0);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(method == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">InterpolationPolicy::AREA</a>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0] != 4);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] != box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0]);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> temp_info;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_crop.xhtml#a177d477dede47e247a26df5040e087d6">CLCrop::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;clone().get(), &amp;temp_info, {0, 0}, {1, 1},</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(3) - 1, extrapolation_value));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() &gt; 0)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(output, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#abdb9168800c70e5e2c4c020a3b905738">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;tensor_shape()[0], crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>, crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>, boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1]);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), out_shape);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a668319020f52120f3269e983cc72d5f3">  111</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a668319020f52120f3269e983cc72d5f3">CLCropResize::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>    *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>          *boxes,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>          *box_ind,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>          *output,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                             <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a>       crop_size,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                             <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> method,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                             <span class="keywordtype">float</span>               extrapolation_value)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a668319020f52120f3269e983cc72d5f3">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, boxes, box_ind, output, crop_size, method,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;              extrapolation_value);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ae1d21bd486cb50044f24401c7dc0a667">  123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a668319020f52120f3269e983cc72d5f3">CLCropResize::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>        *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>              *boxes,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>              *box_ind,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                             <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>              *output,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                             <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a>           crop_size,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                             <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>     method,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                             <span class="keywordtype">float</span>                   extrapolation_value)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, boxes, box_ind);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a50ea7a28151a85dbbe7483ac032a3886">CLCropResize::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(),</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                      crop_size, method, extrapolation_value));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, boxes, box_ind, output, crop_size, method, extrapolation_value);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> =</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[0], crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>, crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>, boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1]);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad079478f73a5eac133d029fc1ff10225">_num_boxes</a> = boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1];</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()[0], crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>, crop_size.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>               = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a72a3dc1eaa8912f18a01ed7a377e31f8">_boxes</a>               = boxes;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aafd18b00f7069f03320be223260c945c">_box_ind</a>             = box_ind;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a62d192d931002b4866443cd7fc71419b">_output</a>              = output;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ac17c6ba3cfe6338930b20d4541ff8b34">_method</a>              = method;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a5e6dad2c0f2799f694d00240cb728859">_extrapolation_value</a> = extrapolation_value;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// For each crop box:</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// - The initial cropped image is produced as specified by boxes[i] from the 3D image input[box_ind[i]].</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">//   Possibly using a CLCrop and up to four CLFills.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// - A tensor is required to hold this initial cropped image.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// - A scale function is used to resize the cropped image to the size specified by crop_size.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// - A tensor is required to hold the final scaled image before it is copied into the 4D output</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">//   that will hold all final cropped and scaled 3D images using CLCopy.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// The contents of _boxes and _box_ind are required to calculate the shape</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// of the initial cropped image and thus are required to configure the</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// kernels used for cropping and scaling.</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a72a3dc1eaa8912f18a01ed7a377e31f8">_boxes</a>-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">map</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aafd18b00f7069f03320be223260c945c">_box_ind</a>-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">map</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_box = 0; num_box &lt; <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad079478f73a5eac133d029fc1ff10225">_num_boxes</a>; ++num_box)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">auto</span>       crop_tensor = std::make_unique&lt;CLTensor&gt;();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> crop_result_info(1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        crop_result_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">set_data_layout</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        crop_tensor-&gt;allocator()-&gt;init(crop_result_info);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>.emplace_back(std::move(crop_tensor));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">auto</span>       scale_tensor = std::make_unique&lt;CLTensor&gt;();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> scaled_result_info(out_shape, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        scaled_result_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">set_data_layout</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        scale_tensor-&gt;allocator()-&gt;init(scaled_result_info);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a6632ee639b1072ab5cc43449df659b2c">_scaled_results</a>.emplace_back(std::move(scale_tensor));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Size of the crop box in _boxes has to be given before the configure</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        uint32_t    batch_index;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> start{};</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>{};</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        configure_crop(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a72a3dc1eaa8912f18a01ed7a377e31f8">_boxes</a>, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aafd18b00f7069f03320be223260c945c">_box_ind</a>, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), num_box, start, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>, batch_index);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">auto</span> scale_kernel = std::make_unique&lt;CLScale&gt;();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        scale_kernel-&gt;configure(</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a6632ee639b1072ab5cc43449df659b2c">_scaled_results</a>[num_box].get(),</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a>{<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ac17c6ba3cfe6338930b20d4541ff8b34">_method</a>, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a5e6dad2c0f2799f694d00240cb728859">_extrapolation_value</a>), <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">SamplingPolicy::TOP_LEFT</a>});</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#adb221b9aa2c38a5b7c50cbab3d2db3a0">_scale</a>.emplace_back(std::move(scale_kernel));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a62d192d931002b4866443cd7fc71419b">_output</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>());</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(3, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(num_box, num_box + 1, 1));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">auto</span> copy_kernel = std::make_unique&lt;CLCopy&gt;();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        copy_kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a6632ee639b1072ab5cc43449df659b2c">_scaled_results</a>[num_box].get(), <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a62d192d931002b4866443cd7fc71419b">_output</a>, &amp;win);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a823a1fed88b3181e759fb16954cc7a5c">_copy</a>.emplace_back(std::move(copy_kernel));</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box]-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a6632ee639b1072ab5cc43449df659b2c">_scaled_results</a>[num_box]-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordtype">bool</span> is_width_flipped  = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0] &lt; start[0];</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordtype">bool</span> is_height_flipped = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1] &lt; start[1];<span class="comment"></span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">        /** The number of rows out of bounds at the start and end of _crop_results[num_box].get(). */</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        std::array&lt;int32_t, 2&gt; rows_out_of_bounds{0};<span class="comment"></span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">        /** The number of columns out of bounds at the start and end of _crop_results[num_box].get(). */</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        std::array&lt;int32_t, 2&gt; cols_out_of_bounds{0};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">if</span> (is_height_flipped)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            rows_out_of_bounds[0] = start[1] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                        ? std::min(start[1] - <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) + 1,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(2))</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                        : 0;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            rows_out_of_bounds[1] =</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1] &lt; 0 ? std::min(-<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1], <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(2)))</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                           : 0;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            rows_out_of_bounds[0] =</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                start[1] &lt; 0</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    ? std::min(-start[1], <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(2)))</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    : 0;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            rows_out_of_bounds[1] = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                        ? std::min(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[1] - <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) + 1,</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(2))</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                        : 0;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">if</span> (is_width_flipped)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            cols_out_of_bounds[0] = start[0] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                        ? std::min(start[0] - <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) + 1,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(1))</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                        : 0;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            cols_out_of_bounds[1] =</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0] &lt; 0 ? std::min(-<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0], <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(1)))</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                           : 0;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            cols_out_of_bounds[0] =</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                start[0] &lt; 0</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    ? std::min(-start[0], <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(1)))</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    : 0;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            cols_out_of_bounds[1] = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                        ? std::min(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>[0] - <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) + 1,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(1))</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                        : 0;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> full_window = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>());</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">//  Full _crop_results[num_box].get() window:</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="comment">//  --------------------------------</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">//  |          Out of bounds       |</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="comment">//  |          rows before         |</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="comment">//  |------------------------------|</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">//  | Out of | In         | Out of |</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="comment">//  | bounds | bounds     | bounds |</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="comment">//  | cols   | elements   | cols   |</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="comment">//  | before | copied     | after  |</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="comment">//  |        | from input |        |</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment">//  |------------------------------|</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">//  |        Out of bounds         |</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">//  |        rows after            |</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="comment">//  |------------------------------|</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="comment">// Use a separate _crop_results[num_box].get() window for each section of the full _crop_results[num_box].get() window.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="comment">// Fill all _crop_results[num_box].get() rows that have no elements that are within the input bounds</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="comment">// with the extrapolation value using memset.</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// First for the rows before the in bounds rows.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span> (rows_out_of_bounds[0] &gt; 0)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> slice_fill_rows_before(full_window);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            slice_fill_rows_before.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(2, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, rows_out_of_bounds[0], 1));</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keyword">auto</span> kernel = std::make_unique&lt;CLFill&gt;();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), extrapolation_value,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                              &amp;slice_fill_rows_before);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">//_internal_functions.emplace_back(std::move(kernel));</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.push_back(std::move(kernel));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> slice_in(full_window);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        slice_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(2,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                     <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(rows_out_of_bounds[0],</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                       <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(2) - rows_out_of_bounds[1], 1));</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        slice_in.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1,</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                     <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(cols_out_of_bounds[0],</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                       <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(1) - cols_out_of_bounds[1], 1));</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordtype">int</span> rows_in_bounds = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(2)) -</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                             rows_out_of_bounds[0] - rows_out_of_bounds[1];</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> (rows_in_bounds &gt; 0)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="comment">// Fill all elements that share a row with an in bounds element with the extrapolation value.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">if</span> (cols_out_of_bounds[0] &gt; 0)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> slice_fill_cols_before(slice_in);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                slice_fill_cols_before.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, cols_out_of_bounds[0], 1));</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keyword">auto</span> kernel = std::make_unique&lt;CLFill&gt;();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), extrapolation_value,</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                  &amp;slice_fill_cols_before);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="comment">//_internal_functions.emplace_back(std::move(kernel));</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.push_back(std::move(kernel));</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">if</span> (cols_out_of_bounds[1] &gt; 0)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> slice_fill_cols_after(slice_in);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                slice_fill_cols_after.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(1) - cols_out_of_bounds[1],</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                         <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(1), 1));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keyword">auto</span> kernel = std::make_unique&lt;CLFill&gt;();</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), extrapolation_value,</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                  &amp;slice_fill_cols_after);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="comment">//_internal_functions.emplace_back(std::move(kernel));</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.push_back(std::move(kernel));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="comment">// Copy all elements within the input bounds from the input tensor.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordtype">int</span> cols_in_bounds = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;info()-&gt;dimension(1)) -</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                 cols_out_of_bounds[0] - cols_out_of_bounds[1];</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">if</span> (cols_in_bounds &gt; 0)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> start_in{</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    is_width_flipped ? start[0] - cols_out_of_bounds[0] : start[0] + cols_out_of_bounds[0],</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    is_height_flipped ? start[1] - rows_out_of_bounds[0] : start[1] + rows_out_of_bounds[0]};</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> end_in{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    is_width_flipped ? start_in.<a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a> - cols_in_bounds + 1 : start_in.x + cols_in_bounds - 1,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    is_height_flipped ? start_in.y - rows_in_bounds + 1 : start_in.y + rows_in_bounds - 1};</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                <span class="keyword">auto</span> kernel = std::make_unique&lt;CLCrop&gt;();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">_input</a>, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), start_in, end_in, batch_index,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                  extrapolation_value, &amp;slice_in);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="comment">//_internal_functions.emplace_back(std::move(kernel));</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.push_back(std::move(kernel));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="comment">// Fill all rows after the in bounds elements with the extrapolation value.</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">if</span> (rows_out_of_bounds[1] &gt; 0)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> slice_fill_rows_after(full_window);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            slice_fill_rows_after.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                2, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(2) - rows_out_of_bounds[1],</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                     <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get()-&gt;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>()-&gt;dimension(2), 1));</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keyword">auto</span> kernel = std::make_unique&lt;CLFill&gt;();</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            kernel-&gt;configure(compile_context, <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">_crop_results</a>[num_box].get(), extrapolation_value,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                              &amp;slice_fill_rows_after);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="comment">//_internal_functions.emplace_back(std::move(kernel));</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.push_back(std::move(kernel));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a72a3dc1eaa8912f18a01ed7a377e31f8">_boxes</a>-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">unmap</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue());</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aafd18b00f7069f03320be223260c945c">_box_ind</a>-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">unmap</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue());</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad1717410afd0be936c6213a63c8005fb">  356</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad1717410afd0be936c6213a63c8005fb">CLCropResize::run</a>()</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a62d192d931002b4866443cd7fc71419b">_output</a> == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Unconfigured function&quot;</span>);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>.size(); ++i)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">_internal_functions</a>[i]-&gt;run();</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;kernel : <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#adb221b9aa2c38a5b7c50cbab3d2db3a0">_scale</a>)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        kernel-&gt;run();</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;kernel : <a class="code" href="classarm__compute_1_1_c_l_crop_resize.xhtml#a823a1fed88b3181e759fb16954cc7a5c">_copy</a>)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        kernel-&gt;run();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div><div class="ttdoc">Pixels outside the image are assumed to have a constant value.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLCropResize::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8cpp_source.xhtml#l00356">CLCropResize.cpp:356</a></div></div>
<div class="ttc" id="a_c_l_crop_resize_8h_xhtml"><div class="ttname"><a href="_c_l_crop_resize_8h.xhtml">CLCropResize.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_aafd18b00f7069f03320be223260c945c"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#aafd18b00f7069f03320be223260c945c">arm_compute::CLCropResize::_box_ind</a></div><div class="ttdeci">ICLTensor * _box_ind</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00146">CLCropResize.h:146</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml_ac0abc7a5c0d172947f0e6a0c0dde3df0"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">arm_compute::ICLTensor::map</a></div><div class="ttdeci">void map(cl::CommandQueue &amp;q, bool blocking=true)</div><div class="ttdoc">Enqueue a map operation of the allocated buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8cpp_source.xhtml#l00034">ICLTensor.cpp:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">TensorShape output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">LSTMLayerQuantized.cpp:469</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_coordinates2_d_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::Coordinates2D::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00387">Types.h:387</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">arm_compute::SamplingPolicy::TOP_LEFT</a></div><div class="ttdeci">@ TOP_LEFT</div><div class="ttdoc">Samples are taken at pixel top left corner.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">arm_compute::InterpolationPolicy::AREA</a></div><div class="ttdeci">@ AREA</div><div class="ttdoc">Output values are determined by averaging the source pixels whose areas fall under the area of the de...</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_ad55f80ed3cd8b6c4f247763b747016af"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">arm_compute::CLScheduler::sync</a></div><div class="ttdeci">void sync()</div><div class="ttdoc">Blocks until all commands in the associated command queue have finished.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00071">CLScheduler.cpp:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00041">ICLTensor.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00360">Types.h:360</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a6632ee639b1072ab5cc43449df659b2c"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a6632ee639b1072ab5cc43449df659b2c">arm_compute::CLCropResize::_scaled_results</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; CLTensor &gt; &gt; _scaled_results</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00155">CLCropResize.h:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_ac17c6ba3cfe6338930b20d4541ff8b34"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#ac17c6ba3cfe6338930b20d4541ff8b34">arm_compute::CLCropResize::_method</a></div><div class="ttdeci">InterpolationPolicy _method</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00149">CLCropResize.h:149</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_adb221b9aa2c38a5b7c50cbab3d2db3a0"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#adb221b9aa2c38a5b7c50cbab3d2db3a0">arm_compute::CLCropResize::_scale</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; CLScale &gt; &gt; _scale</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00152">CLCropResize.h:152</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_ab776ea56c9004a561a4c19f323aa4e9d"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#ab776ea56c9004a561a4c19f323aa4e9d">arm_compute::CLCropResize::CLCropResize</a></div><div class="ttdeci">CLCropResize()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8cpp_source.xhtml#l00068">CLCropResize.cpp:68</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a5762deba97768db65fffbf72eb3bdca5"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a5762deba97768db65fffbf72eb3bdca5">arm_compute::CLCropResize::~CLCropResize</a></div><div class="ttdeci">~CLCropResize()</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="a_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aef783de4ec01874dbec6054a5868aea2"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00838">Validate.h:838</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00204">CLCompileContext.h:204</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_aa9910cddf28e579de4b5d9bc900af0f6"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#aa9910cddf28e579de4b5d9bc900af0f6">arm_compute::CLCropResize::_internal_functions</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; IFunction &gt; &gt; _internal_functions</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00157">CLCropResize.h:157</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="a_c_l_fill_border_kernel_8h_xhtml"><div class="ttname"><a href="_c_l_fill_border_kernel_8h.xhtml">CLFillBorderKernel.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a62d192d931002b4866443cd7fc71419b"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a62d192d931002b4866443cd7fc71419b">arm_compute::CLCropResize::_output</a></div><div class="ttdeci">ICLTensor * _output</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00147">CLCropResize.h:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00043">AutoConfiguration.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a70b6e1495b94818cce4981dbac6bdd66"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">arm_compute::TensorInfo::set_data_layout</a></div><div class="ttdeci">ITensorInfo &amp; set_data_layout(const DataLayout &amp;data_layout) override</div><div class="ttdoc">Set the data layout of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00404">TensorInfo.cpp:404</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml_af974a2360069c2ef8df4496d00e4f6cc"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">arm_compute::ICLTensor::unmap</a></div><div class="ttdeci">void unmap(cl::CommandQueue &amp;q)</div><div class="ttdoc">Enqueue an unmap operation of the allocated and mapped buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8cpp_source.xhtml#l00039">ICLTensor.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="a_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div><div class="ttdoc">Interface to enqueue OpenCL kernels and get/set the OpenCL CommandQueue and ICLTuner.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a44d7d5b204050ad00d596410b2513f84"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a44d7d5b204050ad00d596410b2513f84">arm_compute::CLCropResize::_crop_results</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; CLTensor &gt; &gt; _crop_results</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00154">CLCropResize.h:154</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_abdb9168800c70e5e2c4c020a3b905738"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#abdb9168800c70e5e2c4c020a3b905738">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00625">Validate.h:625</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_xhtml_a177d477dede47e247a26df5040e087d6"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop.xhtml#a177d477dede47e247a26df5040e087d6">arm_compute::CLCrop::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, Coordinates2D start, Coordinates2D end, uint32_t batch_index, float extrapolation_value=0, Window *output_window=nullptr)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLStridedSliceKernel.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_crop_8cpp_source.xhtml#l00085">CLCrop.cpp:85</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a50ea7a28151a85dbbe7483ac032a3886"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a50ea7a28151a85dbbe7483ac032a3886">arm_compute::CLCropResize::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, ITensorInfo *boxes, ITensorInfo *box_ind, const ITensorInfo *output, Coordinates2D crop_size, InterpolationPolicy method, float extrapolation_value)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NESlice.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8cpp_source.xhtml#l00086">CLCropResize.cpp:86</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a823a1fed88b3181e759fb16954cc7a5c"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a823a1fed88b3181e759fb16954cc7a5c">arm_compute::CLCropResize::_copy</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; CLCopy &gt; &gt; _copy</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00153">CLCropResize.h:153</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="a_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_coordinates2_d_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::Coordinates2D::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a1acfeaa60695d4df61d8d4b5c905aa53"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a1acfeaa60695d4df61d8d4b5c905aa53">arm_compute::CLCropResize::_input</a></div><div class="ttdeci">const ICLTensor * _input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00144">CLCropResize.h:144</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00041">TensorInfo.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a668319020f52120f3269e983cc72d5f3"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a668319020f52120f3269e983cc72d5f3">arm_compute::CLCropResize::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *boxes, ICLTensor *box_ind, ICLTensor *output, Coordinates2D crop_size, InterpolationPolicy method=InterpolationPolicy::BILINEAR, float extrapolation_value=0)</div><div class="ttdoc">Configure kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8cpp_source.xhtml#l00111">CLCropResize.cpp:111</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a5e6dad2c0f2799f694d00240cb728859"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a5e6dad2c0f2799f694d00240cb728859">arm_compute::CLCropResize::_extrapolation_value</a></div><div class="ttdeci">float _extrapolation_value</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00150">CLCropResize.h:150</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_scale_kernel_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_scale_kernel_info.xhtml">arm_compute::ScaleKernelInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00199">KernelDescriptors.h:199</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a1da797d2762c1cdbb73bfc83136c3a38"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00294">Validate.h:294</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_ad079478f73a5eac133d029fc1ff10225"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#ad079478f73a5eac133d029fc1ff10225">arm_compute::CLCropResize::_num_boxes</a></div><div class="ttdeci">size_t _num_boxes</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00148">CLCropResize.h:148</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_coordinates2_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml">arm_compute::Coordinates2D</a></div><div class="ttdoc">Coordinate type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00384">Types.h:384</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_log_8h_source.xhtml#l00035">Log.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_crop_resize_xhtml_a72a3dc1eaa8912f18a01ed7a377e31f8"><div class="ttname"><a href="classarm__compute_1_1_c_l_crop_resize.xhtml#a72a3dc1eaa8912f18a01ed7a377e31f8">arm_compute::CLCropResize::_boxes</a></div><div class="ttdeci">ICLTensor * _boxes</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_crop_resize_8h_source.xhtml#l00145">CLCropResize.h:145</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="acore_2_c_l_2_c_l_helpers_8h_xhtml"><div class="ttname"><a href="core_2_c_l_2_c_l_helpers_8h.xhtml">CLHelpers.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_0304d3529340c629ae0050036d07056a.xhtml">functions</a></li><li class="navelem"><a class="el" href="_c_l_crop_resize_8cpp.xhtml">CLCropResize.cpp</a></li>
    <li class="footer">Generated on Mon Jan 22 2024 14:20:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
