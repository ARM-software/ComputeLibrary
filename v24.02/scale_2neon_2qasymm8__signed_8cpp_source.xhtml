<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/scale/neon/qasymm8_signed.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('scale_2neon_2qasymm8__signed_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">qasymm8_signed.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="scale_2neon_2qasymm8__signed_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_scale_helpers_8h.xhtml">src/core/helpers/ScaleHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">src/cpu/kernels/scale/neon/list.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">void</span> qasymm8_signed_neon_scale_bilinear(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                        ITensor       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                        <span class="keyword">const</span> ITensor *offsets,</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                        <span class="keyword">const</span> ITensor *dx,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                        <span class="keyword">const</span> ITensor *dy,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>     border_mode,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                        PixelValue     constant_border_value,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                        <span class="keywordtype">float</span>          sampling_offset,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                        <span class="keywordtype">bool</span>           align_corners,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                        <span class="keyword">const</span> Window  &amp;window)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Data layout is NHWC</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> int32_t input_width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> int32_t input_height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Compute the ratio between source and destination dimensions</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> =</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> =</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">const</span> int32_t in_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">const</span> int32_t in_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        Window win_off;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Window win_in(window);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        win_in.set(1, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        win_in.set(2, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>; d &lt; offsets-&gt;info()-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            win_off.set(d, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keyword">const</span> int8_t const_border_value = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(constant_border_value.get&lt;int8_t&gt;());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            window,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">const</span> int32_t index_h = std::floor((<span class="keywordtype">id</span>[2] + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_offset);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> int32_t index_w =</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dx_val = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dy_val = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pixel_row_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(in.ptr());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a00 = (0 &lt;= index_w &amp;&amp; index_w &lt; input_width &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; input_height)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                     ? (*(pixel_row_ptr + index_w * in_stride_y + index_h * in_stride_z))</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a01 = (-1 &lt;= index_w &amp;&amp; index_w + 1 &lt; input_width &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; input_height)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                     ? (*(pixel_row_ptr + (index_w + 1) * in_stride_y + index_h * in_stride_z))</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a10 = (0 &lt;= index_w &amp;&amp; index_w &lt; input_width &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; input_height - 1)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                     ? (*(pixel_row_ptr + index_w * in_stride_y + (index_h + 1) * in_stride_z))</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a11 =</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    (-1 &lt;= index_w &amp;&amp; index_w &lt; input_width - 1 &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; input_height - 1)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        ? (*(pixel_row_ptr + (index_w + 1) * in_stride_y + (index_h + 1) * in_stride_z))</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        : const_border_value;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> inp00                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a00, iq_info);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> inp01                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a01, iq_info);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> inp10                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a10, iq_info);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> inp11                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a11, iq_info);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                *<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(out.ptr()) = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">Qasymm8QuantizationHelper&lt;int8_t&gt;::quantize</a>(</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(inp00, inp01, inp10, inp11, dx_val, dy_val), oq_info);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            },</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            in, out);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">using</span> FloatTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;float, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">using</span> Int32TagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;int32_t, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     in_stride_x  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     in_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     in_stride_b  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     out_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     out_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     out_stride_b = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     out_dim_ch   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        constexpr <span class="keywordtype">int</span> step_cout    = 16;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        Window window_execution = window;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        window_execution.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        Window win_in_out(window);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        win_in_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        win_in_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in_out);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_in_out);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> xo_start = window_execution[1].start();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> xo_end   = window_execution[1].end();</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> xo_step  = window_execution[1].step();</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> yo_start = window_execution[2].start();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> yo_end   = window_execution[2].end();</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> yo_step  = window_execution[2].step();</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> bo_start = window_execution[3].start();</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> bo_end   = window_execution[3].end();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> bo_step  = window_execution[3].step();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> fp_coord_offset_y = sampling_offset * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - 1);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> fp_coord_offset_x = sampling_offset * (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - 1);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo oq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_in  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(iq_info.scale, FloatTagType{});</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(iq_info.offset, Int32TagType{}); <span class="comment">// Offsets will be Int32</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">const</span> float32x4_t invvscale_o = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(1.f / oq_info.scale, FloatTagType{});</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">const</span> float32x4_t voffset_o   = vdupq_n_f32(oq_info.offset);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> int8_t *in_ptr  = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(in.ptr() + bo * in_stride_b);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            int8_t       *out_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(out.ptr() + bo * out_stride_b);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> yi_f = yo * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> + fp_coord_offset_y;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="comment">// Weight for the y coordinate</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> a1 = (yi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(yi));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> b1 = (1.f - a1);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi0 = utility::clamp&lt;int&gt;(yi, 0, input_height - 1);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi1 = utility::clamp&lt;int&gt;(yi + 1, 0, input_height - 1);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keyword">const</span> int8_t *in_ptr_yi0 = in_ptr + yi0 * in_stride_y;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="keyword">const</span> int8_t *in_ptr_yi1 = in_ptr + yi1 * in_stride_y;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                int8_t *out_ptr_yo = out_ptr + yo * out_stride_y;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> xi_f = xo * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> + fp_coord_offset_x;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="comment">// Weight for the x coordinate</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a = (xi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xi));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = (1.f - a);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> s00_s = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * b1;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> s01_s = a * b1;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> s10_s = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * a1;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> s11_s = a * a1;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s00_s, FloatTagType{});</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s01_s, FloatTagType{});</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s10_s, FloatTagType{});</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s11_s, FloatTagType{});</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi0 = utility::clamp&lt;int&gt;(xi, 0, input_width - 1);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi1 = utility::clamp&lt;int&gt;(xi + 1, 0, input_width - 1);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_xi0_yi0 = in_ptr_yi0 + xi0 * in_stride_x;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_xi1_yi0 = in_ptr_yi0 + xi1 * in_stride_x;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_xi0_yi1 = in_ptr_yi1 + xi0 * in_stride_x;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_xi1_yi1 = in_ptr_yi1 + xi1 * in_stride_x;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    int8_t *out_ptr_xo_yo = out_ptr_yo + xo * out_stride_x;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_xi0_yi0 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_xi1_yi0 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_xi0_yi1 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_xi1_yi1 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <span class="keyword">const</span> int16x8_t in00_low  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in00));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        <span class="keyword">const</span> int16x8_t in00_high = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in00));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                            wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in00_low)), voffset_in)),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            vscale_in);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in00_low)), voffset_in)),</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in00_high)), voffset_in)),</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00_3 =</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in00_high)), voffset_in)),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                          vscale_in);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <span class="keyword">const</span> int16x8_t in01_low  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in01));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <span class="keyword">const</span> int16x8_t in01_high = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in01));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in01_low)), voffset_in)),</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                            vscale_in);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in01_low)), voffset_in)),</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in01_high)), voffset_in)),</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01_3 =</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in01_high)), voffset_in)),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                          vscale_in);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                        <span class="keyword">const</span> int16x8_t in10_low  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in10));</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        <span class="keyword">const</span> int16x8_t in10_high = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in10));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                            wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in10_low)), voffset_in)),</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                            vscale_in);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in10_low)), voffset_in)),</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in10_high)), voffset_in)),</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10_3 =</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in10_high)), voffset_in)),</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                          vscale_in);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        <span class="keyword">const</span> int16x8_t in11_low  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in11));</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                        <span class="keyword">const</span> int16x8_t in11_high = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in11));</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                            wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in11_low)), voffset_in)),</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            vscale_in);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in11_low)), voffset_in)),</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in11_high)), voffset_in)),</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                                          vscale_in);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11_3 =</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wrapper::vcvt&lt;float&gt;(</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in11_high)), voffset_in)),</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                          vscale_in);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        <span class="keyword">auto</span> out_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00_0, s00);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        out_0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_0, in01_0, s01);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        out_0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_0, in10_0, s10);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        out_0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_0, in11_0, s11);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        <span class="keyword">auto</span> out_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00_1, s00);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        out_1      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_1, in01_1, s01);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        out_1      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_1, in10_1, s10);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        out_1      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_1, in11_1, s11);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        <span class="keyword">auto</span> out_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00_2, s00);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        out_2      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_2, in01_2, s01);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                        out_2      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_2, in10_2, s10);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                        out_2      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_2, in11_2, s11);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        <span class="keyword">auto</span> out_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00_3, s00);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        out_3      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_3, in01_3, s01);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        out_3      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_3, in10_3, s10);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        out_3      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_3, in11_3, s11);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">#if defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_0_int = wrapper::vcvta&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_0, invvscale_o));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_1_int = wrapper::vcvta&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_1, invvscale_o));</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_2_int = wrapper::vcvta&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_2, invvscale_o));</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_3_int = wrapper::vcvta&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_3, invvscale_o));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#else  // defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_0_int = wrapper::vcvt&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_0, invvscale_o));</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_1_int = wrapper::vcvt&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_1, invvscale_o));</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_2_int = wrapper::vcvt&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_2, invvscale_o));</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out_3_int = wrapper::vcvt&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(voffset_o, out_3, invvscale_o));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">#endif // defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> low_part =</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_0_int), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_1_int)));</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> high_part =</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_2_int), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_3_int)));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(low_part, high_part);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr_xo_yo + cout * <span class="keyword">sizeof</span>(int8_t), out);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        <span class="keyword">const</span> int8_t in00 = *(in_ptr_xi0_yi0 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                        <span class="keyword">const</span> int8_t in01 = *(in_ptr_xi1_yi0 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                        <span class="keyword">const</span> int8_t in10 = *(in_ptr_xi0_yi1 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        <span class="keyword">const</span> int8_t in11 = *(in_ptr_xi1_yi1 + cout * <span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> in00_f = (<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in00) - iq_info.offset) * iq_info.scale;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> in01_f = (<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in01) - iq_info.offset) * iq_info.scale;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> in10_f = (<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in10) - iq_info.offset) * iq_info.scale;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> in11_f = (<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in11) - iq_info.offset) * iq_info.scale;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        <span class="keywordtype">float</span> out = in00_f * s00_s;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        out += in01_f * s01_s;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        out += in10_f * s10_s;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        out += in11_f * s11_s;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        <span class="comment">// Rounding modes of vector and scalar loops should match</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">#if defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        *(out_ptr_xo_yo + cout * <span class="keyword">sizeof</span>(int8_t)) = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(out, oq_info);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#else  // defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        *(out_ptr_xo_yo + cout * <span class="keyword">sizeof</span>(int8_t)) =</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(out, oq_info, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="preprocessor">#endif // defined(__aarch64__) &amp;&amp; !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;{</div>
<div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">  362</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">qasymm8_signed_neon_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                               <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>            *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *offsets,</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *dx,</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *dy,</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                               <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy,</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                               <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>          border_mode,</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                               <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>          constant_border_value,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                               <span class="keywordtype">float</span>               sampling_offset,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                               <span class="keywordtype">bool</span>                align_corners,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>       &amp;window)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">if</span> (policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info() == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info() &amp;&amp;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>)</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">s8_neon_scale</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, policy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                          align_corners, window);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            qasymm8_signed_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value,</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                               sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        nearest_neon_scale&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;}</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div><div class="ttdoc">Pixels outside the image are assumed to have a constant value.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__helpers_xhtml_aeb969d3b0e5ceb8597c39b708f0df6e8"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">arm_compute::scale_helpers::delta_bilinear</a></div><div class="ttdeci">float delta_bilinear(float a00, float a01, float a10, float a11, float dx_val, float dy_val)</div><div class="ttdoc">Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and t...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00193">ScaleHelpers.h:193</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00360">Types.h:360</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a55bc37be5f14e4c561d3ca93b2a34aa9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">arm_compute::wrapper::vqmovn</a></div><div class="ttdeci">uint32x2_t vqmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00052">movn.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="a_scale_helpers_8h_xhtml"><div class="ttname"><a href="_scale_helpers_8h.xhtml">ScaleHelpers.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_qasymm8_quantization_helper_xhtml_a66704ef21ed85f31075f412a965b9b7b"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">arm_compute::Qasymm8QuantizationHelper::quantize</a></div><div class="ttdeci">static QUANTIZED_TYPE quantize(float value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Quantize a value given a 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00214">QuantizationInfo.h:214</a></div></div>
<div class="ttc" id="acpu_2kernels_2scale_2neon_2list_8h_xhtml"><div class="ttname"><a href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">list.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00309">QuantizationInfo.h:309</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaaab31fd732b950bf0d4b98f00e259c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">arm_compute::test::validation::scale_y</a></div><div class="ttdeci">const float scale_y</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">Scale.cpp:260</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdeci">@ REPLICATE</div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="astructarm__compute_1_1_qasymm8_quantization_helper_xhtml_a912f8a4d002b2f74c071627a99469463"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">arm_compute::Qasymm8QuantizationHelper::dequantize</a></div><div class="ttdeci">static float dequantize(QUANTIZED_TYPE value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00266">QuantizationInfo.h:266</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ae78a2afc8cb469d8629dc419237e5c68"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">arm_compute::test::validation::scale_x</a></div><div class="ttdeci">const float scale_x</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">Scale.cpp:259</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdeci">@ BILINEAR</div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdeci">@ TO_ZERO</div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners.</div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00032">ScaleUtils.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdeci">@ NEAREST_NEIGHBOR</div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5afa676c133f2bd00b896680e5176cd4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">arm_compute::cpu::qasymm8_signed_neon_scale</a></div><div class="ttdeci">void qasymm8_signed_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00362">qasymm8_signed.cpp:362</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00231">Types.h:231</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a503eae482390645cffa1439822fa864a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">arm_compute::cpu::s8_neon_scale</a></div><div class="ttdeci">void s8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00714">integer.cpp:714</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_d124c31da0c35b9984b69db8d6578477.xhtml">scale</a></li><li class="navelem"><a class="el" href="dir_5e9e7712b7f30b8f985deeedb9292b59.xhtml">neon</a></li><li class="navelem"><a class="el" href="scale_2neon_2qasymm8__signed_8cpp.xhtml">qasymm8_signed.cpp</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:14:50 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
