<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: TensorShape Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_tensor_shape.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">TensorShape Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Shape of a tensor.  
 <a href="classarm__compute_1_1_tensor_shape.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for TensorShape:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_tensor_shape__coll__graph.svg" width="178" height="203"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a091252b04a1c79d499dd6184f9f5d715"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a091252b04a1c79d499dd6184f9f5d715"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">TensorShape</a> (Ts... dims)</td></tr>
<tr class="memdesc:a091252b04a1c79d499dd6184f9f5d715"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor to initialize the tensor shape.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">More...</a><br /></td></tr>
<tr class="separator:a091252b04a1c79d499dd6184f9f5d715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af156b289692f8c3f64688e9a2932ae78"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#af156b289692f8c3f64688e9a2932ae78">TensorShape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;)=default</td></tr>
<tr class="memdesc:af156b289692f8c3f64688e9a2932ae78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1_tensor_shape.xhtml#af156b289692f8c3f64688e9a2932ae78">More...</a><br /></td></tr>
<tr class="separator:af156b289692f8c3f64688e9a2932ae78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a355b1a84ab7af3b8ef9a6bea1939450a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a355b1a84ab7af3b8ef9a6bea1939450a">operator=</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;)=default</td></tr>
<tr class="memdesc:a355b1a84ab7af3b8ef9a6bea1939450a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a355b1a84ab7af3b8ef9a6bea1939450a">More...</a><br /></td></tr>
<tr class="separator:a355b1a84ab7af3b8ef9a6bea1939450a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fa5abfb10a67d23a75339646e84517a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a5fa5abfb10a67d23a75339646e84517a">TensorShape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a5fa5abfb10a67d23a75339646e84517a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a5fa5abfb10a67d23a75339646e84517a">More...</a><br /></td></tr>
<tr class="separator:a5fa5abfb10a67d23a75339646e84517a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbfae7c97606fb71d556a9f4e46dda00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#afbfae7c97606fb71d556a9f4e46dda00">operator=</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:afbfae7c97606fb71d556a9f4e46dda00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_tensor_shape.xhtml#afbfae7c97606fb71d556a9f4e46dda00">More...</a><br /></td></tr>
<tr class="separator:afbfae7c97606fb71d556a9f4e46dda00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ff524f0e3378fb25a8447bdeed6ba9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a29ff524f0e3378fb25a8447bdeed6ba9">~TensorShape</a> ()=default</td></tr>
<tr class="memdesc:a29ff524f0e3378fb25a8447bdeed6ba9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a29ff524f0e3378fb25a8447bdeed6ba9">More...</a><br /></td></tr>
<tr class="separator:a29ff524f0e3378fb25a8447bdeed6ba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea5d1efe37933e02913aec84db5b9d4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a> (size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</td></tr>
<tr class="memdesc:aea5d1efe37933e02913aec84db5b9d4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the value of one of the dimensions.  <a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">More...</a><br /></td></tr>
<tr class="separator:aea5d1efe37933e02913aec84db5b9d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d58c625de7610328d7910d70275ae43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a9d58c625de7610328d7910d70275ae43">remove_dimension</a> (size_t n, bool apply_dim_correction=true)</td></tr>
<tr class="memdesc:a9d58c625de7610328d7910d70275ae43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to remove the dimension n from the tensor shape.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a9d58c625de7610328d7910d70275ae43">More...</a><br /></td></tr>
<tr class="separator:a9d58c625de7610328d7910d70275ae43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e15e87871211f98c2b566137e38ef99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a> (size_t n, size_t first=0)</td></tr>
<tr class="memdesc:a8e15e87871211f98c2b566137e38ef99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse the first n dimensions.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">More...</a><br /></td></tr>
<tr class="separator:a8e15e87871211f98c2b566137e38ef99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6d90bb06b3c19db6aba94975be64d10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">shift_right</a> (size_t step)</td></tr>
<tr class="memdesc:ab6d90bb06b3c19db6aba94975be64d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shifts right the tensor shape increasing its dimensions.  <a href="classarm__compute_1_1_tensor_shape.xhtml#ab6d90bb06b3c19db6aba94975be64d10">More...</a><br /></td></tr>
<tr class="separator:ab6d90bb06b3c19db6aba94975be64d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0d754a1bb2ae68b5d2f1aacc1794817"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#af0d754a1bb2ae68b5d2f1aacc1794817">collapsed_from</a> (size_t start) const</td></tr>
<tr class="memdesc:af0d754a1bb2ae68b5d2f1aacc1794817"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a copy with collapsed dimensions starting from a given point.  <a href="classarm__compute_1_1_tensor_shape.xhtml#af0d754a1bb2ae68b5d2f1aacc1794817">More...</a><br /></td></tr>
<tr class="separator:af0d754a1bb2ae68b5d2f1aacc1794817"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fdcb923dfd4c74858cc2bc326321efb"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a> () const</td></tr>
<tr class="memdesc:a0fdcb923dfd4c74858cc2bc326321efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapses all dimensions to a single linear total size.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">More...</a><br /></td></tr>
<tr class="separator:a0fdcb923dfd4c74858cc2bc326321efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99e09337e5b6ef762cd1f2d0bd10c346"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a99e09337e5b6ef762cd1f2d0bd10c346">total_size_upper</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a99e09337e5b6ef762cd1f2d0bd10c346"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapses given dimension and above.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a99e09337e5b6ef762cd1f2d0bd10c346">More...</a><br /></td></tr>
<tr class="separator:a99e09337e5b6ef762cd1f2d0bd10c346"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9de66247a88337d636d536a8bf086571"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a9de66247a88337d636d536a8bf086571">total_size_lower</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a9de66247a88337d636d536a8bf086571"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute size of dimensions lower than the given one.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a9de66247a88337d636d536a8bf086571">More...</a><br /></td></tr>
<tr class="separator:a9de66247a88337d636d536a8bf086571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_dimensions"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_dimensions')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt; size_t &gt;</a></td></tr>
<tr class="memitem:a669af0de951a474c4b443f7bc7c026e0 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a669af0de951a474c4b443f7bc7c026e0">Dimensions</a> (Ts... dims)</td></tr>
<tr class="memdesc:a669af0de951a474c4b443f7bc7c026e0 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor to initialize the tensor shape.  <a href="classarm__compute_1_1_dimensions.xhtml#a669af0de951a474c4b443f7bc7c026e0">More...</a><br /></td></tr>
<tr class="separator:a669af0de951a474c4b443f7bc7c026e0 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3c59537291735849c740364496a41c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a0d3c59537291735849c740364496a41c">Dimensions</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;)=default</td></tr>
<tr class="memdesc:a0d3c59537291735849c740364496a41c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1_dimensions.xhtml#a0d3c59537291735849c740364496a41c">More...</a><br /></td></tr>
<tr class="separator:a0d3c59537291735849c740364496a41c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2c609345b3b6fa8da2486f75fff8ed8 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#aa2c609345b3b6fa8da2486f75fff8ed8">Dimensions</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:aa2c609345b3b6fa8da2486f75fff8ed8 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_dimensions.xhtml#aa2c609345b3b6fa8da2486f75fff8ed8">More...</a><br /></td></tr>
<tr class="separator:aa2c609345b3b6fa8da2486f75fff8ed8 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c96e96e2d005b4a8b66c2acd1688903 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a2c96e96e2d005b4a8b66c2acd1688903">operator=</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;)=default</td></tr>
<tr class="memdesc:a2c96e96e2d005b4a8b66c2acd1688903 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1_dimensions.xhtml#a2c96e96e2d005b4a8b66c2acd1688903">More...</a><br /></td></tr>
<tr class="separator:a2c96e96e2d005b4a8b66c2acd1688903 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80565e11a35c48747bcc2cba06931e20 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80565e11a35c48747bcc2cba06931e20">operator=</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a80565e11a35c48747bcc2cba06931e20 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_dimensions.xhtml#a80565e11a35c48747bcc2cba06931e20">More...</a><br /></td></tr>
<tr class="separator:a80565e11a35c48747bcc2cba06931e20 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71d9685536fceae3487102a0cc105397 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a> (size_t dimension, size_t value, bool increase_dim_unit=true)</td></tr>
<tr class="memdesc:a71d9685536fceae3487102a0cc105397 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the value of one of the dimensions.  <a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">More...</a><br /></td></tr>
<tr class="separator:a71d9685536fceae3487102a0cc105397 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa87f8fc26981b0f3228a78c83b95b802 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a> () const</td></tr>
<tr class="memdesc:aa87f8fc26981b0f3228a78c83b95b802 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the first dimension.  <a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">More...</a><br /></td></tr>
<tr class="separator:aa87f8fc26981b0f3228a78c83b95b802 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4a1050be02b20b3f791b9a483f3abe2 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a> () const</td></tr>
<tr class="memdesc:ac4a1050be02b20b3f791b9a483f3abe2 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the second dimension.  <a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">More...</a><br /></td></tr>
<tr class="separator:ac4a1050be02b20b3f791b9a483f3abe2 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb29a685080e999c2a0cb874d2f7bb5a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a> () const</td></tr>
<tr class="memdesc:abb29a685080e999c2a0cb874d2f7bb5a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the third dimension.  <a href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">More...</a><br /></td></tr>
<tr class="separator:abb29a685080e999c2a0cb874d2f7bb5a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1de8262b54af91014549e2088519d536 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1de8262b54af91014549e2088519d536">increment</a> (size_t dim, size_t step=1)</td></tr>
<tr class="memdesc:a1de8262b54af91014549e2088519d536 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments the given dimension by a step size, avoiding overflows.  <a href="classarm__compute_1_1_dimensions.xhtml#a1de8262b54af91014549e2088519d536">More...</a><br /></td></tr>
<tr class="separator:a1de8262b54af91014549e2088519d536 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08834d57877df4172a35bccc6719ab3a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">const size_t &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a08834d57877df4172a35bccc6719ab3a">operator[]</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a08834d57877df4172a35bccc6719ab3a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic accessor to get the size of any dimension.  <a href="classarm__compute_1_1_dimensions.xhtml#a08834d57877df4172a35bccc6719ab3a">More...</a><br /></td></tr>
<tr class="separator:a08834d57877df4172a35bccc6719ab3a inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac88390e0a6503d5d09c65d204980beb1 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">size_t &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac88390e0a6503d5d09c65d204980beb1">operator[]</a> (size_t dimension)</td></tr>
<tr class="memdesc:ac88390e0a6503d5d09c65d204980beb1 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic accessor to get the size of any dimension.  <a href="classarm__compute_1_1_dimensions.xhtml#ac88390e0a6503d5d09c65d204980beb1">More...</a><br /></td></tr>
<tr class="separator:ac88390e0a6503d5d09c65d204980beb1 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80a5f2d6e3a697c9aad893a3b4242615 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a> () const</td></tr>
<tr class="memdesc:a80a5f2d6e3a697c9aad893a3b4242615 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the effective dimensionality of the tensor.  <a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">More...</a><br /></td></tr>
<tr class="separator:a80a5f2d6e3a697c9aad893a3b4242615 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a810a78f0b7cc0270f38d4136e023ea3b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a810a78f0b7cc0270f38d4136e023ea3b">set_num_dimensions</a> (size_t <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>)</td></tr>
<tr class="memdesc:a810a78f0b7cc0270f38d4136e023ea3b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set number of dimensions.  <a href="classarm__compute_1_1_dimensions.xhtml#a810a78f0b7cc0270f38d4136e023ea3b">More...</a><br /></td></tr>
<tr class="separator:a810a78f0b7cc0270f38d4136e023ea3b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c265a91027decdda59e5086c550d0f7 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">collapse</a> (const size_t n, const size_t first=0)</td></tr>
<tr class="memdesc:a0c265a91027decdda59e5086c550d0f7 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse dimensions.  <a href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">More...</a><br /></td></tr>
<tr class="separator:a0c265a91027decdda59e5086c550d0f7 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a112cc1d5093b7672bf11569659251a7c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">collapse_from</a> (size_t start)</td></tr>
<tr class="memdesc:a112cc1d5093b7672bf11569659251a7c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse dimensions starting from a given point.  <a href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">More...</a><br /></td></tr>
<tr class="separator:a112cc1d5093b7672bf11569659251a7c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e0f41c0e7278cadd08bf9216623ada3 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a3e0f41c0e7278cadd08bf9216623ada3">remove</a> (size_t idx)</td></tr>
<tr class="memdesc:a3e0f41c0e7278cadd08bf9216623ada3 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove dimension of a given index.  <a href="classarm__compute_1_1_dimensions.xhtml#a3e0f41c0e7278cadd08bf9216623ada3">More...</a><br /></td></tr>
<tr class="separator:a3e0f41c0e7278cadd08bf9216623ada3 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2878b67ca384a699c1270900b31290b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a> ()</td></tr>
<tr class="memdesc:ab2878b67ca384a699c1270900b31290b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read/write iterator that points to the first element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">More...</a><br /></td></tr>
<tr class="separator:ab2878b67ca384a699c1270900b31290b inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3821c007799102f18ef1cf4ec88be9c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ab3821c007799102f18ef1cf4ec88be9c">begin</a> () const</td></tr>
<tr class="memdesc:ab3821c007799102f18ef1cf4ec88be9c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points to the first element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#ab3821c007799102f18ef1cf4ec88be9c">More...</a><br /></td></tr>
<tr class="separator:ab3821c007799102f18ef1cf4ec88be9c inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9efb4e1ad142d58d65af400f20217d inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">cbegin</a> () const</td></tr>
<tr class="memdesc:a8c9efb4e1ad142d58d65af400f20217d inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points to the first element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">More...</a><br /></td></tr>
<tr class="separator:a8c9efb4e1ad142d58d65af400f20217d inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac684b52c6197edff9cccb3abd1e41f59 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">end</a> ()</td></tr>
<tr class="memdesc:ac684b52c6197edff9cccb3abd1e41f59 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read/write iterator that points one past the last element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">More...</a><br /></td></tr>
<tr class="separator:ac684b52c6197edff9cccb3abd1e41f59 inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfb712208ab2802329e9b75c0c61469f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#abfb712208ab2802329e9b75c0c61469f">end</a> () const</td></tr>
<tr class="memdesc:abfb712208ab2802329e9b75c0c61469f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points one past the last element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#abfb712208ab2802329e9b75c0c61469f">More...</a><br /></td></tr>
<tr class="separator:abfb712208ab2802329e9b75c0c61469f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afde273ebfa15fe83c690ad5cf6693c9f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">std::array&lt; size_t, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#afde273ebfa15fe83c690ad5cf6693c9f">cend</a> () const</td></tr>
<tr class="memdesc:afde273ebfa15fe83c690ad5cf6693c9f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points one past the last element in the dimension array.  <a href="classarm__compute_1_1_dimensions.xhtml#afde273ebfa15fe83c690ad5cf6693c9f">More...</a><br /></td></tr>
<tr class="separator:afde273ebfa15fe83c690ad5cf6693c9f inherit pub_methods_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a58838fbdce5b5330d84e62329b45ff7d"><td class="memTemplParams" colspan="2">template&lt;typename... Shapes&gt; </td></tr>
<tr class="memitem:a58838fbdce5b5330d84e62329b45ff7d"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">broadcast_shape</a> (const Shapes &amp;...shapes)</td></tr>
<tr class="memdesc:a58838fbdce5b5330d84e62329b45ff7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">If shapes are broadcast compatible, return the broadcasted shape.  <a href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">More...</a><br /></td></tr>
<tr class="separator:a58838fbdce5b5330d84e62329b45ff7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_attribs_classarm__compute_1_1_dimensions"><td colspan="2" onclick="javascript:toggleInherit('pub_static_attribs_classarm__compute_1_1_dimensions')"><img src="closed.png" alt="-"/>&#160;Static Public Attributes inherited from <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt; size_t &gt;</a></td></tr>
<tr class="memitem:a1b67d5b720119d50faa286c774579ecc inherit pub_static_attribs_classarm__compute_1_1_dimensions"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a></td></tr>
<tr class="memdesc:a1b67d5b720119d50faa286c774579ecc inherit pub_static_attribs_classarm__compute_1_1_dimensions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of dimensions the tensor has.  <a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">More...</a><br /></td></tr>
<tr class="separator:a1b67d5b720119d50faa286c774579ecc inherit pub_static_attribs_classarm__compute_1_1_dimensions"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Shape of a tensor. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a091252b04a1c79d499dd6184f9f5d715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a091252b04a1c79d499dd6184f9f5d715">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>dims</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor to initialize the tensor shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>Values to initialize the dimensions. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                            : <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a669af0de951a474c4b443f7bc7c026e0">Dimensions</a>{dims...}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Initialize unspecified dimensions to 1</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span> (_num_dimensions &gt; 0)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(_id.begin() + _num_dimensions, _id.end(), 1);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="comment">// Correct number dimensions to ignore trailing dimensions of size 1</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        apply_dimension_correction();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="af156b289692f8c3f64688e9a2932ae78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af156b289692f8c3f64688e9a2932ae78">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a id="a5fa5abfb10a67d23a75339646e84517a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fa5abfb10a67d23a75339646e84517a">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a29ff524f0e3378fb25a8447bdeed6ba9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29ff524f0e3378fb25a8447bdeed6ba9">&#9670;&nbsp;</a></span>~TensorShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a58838fbdce5b5330d84e62329b45ff7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58838fbdce5b5330d84e62329b45ff7d">&#9670;&nbsp;</a></span>broadcast_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> broadcast_shape </td>
          <td>(</td>
          <td class="paramtype">const Shapes &amp;...&#160;</td>
          <td class="paramname"><em>shapes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If shapes are broadcast compatible, return the broadcasted shape. </p>
<p>Two tensor shapes are broadcast compatible if for each dimension, they're equal or one of them is 1.</p>
<p>If two shapes are compatible, each dimension in the broadcasted shape is the max of the original dimensions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shapes</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shapes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The broadcasted shape or an empty shape if the shapes are not broadcast compatible. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00214">214</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">TensorShape</a> bc_shape;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">auto</span> broadcast = [&amp;bc_shape](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">TensorShape</a> &amp;other)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> (bc_shape.num_dimensions() == 0)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                bc_shape = other;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.num_dimensions() != 0)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>; ++d)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim_min = std::min(bc_shape[d], other[d]);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim_max = std::max(bc_shape[d], other[d]);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">if</span> ((dim_min != 1) &amp;&amp; (dim_min != dim_max))</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        bc_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">TensorShape</a>{0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>};</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    bc_shape.set(d, dim_max);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        };</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>(broadcast, shapes...);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> bc_shape;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00111">arm_compute::utility::for_each()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_arithmetic_division_8cpp_source.xhtml#l00079">arm_compute::test::validation::reference::arithmetic_division()</a>, <a class="el" href="_arithmetic_operations_8cpp_source.xhtml#l00104">arm_compute::test::validation::reference::arithmetic_operation()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00332">ITensorInfo::broadcast_shape_and_valid_region()</a>, <a class="el" href="reference_2_comparisons_8cpp_source.xhtml#l00111">arm_compute::test::validation::reference::compare()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00270">NELogicalKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00127">ClMulKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01787">CpuComplexMulKernel::configure()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00082">EltwiseLayerNode::configure_output()</a>, <a class="el" href="reference_2_logical_8cpp_source.xhtml#l00108">arm_compute::test::validation::reference::logical_and()</a>, <a class="el" href="reference_2_logical_8cpp_source.xhtml#l00095">arm_compute::test::validation::reference::logical_or()</a>, <a class="el" href="reference_2_pixel_wise_multiplication_8cpp_source.xhtml#l00217">arm_compute::test::validation::reference::pixel_wise_multiplication()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00295">NELogicalKernel::validate()</a>, and <a class="el" href="_cl_component_elementwise_binary_8cpp_source.xhtml#l00048">ClComponentElementwiseBinary::validate()</a>.</p>

</div>
</div>
<a id="a8e15e87871211f98c2b566137e38ef99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e15e87871211f98c2b566137e38ef99">&#9670;&nbsp;</a></span>collapse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void collapse </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse the first n dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Number of dimensions to collapse into <code>first</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> into which the following <code>n</code> are collapsed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00136">136</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">Dimensions::collapse</a>(n, first);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// Make sure all empty dimensions are filled with 1</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(_id.begin() + _num_dimensions, _id.end(), 1);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00158">Dimensions&lt; T &gt;::collapse()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00631">arm_compute::misc::shape_calculator::compute_flatten_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00649">arm_compute::misc::shape_calculator::compute_softmax_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00163">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00715">CpuGemmLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_flatten_layer_node_8cpp_source.xhtml#l00051">FlattenLayerNode::configure_output()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00404">GpuCkwElementwiseBinary::get_window()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00277">GpuCkwActivation::get_window()</a>, and <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00238">GpuCkwCast::get_window()</a>.</p>

</div>
</div>
<a id="af0d754a1bb2ae68b5d2f1aacc1794817"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0d754a1bb2ae68b5d2f1aacc1794817">&#9670;&nbsp;</a></span>collapsed_from()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> collapsed_from </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>start</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return a copy with collapsed dimensions starting from a given point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Starting point of collapsing dimensions.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A copy with collapse dimensions starting from start. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00164">164</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>.collapse(<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() - start, start);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="reference_2_copy_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::copy()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; size_t &gt;::num_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00165">CpuMatMul::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00255">CpuMatMul::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, and <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>.</p>

</div>
</div>
<a id="a355b1a84ab7af3b8ef9a6bea1939450a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a355b1a84ab7af3b8ef9a6bea1939450a">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a id="afbfae7c97606fb71d556a9f4e46dda00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbfae7c97606fb71d556a9f4e46dda00">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a9d58c625de7610328d7910d70275ae43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d58c625de7610328d7910d70275ae43">&#9670;&nbsp;</a></span>remove_dimension()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void remove_dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>apply_dim_correction</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to remove the dimension n from the tensor shape. </p>
<dl class="section note"><dt>Note</dt><dd>The upper dimensions of the tensor shape will be shifted down by 1</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Dimension to remove </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">apply_dim_correction</td><td>(Optional) Flag to state whether apply dimension correction (removing trailing dimensions with size of 1) after removing a dimension. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00111">111</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_num_dimensions &lt; 1);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(n &gt;= _num_dimensions);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">std::copy</a>(_id.begin() + n + 1, _id.end(), _id.begin() + n);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// Reduce number of dimensions</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        _num_dimensions--;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Make sure all empty dimensions are filled with 1</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(_id.begin() + _num_dimensions, _id.end(), 1);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Correct number dimensions to ignore trailing dimensions of size 1</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> (apply_dim_correction)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            apply_dimension_correction();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="reference_2_copy_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::copy()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01486">arm_compute::misc::shape_calculator::calculate_unstack_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00194">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00864">arm_compute::misc::shape_calculator::compute_min_max_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01410">arm_compute::misc::shape_calculator::compute_reduced_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00367">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00121">NEReduceMean::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00106">NEFFTConvolutionLayer::configure()</a>, and <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>.</p>

</div>
</div>
<a id="aea5d1efe37933e02913aec84db5b9d4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea5d1efe37933e02913aec84db5b9d4b">&#9670;&nbsp;</a></span>set()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; set </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>apply_dim_correction</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>increase_dim_unit</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to set the value of one of the dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Dimension for which the value is set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be set for the dimension. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">apply_dim_correction</td><td>(Optional) Flag to state whether apply dimension correction after setting one dimension. E.g. when permuting NCHW -&gt; NHWC, 1x1x2 would become 2x1x1, but _num_dimensions should be 3 rather than 1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">increase_dim_unit</td><td>(Optional) Set to true if new unit dimensions increase the number of dimensions of the shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>*this. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">78</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// Clear entire shape if one dimension is zero</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (value == 0)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            _num_dimensions = 0;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(_id.begin(), _id.end(), 0);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="comment">// Make sure all empty dimensions are filled with 1</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(_id.begin() + _num_dimensions, _id.end(), 1);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="comment">// Set the specified dimension and increase the number of dimensions if</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// necessary</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">Dimensions::set</a>(dimension, value, increase_dim_unit);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// Correct number dimensions to ignore trailing dimensions of size 1</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">if</span> (apply_dim_correction)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                apply_dimension_correction();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00771">GraphBuilder::add_scale_layer()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00214">TensorShape::broadcast_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01501">arm_compute::misc::shape_calculator::calculate_concatenate_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01574">arm_compute::misc::shape_calculator::compute_conv3d_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00512">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00784">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01243">arm_compute::misc::shape_calculator::compute_depth_to_space_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01704">arm_compute::misc::shape_calculator::compute_gather_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00277">arm_compute::misc::shape_calculator::compute_interleaved_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00194">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01108">arm_compute::misc::shape_calculator::compute_matmul_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00864">arm_compute::misc::shape_calculator::compute_min_max_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00987">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00046">PoolingLayerNode::compute_output_descriptor()</a>, <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00046">PriorBoxLayerNode::compute_output_descriptor()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00045">ReorgLayerNode::compute_output_descriptor()</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00046">DetectionOutputLayerNode::compute_output_descriptor()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00047">DeconvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00052">SplitLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00097">FusedConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00088">FusedDepthwiseConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00084">DepthwiseConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00096">ConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01137">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01373">arm_compute::misc::shape_calculator::compute_padded_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01662">arm_compute::misc::shape_calculator::compute_pool3d_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00881">arm_compute::misc::shape_calculator::compute_pool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01352">arm_compute::misc::shape_calculator::compute_prior_box_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01410">arm_compute::misc::shape_calculator::compute_reduced_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00367">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00133">arm_compute::misc::shape_calculator::compute_reorg_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00240">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00970">arm_compute::misc::shape_calculator::compute_rnn_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00949">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01302">arm_compute::misc::shape_calculator::compute_space_to_batch_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01329">arm_compute::misc::shape_calculator::compute_space_to_depth_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01267">arm_compute::misc::shape_calculator::compute_split_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01543">arm_compute::misc::shape_calculator::compute_stack_shape()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00148">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01392">arm_compute::misc::shape_calculator::compute_tiled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00914">arm_compute::misc::shape_calculator::compute_unpool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01433">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00095">arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00163">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00713">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00125">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00121">NEReduceMean::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00063">ResizeLayerNode::configure_output()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00058">ROIAlignLayerNode::configure_output()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00062">PadLayerNode::configure_output()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00104">SplitLayerNode::configure_output()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00136">GpuSoftmax::create_op()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="_window_helpers_8h_source.xhtml#l00064">arm_compute::intersect_valid_regions()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00047">GpuSoftmax::is_supported_op()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00206">ValidRegion::set()</a>, <a class="el" href="graph__edsr_8h_source.xhtml#l00039">GraphEdsr::setup()</a>, <a class="el" href="_window_8inl_source.xhtml#l00298">Window::shape()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00070">arm_compute::test::validation::transpose()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00053">CLReductionOperation::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, and <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00326">CpuGemmLowpMatrixMultiplyCore::validate()</a>.</p>

</div>
</div>
<a id="ab6d90bb06b3c19db6aba94975be64d10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6d90bb06b3c19db6aba94975be64d10">&#9670;&nbsp;</a></span>shift_right()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void shift_right </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>step</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shifts right the tensor shape increasing its dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Rotation step </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00147">147</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> &gt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> - <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        std::rotate(<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>(), <a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>() + <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a> - <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, <a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">end</a>());</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        _num_dimensions += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Correct number dimensions to ignore trailing dimensions of size 1</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        apply_dimension_correction();</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00214">Dimensions&lt; size_t &gt;::begin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00238">Dimensions&lt; size_t &gt;::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; size_t &gt;::num_dimensions()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l01137">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, and <a class="el" href="_shape_calculator_8h_source.xhtml#l00649">arm_compute::misc::shape_calculator::compute_softmax_shape()</a>.</p>

</div>
</div>
<a id="a0fdcb923dfd4c74858cc2bc326321efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fdcb923dfd4c74858cc2bc326321efb">&#9670;&nbsp;</a></span>total_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapses all dimensions to a single linear total size. </p>
<dl class="section return"><dt>Returns</dt><dd>The total tensor size in terms of elements. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00175">175</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(_id.begin(), _id.end(), 1, std::multiplies&lt;size_t&gt;());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00072">arm_compute::auto_init_if_empty()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01704">arm_compute::misc::shape_calculator::compute_gather_shape()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00073">CLSelectKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00045">NESpaceToBatchLayer::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00053">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00082">EltwiseLayerNode::configure_output()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00277">GpuCkwActivation::get_window()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00238">GpuCkwCast::get_window()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00404">GpuCkwElementwiseBinary::get_window()</a>, <a class="el" href="_gpu_ckw_resize_8cpp_source.xhtml#l00533">GpuCkwResize::get_window()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00384">GpuCkwPool2d::get_window()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul::get_window()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00201">ClTemplateCast::get_window()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00159">ClTemplateLogits1DNorm::get_window()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00257">ClTemplateLogits1DMaxShiftExpSum::get_window()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00151">ClTemplateReshape::get_window()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00354">ClTemplateDepthwiseConv2d::get_window()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00371">ClTemplateDirectConv2d::get_window()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00268">ClTemplateResize::get_window()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00456">ClTemplatePool2d::get_window()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00171">ClTemplateActivation::get_window()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00119">Accessor::num_elements()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00139">CLAccessor::num_elements()</a>, <a class="el" href="tests_2validation_2reference_2_reshape_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reshape_layer()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00101">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00225">SubTensorInfo::set_valid_region()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00054">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00295">NELogicalKernel::validate()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00145">ClConcatenate::validate()</a>, <a class="el" href="_cl_component_elementwise_binary_8cpp_source.xhtml#l00048">ClComponentElementwiseBinary::validate()</a>, <a class="el" href="_cl_component_logits1_d_norm_8cpp_source.xhtml#l00041">ClComponentLogits1DNorm::validate()</a>, <a class="el" href="_cl_component_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00041">ClComponentLogits1DMaxShiftExpSum::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, and <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00039">arm_compute::opencl::kernels::validate_matmul_input_shapes()</a>.</p>

</div>
</div>
<a id="a9de66247a88337d636d536a8bf086571"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9de66247a88337d636d536a8bf086571">&#9670;&nbsp;</a></span>total_size_lower()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size_lower </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute size of dimensions lower than the given one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Upper boundary.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The linear size of the collapsed dimensions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00197">197</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(_id.begin(), _id.begin() + dimension, 1, std::multiplies&lt;size_t&gt;());</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00069">CpuConvertFullyConnectedWeightsKernel::validate()</a>, and <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00093">ClConvertFullyConnectedWeightsKernel::validate()</a>.</p>

</div>
</div>
<a id="a99e09337e5b6ef762cd1f2d0bd10c346"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99e09337e5b6ef762cd1f2d0bd10c346">&#9670;&nbsp;</a></span>total_size_upper()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size_upper </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapses given dimension and above. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Size of the wanted dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The linear size of the collapsed dimensions </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_shape_8h_source.xhtml#l00185">185</a> of file <a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(_id.begin() + dimension, _id.end(), 1, std::multiplies&lt;size_t&gt;());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::reference::fully_connected_layer()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00371">ClTemplateDirectConv2d::get_window()</a>, and <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_tensor_shape_8h_source.xhtml">TensorShape.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00075">Dimensions.h:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a091252b04a1c79d499dd6184f9f5d715"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a091252b04a1c79d499dd6184f9f5d715">arm_compute::TensorShape::TensorShape</a></div><div class="ttdeci">TensorShape(Ts... dims)</div><div class="ttdoc">Constructor to initialize the tensor shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00047">TensorShape.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a0c265a91027decdda59e5086c550d0f7"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">arm_compute::Dimensions::collapse</a></div><div class="ttdeci">void collapse(const size_t n, const size_t first=0)</div><div class="ttdoc">Collapse dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00158">Dimensions.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1643f4cb252152ed8ffc0df84744ad5d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill</a></div><div class="ttdeci">library fill(src, distribution, 0)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_ab2878b67ca384a699c1270900b31290b"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">arm_compute::Dimensions&lt; size_t &gt;::begin</a></div><div class="ttdeci">std::array&lt; size_t, num_max_dimensions &gt;::iterator begin()</div><div class="ttdoc">Returns a read/write iterator that points to the first element in the dimension array.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00214">Dimensions.h:214</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a669af0de951a474c4b443f7bc7c026e0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a669af0de951a474c4b443f7bc7c026e0">arm_compute::Dimensions&lt; size_t &gt;::Dimensions</a></div><div class="ttdeci">Dimensions(Ts... dims)</div><div class="ttdoc">Constructor to initialize the tensor shape.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00053">Dimensions.h:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_ac684b52c6197edff9cccb3abd1e41f59"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">arm_compute::Dimensions&lt; size_t &gt;::end</a></div><div class="ttdeci">std::array&lt; size_t, num_max_dimensions &gt;::iterator end()</div><div class="ttdoc">Returns a read/write iterator that points one past the last element in the dimension array.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00238">Dimensions.h:238</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00111">Utility.h:111</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions&lt; size_t &gt;::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00142">Dimensions.h:142</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; size_t &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:15:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
