<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/GraphUtils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_graph_utils_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GraphUtils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_graph_utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_UTILS_GRAPH_UTILS_H__</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_UTILS_GRAPH_UTILS_H__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pixel_value_8h.xhtml">arm_compute/core/PixelValue.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utility_8h.xhtml">arm_compute/core/utils/misc/Utility.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_accessor_8h.xhtml">arm_compute/graph/ITensorAccessor.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_common_graph_options_8h.xhtml">utils/CommonGraphOptions.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml">   44</a></span>&#160;<span class="keyword">namespace </span>graph_utils</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/** Preprocessor interface **/</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml">   47</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml">IPreprocessor</a></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /** Default destructor. */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml#a145ae89877c556306c3b0a8d869b33f3">~IPreprocessor</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /** Preprocess the given tensor.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     * @param[in] tensor Tensor to preprocess.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml#ae699b63165de5182fda5a2337009641f">preprocess</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) = 0;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;};</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">/** Caffe preproccessor */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml">   60</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml">CaffePreproccessor</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml">IPreprocessor</a></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /** Default Constructor</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * @param[in] mean  Mean array in RGB ordering</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * @param[in] bgr   Boolean specifying if the preprocessing should assume BGR format</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * @param[in] scale Scale value</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#ac3fe6773f3712901d5d9dc27af92f773">CaffePreproccessor</a>(std::array&lt;float, 3&gt; mean = std::array&lt;float, 3&gt;{{0, 0, 0}}, <span class="keywordtype">bool</span> bgr = <span class="keyword">true</span>, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = 1.f);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">preprocess</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span> preprocess_typed(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::array&lt;float, 3&gt; _mean;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">bool</span>                 _bgr;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">float</span>                _scale;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;};</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">/** TF preproccessor */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml">   82</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml">TFPreproccessor</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml">IPreprocessor</a></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     * @param[in] min_range Min normalization range. (Defaults to -1.f)</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * @param[in] max_range Max normalization range. (Defaults to 1.f)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#ab58008704726cd07353605b1d9e13d86">TFPreproccessor</a>(<span class="keywordtype">float</span> min_range = -1.f, <span class="keywordtype">float</span> max_range = 1.f);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Inherited overriden methods</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">preprocess</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span> preprocess_typed(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">float</span> _min_range;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">float</span> _max_range;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/** PPM writer class */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">  104</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">PPMWriter</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     * @param[in] name    PPM file name</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * @param[in] maximum Maximum elements to access</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">PPMWriter</a>(std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum = 1);<span class="comment"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /** Allows instances to move constructed */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">PPMWriter</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">PPMWriter</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> std::string _name;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      _iterator;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      _maximum;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/** Dummy accessor class */</span></div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">  126</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * @param[in] maximum Maximum elements to write</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">DummyAccessor</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum = 1);<span class="comment"></span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    /** Allows instances to move constructed */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">DummyAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#affa064ad4776fa095844d632c04156f5">access_tensor_data</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _iterator;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _maximum;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;};</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/** NumPy accessor class */</span></div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">  147</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">NumPyAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     * @param[in]  npy_path      Path to npy file.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * @param[in]  shape         Shape of the numpy tensor data.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * @param[in]  data_type     DataType of the numpy tensor data.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * @param[in]  data_layout   (Optional) DataLayout of the numpy tensor data.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">NumPyAccessor</a>(std::string   npy_path,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                  <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                  <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                  <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>   = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                  std::ostream &amp;output_stream = std::cout);<span class="comment"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">NumPyAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">NumPyAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">NumPyAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">NumPyAccessor</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">NumPyAccessor</a> &amp;<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#aeeb120f5eddd6460ae7681a8d018ce15">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">NumPyAccessor</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">void</span> access_numpy_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T tolerance);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a>            _npy_tensor;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> std::string _filename;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::ostream     &amp;_output_stream;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;};</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">/** SaveNumPy accessor class */</span></div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">  183</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">SaveNumPyAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * @param[in] npy_name   Npy file name.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * @param[in] is_fortran (Optional) If true, save tensor in fortran order.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">SaveNumPyAccessor</a>(<span class="keyword">const</span> std::string npy_name, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_fortran = <span class="keyword">false</span>);<span class="comment"></span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">SaveNumPyAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">SaveNumPyAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">SaveNumPyAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">SaveNumPyAccessor</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">SaveNumPyAccessor</a> &amp;<a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#aa1b14c5310e97c788f7a91b4873295bd">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">SaveNumPyAccessor</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> std::string _npy_name;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>        _is_fortran;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">/** Print accessor class</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> *  @note The print accessor will print only when asserts are enabled.</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> *  */</span></div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">  210</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">PrintAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">     * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">     * @param[in]  io_fmt        (Optional) Format information</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">PrintAccessor</a>(std::ostream &amp;output_stream = std::cout, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> io_fmt = <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>());<span class="comment"></span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">PrintAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">PrintAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">PrintAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">PrintAccessor</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">PrintAccessor</a> &amp;<a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a25f821aa73c4bfd8c176530ea811c95c">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">PrintAccessor</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    std::ostream &amp;_output_stream;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>  _io_fmt;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;};</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">/** Image accessor class */</span></div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml">  235</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml">ImageAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     * @param[in] filename     Image file</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * @param[in] bgr          (Optional) Fill the first plane with blue channel (default = false - RGB format)</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     * @param[in] preprocessor (Optional) Image pre-processing object</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">ImageAccessor</a>(std::string filename, <span class="keywordtype">bool</span> bgr = <span class="keyword">true</span>, std::unique_ptr&lt;IPreprocessor&gt; preprocessor = <span class="keyword">nullptr</span>);<span class="comment"></span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">ImageAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml">ImageAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordtype">bool</span>                           _already_loaded;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> std::string              _filename;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>                     _bgr;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    std::unique_ptr&lt;IPreprocessor&gt; _preprocessor;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;};</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">/** Input Accessor used for network validation */</span></div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml">  259</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml">ValidationInputAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">     * @param[in]  image_list    File containing all the images to validate</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">     * @param[in]  images_path   Path to images.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     * @param[in]  bgr           (Optional) Fill the first plane with blue channel (default = false - RGB format)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     * @param[in]  preprocessor  (Optional) Image pre-processing object  (default = nullptr)</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">     * @param[in]  start         (Optional) Start range</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">     * @param[in]  end           (Optional) End range</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">     * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     * @note Range is defined as [start, end]</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#a458082188f9eec9fdf459f508d64d9be">ValidationInputAccessor</a>(<span class="keyword">const</span> std::string             &amp;image_list,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            std::string                    images_path,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            std::unique_ptr&lt;IPreprocessor&gt; preprocessor  = <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                            <span class="keywordtype">bool</span>                           bgr           = <span class="keyword">true</span>,</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                   start         = 0,</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                   <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>           = 0,</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            std::ostream                  &amp;output_stream = std::cout);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    std::string                    _path;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    std::vector&lt;std::string&gt;       _images;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    std::unique_ptr&lt;IPreprocessor&gt; _preprocessor;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">bool</span>                           _bgr;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordtype">size_t</span>                         _offset;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::ostream                  &amp;_output_stream;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;};</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">/** Output Accessor used for network validation */</span></div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml">  295</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml">ValidationOutputAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">    /** Default Constructor</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">     * @param[in]  image_list    File containing all the images and labels results</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">     * @param[out] output_stream (Optional) Output stream (Defaults to the standard output stream)</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">     * @param[in]  start         (Optional) Start range</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     * @param[in]  end           (Optional) End range</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     * @note Range is defined as [start, end]</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ac3ae33bed176ca84786a8c910c3072c9">ValidationOutputAccessor</a>(<span class="keyword">const</span> std::string &amp;image_list,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                             std::ostream      &amp;output_stream = std::cout,</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       start         = 0,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>           = 0);<span class="comment"></span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">    /** Reset accessor state */</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ad20897c5c8bd47f5d4005989bead0e55">reset</a>();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">    /** Access predictions of the tensor</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">     * @tparam T Tensor elements type</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">     * @param[in] tensor Tensor to read the predictions from</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    std::vector&lt;size_t&gt; access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);<span class="comment"></span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">    /** Aggregates the results of a sample</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     * @param[in]     res              Vector containing the results of a graph</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">     * @param[in,out] positive_samples Positive samples to be updated</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     * @param[in]     top_n            Top n accuracy to measure</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     * @param[in]     correct_label    Correct label of the current sample</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordtype">void</span> aggregate_sample(<span class="keyword">const</span> std::vector&lt;size_t&gt; &amp;res, <span class="keywordtype">size_t</span> &amp;positive_samples, <span class="keywordtype">size_t</span> top_n, <span class="keywordtype">size_t</span> correct_label);<span class="comment"></span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">    /** Reports top N accuracy</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * @param[in] top_n            Top N accuracy that is being reported</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     * @param[in] total_samples    Total number of samples</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * @param[in] positive_samples Positive samples</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">void</span> report_top_n(<span class="keywordtype">size_t</span> top_n, <span class="keywordtype">size_t</span> total_samples, <span class="keywordtype">size_t</span> positive_samples);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    std::vector&lt;int&gt; _results;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    std::ostream    &amp;_output_stream;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">size_t</span>           _offset;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">size_t</span>           _positive_samples_top1;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">size_t</span>           _positive_samples_top5;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;};</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">/** Detection output accessor class */</span></div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">  351</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">DetectionOutputAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     * @param[in]  labels_path        Path to labels text file.</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     * @param[in]  imgs_tensor_shapes Network input images tensor shapes.</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     * @param[out] output_stream      (Optional) Output stream</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">DetectionOutputAccessor</a>(<span class="keyword">const</span> std::string        &amp;labels_path,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                            std::vector&lt;TensorShape&gt; &amp;imgs_tensor_shapes,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                            std::ostream             &amp;output_stream = std::cout);<span class="comment"></span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">DetectionOutputAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">DetectionOutputAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">DetectionOutputAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">DetectionOutputAccessor</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">DetectionOutputAccessor</a> &amp;<a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#aebdccc20fb873152f7f05a3859de5808">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">DetectionOutputAccessor</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordtype">void</span> access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    std::vector&lt;std::string&gt; _labels;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    std::vector&lt;TensorShape&gt; _tensor_shapes;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    std::ostream            &amp;_output_stream;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;};</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">/** Result accessor class */</span></div>
<div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">  383</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;{</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">     * @param[in]  labels_path   Path to labels text file.</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     * @param[in]  top_n         (Optional) Number of output classes to print</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">     * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">TopNPredictionsAccessor</a>(<span class="keyword">const</span> std::string &amp;labels_path, <span class="keywordtype">size_t</span> top_n = 5, std::ostream &amp;output_stream = std::cout);<span class="comment"></span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">TopNPredictionsAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">TopNPredictionsAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;<a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#a29067af1bc346b969ff667fa490e692c">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordtype">void</span> access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    std::vector&lt;std::string&gt; _labels;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    std::ostream            &amp;_output_stream;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordtype">size_t</span>                   _top_n;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;};</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">/** Random accessor class */</span></div>
<div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">  413</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">     * @param[in] lower Lower bound value.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">     * @param[in] upper Upper bound value.</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">     * @param[in] seed  (Optional) Seed used to initialise the random number generator.</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">RandomAccessor</a>(<a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, <span class="keyword">const</span> std::random_device::result_type seed = 0);<span class="comment"></span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">    /** Allows instances to move constructed */</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">RandomAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordtype">void</span>                            fill(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>                      _lower;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>                      _upper;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    std::random_device::result_type _seed;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;};</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">/** Numpy Binary loader class*/</span></div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">  438</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">    /** Default Constructor</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * @param[in] filename    Binary file name</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     * @param[in] file_layout (Optional) Layout of the numpy tensor data. Defaults to NCHW</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">NumPyBinLoader</a>(std::string filename, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> file_layout = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);<span class="comment"></span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">    /** Allows instances to move constructed */</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">NumPyBinLoader</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordtype">bool</span>              _already_loaded;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> std::string _filename;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  _file_layout;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;};</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">/** Generates appropriate random accessor</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"> * @param[in] lower Lower random values bound</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"> * @param[in] upper Upper random values bound</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment"> * @param[in] seed  Random generator seed</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"> * @return A ramdom accessor</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt;</div>
<div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">  468</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">get_random_accessor</a>(<a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, <span class="keyword">const</span> std::random_device::result_type seed = 0)</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RandomAccessor&gt;(lower, upper, seed);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">/** Generates appropriate weights accessor according to the specified path</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment"> * @note If path is empty will generate a DummyAccessor else will generate a NumPyBinLoader</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"> * @param[in] path        Path to the data files</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"> * @param[in] data_file   Relative path to the data files from path</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> * @param[in] file_layout (Optional) Layout of file. Defaults to NCHW</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt;</div>
<div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">  484</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(<span class="keyword">const</span> std::string &amp;<a class="code" href="namespaceadd__copyright.xhtml#aa28dc103258589d9cb421197fe2de90b">path</a>, <span class="keyword">const</span> std::string &amp;data_file, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> file_layout = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;{</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespaceadd__copyright.xhtml#aa28dc103258589d9cb421197fe2de90b">path</a>.empty())</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;();</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;NumPyBinLoader&gt;(<a class="code" href="namespaceadd__copyright.xhtml#aa28dc103258589d9cb421197fe2de90b">path</a> + data_file, file_layout);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">/** Generates appropriate input accessor according to the specified graph parameters</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @param[in] graph_parameters Graph parameters</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * @param[in] preprocessor     (Optional) Preproccessor object</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @param[in] bgr              (Optional) Fill the first plane with blue channel (default = true)</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt;</div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ab14324184f90f342227699c161654b1b">  505</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab14324184f90f342227699c161654b1b">get_input_accessor</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">arm_compute::utils::CommonGraphParams</a> &amp;graph_parameters,</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                   std::unique_ptr&lt;IPreprocessor&gt;               preprocessor = <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                   <span class="keywordtype">bool</span>                                         bgr          = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;{</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">if</span> (!graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>.empty())</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;ValidationInputAccessor&gt;(</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>, graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a91652a4f41fde8020674577dd0e5933d">validation_path</a>, std::move(preprocessor), bgr,</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a5c135a9c2ced82186156930974ded8a0">validation_range_start</a>, graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a1543de48b9546e5e234de4c1196f0d0f">validation_range_end</a>);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keyword">const</span> std::string &amp;image_file       = graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a96b4a087acee7543a7624102a67fc14d">image</a>;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keyword">const</span> std::string &amp;image_file_lower = <a class="code" href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">lower_string</a>(image_file);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">arm_compute::utility::endswith</a>(image_file_lower, <span class="stringliteral">&quot;.npy&quot;</span>))</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NumPyBinLoader&gt;(image_file, graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#aa56f0562febf49bc0e29a4257551191b">data_layout</a>);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">arm_compute::utility::endswith</a>(image_file_lower, <span class="stringliteral">&quot;.jpeg&quot;</span>) ||</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                 <a class="code" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">arm_compute::utility::endswith</a>(image_file_lower, <span class="stringliteral">&quot;.jpg&quot;</span>) ||</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                 <a class="code" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">arm_compute::utility::endswith</a>(image_file_lower, <span class="stringliteral">&quot;.ppm&quot;</span>))</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;ImageAccessor&gt;(image_file, bgr, std::move(preprocessor));</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;();</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">/** Generates appropriate output accessor according to the specified graph parameters</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"> * @note If the output accessor is requested to validate the graph then ValidationOutputAccessor is generated</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"> *       else if output_accessor_file is empty will generate a DummyAccessor else will generate a TopNPredictionsAccessor</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment"> * @param[in]  graph_parameters Graph parameters</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment"> * @param[in]  top_n            (Optional) Number of output classes to print (default = 5)</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"> * @param[in]  is_validation    (Optional) Validation flag (default = false)</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment"> * @param[out] output_stream    (Optional) Output stream (default = std::cout)</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt;</div>
<div class="line"><a name="l00549"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ae3d177d243f5fb34544105a4ee4e1f58">  549</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ae3d177d243f5fb34544105a4ee4e1f58">get_output_accessor</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">arm_compute::utils::CommonGraphParams</a> &amp;graph_parameters,</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                    <span class="keywordtype">size_t</span>                                       top_n         = 5,</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                    <span class="keywordtype">bool</span>                                         is_validation = <span class="keyword">false</span>,</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                    std::ostream                                &amp;output_stream = std::cout)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(is_validation);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">if</span> (!graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>.empty())</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;ValidationOutputAccessor&gt;(graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>, output_stream,</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                                          graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a5c135a9c2ced82186156930974ded8a0">validation_range_start</a>,</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                                          graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a1543de48b9546e5e234de4c1196f0d0f">validation_range_end</a>);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#ad48071cd70c8b31c4ebdd6445eddaa0c">labels</a>.empty())</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;(0);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;TopNPredictionsAccessor&gt;(graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#ad48071cd70c8b31c4ebdd6445eddaa0c">labels</a>, top_n, output_stream);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">/** Generates appropriate output accessor according to the specified graph parameters</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment"> * @note If the output accessor is requested to validate the graph then ValidationOutputAccessor is generated</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"> *       else if output_accessor_file is empty will generate a DummyAccessor else will generate a TopNPredictionsAccessor</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> * @param[in]  graph_parameters Graph parameters</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> * @param[in]  tensor_shapes    Network input images tensor shapes.</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> * @param[in]  is_validation    (Optional) Validation flag (default = false)</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> * @param[out] output_stream    (Optional) Output stream (default = std::cout)</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt;</div>
<div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#aff280480ba1a9075fed13fbb15ca0063">  583</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#aff280480ba1a9075fed13fbb15ca0063">get_detection_output_accessor</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">arm_compute::utils::CommonGraphParams</a> &amp;graph_parameters,</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                              std::vector&lt;TensorShape&gt;                     tensor_shapes,</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                              <span class="keywordtype">bool</span>                                         is_validation = <span class="keyword">false</span>,</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                              std::ostream                                &amp;output_stream = std::cout)</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(is_validation);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">if</span> (!graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>.empty())</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;ValidationOutputAccessor&gt;(graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">validation_file</a>, output_stream,</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                                                          graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a5c135a9c2ced82186156930974ded8a0">validation_range_start</a>,</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                                          graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a1543de48b9546e5e234de4c1196f0d0f">validation_range_end</a>);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#ad48071cd70c8b31c4ebdd6445eddaa0c">labels</a>.empty())</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    {</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;(0);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    {</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DetectionOutputAccessor&gt;(graph_parameters.<a class="code" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#ad48071cd70c8b31c4ebdd6445eddaa0c">labels</a>, tensor_shapes, output_stream);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    }</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">/** Generates appropriate npy output accessor according to the specified npy_path</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment"> * @note If npy_path is empty will generate a DummyAccessor else will generate a NpyAccessor</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment"> * @param[in]  npy_path      Path to npy file.</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment"> * @param[in]  shape         Shape of the numpy tensor data.</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"> * @param[in]  data_type     DataType of the numpy tensor data.</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"> * @param[in]  data_layout   DataLayout of the numpy tensor data.</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"> * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a10e9c53263d766cbd37e4e37f5e8091e">  616</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a10e9c53263d766cbd37e4e37f5e8091e">get_npy_output_accessor</a>(<span class="keyword">const</span> std::string &amp;npy_path,</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                                                       <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>,</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                                                                       <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>,</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                                                                       <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>   = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>,</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                                                       std::ostream &amp;output_stream = std::cout)</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;{</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">if</span> (npy_path.empty())</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;(0);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;NumPyAccessor&gt;(npy_path, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, output_stream);</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">/** Generates appropriate npy output accessor according to the specified npy_path</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"> * @note If npy_path is empty will generate a DummyAccessor else will generate a SaveNpyAccessor</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> * @param[in] npy_name   Npy filename.</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"> * @param[in] is_fortran (Optional) If true, save tensor in fortran order.</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"> * @return An appropriate tensor accessor</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a6207a1b742579b07b8f4b14e542a7b3a">  641</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a6207a1b742579b07b8f4b14e542a7b3a">get_save_npy_output_accessor</a>(<span class="keyword">const</span> std::string &amp;npy_name,</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                                                            <span class="keyword">const</span> <span class="keywordtype">bool</span>         is_fortran = <span class="keyword">false</span>)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;{</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">if</span> (npy_name.empty())</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    {</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DummyAccessor&gt;(0);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    {</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;SaveNumPyAccessor&gt;(npy_name, is_fortran);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">/** Generates print tensor accessor</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment"> * @param[out] output_stream (Optional) Output stream</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment"> * @return A print tensor accessor</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00660"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a655bfc2ace1def9f00aab1c9356abb53">  660</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a655bfc2ace1def9f00aab1c9356abb53">get_print_output_accessor</a>(std::ostream &amp;output_stream = std::cout)</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;PrintAccessor&gt;(output_stream);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment">/** Permutes a given tensor shape given the input and output data layout</span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment"> * @param[in] tensor_shape    Tensor shape to permute</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment"> * @param[in] in_data_layout  Input tensor shape data layout</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"> * @param[in] out_data_layout Output tensor shape data layout</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment"> * @return Permuted tensor shape</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00673"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">  673</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">permute_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> in_data_layout, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> out_data_layout)</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;{</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">if</span> (in_data_layout != out_data_layout)</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    {</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm_vec = (in_data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                                      ? <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>)</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                                      : <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(tensor_shape, perm_vec);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordflow">return</span> tensor_shape;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;}</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment">/** Utility function to return the TargetHint</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment"> * @param[in] target Integer value which expresses the selected target. Must be 0 for Arm® Neon™ or 1 for OpenCL or 2 (OpenCL with Tuner)</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"> * @return the TargetHint</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00691"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ab6dc388200717b5fae17342af13f5e41">  691</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">graph::Target</a> <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab6dc388200717b5fae17342af13f5e41">set_target_hint</a>(<span class="keywordtype">int</span> target)</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(target &gt; 2, <span class="stringliteral">&quot;Invalid target. Target must be 0 (NEON), 1 (OpenCL), 2 (OpenCL + Tuner)&quot;</span>);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordflow">if</span> ((target == 1 || target == 2))</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    {</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">graph::Target::CL</a>;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    }</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">graph::Target::NEON</a>;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    }</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;}</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;} <span class="comment">// namespace graph_utils</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160; </div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_UTILS_GRAPH_UTILS_H__ */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdeci">@ NCHW</div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml">arm_compute::graph_utils::SaveNumPyAccessor</a></div><div class="ttdoc">SaveNumPy accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00183">GraphUtils.h:183</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_print_accessor_xhtml_a860434850cdbef7332fb2c0de7606fcd"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">arm_compute::graph_utils::PrintAccessor::PrintAccessor</a></div><div class="ttdeci">PrintAccessor(std::ostream &amp;output_stream=std::cout, IOFormatInfo io_fmt=IOFormatInfo())</div><div class="ttdoc">Constructor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_a10e9c53263d766cbd37e4e37f5e8091e"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a10e9c53263d766cbd37e4e37f5e8091e">arm_compute::graph_utils::get_npy_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_npy_output_accessor(const std::string &amp;npy_path, TensorShape shape, DataType data_type, DataLayout data_layout=DataLayout::NCHW, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate npy output accessor according to the specified npy_path.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00616">GraphUtils.h:616</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml_aeeb120f5eddd6460ae7681a8d018ce15"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#aeeb120f5eddd6460ae7681a8d018ce15">arm_compute::graph_utils::NumPyAccessor::operator=</a></div><div class="ttdeci">NumPyAccessor &amp; operator=(const NumPyAccessor &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_image_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml">arm_compute::graph_utils::ImageAccessor</a></div><div class="ttdoc">Image accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00235">GraphUtils.h:235</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_a30bee0b52a919bbcb1dc48b1b6546a16"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">arm_compute::graph_utils::get_weights_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_weights_accessor(const std::string &amp;path, const std::string &amp;data_file, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Generates appropriate weights accessor according to the specified path.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00484">GraphUtils.h:484</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ab14324184f90f342227699c161654b1b"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab14324184f90f342227699c161654b1b">arm_compute::graph_utils::get_input_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_input_accessor(const arm_compute::utils::CommonGraphParams &amp;graph_parameters, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr, bool bgr=true)</div><div class="ttdoc">Generates appropriate input accessor according to the specified graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00505">GraphUtils.h:505</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">arm_compute::graph::Target::CL</a></div><div class="ttdeci">@ CL</div><div class="ttdoc">OpenCL capable target device.</div></div>
<div class="ttc" id="anamespaceadd__copyright_xhtml_aa28dc103258589d9cb421197fe2de90b"><div class="ttname"><a href="namespaceadd__copyright.xhtml#aa28dc103258589d9cb421197fe2de90b">add_copyright.path</a></div><div class="ttdeci">path</div><div class="ttdef"><b>Definition:</b> <a href="add__copyright_8py_source.xhtml#l00089">add_copyright.py:89</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ad20897c5c8bd47f5d4005989bead0e55"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ad20897c5c8bd47f5d4005989bead0e55">arm_compute::graph_utils::ValidationOutputAccessor::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdoc">Reset accessor state.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00441">GraphUtils.cpp:441</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_a655bfc2ace1def9f00aab1c9356abb53"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a655bfc2ace1def9f00aab1c9356abb53">arm_compute::graph_utils::get_print_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_print_output_accessor(std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates print tensor accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00660">GraphUtils.h:660</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_random_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::RandomAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00707">GraphUtils.cpp:707</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0a7bb17a0a0414a7162f635776a02eb5"><div class="ttname"><a href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">arm_compute::lower_string</a></div><div class="ttdeci">std::string lower_string(const std::string &amp;val)</div><div class="ttdoc">Lower a given string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00038">StringUtils.cpp:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml_a33469b1a330d6553d12c0de0c2d8ab6d"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">arm_compute::graph_utils::SaveNumPyAccessor::SaveNumPyAccessor</a></div><div class="ttdeci">SaveNumPyAccessor(const std::string npy_name, const bool is_fortran=false)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00250">GraphUtils.cpp:250</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::Target::NEON</a></div><div class="ttdeci">@ NEON</div><div class="ttdoc">Arm® Neon™ capable target device.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_t_f_preproccessor_xhtml_ab58008704726cd07353605b1d9e13d86"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#ab58008704726cd07353605b1d9e13d86">arm_compute::graph_utils::TFPreproccessor::TFPreproccessor</a></div><div class="ttdeci">TFPreproccessor(float min_range=-1.f, float max_range=1.f)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ac3ae33bed176ca84786a8c910c3072c9"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ac3ae33bed176ca84786a8c910c3072c9">arm_compute::graph_utils::ValidationOutputAccessor::ValidationOutputAccessor</a></div><div class="ttdeci">ValidationOutputAccessor(const std::string &amp;image_list, std::ostream &amp;output_stream=std::cout, unsigned int start=0, unsigned int end=0)</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00405">GraphUtils.cpp:405</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">arm_compute::graph_utils::NumPyBinLoader</a></div><div class="ttdoc">Numpy Binary loader class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00438">GraphUtils.h:438</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_a1543de48b9546e5e234de4c1196f0d0f"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a1543de48b9546e5e234de4c1196f0d0f">arm_compute::utils::CommonGraphParams::validation_range_end</a></div><div class="ttdeci">unsigned int validation_range_end</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00113">CommonGraphOptions.h:113</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_caffe_preproccessor_xhtml_ac3fe6773f3712901d5d9dc27af92f773"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#ac3fe6773f3712901d5d9dc27af92f773">arm_compute::graph_utils::CaffePreproccessor::CaffePreproccessor</a></div><div class="ttdeci">CaffePreproccessor(std::array&lt; float, 3 &gt; mean=std::array&lt; float, 3 &gt;{{0, 0, 0}}, bool bgr=true, float scale=1.f)</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00104">GraphUtils.cpp:104</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">arm_compute::graph_utils::PPMWriter</a></div><div class="ttdoc">PPM writer class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00104">GraphUtils.h:104</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml_aa1b14c5310e97c788f7a91b4873295bd"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#aa1b14c5310e97c788f7a91b4873295bd">arm_compute::graph_utils::SaveNumPyAccessor::operator=</a></div><div class="ttdeci">SaveNumPyAccessor &amp; operator=(const SaveNumPyAccessor &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_caffe_preproccessor_xhtml_a1545d087d050b8e9733e7e212df73666"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">arm_compute::graph_utils::CaffePreproccessor::preprocess</a></div><div class="ttdeci">void preprocess(ITensor &amp;tensor) override</div><div class="ttdoc">Preprocess the given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00113">GraphUtils.cpp:113</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml_abf92dad7656a4a25c3aa3d1112ef06e5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">arm_compute::graph_utils::NumPyBinLoader::NumPyBinLoader</a></div><div class="ttdeci">NumPyBinLoader(std::string filename, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00785">GraphUtils.cpp:785</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00144">Helpers.h:144</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_a5c135a9c2ced82186156930974ded8a0"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a5c135a9c2ced82186156930974ded8a0">arm_compute::utils::CommonGraphParams::validation_range_start</a></div><div class="ttdeci">unsigned int validation_range_start</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00112">CommonGraphOptions.h:112</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_input_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ValidationInputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00358">GraphUtils.cpp:358</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_i_preprocessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml">arm_compute::graph_utils::IPreprocessor</a></div><div class="ttdoc">Preprocessor interface.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00047">GraphUtils.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::NumPyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00217">GraphUtils.cpp:217</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_caffe_preproccessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml">arm_compute::graph_utils::CaffePreproccessor</a></div><div class="ttdoc">Caffe preproccessor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00060">GraphUtils.h:60</a></div></div>
<div class="ttc" id="a_common_graph_options_8h_xhtml"><div class="ttname"><a href="_common_graph_options_8h.xhtml">CommonGraphOptions.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::PPMWriter::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00149">GraphUtils.cpp:149</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::NumPyBinLoader::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00790">GraphUtils.cpp:790</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00038">Strides.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_aff280480ba1a9075fed13fbb15ca0063"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#aff280480ba1a9075fed13fbb15ca0063">arm_compute::graph_utils::get_detection_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_detection_output_accessor(const arm_compute::utils::CommonGraphParams &amp;graph_parameters, std::vector&lt; TensorShape &gt; tensor_shapes, bool is_validation=false, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate output accessor according to the specified graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00583">GraphUtils.h:583</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">arm_compute::graph_utils::DummyAccessor</a></div><div class="ttdoc">Dummy accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00126">GraphUtils.h:126</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_aa56f0562febf49bc0e29a4257551191b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#aa56f0562febf49bc0e29a4257551191b">arm_compute::utils::CommonGraphParams::data_layout</a></div><div class="ttdeci">arm_compute::DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00100">CommonGraphOptions.h:100</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml_a27dfee7cd6e032a9d766786a8e1e3c8f"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">arm_compute::graph_utils::DetectionOutputAccessor::DetectionOutputAccessor</a></div><div class="ttdeci">DetectionOutputAccessor(const std::string &amp;labels_path, std::vector&lt; TensorShape &gt; &amp;imgs_tensor_shapes, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00529">GraphUtils.cpp:529</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00038">CoreTypes.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00104">Types.h:104</a></div></div>
<div class="ttc" id="a_utility_8h_xhtml"><div class="ttname"><a href="_utility_8h.xhtml">Utility.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_af8cd4923f17276faa2f7a1a60e7acb17"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">arm_compute::utility::endswith</a></div><div class="ttdeci">bool endswith(const std::string &amp;str, const std::string &amp;suffix)</div><div class="ttdoc">Checks if a string contains a given suffix.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00177">Utility.h:177</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml_ad12f4e3c945ec4fad9ab6386954a3550"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">arm_compute::graph_utils::TopNPredictionsAccessor::TopNPredictionsAccessor</a></div><div class="ttdeci">TopNPredictionsAccessor(const std::string &amp;labels_path, size_t top_n=5, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00600">GraphUtils.cpp:600</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml_aebdccc20fb873152f7f05a3859de5808"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#aebdccc20fb873152f7f05a3859de5808">arm_compute::graph_utils::DetectionOutputAccessor::operator=</a></div><div class="ttdeci">DetectionOutputAccessor &amp; operator=(const DetectionOutputAccessor &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_print_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml">arm_compute::graph_utils::PrintAccessor</a></div><div class="ttdoc">Print accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00210">GraphUtils.h:210</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ab3a897163a7fe23208f1d9c618062ee2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">arm_compute::graph_utils::permute_shape</a></div><div class="ttdeci">TensorShape permute_shape(TensorShape tensor_shape, DataLayout in_data_layout, DataLayout out_data_layout)</div><div class="ttdoc">Permutes a given tensor shape given the input and output data layout.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00673">GraphUtils.h:673</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_i_preprocessor_xhtml_a145ae89877c556306c3b0a8d869b33f3"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml#a145ae89877c556306c3b0a8d869b33f3">arm_compute::graph_utils::IPreprocessor::~IPreprocessor</a></div><div class="ttdeci">virtual ~IPreprocessor()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_a9ea94bf5b7d00ddb836df1b8dcedb93a"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">arm_compute::graph_utils::PPMWriter::PPMWriter</a></div><div class="ttdeci">PPMWriter(std::string name, unsigned int maximum=1)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00145">GraphUtils.cpp:145</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_input_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml">arm_compute::graph_utils::ValidationInputAccessor</a></div><div class="ttdoc">Input Accessor used for network validation.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00259">GraphUtils.h:259</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_affa064ad4776fa095844d632c04156f5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#affa064ad4776fa095844d632c04156f5">arm_compute::graph_utils::DummyAccessor::access_tensor_data</a></div><div class="ttdeci">bool access_tensor_data() override</div><div class="ttdoc">Returns true if the tensor data is being accessed.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00168">GraphUtils.cpp:168</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::SaveNumPyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00255">GraphUtils.cpp:255</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">NEBatchNormalizationLayerKernel.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">arm_compute::graph_utils::TopNPredictionsAccessor</a></div><div class="ttdoc">Result accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00383">GraphUtils.h:383</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_a8795de58b39cf31914df35a032c1a486"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a8795de58b39cf31914df35a032c1a486">arm_compute::utils::CommonGraphParams::validation_file</a></div><div class="ttdeci">std::string validation_file</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00108">CommonGraphOptions.h:108</a></div></div>
<div class="ttc" id="a_pixel_value_8h_xhtml"><div class="ttname"><a href="_pixel_value_8h.xhtml">PixelValue.h</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ValidationOutputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00448">GraphUtils.cpp:448</a></div></div>
<div class="ttc" id="aruntime_2_tensor_8h_xhtml"><div class="ttname"><a href="runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">arm_compute::graph_utils::NumPyAccessor</a></div><div class="ttdoc">NumPy accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00147">GraphUtils.h:147</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_print_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::PrintAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div></div>
<div class="ttc" id="aarm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_image_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ImageAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00269">GraphUtils.cpp:269</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_tensor_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">arm_compute::graph::ITensorAccessor</a></div><div class="ttdoc">Tensor accessor interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_accessor_8h_source.xhtml#l00036">ITensorAccessor.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_i_preprocessor_xhtml_ae699b63165de5182fda5a2337009641f"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_i_preprocessor.xhtml#ae699b63165de5182fda5a2337009641f">arm_compute::graph_utils::IPreprocessor::preprocess</a></div><div class="ttdeci">virtual void preprocess(ITensor &amp;tensor)=0</div><div class="ttdoc">Preprocess the given tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::DetectionOutputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00584">GraphUtils.cpp:584</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ae3d177d243f5fb34544105a4ee4e1f58"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ae3d177d243f5fb34544105a4ee4e1f58">arm_compute::graph_utils::get_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_output_accessor(const arm_compute::utils::CommonGraphParams &amp;graph_parameters, size_t top_n=5, bool is_validation=false, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate output accessor according to the specified graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00549">GraphUtils.h:549</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_i_o_format_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml">arm_compute::IOFormatInfo</a></div><div class="ttdoc">IO formatting information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01960">Types.h:1960</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml_ad12e8048537cfc3c0d1935aa0e63a1ee"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">arm_compute::graph_utils::NumPyAccessor::NumPyAccessor</a></div><div class="ttdeci">NumPyAccessor(std::string npy_path, TensorShape shape, DataType data_type, DataLayout data_layout=DataLayout::NCHW, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00188">GraphUtils.cpp:188</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_a96b4a087acee7543a7624102a67fc14d"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a96b4a087acee7543a7624102a67fc14d">arm_compute::utils::CommonGraphParams::image</a></div><div class="ttdeci">std::string image</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00106">CommonGraphOptions.h:106</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_t_f_preproccessor_xhtml_a1545d087d050b8e9733e7e212df73666"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">arm_compute::graph_utils::TFPreproccessor::preprocess</a></div><div class="ttdeci">void preprocess(ITensor &amp;tensor) override</div><div class="ttdoc">Preprocess the given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00071">GraphUtils.cpp:71</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_random_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">arm_compute::graph_utils::RandomAccessor</a></div><div class="ttdoc">Random accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00413">GraphUtils.h:413</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_random_accessor_xhtml_a47e2e3f731e842dde7baaf69634a9530"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">arm_compute::graph_utils::RandomAccessor::RandomAccessor</a></div><div class="ttdeci">RandomAccessor(PixelValue lower, PixelValue upper, const std::random_device::result_type seed=0)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00674">GraphUtils.cpp:674</a></div></div>
<div class="ttc" id="a_i_tensor_accessor_8h_xhtml"><div class="ttname"><a href="_i_tensor_accessor_8h.xhtml">ITensorAccessor.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml">arm_compute::graph_utils::ValidationOutputAccessor</a></div><div class="ttdoc">Output Accessor used for network validation.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00295">GraphUtils.h:295</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ab6dc388200717b5fae17342af13f5e41"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab6dc388200717b5fae17342af13f5e41">arm_compute::graph_utils::set_target_hint</a></div><div class="ttdeci">graph::Target set_target_hint(int target)</div><div class="ttdoc">Utility function to return the TargetHint.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00691">GraphUtils.h:691</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_ab7e905c7bfd2944e67bd069a3de3e7a2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">arm_compute::graph_utils::get_random_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_random_accessor(PixelValue lower, PixelValue upper, const std::random_device::result_type seed=0)</div><div class="ttdoc">Generates appropriate random accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00468">GraphUtils.h:468</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph__utils_xhtml_a6207a1b742579b07b8f4b14e542a7b3a"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a6207a1b742579b07b8f4b14e542a7b3a">arm_compute::graph_utils::get_save_npy_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_save_npy_output_accessor(const std::string &amp;npy_name, const bool is_fortran=false)</div><div class="ttdoc">Generates appropriate npy output accessor according to the specified npy_path.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00641">GraphUtils.h:641</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_ad48071cd70c8b31c4ebdd6445eddaa0c"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#ad48071cd70c8b31c4ebdd6445eddaa0c">arm_compute::utils::CommonGraphParams::labels</a></div><div class="ttdeci">std::string labels</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00107">CommonGraphOptions.h:107</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_print_accessor_xhtml_a25f821aa73c4bfd8c176530ea811c95c"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a25f821aa73c4bfd8c176530ea811c95c">arm_compute::graph_utils::PrintAccessor::operator=</a></div><div class="ttdeci">PrintAccessor &amp; operator=(const PrintAccessor &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_t_f_preproccessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml">arm_compute::graph_utils::TFPreproccessor</a></div><div class="ttdoc">TF preproccessor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00082">GraphUtils.h:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml">arm_compute::Tensor</a></div><div class="ttdoc">Basic implementation of the tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_validation_input_accessor_xhtml_a458082188f9eec9fdf459f508d64d9be"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#a458082188f9eec9fdf459f508d64d9be">arm_compute::graph_utils::ValidationInputAccessor::ValidationInputAccessor</a></div><div class="ttdeci">ValidationInputAccessor(const std::string &amp;image_list, std::string images_path, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr, bool bgr=true, unsigned int start=0, unsigned int end=0, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00315">GraphUtils.cpp:315</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml">arm_compute::graph_utils::DetectionOutputAccessor</a></div><div class="ttdoc">Detection output accessor class.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00351">GraphUtils.h:351</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml_a29067af1bc346b969ff667fa490e692c"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#a29067af1bc346b969ff667fa490e692c">arm_compute::graph_utils::TopNPredictionsAccessor::operator=</a></div><div class="ttdeci">TopNPredictionsAccessor &amp; operator=(const TopNPredictionsAccessor &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::DummyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00173">GraphUtils.cpp:173</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">arm_compute::utils::CommonGraphParams</a></div><div class="ttdoc">Structure holding all the common graph parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00093">CommonGraphOptions.h:93</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_ac5ae9597ba20e5581726743fe7c154b5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">arm_compute::graph_utils::DummyAccessor::DummyAccessor</a></div><div class="ttdeci">DummyAccessor(unsigned int maximum=1)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00164">GraphUtils.cpp:164</a></div></div>
<div class="ttc" id="agraph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::TopNPredictionsAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00654">GraphUtils.cpp:654</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00083">CoreTypes.h:83</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph__utils_1_1_image_accessor_xhtml_a872e7ef3563a74e35a6912d12706c012"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">arm_compute::graph_utils::ImageAccessor::ImageAccessor</a></div><div class="ttdeci">ImageAccessor(std::string filename, bool bgr=true, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00264">GraphUtils.cpp:264</a></div></div>
<div class="ttc" id="astructarm__compute_1_1utils_1_1_common_graph_params_xhtml_a91652a4f41fde8020674577dd0e5933d"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#a91652a4f41fde8020674577dd0e5933d">arm_compute::utils::CommonGraphParams::validation_path</a></div><div class="ttdeci">std::string validation_path</div><div class="ttdef"><b>Definition:</b> <a href="_common_graph_options_8h_source.xhtml#l00109">CommonGraphOptions.h:109</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="_graph_utils_8h.xhtml">GraphUtils.h</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:14:57 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
