<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ITensorAllocator Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_tensor_allocator.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ITensorAllocator Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Interface to allocate tensors.  
 <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_tensor_allocator_8h_source.xhtml">ITensorAllocator.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a049b4734a319a583b6eef3edc3472cc2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a049b4734a319a583b6eef3edc3472cc2">ITensorAllocator</a> ()=default</td></tr>
<tr class="memdesc:a049b4734a319a583b6eef3edc3472cc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a049b4734a319a583b6eef3edc3472cc2">More...</a><br /></td></tr>
<tr class="separator:a049b4734a319a583b6eef3edc3472cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae82acbc677aa7d77c6a3f5e3547ef917"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#ae82acbc677aa7d77c6a3f5e3547ef917">ITensorAllocator</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:ae82acbc677aa7d77c6a3f5e3547ef917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#ae82acbc677aa7d77c6a3f5e3547ef917">More...</a><br /></td></tr>
<tr class="separator:ae82acbc677aa7d77c6a3f5e3547ef917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12e5f2915e2461321b130dcf84f3e268"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a12e5f2915e2461321b130dcf84f3e268">operator=</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:a12e5f2915e2461321b130dcf84f3e268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a12e5f2915e2461321b130dcf84f3e268">More...</a><br /></td></tr>
<tr class="separator:a12e5f2915e2461321b130dcf84f3e268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fe09d257ff33e01defc7074ca22dc98"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a4fe09d257ff33e01defc7074ca22dc98">ITensorAllocator</a> (<a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a4fe09d257ff33e01defc7074ca22dc98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a4fe09d257ff33e01defc7074ca22dc98">More...</a><br /></td></tr>
<tr class="separator:a4fe09d257ff33e01defc7074ca22dc98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46277b6e964a66a9936e06f9989f0ff6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a46277b6e964a66a9936e06f9989f0ff6">operator=</a> (<a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a46277b6e964a66a9936e06f9989f0ff6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a46277b6e964a66a9936e06f9989f0ff6">More...</a><br /></td></tr>
<tr class="separator:a46277b6e964a66a9936e06f9989f0ff6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8378fc6c887231765b885f8033c7bb99"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a8378fc6c887231765b885f8033c7bb99">~ITensorAllocator</a> ()=default</td></tr>
<tr class="memdesc:a8378fc6c887231765b885f8033c7bb99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a8378fc6c887231765b885f8033c7bb99">More...</a><br /></td></tr>
<tr class="separator:a8378fc6c887231765b885f8033c7bb99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af36143939a43fa124312e395975091ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, size_t <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>=0)</td></tr>
<tr class="memdesc:af36143939a43fa124312e395975091ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a tensor based on the passed <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">More...</a><br /></td></tr>
<tr class="separator:af36143939a43fa124312e395975091ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e551033018a2665355bbb757ed32e9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a7e551033018a2665355bbb757ed32e9a">soft_init</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, size_t <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>=0)</td></tr>
<tr class="memdesc:a7e551033018a2665355bbb757ed32e9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a tensor based with a reference <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a7e551033018a2665355bbb757ed32e9a">More...</a><br /></td></tr>
<tr class="separator:a7e551033018a2665355bbb757ed32e9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af286b91f2f7596fb01ab790a1468a81a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af286b91f2f7596fb01ab790a1468a81a">info</a> ()</td></tr>
<tr class="memdesc:af286b91f2f7596fb01ab790a1468a81a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a reference to the tensor's metadata.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af286b91f2f7596fb01ab790a1468a81a">More...</a><br /></td></tr>
<tr class="separator:af286b91f2f7596fb01ab790a1468a81a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a085617900804e88541676c207b568975"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a085617900804e88541676c207b568975">info</a> () const</td></tr>
<tr class="memdesc:a085617900804e88541676c207b568975"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a constant reference to the tensor's metadata.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a085617900804e88541676c207b568975">More...</a><br /></td></tr>
<tr class="separator:a085617900804e88541676c207b568975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32899157b4898866a4a58440f2f7b13f"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a> () const</td></tr>
<tr class="memdesc:a32899157b4898866a4a58440f2f7b13f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return underlying's tensor buffer alignment.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">More...</a><br /></td></tr>
<tr class="separator:a32899157b4898866a4a58440f2f7b13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8a4946cd749d482dd996874d295af85"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a> ()=0</td></tr>
<tr class="memdesc:aa8a4946cd749d482dd996874d295af85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to allocate the tensor.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">More...</a><br /></td></tr>
<tr class="separator:aa8a4946cd749d482dd996874d295af85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1781eecaabd2bc97d074437d01b2c683"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a1781eecaabd2bc97d074437d01b2c683">free</a> ()=0</td></tr>
<tr class="memdesc:a1781eecaabd2bc97d074437d01b2c683"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to free the allocated tensor.  <a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a1781eecaabd2bc97d074437d01b2c683">More...</a><br /></td></tr>
<tr class="separator:a1781eecaabd2bc97d074437d01b2c683"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Interface to allocate tensors. </p>

<p class="definition">Definition at line <a class="el" href="_i_tensor_allocator_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_i_tensor_allocator_8h_source.xhtml">ITensorAllocator.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a049b4734a319a583b6eef3edc3472cc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a049b4734a319a583b6eef3edc3472cc2">&#9670;&nbsp;</a></span>ITensorAllocator() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="ae82acbc677aa7d77c6a3f5e3547ef917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae82acbc677aa7d77c6a3f5e3547ef917">&#9670;&nbsp;</a></span>ITensorAllocator() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a id="a4fe09d257ff33e01defc7074ca22dc98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fe09d257ff33e01defc7074ca22dc98">&#9670;&nbsp;</a></span>ITensorAllocator() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a8378fc6c887231765b885f8033c7bb99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8378fc6c887231765b885f8033c7bb99">&#9670;&nbsp;</a></span>~ITensorAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default virtual destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a32899157b4898866a4a58440f2f7b13f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32899157b4898866a4a58440f2f7b13f">&#9670;&nbsp;</a></span>alignment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t alignment </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return underlying's tensor buffer alignment. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> buffer alignment </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml">ITensorAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> _alignment;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00133">TensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00131">CLTensorAllocator::allocate()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator::import_memory()</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00033">ITensorAllocator::init()</a>, and <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00040">ITensorAllocator::soft_init()</a>.</p>

</div>
</div>
<a id="aa8a4946cd749d482dd996874d295af85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8a4946cd749d482dd996874d295af85">&#9670;&nbsp;</a></span>allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void allocate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to allocate the tensor. </p>
<dl class="section note"><dt>Note</dt><dd>The child is expected to use the <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> to get the size of the memory allocation. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>The tensor must not already be allocated. Otherwise calling the function will fail. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">CLTensorAllocator</a>, and <a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">TensorAllocator</a>.</p>

</div>
</div>
<a id="a1781eecaabd2bc97d074437d01b2c683"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1781eecaabd2bc97d074437d01b2c683">&#9670;&nbsp;</a></span>free()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void free </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to free the allocated tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>The tensor must have been allocated previously. Otherwise calling the function will fail. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a1468b0adb6ec3f9d38aa7d60b8a91974">CLTensorAllocator</a>, and <a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml#a1468b0adb6ec3f9d38aa7d60b8a91974">TensorAllocator</a>.</p>

</div>
</div>
<a id="af286b91f2f7596fb01ab790a1468a81a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af286b91f2f7596fb01ab790a1468a81a">&#9670;&nbsp;</a></span>info() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp; info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a reference to the tensor's metadata. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to the tensor's metadata. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml">ITensorAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> (_info_external != <span class="keyword">nullptr</span>) ? *_info_external : _info_owned;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00133">TensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00131">CLTensorAllocator::allocate()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00148">TensorAllocator::free()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00163">CLTensorAllocator::free()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator::import_memory()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00171">CLTensorAllocator::import_memory()</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00032">Tensor::info()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, and <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00072">TensorAllocator::~TensorAllocator()</a>.</p>

</div>
</div>
<a id="a085617900804e88541676c207b568975"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a085617900804e88541676c207b568975">&#9670;&nbsp;</a></span>info() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a constant reference to the tensor's metadata. </p>
<dl class="section return"><dt>Returns</dt><dd>Constant reference to the tensor's metadata. </dd></dl>

</div>
</div>
<a id="af36143939a43fa124312e395975091ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af36143939a43fa124312e395975091ed">&#9670;&nbsp;</a></span>init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize a tensor based on the passed <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td><a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> object containing the description of the tensor to initialize. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Alignment in bytes that the underlying base pointer should comply with. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml">ITensorAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    _info_owned    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    _info_external = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    _alignment     = <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00056">ITensorAllocator::alignment()</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00034">CLTensorHandle::CLTensorHandle()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00103">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00060">CLL2NormalizeLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00086">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00262">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00160">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00193">CLQLSTMLayer::configure()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a12e5f2915e2461321b130dcf84f3e268"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12e5f2915e2461321b130dcf84f3e268">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00088">TensorAllocator::operator=()</a>.</p>

</div>
</div>
<a id="a46277b6e964a66a9936e06f9989f0ff6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46277b6e964a66a9936e06f9989f0ff6">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a7e551033018a2665355bbb757ed32e9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e551033018a2665355bbb757ed32e9a">&#9670;&nbsp;</a></span>soft_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void soft_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize a tensor based with a reference <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>. </p>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml" title="Interface to allocate tensors.">ITensorAllocator</a> won't own the <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> thus these need to out-live</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td><a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> object containing the description of the tensor to initialize. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Alignment in bytes that the underlying base pointer should comply with. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml">ITensorAllocator.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    _info_external = &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    _alignment     = <a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">alignment</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00056">ITensorAllocator::alignment()</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_aux_tensor_handler_8h_source.xhtml#l00042">CLAuxTensorHandler::CLAuxTensorHandler()</a>, <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00042">CpuAuxTensorHandler::CpuAuxTensorHandler()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00797">CpuGemmConv2d::run()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/<a class="el" href="_i_tensor_allocator_8h_source.xhtml">ITensorAllocator.h</a></li>
<li>src/runtime/<a class="el" href="_i_tensor_allocator_8cpp_source.xhtml">ITensorAllocator.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_allocator_xhtml_a32899157b4898866a4a58440f2f7b13f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a32899157b4898866a4a58440f2f7b13f">arm_compute::ITensorAllocator::alignment</a></div><div class="ttdeci">size_t alignment() const</div><div class="ttdoc">Return underlying's tensor buffer alignment.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00056">ITensorAllocator.cpp:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml">ITensorAllocator</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:15:01 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
