<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwMatMul.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_gpu_ckw_mat_mul_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GpuCkwMatMul.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gpu_ckw_mat_mul_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2023-2024 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_mat_mul_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/GpuCkwMatMul.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_adjust_vec_size_8h.xhtml">arm_compute/core/utils/helpers/AdjustVecSize.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ckw_helper_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/CkwHelper.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="dynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/components/utils/type_converter/Common.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_component_argument_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwComponentArgument.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gpu_ckw_variable_table_8h.xhtml">src/dynamic_fusion/sketch/gpu/ckw_driver/GpuCkwVariableTable.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;compute_kernel_writer/include/ckw/KernelWriter.h&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#add26a8a597f8d778def9096a3c0d5137">   48</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#add26a8a597f8d778def9096a3c0d5137">GpuCkwMatMul::GpuCkwMatMul</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a>                      <span class="keywordtype">id</span>,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;ITensorInfo&gt;</a> &amp;tensors,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml">Attributes</a>                &amp;attributes,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml">Settings</a>                  &amp;settings)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">IGpuCkwComponentDriver</a>{<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>}, _lhs{}, _rhs{}, _dst{}, _attributes{attributes}, _settings{settings}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    _lhs = this-&gt;tensors().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    _rhs = this-&gt;tensors().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _dst = this-&gt;tensors().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">TensorType::ACL_DST_0</a>);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(_lhs, _rhs, _dst);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ac794f053c37af9bdaf61039dbff80cac">   60</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ac794f053c37af9bdaf61039dbff80cac">GpuCkwMatMul::write_component_code</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">ComponentGroup</a>    &amp;comp_group,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">GpuCkwVariableTable</a>     &amp;vtable,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer)<span class="keyword"> const</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * 1 - Define tensors</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> *lhs = vtable.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a88cd92e1013c480a18a3a8cc6d7ea385">declare_variable</a>(comp_group, writer, _lhs, <span class="stringliteral">&quot;lhs&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> *rhs = vtable.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a88cd92e1013c480a18a3a8cc6d7ea385">declare_variable</a>(comp_group, writer, _rhs, <span class="stringliteral">&quot;rhs&quot;</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = vtable.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a88cd92e1013c480a18a3a8cc6d7ea385">declare_variable</a>(comp_group, writer, _dst, <span class="stringliteral">&quot;dst&quot;</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     * 2 - Define CKW constants</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> k =</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a72df5776428a994c4749bf12e1b6dceb">adj_lhs</a>() ? <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1)) : <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> k0     = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a3d45ef122c80fe22d9b8a6fa10c75218">k0</a>(), k));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_dt = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// CKW constants</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">auto</span> const_k_i32          = writer-&gt;declare_constant_tile(ckw::ConstantData({{k}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span> const_k0_i32         = writer-&gt;declare_constant_tile(ckw::ConstantData({{k0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span> const_0_i32          = writer-&gt;declare_constant_tile(ckw::ConstantData({{0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> const_pos_1_i32      = writer-&gt;declare_constant_tile(ckw::ConstantData({{1}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">auto</span> const_0_fp           = writer-&gt;declare_constant_tile(ckw::ConstantData({{0.0f}}, dst_dt));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">auto</span> const_k_minus_k0_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{k - k0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * 3 - Define the compute block parameters and destination tile (if not root component)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     *     Bind the tile to the tensor to share it among different components and</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     *     initialize the compute block parameters</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// The n0 and m0 parameters from root_window only refers to the output</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> root_window = comp_group.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a7b0b398a61f9445132382fd9c065435b">ckw_component_driver</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a66df3fbb8781a4dfa011885356e1495f">get_window</a>();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Destination compute block size</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> int32_t dst_n0 = root_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> int32_t dst_m0 = root_window.y().step();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Destination compute block size left-over</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> int32_t dst_n0_partial = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) % dst_n0;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> int32_t dst_m0_partial = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) % dst_m0;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Shift-back for the overlapping-min strategy</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> int32_t dst_shift_back = (dst_n0 - dst_n0_partial) % dst_n0;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    ckw::TensorSampler sampler_dst;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    sampler_dst.format(ckw::TensorSamplerFormat::Dim0_Dim1_Dim2);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (dst_n0_partial == 0)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        sampler_dst.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        sampler_dst.address_mode_x(ckw::TensorSamplerAddressModeX::OverlappingMin);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (dst_m0_partial == 0)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        sampler_dst.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        sampler_dst.address_mode_y(ckw::TensorSamplerAddressModeY::ClampToBorderMaxOnly);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    sampler_dst.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    sampler_dst.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Declare destination tile</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">auto</span> tile_dst = writer-&gt;declare_tile(<span class="stringliteral">&quot;dst&quot;</span>, ckw::TileInfo(dst_dt, dst_m0, dst_n0));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Initialize destination tile</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    writer-&gt;op_assign(tile_dst, const_0_fp);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Bind tile to the tensor</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;init_virtual_tensor(tile_dst, sampler_dst);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * 4 - Define the compute block parameters CKW constants</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Only now we can declare the N0 and M0 as constant</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">auto</span> const_dst_n0_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_n0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">auto</span> const_dst_m0_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_m0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">auto</span> const_shift_back_dst_n0_i32 =</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_shift_back}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * 5 - Define the samplers for the input tensors</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// LHS SAMPLER</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// The assumption here is that M is multiple of M0. This limitation will be removed once</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// we have the support for OverlappingMin as address mode for the Y direction</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    ckw::TensorSampler sampler_lhs;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    sampler_lhs.format(ckw::TensorSamplerFormat::Dim0_Dim1_Dim2);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    sampler_lhs.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    sampler_lhs.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    sampler_lhs.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    sampler_lhs.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// RHS SAMPLER</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    ckw::TensorSampler sampler_rhs;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    sampler_rhs.format(ckw::TensorSamplerFormat::Dim0_Dim1_Dim2);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    sampler_rhs.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    sampler_rhs.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    sampler_rhs.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    sampler_rhs.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * 6 - Extra operations required before writing the main code (optional)</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Not required</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * 7 - Get the coordinates of the destination tile</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">auto</span> tile_gid_0 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_0&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">auto</span> tile_gid_1 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_1&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">auto</span> tile_gid_2 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_2&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    writer-&gt;op_get_global_id(tile_gid_0, 0);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    writer-&gt;op_get_global_id(tile_gid_1, 1);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    writer-&gt;op_get_global_id(tile_gid_2, 2);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> tile_idx_n = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_n&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// N index</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">auto</span> tile_idx_m = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_m&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// M index</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> tile_idx_b = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_b&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// BATCH index</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// Calculate coordinates</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">get_coordinate_from_gws_overlapping_min</a>(writer, tile_idx_n, tile_gid_0, const_dst_n0_i32,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                            const_shift_back_dst_n0_i32, const_0_i32);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">get_coordinate_from_gws</a>(writer, tile_idx_m, tile_gid_1, const_dst_m0_i32);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">get_coordinate_from_gws</a>(writer, tile_idx_b, tile_gid_2, const_pos_1_i32);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * 8 - Write the rest of the code</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">auto</span> tile_idx_k = writer-&gt;declare_tile(<span class="stringliteral">&quot;idx_k&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// K index</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    writer-&gt;op_assign(tile_idx_k, const_0_i32);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// clang-format off</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    writer-&gt;op_for_loop(tile_idx_k, ckw::BinaryOp::LessEqual, const_k_minus_k0_i32, tile_idx_k, ckw::AssignmentOp::Increment, const_k0_i32,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    [&amp;]()</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">auto</span> tile_lhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;lhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_m0, k0));</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">auto</span> tile_rhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;rhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_rhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_n0, k0));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        writer-&gt;op_assign(tile_lhs, const_0_fp);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        writer-&gt;op_assign(tile_rhs, const_0_fp);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        writer-&gt;op_load(tile_lhs, lhs-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>(), sampler_lhs, tile_idx_k, tile_idx_m, tile_idx_b, const_0_i32);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        writer-&gt;op_load(tile_rhs, rhs-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>(), sampler_rhs, tile_idx_k, tile_idx_n, tile_idx_b, const_0_i32);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        writer-&gt;op_binary(tile_dst, ckw::BinaryOp::MatMul_Nt_T, tile_lhs, tile_rhs);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    });</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Left-over accumulations for when K is not a multiple of k0</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span>(((k % k0) != 0))</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        writer-&gt;op_for_loop(tile_idx_k, ckw::BinaryOp::Less, const_k_i32, tile_idx_k, ckw::AssignmentOp::Increment, const_pos_1_i32, [&amp;]()</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keyword">auto</span> tile_lhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;lhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_m0, 1));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keyword">auto</span> tile_rhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;rhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_rhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_n0, 1));</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            writer-&gt;op_assign(tile_lhs, const_0_fp);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            writer-&gt;op_assign(tile_rhs, const_0_fp);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            writer-&gt;op_load(tile_lhs, lhs-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>(), sampler_lhs, tile_idx_k, tile_idx_m, tile_idx_b, const_0_i32);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            writer-&gt;op_load(tile_rhs, rhs-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>(), sampler_rhs, tile_idx_k, tile_idx_n, tile_idx_b, const_0_i32);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            writer-&gt;op_binary(tile_dst, ckw::BinaryOp::MatMul_Nt_T, tile_lhs, tile_rhs);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        });</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// clang-format on</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">  237</a></span>&#160;<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">GpuCkwMatMul::get_window</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a>() == 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, <span class="stringliteral">&quot;Destination tensor is not initialized&quot;</span>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> int32_t m       = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> int32_t n       = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    adj_lhs = _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a72df5776428a994c4749bf12e1b6dceb">adj_lhs</a>();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> int32_t m0 = adj_lhs ? <a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a74ed9a4a04599e6d9a0fccd7872b2b3e">m0</a>(), m) : std::min(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a74ed9a4a04599e6d9a0fccd7872b2b3e">m0</a>(), m);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> int32_t n0 = <a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a34b7379c67599a59e9191a1f4a683d28">n0</a>(), n);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Configure kernel window</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(n0, m0));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    win        = win.<a class="code" href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">collapse</a>(win, <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> win;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">  255</a></span>&#160;std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">GpuCkwMatMul::get_name</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">ComponentGroup</a> &amp;comp_group)<span class="keyword"> const</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(comp_group);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    std::string <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>(<span class="stringliteral">&quot;mat_mul_native&quot;</span>);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> int32_t m = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> int32_t n = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> int32_t k = _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a72df5776428a994c4749bf12e1b6dceb">adj_lhs</a>() ? _lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>() : _lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a72df5776428a994c4749bf12e1b6dceb">adj_lhs</a>() ? <span class="stringliteral">&quot;_t&quot;</span> : <span class="stringliteral">&quot;_nt&quot;</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += _attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a39f307e04480a663f207874d42b73347">adj_rhs</a>() ? <span class="stringliteral">&quot;_t&quot;</span> : <span class="stringliteral">&quot;_nt&quot;</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(m);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(n);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(k);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2));</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a74ed9a4a04599e6d9a0fccd7872b2b3e">m0</a>());</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a34b7379c67599a59e9191a1f4a683d28">n0</a>());</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <span class="stringliteral">&quot;_&quot;</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a3d45ef122c80fe22d9b8a6fa10c75218">k0</a>());</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="a_gpu_ckw_mat_mul_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_mat_mul_8h.xhtml">GpuCkwMatMul.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8173252b41cb85ccb7e222495fbe9d0f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws_overlapping_min</a></div><div class="ttdeci">void get_coordinate_from_gws_overlapping_min(GpuCkwScopedKernelWriter writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step, ckw::TileOperand &amp;shift_back, ckw::TileOperand &amp;const_0)</div><div class="ttdoc">Get boundary aware coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_ckw_helper_8cpp_source.xhtml#l00040">CkwHelper.cpp:40</a></div></div>
<div class="ttc" id="a_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="a_adjust_vec_size_8h_xhtml"><div class="ttname"><a href="_adjust_vec_size_8h.xhtml">AdjustVecSize.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a132a3a85495f9c5fe8ef684035cd94c8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_root_component</a></div><div class="ttdeci">ComponentPtr get_root_component() const</div><div class="ttdoc">Get the root (first) component of this group.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00304">GpuKernelComponentGroup.cpp:304</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul_xhtml_add26a8a597f8d778def9096a3c0d5137"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#add26a8a597f8d778def9096a3c0d5137">arm_compute::experimental::dynamic_fusion::GpuCkwMatMul::GpuCkwMatMul</a></div><div class="ttdeci">GpuCkwMatMul(ComponentId id, const ArgumentPack&lt; ITensorInfo &gt; &amp;tensors, const Attributes &amp;attributes, const Settings &amp;settings)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00048">GpuCkwMatMul.cpp:48</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument</a></div><div class="ttdoc">The argument of a dynamic fusion component which can be either user tensor or virtual tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8h_source.xhtml#l00040">GpuCkwComponentArgument.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul_xhtml_ae744fb5fb66aa1ce9db14ba93eab24e3"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">arm_compute::experimental::dynamic_fusion::GpuCkwMatMul::get_window</a></div><div class="ttdeci">Window get_window() const override</div><div class="ttdoc">Generate the execution window for the component.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul.cpp:237</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml">arm_compute::experimental::dynamic_fusion::MatMulAttributes</a></div><div class="ttdoc">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_mat_mul_attributes_8h_source.xhtml#l00039">MatMulAttributes.h:39</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">arm_compute::experimental::dynamic_fusion::ArgumentPack</a></div><div class="ttdoc">This is a generic class that packs the arguments of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00046">ArgumentPack.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a2b1fb10e2eeb3bcea23a8bd60296ca7c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::id</a></div><div class="ttdeci">ComponentId id() const</div><div class="ttdoc">Get component id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00127">IGpuCkwComponentDriver.h:127</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table_xhtml_a88cd92e1013c480a18a3a8cc6d7ea385"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#a88cd92e1013c480a18a3a8cc6d7ea385">arm_compute::experimental::dynamic_fusion::GpuCkwVariableTable::declare_variable</a></div><div class="ttdeci">GpuCkwComponentArgument * declare_variable(const GpuKernelComponentGroup &amp;comp_group, GpuCkwScopedKernelWriter &amp;writer, const ITensorInfo *tensor, const std::string &amp;alias=&quot;unnamed&quot;)</div><div class="ttdoc">Declare a kernel component variable(argument) for the corresponding tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_variable_table_8cpp_source.xhtml#l00039">GpuCkwVariableTable.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml">arm_compute::experimental::dynamic_fusion::GpuMatMulSettings</a></div><div class="ttdoc">Operator backend specific settings.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_mat_mul_8h_source.xhtml#l00043">GpuMatMul.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings_xhtml_a34b7379c67599a59e9191a1f4a683d28"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a34b7379c67599a59e9191a1f4a683d28">arm_compute::experimental::dynamic_fusion::GpuMatMulSettings::n0</a></div><div class="ttdeci">GpuMatMulSettings &amp; n0(int n0)</div><div class="ttdoc">Set N0: number of columns processed by each work-item.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes_xhtml_a39f307e04480a663f207874d42b73347"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a39f307e04480a663f207874d42b73347">arm_compute::experimental::dynamic_fusion::MatMulAttributes::adj_rhs</a></div><div class="ttdeci">bool adj_rhs() const</div><div class="ttdef"><b>Definition:</b> <a href="_mat_mul_attributes_8cpp_source.xhtml#l00046">MatMulAttributes.cpp:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwVariableTable</a></div><div class="ttdoc">A table of all the variables used in the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_variable_table_8h_source.xhtml#l00048">GpuCkwVariableTable.h:48</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component_xhtml_a7b0b398a61f9445132382fd9c065435b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a7b0b398a61f9445132382fd9c065435b">arm_compute::experimental::dynamic_fusion::IGpuKernelComponent::ckw_component_driver</a></div><div class="ttdeci">virtual const IGpuCkwComponentDriver * ckw_component_driver() const</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00107">IGpuKernelComponent.h:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdeci">@ ACL_DST_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_af6303f954929d2bdac13a4712ecf9711"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">arm_compute::Window::collapse</a></div><div class="ttdeci">Window collapse(const Window &amp;full_window, size_t first, size_t last=Coordinates::num_max_dimensions) const</div><div class="ttdoc">Collapse the dimensions between first and last.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00125">Window.inl:125</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a0fdcb923dfd4c74858cc2bc326321efb"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const</div><div class="ttdoc">Collapses all dimensions to a single linear total size.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00175">TensorShape.h:175</a></div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul_xhtml_ac794f053c37af9bdaf61039dbff80cac"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#ac794f053c37af9bdaf61039dbff80cac">arm_compute::experimental::dynamic_fusion::GpuCkwMatMul::write_component_code</a></div><div class="ttdeci">virtual void write_component_code(const ComponentGroup &amp;comp_group, GpuCkwVariableTable &amp;vtable, GpuCkwScopedKernelWriter writer) const override</div><div class="ttdoc">Generate kernel component code.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul.cpp:60</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_af3686c3e3c5e56e66d4425ca22380a91"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">arm_compute::experimental::dynamic_fusion::to_ckw</a></div><div class="ttdeci">ckw::DataType to_ckw(DataType dt)</div><div class="ttdoc">Convert the Compute Library data type to Compute Kernel Writer data type.</div><div class="ttdef"><b>Definition:</b> <a href="_common_8cpp_source.xhtml#l00032">Common.cpp:32</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings_xhtml_a3d45ef122c80fe22d9b8a6fa10c75218"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a3d45ef122c80fe22d9b8a6fa10c75218">arm_compute::experimental::dynamic_fusion::GpuMatMulSettings::k0</a></div><div class="ttdeci">GpuMatMulSettings &amp; k0(int k0)</div><div class="ttdoc">Set K0: number of inner accumulations.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver</a></div><div class="ttdoc">An interface used by GpuCkwDriver to write source code for a kernel component.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00066">IGpuCkwComponentDriver.h:66</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a9a2bbeb7b1b6544f6e17b09491385bce"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws</a></div><div class="ttdeci">void get_coordinate_from_gws(GpuCkwScopedKernelWriter writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step)</div><div class="ttdoc">Get coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_ckw_helper_8cpp_source.xhtml#l00032">CkwHelper.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afff13da4ff0bb0cd14e24f19743c8225"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">arm_compute::experimental::dynamic_fusion::ComponentId</a></div><div class="ttdeci">int32_t ComponentId</div><div class="ttdoc">Uniquely identifies a kernel component within a workload.</div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">Types.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a66df3fbb8781a4dfa011885356e1495f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a66df3fbb8781a4dfa011885356e1495f">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::get_window</a></div><div class="ttdeci">virtual Window get_window() const</div><div class="ttdoc">Generate the execution window for the component.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00101">IGpuCkwComponentDriver.h:101</a></div></div>
<div class="ttc" id="a_ckw_helper_8h_xhtml"><div class="ttname"><a href="_ckw_helper_8h.xhtml">CkwHelper.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul_xhtml_a57fa0fc38a7a23597a14423a4c6d5dc8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">arm_compute::experimental::dynamic_fusion::GpuCkwMatMul::get_name</a></div><div class="ttdeci">std::string get_name(const ComponentGroup &amp;comp_group) const override</div><div class="ttdoc">Generate the name of the component.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00255">GpuCkwMatMul.cpp:255</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings_xhtml_a74ed9a4a04599e6d9a0fccd7872b2b3e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#a74ed9a4a04599e6d9a0fccd7872b2b3e">arm_compute::experimental::dynamic_fusion::GpuMatMulSettings::m0</a></div><div class="ttdeci">GpuMatMulSettings &amp; m0(int m0)</div><div class="ttdoc">Set M0: number of rows processed by each work-item.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml_a88fbeae14499bb80589bf146b775c0cb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument::tensor</a></div><div class="ttdeci">ckw::TensorOperand &amp; tensor()</div><div class="ttdoc">Get the tensor operand.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00056">GpuCkwComponentArgument.cpp:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes_xhtml_a72df5776428a994c4749bf12e1b6dceb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#a72df5776428a994c4749bf12e1b6dceb">arm_compute::experimental::dynamic_fusion::MatMulAttributes::adj_lhs</a></div><div class="ttdeci">bool adj_lhs() const</div><div class="ttdef"><b>Definition:</b> <a href="_mat_mul_attributes_8cpp_source.xhtml#l00042">MatMulAttributes.cpp:42</a></div></div>
<div class="ttc" id="a_gpu_ckw_component_argument_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_component_argument_8h.xhtml">GpuCkwComponentArgument.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7be62dcb9603165af78bca6f2ca8ec15"><div class="ttname"><a href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">arm_compute::adjust_vec_size</a></div><div class="ttdeci">unsigned int adjust_vec_size(unsigned int vec_size, size_t dim0)</div><div class="ttdoc">Returns the adjusted vector size in case it is less than the input's first dimension,...</div><div class="ttdef"><b>Definition:</b> <a href="_adjust_vec_size_8h_source.xhtml#l00038">AdjustVecSize.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="adynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h_xhtml"><div class="ttname"><a href="dynamic__fusion_2sketch_2gpu_2ckw__driver_2components_2utils_2type__converter_2_common_8h.xhtml">Common.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a6c87c6e19567bc42bc52d166728c4461"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::tensors</a></div><div class="ttdeci">ArgumentPack&lt; ITensorInfo &gt; tensors() const</div><div class="ttdoc">Get tensor arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00096">IGpuCkwComponentDriver.h:96</a></div></div>
<div class="ttc" id="a_gpu_ckw_variable_table_8h_xhtml"><div class="ttname"><a href="_gpu_ckw_variable_table_8h.xhtml">GpuCkwVariableTable.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup</a></div><div class="ttdoc">A group of gpu kernel components to be fused together PRECONDITIONS:</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00061">GpuKernelComponentGroup.h:61</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00091">Dimensions.h:91</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="a_cl_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">ClIm2ColKernel.cpp:58</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">arm_compute::experimental::dynamic_fusion::GpuCkwScopedKernelWriter</a></div><div class="ttdoc">Helper to automatically manage kernel writer ID space.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_scoped_kernel_writer_8h_source.xhtml#l00039">GpuCkwScopedKernelWriter.h:39</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_df94d166e0e6f49d063cb29fea25a88b.xhtml">gpu</a></li><li class="navelem"><a class="el" href="dir_41286eb82ab9bcc453374927cfc10252.xhtml">ckw_driver</a></li><li class="navelem"><a class="el" href="dir_510767539347664ee40808f8989f21cf.xhtml">components</a></li><li class="navelem"><a class="el" href="_gpu_ckw_mat_mul_8cpp.xhtml">GpuCkwMatMul.cpp</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:14:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
