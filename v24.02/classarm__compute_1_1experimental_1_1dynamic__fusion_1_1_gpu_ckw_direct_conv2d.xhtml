<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuCkwDirectConv2d Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GpuCkwDirectConv2d Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml">GpuCkwDirectConv2d.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GpuCkwDirectConv2d:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d__coll__graph.svg" width="206" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad968d7495213c20156e17fbfdf5531ac"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ad968d7495213c20156e17fbfdf5531ac">Attributes</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml#a16e2118618778baf41d73ac332567db4">ClComponentDirectConv2d::Attributes</a></td></tr>
<tr class="separator:ad968d7495213c20156e17fbfdf5531ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac767fa42a09ae14cd2e2e37e8f652e1b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac767fa42a09ae14cd2e2e37e8f652e1b">Settings</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml#a179c3070e74dc09cbb8bf4ab5c28448d">ClComponentDirectConv2d::Settings</a></td></tr>
<tr class="separator:ac767fa42a09ae14cd2e2e37e8f652e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">IGpuCkwComponentDriver</a></td></tr>
<tr class="memitem:a6cda2a0c50524467fbfba048298303ed inherit pub_types_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></td></tr>
<tr class="separator:a6cda2a0c50524467fbfba048298303ed inherit pub_types_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5a1d3fedd4595e0c13bc2fc56f06fd09"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a5a1d3fedd4595e0c13bc2fc56f06fd09">GpuCkwDirectConv2d</a> (<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a>, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ad968d7495213c20156e17fbfdf5531ac">Attributes</a> &amp;attributes, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac767fa42a09ae14cd2e2e37e8f652e1b">Settings</a> &amp;settings)</td></tr>
<tr class="memdesc:a5a1d3fedd4595e0c13bc2fc56f06fd09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a5a1d3fedd4595e0c13bc2fc56f06fd09">More...</a><br /></td></tr>
<tr class="separator:a5a1d3fedd4595e0c13bc2fc56f06fd09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f352fa55b05b9d25a0a5f49b8ad94f5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a0f352fa55b05b9d25a0a5f49b8ad94f5">ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a>)</td></tr>
<tr class="separator:a0f352fa55b05b9d25a0a5f49b8ad94f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41f5b48d6af9d60f9855410c962737a1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a41f5b48d6af9d60f9855410c962737a1">~GpuCkwDirectConv2d</a> () override=default</td></tr>
<tr class="memdesc:a41f5b48d6af9d60f9855410c962737a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a41f5b48d6af9d60f9855410c962737a1">More...</a><br /></td></tr>
<tr class="separator:a41f5b48d6af9d60f9855410c962737a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac794f053c37af9bdaf61039dbff80cac"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac794f053c37af9bdaf61039dbff80cac">write_component_code</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> &amp;comp_group, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">GpuCkwVariableTable</a> &amp;vtable, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer) const override</td></tr>
<tr class="memdesc:ac794f053c37af9bdaf61039dbff80cac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate kernel component code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac794f053c37af9bdaf61039dbff80cac">More...</a><br /></td></tr>
<tr class="separator:ac794f053c37af9bdaf61039dbff80cac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae744fb5fb66aa1ce9db14ba93eab24e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">get_window</a> () const override</td></tr>
<tr class="memdesc:ae744fb5fb66aa1ce9db14ba93eab24e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate the execution window for the component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ae744fb5fb66aa1ce9db14ba93eab24e3">More...</a><br /></td></tr>
<tr class="separator:ae744fb5fb66aa1ce9db14ba93eab24e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57fa0fc38a7a23597a14423a4c6d5dc8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">get_name</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> &amp;comp_group) const override</td></tr>
<tr class="memdesc:a57fa0fc38a7a23597a14423a4c6d5dc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate the name of the component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#a57fa0fc38a7a23597a14423a4c6d5dc8">More...</a><br /></td></tr>
<tr class="separator:a57fa0fc38a7a23597a14423a4c6d5dc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">IGpuCkwComponentDriver</a></td></tr>
<tr class="memitem:af67e2958735983cf2b86a53c380a231d inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#af67e2958735983cf2b86a53c380a231d">IGpuCkwComponentDriver</a> (<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a>, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>)</td></tr>
<tr class="memdesc:af67e2958735983cf2b86a53c380a231d inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#af67e2958735983cf2b86a53c380a231d">More...</a><br /></td></tr>
<tr class="separator:af67e2958735983cf2b86a53c380a231d inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d2bce409c75c96710589810737bb88 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#ad9d2bce409c75c96710589810737bb88">~IGpuCkwComponentDriver</a> ()</td></tr>
<tr class="memdesc:ad9d2bce409c75c96710589810737bb88 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#ad9d2bce409c75c96710589810737bb88">More...</a><br /></td></tr>
<tr class="separator:ad9d2bce409c75c96710589810737bb88 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c87c6e19567bc42bc52d166728c4461 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a> () const</td></tr>
<tr class="memdesc:a6c87c6e19567bc42bc52d166728c4461 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor arguments.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">More...</a><br /></td></tr>
<tr class="separator:a6c87c6e19567bc42bc52d166728c4461 inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c754e22417f5d6afc5eafe85f84484b inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a5c754e22417f5d6afc5eafe85f84484b">get_tuner_id</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> &amp;comp_group) const</td></tr>
<tr class="memdesc:a5c754e22417f5d6afc5eafe85f84484b inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate the tuner id of the component This id should capture all the parameters that distinguish one kernel's lws tuning from another.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a5c754e22417f5d6afc5eafe85f84484b">More...</a><br /></td></tr>
<tr class="separator:a5c754e22417f5d6afc5eafe85f84484b inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b1fb10e2eeb3bcea23a8bd60296ca7c inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a> () const</td></tr>
<tr class="memdesc:a2b1fb10e2eeb3bcea23a8bd60296ca7c inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get component id.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">More...</a><br /></td></tr>
<tr class="separator:a2b1fb10e2eeb3bcea23a8bd60296ca7c inherit pub_methods_classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml">GpuCkwDirectConv2d.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ad968d7495213c20156e17fbfdf5531ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad968d7495213c20156e17fbfdf5531ac">&#9670;&nbsp;</a></span>Attributes</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ad968d7495213c20156e17fbfdf5531ac">Attributes</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml#a16e2118618778baf41d73ac332567db4">ClComponentDirectConv2d::Attributes</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml">GpuCkwDirectConv2d.h</a>.</p>

</div>
</div>
<a id="ac767fa42a09ae14cd2e2e37e8f652e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac767fa42a09ae14cd2e2e37e8f652e1b">&#9670;&nbsp;</a></span>Settings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac767fa42a09ae14cd2e2e37e8f652e1b">Settings</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml#a179c3070e74dc09cbb8bf4ab5c28448d">ClComponentDirectConv2d::Settings</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml">GpuCkwDirectConv2d.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5a1d3fedd4595e0c13bc2fc56f06fd09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a1d3fedd4595e0c13bc2fc56f06fd09">&#9670;&nbsp;</a></span>GpuCkwDirectConv2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ad968d7495213c20156e17fbfdf5531ac">Attributes</a> &amp;&#160;</td>
          <td class="paramname"><em>attributes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml#ac767fa42a09ae14cd2e2e37e8f652e1b">Settings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<p>For supported configurations please refer to <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml#ab0614c4d6aa01bfe9898432d426a9adc">ClComponentDirectConv2d::validate()</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Component id </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> arguments to the component </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">attributes</td><td>Component attributes. Attributes are a set of parameters that define what a component does </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">settings</td><td>Component settings. Settings are a set of parameters that influence the implementation of a component </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#af67e2958735983cf2b86a53c380a231d">IGpuCkwComponentDriver</a>{<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">id</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>}, _src{}, _wei{}, _bia{}, _dst{}, _attributes{attributes}, _settings{settings}</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    _src = this-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    _wei = this-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    _bia = this-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">TensorType::ACL_SRC_2</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    _dst = this-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">TensorType::ACL_DST_0</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(_src, _wei, _dst); <span class="comment">// Bias can be null</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00127">IGpuCkwComponentDriver::id()</a>, and <a class="el" href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00096">IGpuCkwComponentDriver::tensors()</a>.</p>

</div>
</div>
<a id="a41f5b48d6af9d60f9855410c962737a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41f5b48d6af9d60f9855410c962737a1">&#9670;&nbsp;</a></span>~GpuCkwDirectConv2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0f352fa55b05b9d25a0a5f49b8ad94f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f352fa55b05b9d25a0a5f49b8ad94f5">&#9670;&nbsp;</a></span>ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a>&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a57fa0fc38a7a23597a14423a4c6d5dc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57fa0fc38a7a23597a14423a4c6d5dc8">&#9670;&nbsp;</a></span>get_name()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_name </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>comp_group</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generate the name of the component. </p>
<p>This will be concatenated with other components' names to form the name of the kernel </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#ad32af139db3c06d1a04898bd1c0bd152">IGpuCkwComponentDriver</a>.</p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00418">418</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(comp_group);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;direct_conv2d&quot;</span>;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="ae744fb5fb66aa1ce9db14ba93eab24e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae744fb5fb66aa1ce9db14ba93eab24e3">&#9670;&nbsp;</a></span>get_window()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> get_window </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generate the execution window for the component. </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a66df3fbb8781a4dfa011885356e1495f">IGpuCkwComponentDriver</a>.</p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">399</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a>() == 0U, <span class="stringliteral">&quot;Destination tensor is not initialized&quot;</span>);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a> = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> desc      = _settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#aee2c74e40edb43d60c17854d2dbeb889">direct_conv_descriptor</a>();</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">const</span> uint32_t dst_n0 = <a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(desc.n0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[0]);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">const</span> uint32_t dst_m0 = <a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(desc.m0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[1] * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[2]);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    Window win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, Steps(dst_n0, dst_m0));</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim_y_collapsed = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[1] * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>[2], dst_m0);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, dim_y_collapsed, dst_m0));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a99e09337e5b6ef762cd1f2d0bd10c346">total_size_upper</a>(3), 1));</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> win;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_adjust_vec_size_8h_source.xhtml#l00038">arm_compute::adjust_vec_size()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">arm_compute::ceil_to_multiple()</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00061">ClComponentDirectConv2dSettings::direct_conv_descriptor()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">arm_compute::test::validation::dst_shape</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00175">TensorShape::total_size()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00185">TensorShape::total_size_upper()</a>, and <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>.</p>

</div>
</div>
<a id="ac794f053c37af9bdaf61039dbff80cac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac794f053c37af9bdaf61039dbff80cac">&#9670;&nbsp;</a></span>write_component_code()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void write_component_code </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6cda2a0c50524467fbfba048298303ed">ComponentGroup</a> &amp;&#160;</td>
          <td class="paramname"><em>comp_group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">GpuCkwVariableTable</a> &amp;&#160;</td>
          <td class="paramname"><em>vtable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a>&#160;</td>
          <td class="paramname"><em>writer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generate kernel component code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">comp_group</td><td>Component group of which the component is a part of </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">vtable</td><td>Table of variables declared by each component </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">writer</td><td>CKW writer that writes code scoped to this kernel component. <pre class="fragment">                       @note @p writer can only be passed via value since the new scope is created in the copy constructor
</pre> </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#aa0f315fcb0831da70e746870f0679c5f">IGpuCkwComponentDriver</a>.</p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> desc = _settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#aee2c74e40edb43d60c17854d2dbeb889">direct_conv_descriptor</a>();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(desc.export_input_to_cl_image || desc.export_output_to_cl_image,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                             <span class="stringliteral">&quot;Only the weights tensor can be exported to cl_image&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * 1 - Define tensors</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    GpuCkwComponentArgument *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = vtable.declare_variable(comp_group, writer, _src, <span class="stringliteral">&quot;src&quot;</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    GpuCkwComponentArgument *wei = vtable.declare_variable(comp_group, writer, _wei, <span class="stringliteral">&quot;wei&quot;</span>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    GpuCkwComponentArgument *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = vtable.declare_variable(comp_group, writer, _dst, <span class="stringliteral">&quot;dst&quot;</span>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    GpuCkwComponentArgument *bia = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> using_bias = _bia != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (using_bias)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        bia = vtable.declare_variable(comp_group, writer, _bia, <span class="stringliteral">&quot;bia&quot;</span>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     * 2 - Define CKW constants</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_dt        = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_height = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>));</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_width  = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_c         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_w         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_h         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_w         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stride_x      = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#acb4fc314422ba7c6bc7a761ba7c6111d">stride</a>().x());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stride_y      = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#acb4fc314422ba7c6bc7a761ba7c6111d">stride</a>().y());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pad_x         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a6177244142d86cabba1c4f7991d1e091">pad</a>().left);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pad_y         = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_attributes.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a6177244142d86cabba1c4f7991d1e091">pad</a>().top);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_size   = kernel_width * kernel_height;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> k0 =</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">adjust_vec_size</a>(_settings.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#aee2c74e40edb43d60c17854d2dbeb889">direct_conv_descriptor</a>().k0, _src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>)));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// CKW constants</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">auto</span> const_kernel_w_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{kernel_width}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> const_kernel_size_i32 =</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        writer-&gt;declare_constant_tile(ckw::ConstantData({{kernel_size}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">auto</span> const_src_c_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{src_c}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">auto</span> const_src_w_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{src_w}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> const_src_h_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{src_h}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">auto</span> const_dst_w_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_w}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">auto</span> const_stride_x_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{stride_x}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">auto</span> const_stride_y_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{stride_y}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">auto</span> const_pad_x_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{pad_x}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">auto</span> const_pad_y_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{pad_y}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">auto</span> const_k0_i32       = writer-&gt;declare_constant_tile(ckw::ConstantData({{k0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> const_0_i32        = writer-&gt;declare_constant_tile(ckw::ConstantData({{0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">auto</span> const_pos_1_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{1}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">auto</span> const_neg_1_i32    = writer-&gt;declare_constant_tile(ckw::ConstantData({{-1}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">auto</span> const_0_fp         = writer-&gt;declare_constant_tile(ckw::ConstantData({{0.0f}}, dst_dt));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">auto</span> const_src_c_i32_minus_k0_i32 =</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        writer-&gt;declare_constant_tile(ckw::ConstantData({{src_c - k0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * 3 - Define the compute block parameters and destination tile (if not root component)</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     *     Bind the tile to the tensor to share it among different components and</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     *     initialize the compute block parameters</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// The compute block parameters depend on the employed tensor format</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> root_window = comp_group.get_root_component()-&gt;ckw_component_driver()-&gt;get_window();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Destination compute block size</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> int32_t dst_n0 = root_window.x().step();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> int32_t dst_m0 = root_window.y().step();</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Destination compute block size left-over</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> int32_t dst_n0_partial = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) % dst_n0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> int32_t dst_m0_partial = (_dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) * _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2)) % dst_m0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Shift-back for the overlapping-min strategy</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> int32_t dst_shift_back = (dst_n0 - dst_n0_partial) % dst_n0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    ckw::TensorSampler sampler_dst;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    sampler_dst.format(ckw::TensorSamplerFormat::Dim0_Dim1xDim2_1);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (dst_n0_partial == 0)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        sampler_dst.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        sampler_dst.address_mode_x(ckw::TensorSamplerAddressModeX::OverlappingMin);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">if</span> (dst_m0_partial == 0)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        sampler_dst.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        sampler_dst.address_mode_y(ckw::TensorSamplerAddressModeY::ClampToBorderMaxOnly);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    sampler_dst.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    sampler_dst.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Declare destination tile</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">auto</span> tile_dst = writer-&gt;declare_tile(<span class="stringliteral">&quot;dst&quot;</span>, ckw::TileInfo(dst_dt, dst_m0, dst_n0));</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Initialize destination tile</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    writer-&gt;op_assign(tile_dst, const_0_fp);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// Bind tile to the tensor</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;init_virtual_tensor(tile_dst, sampler_dst);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * 4 - Define the compute block parameters CKW constants</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Only now we can declare the N0 and M0 as constant</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">auto</span> const_dst_n0_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_n0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> const_dst_m0_i32 = writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_m0}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">auto</span> const_shift_back_dst_n0_i32 =</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        writer-&gt;declare_constant_tile(ckw::ConstantData({{dst_shift_back}}, ckw::DataType::Int32));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * 5 - Define the samplers for the input tensors</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Exporting the weights tensor to an OpenCL image object is currently only supported when:</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">//   a) k0 is equal to 4</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// The current implementation expects to read a vector of 4 float values into the OpenCL image object.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">//   b) K is a multiple of 4</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// This is a limitation in the current interface due to the variable table being responsible for maintaining</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// information about the TensorStorageType rather than the TensorTileSampler. As a result, TensorStorageType cannot</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// be reassigned, and we cannot use a texture object for the weights tensor in cases where we expect to have an</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// extra loop to compute the left-over elements.</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1cl__dwc.xhtml#a1d568c46bb9cfce1b2e39dc84738d90c">use_cl_image_for_weights</a> = desc.export_weights_to_cl_image &amp;&amp; (k0 == 4) &amp;&amp; (src_c % 4 == 0);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// SOURCE SAMPLER</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// - We cannot have out-of-bounds reads in the X dimension (mapped to the IFMs) as we have an extra loop to</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">//   compute left-over elements</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// - We cannot have out-of-bounds reads when the kernel height is equal to 1. In all other cases, we need to ensure the</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">//   indirection buffer mi does not contain negative values representing out-of-bounds reads.</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">auto</span> address_mode_y_src =</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        kernel_height == 1 ? <a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a> : ckw::TensorSamplerAddressModeY::SkipLessThanZero;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    ckw::TensorSampler sampler_src;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    sampler_src.format(ckw::TensorSamplerFormat::Dim0_Dim1xDim2_1); <span class="comment">// 3rd dimension collapsed with 2nd dimension</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    sampler_src.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    sampler_src.address_mode_y(address_mode_y_src);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    sampler_src.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    sampler_src.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// WEIGHTS SAMPLER</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// We cannot have out-of-bounds accesses for the weights</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    ckw::TensorSampler sampler_wei;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    sampler_wei.format(ckw::TensorSamplerFormat::Dim0_Dim1xDim2_1); <span class="comment">// 3rd dimension collapsed with 2nd dimension</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    sampler_wei.address_mode_x(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeX::None</a>);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    sampler_wei.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    sampler_wei.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cl__dwc.xhtml#a1d568c46bb9cfce1b2e39dc84738d90c">use_cl_image_for_weights</a>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        sampler_wei.storage(ckw::TensorStorageType::Texture2dReadOnly);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        sampler_wei.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="comment">// BIAS SAMPLER</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    ckw::TensorSampler sampler_bia;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">if</span> (using_bias)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        sampler_bia.format(ckw::TensorSamplerFormat::Dim0_Dim1xDim2_1);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        sampler_bia.address_mode_x(sampler_dst.address_mode_x());</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        sampler_bia.address_mode_y(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeY::None</a>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        sampler_bia.address_mode_z(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">ckw::TensorSamplerAddressModeZ::None</a>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        sampler_bia.storage(ckw::TensorStorageType::BufferUint8Ptr);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * 6 - Extra operations required before writing the main code (optional)</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Not required</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">     * 7 - Get the coordinates of the destination tile</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">auto</span> tile_gid_0 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_0&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">auto</span> tile_gid_1 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_1&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">auto</span> tile_gid_2 = writer-&gt;declare_tile(<span class="stringliteral">&quot;gid_2&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    writer-&gt;op_get_global_id(tile_gid_0, 0);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    writer-&gt;op_get_global_id(tile_gid_1, 1);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    writer-&gt;op_get_global_id(tile_gid_2, 2);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">auto</span> tile_cout = writer-&gt;declare_tile(<span class="stringliteral">&quot;cout&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// OFM</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">auto</span> tile_mout = writer-&gt;declare_tile(<span class="stringliteral">&quot;mout&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// WIDTH x HEIGHT</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">auto</span> tile_bout = writer-&gt;declare_tile(<span class="stringliteral">&quot;bout&quot;</span>, ckw::TileInfo(ckw::DataType::Int32)); <span class="comment">// BATCH SIZE IDX</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Calculate coordinates</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">get_coordinate_from_gws_overlapping_min</a>(writer, tile_cout, tile_gid_0, const_dst_n0_i32,</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                            const_shift_back_dst_n0_i32, const_0_i32);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">get_coordinate_from_gws</a>(writer, tile_mout, tile_gid_1, const_dst_m0_i32);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">get_coordinate_from_gws</a>(writer, tile_bout, tile_gid_2, const_pos_1_i32);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">    /********************************************************************************</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     * 8 - Write the rest of the code</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     ********************************************************************************/</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// We create a 2d container of size (dst_m0, 1) to store the indices for iteration</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#adc7903553dd77d72eb2baf6297b0d2f2">TileContainer</a> it;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">for</span> (int32_t m = 0; m &lt; dst_m0; ++m)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        std::vector&lt;int32_t&gt; idx{m};</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        it.push_back({idx});</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;const_idxs = writer-&gt;declare_constant_tile(ckw::ConstantData(it, ckw::DataType::Int32));</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">auto</span> tile_xi = writer-&gt;declare_tile(<span class="stringliteral">&quot;xi&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">auto</span> tile_yi = writer-&gt;declare_tile(<span class="stringliteral">&quot;yi&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="comment">// Convert the linear index to coordinate</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// xi = ((mout + i) % dst_w) * stride_x - pad_x</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// yi = ((mout + i) / dst_w) * stride_y - pad_y</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    writer-&gt;op_binary(tile_xi, ckw::BinaryOp::Add, tile_mout, const_idxs);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    writer-&gt;op_binary(tile_yi, ckw::BinaryOp::Add, tile_mout, const_idxs);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    writer-&gt;op_binary(tile_xi, ckw::BinaryOp::Mod, tile_xi, const_dst_w_i32);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    writer-&gt;op_binary(tile_yi, ckw::BinaryOp::Div, tile_yi, const_dst_w_i32);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    writer-&gt;op_binary(tile_xi, ckw::BinaryOp::Mul, tile_xi, const_stride_x_i32);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    writer-&gt;op_binary(tile_yi, ckw::BinaryOp::Mul, tile_yi, const_stride_y_i32);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    writer-&gt;op_binary(tile_xi, ckw::BinaryOp::Sub, tile_xi, const_pad_x_i32);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    writer-&gt;op_binary(tile_yi, ckw::BinaryOp::Sub, tile_yi, const_pad_y_i32);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">auto</span> tile_y_b = writer-&gt;declare_tile(<span class="stringliteral">&quot;y_b&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    writer-&gt;op_binary(tile_y_b, ckw::BinaryOp::Mul, tile_cout, const_kernel_size_i32);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">auto</span> tile_i = writer-&gt;declare_tile(<span class="stringliteral">&quot;i&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    writer-&gt;op_assign(tile_i, const_0_i32);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// clang-format off</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    writer-&gt;op_for_loop(tile_i, ckw::BinaryOp::Less, const_kernel_size_i32, tile_i, ckw::AssignmentOp::Increment, const_pos_1_i32, [&amp;]()</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keyword">auto</span> tile_x_k = writer-&gt;declare_tile(<span class="stringliteral">&quot;x_k&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keyword">auto</span> tile_y_k = writer-&gt;declare_tile(<span class="stringliteral">&quot;y_k&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        writer-&gt;op_binary(tile_x_k, ckw::BinaryOp::Mod, tile_i, const_kernel_w_i32);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        writer-&gt;op_binary(tile_y_k, ckw::BinaryOp::Div, tile_i, const_kernel_w_i32);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keyword">auto</span> tile_ck = writer-&gt;declare_tile(<span class="stringliteral">&quot;ck&quot;</span>, ckw::TileInfo(ckw::DataType::Int32));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        writer-&gt;op_assign(tile_ck, const_0_i32);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment">// Construct an indirection buffer containing the precalculated addresses of elements in the source tensor</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="comment">// x_s = xi + x_k</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="comment">// y_s = yi + y_k</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="comment">// mi = x_s + y_s * width;</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="comment">// mi = select(-1, mi, x_s &gt;= 0);</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="comment">// mi = select(-1, mi, x_s &lt; width);</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="comment">// mi = select(-1, mi, y_s &gt;= 0);</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="comment">// mi = select(-1, mi, y_s &lt; height);</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keyword">auto</span> tile_xs = writer-&gt;declare_tile(<span class="stringliteral">&quot;xs&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">auto</span> tile_ys = writer-&gt;declare_tile(<span class="stringliteral">&quot;ys&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keyword">auto</span> tile_mi = writer-&gt;declare_tile(<span class="stringliteral">&quot;mi&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">auto</span> tile_xs_gte_0 = writer-&gt;declare_tile(<span class="stringliteral">&quot;xs_gte_0&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keyword">auto</span> tile_ys_gte_0 = writer-&gt;declare_tile(<span class="stringliteral">&quot;ys_gte_0&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keyword">auto</span> tile_xs_lt_w  = writer-&gt;declare_tile(<span class="stringliteral">&quot;xs_lt_w&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keyword">auto</span> tile_ys_lt_h  = writer-&gt;declare_tile(<span class="stringliteral">&quot;ys_lt_h&quot;</span>, ckw::TileInfo(ckw::DataType::Int32, dst_m0, 1));</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        writer-&gt;op_binary(tile_xs, ckw::BinaryOp::Add, tile_xi, tile_x_k);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        writer-&gt;op_binary(tile_ys, ckw::BinaryOp::Add, tile_yi, tile_y_k);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        writer-&gt;op_binary(tile_mi, ckw::BinaryOp::Mul, tile_ys, const_src_w_i32);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        writer-&gt;op_binary(tile_mi, ckw::BinaryOp::Add, tile_mi, tile_xs);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        writer-&gt;op_binary(tile_xs_gte_0, ckw::BinaryOp::GreaterEqual, tile_xs, const_0_i32);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        writer-&gt;op_binary(tile_ys_gte_0, ckw::BinaryOp::GreaterEqual, tile_ys, const_0_i32);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        writer-&gt;op_binary(tile_xs_lt_w, ckw::BinaryOp::Less, tile_xs, const_src_w_i32);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        writer-&gt;op_binary(tile_ys_lt_h, ckw::BinaryOp::Less, tile_ys, const_src_h_i32);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        writer-&gt;op_ternary(tile_mi, ckw::TernaryOp::Select, const_neg_1_i32, tile_mi, tile_xs_gte_0);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        writer-&gt;op_ternary(tile_mi, ckw::TernaryOp::Select, const_neg_1_i32, tile_mi, tile_ys_gte_0);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        writer-&gt;op_ternary(tile_mi, ckw::TernaryOp::Select, const_neg_1_i32, tile_mi, tile_xs_lt_w);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        writer-&gt;op_ternary(tile_mi, ckw::TernaryOp::Select, const_neg_1_i32, tile_mi, tile_ys_lt_h);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        writer-&gt;op_for_loop(tile_ck, ckw::BinaryOp::LessEqual, const_src_c_i32_minus_k0_i32, tile_ck, ckw::AssignmentOp::Increment, const_k0_i32, [&amp;]()</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keyword">auto</span> tile_lhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;lhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_m0, k0));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keyword">auto</span> tile_rhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;rhs&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_n0, k0));</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            writer-&gt;op_assign(tile_lhs, const_0_fp);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            writer-&gt;op_assign(tile_rhs, const_0_fp);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            writer-&gt;op_load_indirect(tile_lhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor(), sampler_src, tile_ck, tile_mi, const_0_i32, tile_bout);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            writer-&gt;op_load_dilated(tile_rhs, wei-&gt;tensor(), sampler_wei, tile_ck, tile_y_b, const_0_i32, const_0_i32, const_pos_1_i32, const_kernel_size_i32);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            writer-&gt;op_binary(tile_dst, ckw::BinaryOp::MatMul_Nt_T, tile_lhs, tile_rhs);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        });</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// Left-over accumulations for when K is not a multiple of k0</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span>(((src_c % k0) != 0))</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            writer-&gt;op_for_loop(tile_ck, ckw::BinaryOp::Less, const_src_c_i32, tile_ck, ckw::AssignmentOp::Increment, const_pos_1_i32, [&amp;]()</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keyword">auto</span> tile_lhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;lhs_leftover&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_m0, 1));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="keyword">auto</span> tile_rhs = writer-&gt;declare_tile(<span class="stringliteral">&quot;rhs_leftover&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_wei-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), dst_n0, 1));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                writer-&gt;op_assign(tile_lhs, const_0_fp);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                writer-&gt;op_assign(tile_rhs, const_0_fp);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                writer-&gt;op_load_indirect(tile_lhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor(), sampler_src, tile_ck, tile_mi, const_0_i32, tile_bout);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                writer-&gt;op_load_dilated(tile_rhs, wei-&gt;tensor(), sampler_wei, tile_ck, tile_y_b, const_0_i32, const_0_i32, const_pos_1_i32, const_kernel_size_i32);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                writer-&gt;op_binary(tile_dst, ckw::BinaryOp::MatMul_Nt_T, tile_lhs, tile_rhs);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            });</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        writer-&gt;op_binary(tile_y_b, ckw::BinaryOp::Add, tile_y_b, const_pos_1_i32);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    });</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="comment">// clang-format on</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// NOTE: The bias addition will be removed from this kernel as the interface is standardized. The intended way of</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// performing bias addition is to fuse this convolution kernel with a following elementwise addition kernel.</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">if</span> (using_bias)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">if</span> (!bia-&gt;has_tile())</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keyword">auto</span> tile_bia = writer-&gt;declare_tile(<span class="stringliteral">&quot;bia&quot;</span>, ckw::TileInfo(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a>(_src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()), 1, dst_n0));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            writer-&gt;op_load(tile_bia, bia-&gt;tensor(), sampler_bia, tile_cout, const_0_i32, const_0_i32, const_0_i32);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            bia-&gt;init_virtual_tensor(tile_bia, sampler_bia);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keyword">auto</span> &amp;tile_bia = bia-&gt;tile();</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        writer-&gt;op_binary(tile_dst, ckw::BinaryOp::Add, tile_dst, tile_bia);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;has_tile() == <span class="keyword">false</span>, <span class="stringliteral">&quot;You must bind a tile before appending another component&quot;</span>);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_adjust_vec_size_8h_source.xhtml#l00038">arm_compute::adjust_vec_size()</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::channel_idx</a>, <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00107">IGpuKernelComponent::ckw_component_driver()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_gpu_ckw_variable_table_8cpp_source.xhtml#l00039">GpuCkwVariableTable::declare_variable()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00061">ClComponentDirectConv2dSettings::direct_conv_descriptor()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00032">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws()</a>, <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00040">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws_overlapping_min()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00304">GpuKernelComponentGroup::get_root_component()</a>, <a class="el" href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00101">IGpuCkwComponentDriver::get_window()</a>, <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00070">GpuCkwComponentArgument::has_tile()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::height_idx</a>, <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00040">GpuCkwComponentArgument::init_virtual_tensor()</a>, <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor::None</a>, <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00033">Conv2dAttributes::pad()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00042">Conv2dAttributes::stride()</a>, <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00056">GpuCkwComponentArgument::tensor()</a>, <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00075">GpuCkwComponentArgument::tile()</a>, <a class="el" href="_common_8cpp_source.xhtml#l00032">arm_compute::experimental::dynamic_fusion::to_ckw()</a>, <a class="el" href="_cl_d_w_c_native_heuristics_helpers_8cpp_source.xhtml#l00032">arm_compute::cl_dwc::use_cl_image_for_weights()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">arm_compute::cpu::width_idx</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic_fusion/sketch/gpu/ckw_driver/components/<a class="el" href="_gpu_ckw_direct_conv2d_8h_source.xhtml">GpuCkwDirectConv2d.h</a></li>
<li>src/dynamic_fusion/sketch/gpu/ckw_driver/components/<a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8173252b41cb85ccb7e222495fbe9d0f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws_overlapping_min</a></div><div class="ttdeci">void get_coordinate_from_gws_overlapping_min(GpuCkwScopedKernelWriter writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step, ckw::TileOperand &amp;shift_back, ckw::TileOperand &amp;const_0)</div><div class="ttdoc">Get boundary aware coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_ckw_helper_8cpp_source.xhtml#l00040">CkwHelper.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml_a6177244142d86cabba1c4f7991d1e091"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a6177244142d86cabba1c4f7991d1e091">arm_compute::experimental::dynamic_fusion::Conv2dAttributes::pad</a></div><div class="ttdeci">Conv2dAttributes &amp; pad(const Padding2D &amp;pad)</div><div class="ttdoc">Set padding.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8cpp_source.xhtml#l00033">Conv2dAttributes.cpp:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdeci">@ CHANNEL</div><div class="ttdoc">channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cl__dwc_xhtml_a1d568c46bb9cfce1b2e39dc84738d90c"><div class="ttname"><a href="namespacearm__compute_1_1cl__dwc.xhtml#a1d568c46bb9cfce1b2e39dc84738d90c">arm_compute::cl_dwc::use_cl_image_for_weights</a></div><div class="ttdeci">bool use_cl_image_for_weights(const ITensorInfo *weights, unsigned int depth_multiplier)</div><div class="ttdoc">Utility function to know whether we can use the cl image storage for the weights of depthwise convolu...</div><div class="ttdef"><b>Definition:</b> <a href="_cl_d_w_c_native_heuristics_helpers_8cpp_source.xhtml#l00032">ClDWCNativeHeuristicsHelpers.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a2b1fb10e2eeb3bcea23a8bd60296ca7c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a2b1fb10e2eeb3bcea23a8bd60296ca7c">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::id</a></div><div class="ttdeci">ComponentId id() const</div><div class="ttdoc">Get component id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00127">IGpuCkwComponentDriver.h:127</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdeci">@ ACL_SRC_2</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a99e09337e5b6ef762cd1f2d0bd10c346"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a99e09337e5b6ef762cd1f2d0bd10c346">arm_compute::TensorShape::total_size_upper</a></div><div class="ttdeci">size_t total_size_upper(size_t dimension) const</div><div class="ttdoc">Collapses given dimension and above.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00185">TensorShape.h:185</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml_acb4fc314422ba7c6bc7a761ba7c6111d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#acb4fc314422ba7c6bc7a761ba7c6111d">arm_compute::experimental::dynamic_fusion::Conv2dAttributes::stride</a></div><div class="ttdeci">Conv2dAttributes &amp; stride(const Size2D &amp;stride)</div><div class="ttdoc">Set stride.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8cpp_source.xhtml#l00042">Conv2dAttributes.cpp:42</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_adc7903553dd77d72eb2baf6297b0d2f2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#adc7903553dd77d72eb2baf6297b0d2f2">arm_compute::experimental::dynamic_fusion::TileContainer</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; int32_t &gt; &gt; TileContainer</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00049">GpuCkwDirectConv2d.cpp:49</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdeci">@ ACL_DST_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdeci">@ HEIGHT</div><div class="ttdoc">height</div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a0fdcb923dfd4c74858cc2bc326321efb"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const</div><div class="ttdoc">Collapses all dimensions to a single linear total size.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00175">TensorShape.h:175</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_af67e2958735983cf2b86a53c380a231d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#af67e2958735983cf2b86a53c380a231d">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::IGpuCkwComponentDriver</a></div><div class="ttdeci">IGpuCkwComponentDriver(ComponentId id, const ArgumentPack&lt; ITensorInfo &gt; &amp;tensors)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00077">IGpuCkwComponentDriver.h:77</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_af3686c3e3c5e56e66d4425ca22380a91"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">arm_compute::experimental::dynamic_fusion::to_ckw</a></div><div class="ttdeci">ckw::DataType to_ckw(DataType dt)</div><div class="ttdoc">Convert the Compute Library data type to Compute Kernel Writer data type.</div><div class="ttdef"><b>Definition:</b> <a href="_common_8cpp_source.xhtml#l00032">Common.cpp:32</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a9a2bbeb7b1b6544f6e17b09491385bce"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws</a></div><div class="ttdeci">void get_coordinate_from_gws(GpuCkwScopedKernelWriter writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step)</div><div class="ttdoc">Get coordinate along one axis.</div><div class="ttdef"><b>Definition:</b> <a href="_ckw_helper_8cpp_source.xhtml#l00032">CkwHelper.cpp:32</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">Math.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings_xhtml_aee2c74e40edb43d60c17854d2dbeb889"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#aee2c74e40edb43d60c17854d2dbeb889">arm_compute::experimental::dynamic_fusion::ClComponentDirectConv2dSettings::direct_conv_descriptor</a></div><div class="ttdeci">ClComponentDirectConv2dSettings &amp; direct_conv_descriptor(const DirectConvComputeKernelInfo &amp;desc)</div><div class="ttdoc">Set direct convolution descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00061">ClComponentDirectConv2d.cpp:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7be62dcb9603165af78bca6f2ca8ec15"><div class="ttname"><a href="namespacearm__compute.xhtml#a7be62dcb9603165af78bca6f2ca8ec15">arm_compute::adjust_vec_size</a></div><div class="ttdeci">unsigned int adjust_vec_size(unsigned int vec_size, size_t dim0)</div><div class="ttdoc">Returns the adjusted vector size in case it is less than the input's first dimension,...</div><div class="ttdef"><b>Definition:</b> <a href="_adjust_vec_size_8h_source.xhtml#l00038">AdjustVecSize.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver_xhtml_a6c87c6e19567bc42bc52d166728c4461"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#a6c87c6e19567bc42bc52d166728c4461">arm_compute::experimental::dynamic_fusion::IGpuCkwComponentDriver::tensors</a></div><div class="ttdeci">ArgumentPack&lt; ITensorInfo &gt; tensors() const</div><div class="ttdoc">Get tensor arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_ckw_component_driver_8h_source.xhtml#l00096">IGpuCkwComponentDriver.h:96</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2065fcea8e34c2f3ee039d5a0332348b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">arm_compute::cpu::channel_idx</a></div><div class="ttdeci">const size_t channel_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2daf774ab1f2b95de283245a361d455f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">arm_compute::cpu::width_idx</a></div><div class="ttdeci">const size_t width_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">impl.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa6d92f521dc4f05ac7f4c856dcfe263e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">arm_compute::cpu::height_idx</a></div><div class="ttdeci">const size_t height_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:15:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
