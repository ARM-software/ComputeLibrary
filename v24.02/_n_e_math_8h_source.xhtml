<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/NEMath.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_math_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEMath.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_math_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_NEMATH_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_NEMATH_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/** Calculate floor of a vector.</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * @param[in] val Input vector value in F32 format.</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @return The calculated floor vector.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(float32x4_t val);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/** Calculate round value of a vector to nearest with ties to even.</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @param[in] val Input vector value in F32 format.</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * @return The calculated round vector.</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">vroundq_rte_f32</a>(float32x4_t val);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/** Calculate inverse square root.</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @return The calculated inverse square root.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;float32x2_t <a class="code" href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">vinvsqrt_f32</a>(float32x2_t x);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/** Calculate inverse square root.</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @return The calculated inverse square root.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">vinvsqrtq_f32</a>(float32x4_t x);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/** Calculate reciprocal.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * @return The calculated reciprocal.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;float32x2_t <a class="code" href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">vinv_f32</a>(float32x2_t x);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/** Calculate reciprocal.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * @return The calculated reciprocal.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">vinvq_f32</a>(float32x4_t x);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">/** Perform a 7th degree polynomial approximation using Estrin&#39;s method.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in] x      Input vector value in F32 format.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in] coeffs Polynomial coefficients table.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @return The calculated approximation.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">vtaylor_polyq_f32</a>(float32x4_t x, <span class="keyword">const</span> std::array&lt;float32x4_t, 8&gt; &amp;coeffs);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">/** Calculate exponential</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * @param[in] x Input vector value in F32 format.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * @return The calculated exponent.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(float32x4_t x);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">/** Calculate error function</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> * @param[in] x Input vector in F32 format.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * @return The calculated erf.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">verfq_f32</a>(float32x4_t x);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/** Calculate logarithm</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * @param[in] x Input vector value in F32 format.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> * @return The calculated logarithm.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(float32x4_t x);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/** Calculate hyperbolic tangent.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * tanh(x) = (e^2x - 1)/(e^2x + 1)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @note We clamp x to [-5,5] to avoid overflowing issues.</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @param[in] val Input vector value in F32 format.</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * @return The calculated Hyperbolic Tangent.</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">vtanhq_f32</a>(float32x4_t val);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/** Calculate n power of a number.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * pow(x,n) = e^(n*log(x))</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in] val Input vector value in F32 format.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in] n   Powers to raise the input to.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @return The calculated power.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">vpowq_f32</a>(float32x4_t val, float32x4_t n);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/** Round to the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> * @note This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> * @param[in] x        Vector of 4 elements</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> * @param[in] exponent Vector of 4 elements with integer value used to round to nearest division by a power-of-two</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * @return the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;int32x4_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32x4_t x, int32x4_t exponent);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">/** Round to the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> * @note This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> * @param[in] x        Vector of 4 elements</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * @param[in] exponent Integer value used to round to nearest division by a power-of-two</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * @return the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;int32x4_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32x4_t x, <span class="keywordtype">int</span> exponent);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/** Round to the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * @note This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> * @param[in] x        Element to divide.</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"> * @param[in] exponent Integer value used to round to nearest division by a power-of-two</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> * @return the nearest division by a power-of-two using exponent</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;int32_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32_t x, <span class="keywordtype">int</span> exponent);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">/** Converts from uint8x16 to float32x4x4_t</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> * @param[in] in Vector of uint8 to be converted</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> * @return Converted vector of float</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(<span class="keyword">const</span> uint8x16_t &amp;in);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">/** Converts from int8x16 to float32x4x4_t</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> * @param[in] in Vector of int8 to be converted</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * @return Converted vector of float</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(<span class="keyword">const</span> int8x16_t &amp;in);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">/** Converts to float32x4x4_t from the specified templated 16 elements vectors</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * @param[in] in Vector of float to be converted</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * @return Converted vector of float</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">convert_to_float32x4x4</a>(<span class="keyword">const</span> T &amp;in);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">/** Converts from two float32x4x3_t to just one uint8x8x3_t</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> * @param[in]  in1 First input vector of float to be converted</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * @param[in]  in2 Second input vector of float to be converted</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> * @param[out] out Converted output vector uint8 to store the result</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">convert_float32x4x3_to_uint8x8x3</a>(<span class="keyword">const</span> float32x4x3_t &amp;in1, <span class="keyword">const</span> float32x4x3_t &amp;in2, uint8x8x3_t &amp;out);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">/** Converts from two float32x4x4_t to just one uint8x16_t</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> * @param[in]  in  Vector of float to be converted</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> * @param[out] out Converted vector of uint8 to store the result</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">convert_float32x4x4_to_uint8x16</a>(<span class="keyword">const</span> float32x4x4_t &amp;in, uint8x16_t &amp;out);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">/** Converts from float32x4x4_t to just one int8x16_t</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * @param[in]  in  Vector of float to be converted</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * @param[out] out Converted vector of uint8 to store the result</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">convert_float32x4x4_to_int8x16</a>(<span class="keyword">const</span> float32x4x4_t &amp;in, int8x16_t &amp;out);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">/** Converts from float vector to integer vector</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * @param[in] in Float vector to converted</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @return The converted integer vector</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> <span class="keywordtype">float</span>_vec_type, <span class="keyword">typename</span> <span class="keywordtype">int</span>_vec_type&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;int_vec_type <a class="code" href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">convert_float_to_int</a>(<span class="keyword">const</span> float_vec_type &amp;in);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">/** Converts from integer vector to float vector</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @param[in] in Integer vector to converted</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @return The converted float vector</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> <span class="keywordtype">float</span>_vec_type, <span class="keyword">typename</span> <span class="keywordtype">int</span>_vec_type&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;float_vec_type <a class="code" href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">convert_int_to_float</a>(<span class="keyword">const</span> int_vec_type &amp;in);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">/** Calculate sine.</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * @param[in] val Input vector value in radians, F32 format.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> * @return The calculated sine.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;float32x4_t <a class="code" href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">vsinq_f32</a>(float32x4_t val);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">/** Calculate sine.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"> * @param[in] val Input vector value in radians, F32 format.</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"> * @return The calculated sine.</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;float32x2_t <a class="code" href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">vsin_f32</a>(float32x2_t val);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">/** Reduce a vector to be a scalar by accumulating all lanes in the vector</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> * @param[in] v Vector to be reduced.</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> * @return the wrapped-around number.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(<span class="keyword">const</span> float32x4_t &amp;v);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">/** Calculate hyperbolic tangent.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> * tanh(x) = (e^2x - 1)/(e^2x + 1)</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> * @note We clamp x to [-5,5] to avoid overflowing issues.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * @param[in] val Input vector value in F16 format.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * @return The calculated Hyperbolic Tangent.</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;float16x8_t vtanhq_f16(float16x8_t val);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">/** Calculate round value of a vector to nearest with ties to even.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> * @param[in] val Input vector value in F16 format.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"> * @return The calculated round vector.</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;float16x8_t vroundq_rte_f16(float16x8_t val);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">/** Calculate reciprocal.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> * @return The calculated reciprocal.</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;float16x4_t vinv_f16(float16x4_t x);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">/** Calculate reciprocal.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> * @return The calculated reciprocal.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;float16x8_t vinvq_f16(float16x8_t x);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">/** Calculate inverse square root.</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> * @return The calculated inverse square root.</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;float16x4_t vinvsqrt_f16(float16x4_t x);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">/** Calculate inverse square root.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @param[in] x Input value.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> * @return The calculated inverse square root.</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;float16x8_t vinvsqrtq_f16(float16x8_t x);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">/** Calculate exponential</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * @param[in] x Input vector value in F16 format.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * @return The calculated exponent.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;float16x8_t vexpq_f16(float16x8_t x);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">/** Calculate error function</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> * @param[in] x Input vector in F16 format.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * @return The calculated erf.</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;float16x8_t verfq_f16(float16x8_t x);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">/** Calculate n power of a number.</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * pow(x,n) = e^(n*log(x))</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> * @param[in] val Input vector value in F16 format.</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> * @param[in] n   Powers to raise the input to.</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> * @return The calculated power.</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;float16x8_t vpowq_f16(float16x8_t val, float16x8_t n);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">/** Calculate sine.</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> * @param[in] val Input vector value in radians, F16 format.</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> * @return The calculated sine.</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;float16x8_t vsinq_f16(float16x8_t val);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">/** Reduce a vector to be a scalar by accumulating all lanes in the vector</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> * @param[in] v Vector to be reduced.</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> * @return the wrapped-around number.</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;float16_t <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(<span class="keyword">const</span> float16x8_t &amp;v);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_math_8inl.xhtml">src/core/NEON/NEMath.inl</a>&quot;</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_NEMATH_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_aa8065e7933c00bdbf860278643c9e953"><div class="ttname"><a href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">arm_compute::convert_float32x4x3_to_uint8x8x3</a></div><div class="ttdeci">void convert_float32x4x3_to_uint8x8x3(const float32x4x3_t &amp;in1, const float32x4x3_t &amp;in2, uint8x8x3_t &amp;out)</div><div class="ttdoc">Converts from two float32x4x3_t to just one uint8x8x3_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00488">NEMath.inl:488</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4a20779ec9b583a9468b4fa60575d52e"><div class="ttname"><a href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">arm_compute::convert_int8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_int8x16_to_float32x4x4(const int8x16_t &amp;in)</div><div class="ttdoc">Converts from int8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00462">NEMath.inl:462</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3e59419da344d02daca9c5b274a1da45"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">arm_compute::vtanhq_f32</a></div><div class="ttdeci">float32x4_t vtanhq_f32(float32x4_t val)</div><div class="ttdoc">Calculate hyperbolic tangent.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_acc6fd1bcd12ef1141e15401a04d31187"><div class="ttname"><a href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">arm_compute::vinv_f32</a></div><div class="ttdeci">float32x2_t vinv_f32(float32x2_t x)</div><div class="ttdoc">Calculate reciprocal.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa9648abfe8fa6a9f3dab23ec9f55e2f1"><div class="ttname"><a href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">arm_compute::vsin_f32</a></div><div class="ttdeci">float32x2_t vsin_f32(float32x2_t val)</div><div class="ttdoc">Calculate sine.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0c10bb00a86edd8d0cd4c33b494f6cd4"><div class="ttname"><a href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">arm_compute::vtaylor_polyq_f32</a></div><div class="ttdeci">float32x4_t vtaylor_polyq_f32(float32x4_t x, const std::array&lt; float32x4_t, 8 &gt; &amp;coeffs)</div><div class="ttdoc">Perform a 7th degree polynomial approximation using Estrin's method.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8970d7aed07d8649f5e3088455948b8"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">arm_compute::vinvsqrtq_f32</a></div><div class="ttdeci">float32x4_t vinvsqrtq_f32(float32x4_t x)</div><div class="ttdoc">Calculate inverse square root.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a17bff173004242d8f44b5b663177f9c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a17bff173004242d8f44b5b663177f9c0">arm_compute::convert_float_to_int</a></div><div class="ttdeci">int_vec_type convert_float_to_int(const float_vec_type &amp;in)</div><div class="ttdoc">Converts from float vector to integer vector.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afeb24f265771053bc8365e30b4c409e5"><div class="ttname"><a href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">arm_compute::convert_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_to_float32x4x4(const T &amp;in)</div><div class="ttdoc">Converts to float32x4x4_t from the specified templated 16 elements vectors.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9c673ade3003d5d4e28ebf5875795dc4"><div class="ttname"><a href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">arm_compute::convert_float32x4x4_to_int8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_int8x16(const float32x4x4_t &amp;in, int8x16_t &amp;out)</div><div class="ttdoc">Converts from float32x4x4_t to just one int8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00502">NEMath.inl:502</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1b362fecc52ac83bcfbb0850549edce4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_uint8x16_to_float32x4x4(const uint8x16_t &amp;in)</div><div class="ttdoc">Converts from uint8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00448">NEMath.inl:448</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa6465367a67af2bae4ca46750231dae0"><div class="ttname"><a href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">arm_compute::vpowq_f32</a></div><div class="ttdeci">float32x4_t vpowq_f32(float32x4_t val, float32x4_t n)</div><div class="ttdoc">Calculate n power of a number.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa107fc2f2937504672fe241943d8260b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">arm_compute::verfq_f32</a></div><div class="ttdeci">float32x4_t verfq_f32(float32x4_t x)</div><div class="ttdoc">Calculate error function.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a62947a5a80433465f50372c441be3c8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">arm_compute::vreduce</a></div><div class="ttdeci">float vreduce(const float32x4_t &amp;v)</div><div class="ttdoc">Reduce a vector to be a scalar by accumulating all lanes in the vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00537">NEMath.inl:537</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afc415e7fc5e633a0b85b08b2bba5b5cf"><div class="ttname"><a href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">arm_compute::vinvsqrt_f32</a></div><div class="ttdeci">float32x2_t vinvsqrt_f32(float32x2_t x)</div><div class="ttdoc">Calculate inverse square root.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1d090b80b655e7f8fd8977bb93808b04"><div class="ttname"><a href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">arm_compute::vlogq_f32</a></div><div class="ttdeci">float32x4_t vlogq_f32(float32x4_t x)</div><div class="ttdoc">Calculate logarithm.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ee01955c2dd8c14a0d107a36cb62618"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">arm_compute::convert_float32x4x4_to_uint8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_uint8x16(const float32x4x4_t &amp;in, uint8x16_t &amp;out)</div><div class="ttdoc">Converts from two float32x4x4_t to just one uint8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00495">NEMath.inl:495</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a77e02c19b498c3ff4ee373b0825cfd19"><div class="ttname"><a href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">arm_compute::rounding_divide_by_pow2</a></div><div class="ttdeci">int32x4_t rounding_divide_by_pow2(int32x4_t x, int32x4_t exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00425">NEMath.inl:425</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5b6eb5a8c8e8944d781892928f71a698"><div class="ttname"><a href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">arm_compute::vsinq_f32</a></div><div class="ttdeci">float32x4_t vsinq_f32(float32x4_t val)</div><div class="ttdoc">Calculate sine.</div></div>
<div class="ttc" id="a_n_e_math_8inl_xhtml"><div class="ttname"><a href="_n_e_math_8inl.xhtml">NEMath.inl</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad339c829071ae619193300cb501195ac"><div class="ttname"><a href="namespacearm__compute.xhtml#ad339c829071ae619193300cb501195ac">arm_compute::convert_int_to_float</a></div><div class="ttdeci">float_vec_type convert_int_to_float(const int_vec_type &amp;in)</div><div class="ttdoc">Converts from integer vector to float vector.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9fb53f220926a32be02f9446aed5bd88"><div class="ttname"><a href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">arm_compute::vroundq_rte_f32</a></div><div class="ttdeci">float32x4_t vroundq_rte_f32(float32x4_t val)</div><div class="ttdoc">Calculate round value of a vector to nearest with ties to even.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2e0f2412b4d1302272d1aeb85d21ab25"><div class="ttname"><a href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">arm_compute::vinvq_f32</a></div><div class="ttdeci">float32x4_t vinvq_f32(float32x4_t x)</div><div class="ttdoc">Calculate reciprocal.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab55486f1153a4c5f507d4923b59fc6a0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32</a></div><div class="ttdeci">float32x4_t vexpq_f32(float32x4_t x)</div><div class="ttdoc">Calculate exponential.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_math_8h.xhtml">NEMath.h</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:14:49 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
