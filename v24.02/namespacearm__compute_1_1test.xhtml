<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::test Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1test.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::test Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1benchmark"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1benchmark.xhtml">benchmark</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1colorconvert__helper"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1colorconvert__helper.xhtml">colorconvert_helper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1convolution__3d"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1convolution__3d.xhtml">convolution_3d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1framework"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1traits"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml">traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">validation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml">Accessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> objects.  <a href="classarm__compute_1_1test_1_1_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml">ArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml" title="ArrayAccessor implementation for Array objects.">ArrayAccessor</a> implementation for <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a> objects.  <a href="classarm__compute_1_1test_1_1_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory class to create and fill tensors.  <a href="classarm__compute_1_1test_1_1_assets_library.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_accessor.xhtml">CLAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_array_accessor.xhtml">CLArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml">CLSynthetizeFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml" title="Basic interface for functions which have a single OpenCL kernel.">ICLSimpleFunction</a> which runs the given kernel K.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also initializes to zero the input tensor.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml">CLSynthetizeFunctionWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the specified bordersize.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_operator.xhtml">CLSynthetizeOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This template synthetizes a simple <a class="el" href="classarm__compute_1_1_i_operator.xhtml" title="Base class specifying the operator interface.">IOperator</a> which runs the given kernel K.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_operator_init_output_with_zero_and_with_zero_constant_border.xhtml">CLSynthetizeOperatorInitOutputWithZeroAndWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also initializes to zero the input tensor.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_operator_init_output_with_zero_and_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_cl_synthetize_operator_with_border.xhtml">ClSynthetizeOperatorWithBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the kernel's bordersize.  <a href="classarm__compute_1_1test_1_1_cl_synthetize_operator_with_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">common_promoted_signed_type</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the signed promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml">common_promoted_unsigned_type</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the unsigned promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_context_scheduler_user.xhtml">ContextSchedulerUser</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1_context_type.xhtml">ContextType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1_context_type_3_01_tensor_01_4.xhtml">ContextType&lt; Tensor &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to provide information and access to tensor like structures.  <a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_array_accessor.xhtml">IArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to provide information and access to array like structures.  <a href="classarm__compute_1_1test_1_1_i_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml">NESynthetizeFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml" title="Basic interface for functions which have a single CPU kernel.">INESimpleFunction</a> which runs the given kernel K.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml">NESynthetizeFunctionWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the specified bordersize.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_kernel_border.xhtml">NESynthetizeFunctionWithZeroConstantKernelBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the kernel's bordersize.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_kernel_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_padding_calculator.xhtml">PaddingCalculator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate required padding.  <a href="classarm__compute_1_1test_1_1_padding_calculator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_parameters_library.xhtml">ParametersLibrary</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class that contains all the global parameters used by the tests.  <a href="classarm__compute_1_1test_1_1_parameters_library.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subclass of <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory.">SimpleTensor</a> using uint8_t as value type.  <a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple tensor object that stores elements in a consecutive chunk of memory.  <a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor_accessor.xhtml">SimpleTensorAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> objects.  <a href="classarm__compute_1_1test_1_1_simple_tensor_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">TensorCache</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> categorised by the image they are created from including name, format and channel.  <a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memTemplParams" colspan="2">template&lt;typename O , typename F , typename... As&gt; </td></tr>
<tr class="memitem:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab3a61953b0f41e932f8a2ce8918e7aec">apply</a> (O *obj, F &amp;&amp;func, const std::tuple&lt; As... &gt; &amp;args)</td></tr>
<tr class="separator:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_same&lt; typename T::value_type, std::string &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a> (T first, T last, const std::string &amp;separator)</td></tr>
<tr class="memdesc:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple strings.  <a href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">More...</a><br /></td></tr>
<tr class="separator:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a898a0423aace06af0f3a18a26a972a1a"><td class="memTemplParams" colspan="2">template&lt;typename T , typename UnaryOp &gt; </td></tr>
<tr class="memitem:a898a0423aace06af0f3a18a26a972a1a"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a898a0423aace06af0f3a18a26a972a1a">join</a> (T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator, UnaryOp &amp;&amp;op)</td></tr>
<tr class="memdesc:a898a0423aace06af0f3a18a26a972a1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple values.  <a href="namespacearm__compute_1_1test.xhtml#a898a0423aace06af0f3a18a26a972a1a">More...</a><br /></td></tr>
<tr class="separator:a898a0423aace06af0f3a18a26a972a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69835710fc772315f4e65ce156034530"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_arithmetic&lt; typename T::value_type &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a69835710fc772315f4e65ce156034530"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">join</a> (T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator)</td></tr>
<tr class="memdesc:a69835710fc772315f4e65ce156034530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple values.  <a href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">More...</a><br /></td></tr>
<tr class="separator:a69835710fc772315f4e65ce156034530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">tolower</a> (std::string string)</td></tr>
<tr class="memdesc:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string to lower case.  <a href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">More...</a><br /></td></tr>
<tr class="separator:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">arithmetic_to_string</a> (T val, int decimal_places=0)</td></tr>
<tr class="memdesc:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a string with the arithmetic value in full precision.  <a href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">More...</a><br /></td></tr>
<tr class="separator:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33ac4283b9c9c207c968dbd286a87e50"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a33ac4283b9c9c207c968dbd286a87e50">sleep_in_seconds</a> (float seconds)</td></tr>
<tr class="memdesc:a33ac4283b9c9c207c968dbd286a87e50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes the calling thread to sleep for a specified number of seconds.  <a href="namespacearm__compute_1_1test.xhtml#a33ac4283b9c9c207c968dbd286a87e50">More...</a><br /></td></tr>
<tr class="separator:a33ac4283b9c9c207c968dbd286a87e50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3594bac8da97eb819a7bf7e02d642ace"><td class="memTemplParams" colspan="2">template&lt;typename D , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a3594bac8da97eb819a7bf7e02d642ace"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a3594bac8da97eb819a7bf7e02d642ace">fill_tensors</a> (D &amp;&amp;dist, std::initializer_list&lt; int &gt; seeds, T &amp;&amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, Ts &amp;&amp;... other_tensors)</td></tr>
<tr class="separator:a3594bac8da97eb819a7bf7e02d642ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30aaea1825f3464f073e1d1bce82e420"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a30aaea1825f3464f073e1d1bce82e420"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a30aaea1825f3464f073e1d1bce82e420">copy_tensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T2 &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:a30aaea1825f3464f073e1d1bce82e420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename std::enable_if&lt; std::is_same&lt; T1, T2 &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aafd2a1bcbb2f4dd73e6f6f322e9014c7">copy_tensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28edc8880596d14c099f3c2509efc8b3"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:a28edc8880596d14c099f3c2509efc8b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor1, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor2)</td></tr>
<tr class="separator:a28edc8880596d14c099f3c2509efc8b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4426b0b55d7810717fbdaf2e5ad5c68c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4426b0b55d7810717fbdaf2e5ad5c68c"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a4426b0b55d7810717fbdaf2e5ad5c68c">prettify_tensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;input, const <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> &amp;io_fmt=<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>{ <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0a23bb2bd76e5604aace0bdaa7b279a8fd">IOFormatInfo::PrintRegion::NoPadding</a> })</td></tr>
<tr class="separator:a4426b0b55d7810717fbdaf2e5ad5c68c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5ecf4ff53f742b81ee0f67992ecf30"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:adc5ecf4ff53f742b81ee0f67992ecf30"><td class="memTemplItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#adc5ecf4ff53f742b81ee0f67992ecf30">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:adc5ecf4ff53f742b81ee0f67992ecf30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad98da810dec350d13c281c15ce2f8590"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad98da810dec350d13c281c15ce2f8590"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad98da810dec350d13c281c15ce2f8590">to_string</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:ad98da810dec350d13c281c15ce2f8590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">round_half_up</a> (T value)</td></tr>
<tr class="memdesc:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to positive infinity.  <a href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">More...</a><br /></td></tr>
<tr class="separator:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">round_half_even</a> (T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</td></tr>
<tr class="memdesc:ad93bb148a873f19ad7692756e59617f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to nearest even.  <a href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">More...</a><br /></td></tr>
<tr class="separator:ad93bb148a873f19ad7692756e59617f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa337ab76176f3c4193642ac6de3a61cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a> (<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:aa337ab76176f3c4193642ac6de3a61cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Look up the format corresponding to a channel.  <a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">More...</a><br /></td></tr>
<tr class="separator:aa337ab76176f3c4193642ac6de3a61cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">get_channel_format</a> (<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:ac7dbe33793790fc37a5eda11ed6b0273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the format of a channel.  <a href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">More...</a><br /></td></tr>
<tr class="separator:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a> (F &amp;&amp;, const T &amp;value)</td></tr>
<tr class="memdesc:a1ebbb23b0094d47c51226d58e17e6447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">More...</a><br /></td></tr>
<tr class="separator:a1ebbb23b0094d47c51226d58e17e6447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U &gt; </td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">foldl</a> (F &amp;&amp;func, T &amp;&amp;value1, U &amp;&amp;value2) -&gt; decltype(func(value1, value2))</td></tr>
<tr class="memdesc:ad933f996ccb22854ae56dd86de8cbbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">More...</a><br /></td></tr>
<tr class="separator:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplParams" colspan="2">template&lt;typename F , typename I , typename T , typename... Vs&gt; </td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplItemLeft" align="right" valign="top">I&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">foldl</a> (F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</td></tr>
<tr class="memdesc:a92a5aaf033153828aef41d3354c204d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">More...</a><br /></td></tr>
<tr class="separator:a92a5aaf033153828aef41d3354c204d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8103df0e6c416f55f40106aa49072b42"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape, bool border_undefined=false, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size=<a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0))</td></tr>
<tr class="memdesc:a8103df0e6c416f55f40106aa49072b42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region based on tensor shape, border mode and border size.  <a href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">More...</a><br /></td></tr>
<tr class="separator:a8103df0e6c416f55f40106aa49072b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a> (void *ptr, T value, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:a1e6934e95738573214c2ce1d6648d116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write the value after casting the pointer according to <code>data_type</code>.  <a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">More...</a><br /></td></tr>
<tr class="separator:a1e6934e95738573214c2ce1d6648d116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplParams" colspan="2">template&lt;typename U , typename T &gt; </td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a> (T val)</td></tr>
<tr class="memdesc:a4965b2f6821e0cf0afee738158bd8377"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturate a value of type T against the numeric limits of type U.  <a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">More...</a><br /></td></tr>
<tr class="separator:a4965b2f6821e0cf0afee738158bd8377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, int index)</td></tr>
<tr class="memdesc:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a linear index into n-dimensional coordinates.  <a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">More...</a><br /></td></tr>
<tr class="separator:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</td></tr>
<tr class="memdesc:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearise the given coordinate.  <a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">More...</a><br /></td></tr>
<tr class="separator:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord)</td></tr>
<tr class="memdesc:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a coordinate is within a valid region.  <a href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">More...</a><br /></td></tr>
<tr class="separator:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a6a747b1db241e659f9f6a9da40a2fcf2">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info, <a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#a6a747b1db241e659f9f6a9da40a2fcf2">More...</a><br /></td></tr>
<tr class="separator:a6a747b1db241e659f9f6a9da40a2fcf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae3f0d4980b4c5bfc29ee9451fe6b7e01">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, int num_channels=1, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>, <a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#ae3f0d4980b4c5bfc29ee9451fe6b7e01">More...</a><br /></td></tr>
<tr class="separator:ae3f0d4980b4c5bfc29ee9451fe6b7e01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac350f5959bbdddae52937f2219d58076"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac350f5959bbdddae52937f2219d58076"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac350f5959bbdddae52937f2219d58076">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:ac350f5959bbdddae52937f2219d58076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="namespacearm__compute_1_1test.xhtml#ac350f5959bbdddae52937f2219d58076">More...</a><br /></td></tr>
<tr class="separator:ac350f5959bbdddae52937f2219d58076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a000a9b9acb976222ee72275cf8852a3f">generate_random_real</a> (unsigned int num_values, T min, T max, std::random_device::result_type seed)</td></tr>
<tr class="memdesc:a000a9b9acb976222ee72275cf8852a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a vector with a uniform distribution of floating point values across the specified range.  <a href="namespacearm__compute_1_1test.xhtml#a000a9b9acb976222ee72275cf8852a3f">More...</a><br /></td></tr>
<tr class="separator:a000a9b9acb976222ee72275cf8852a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplParams" colspan="2">template&lt;typename T , typename ArrayAccessor_T &gt; </td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac35e7a1ad467f5fe8620cbbc5793d53b">fill_array</a> (ArrayAccessor_T &amp;&amp;array, const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="separator:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47155d6186155ec4da9295764b3c05a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">get_typestring</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ae47155d6186155ec4da9295764b3c05a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obtain numpy type string from DataType.  <a href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">More...</a><br /></td></tr>
<tr class="separator:ae47155d6186155ec4da9295764b3c05a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a5967bb62a612be6b300aa96049a2166a">sync_if_necessary</a> ()</td></tr>
<tr class="memdesc:a5967bb62a612be6b300aa96049a2166a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync if necessary.  <a href="namespacearm__compute_1_1test.xhtml#a5967bb62a612be6b300aa96049a2166a">More...</a><br /></td></tr>
<tr class="separator:a5967bb62a612be6b300aa96049a2166a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a619736e19838c20cac8f668ab13aae37">sync_tensor_if_necessary</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a619736e19838c20cac8f668ab13aae37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync tensor if necessary.  <a href="namespacearm__compute_1_1test.xhtml#a619736e19838c20cac8f668ab13aae37">More...</a><br /></td></tr>
<tr class="separator:a619736e19838c20cac8f668ab13aae37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ab69f8e70173ef637e48967af41c8ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">construct_dims_state</a> (int32_t value)</td></tr>
<tr class="memdesc:a8ab69f8e70173ef637e48967af41c8ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the given value.  <a href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">More...</a><br /></td></tr>
<tr class="separator:a8ab69f8e70173ef637e48967af41c8ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">construct_dynamic_dims_state</a> ()</td></tr>
<tr class="memdesc:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the value for dynamic state.  <a href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">More...</a><br /></td></tr>
<tr class="separator:af2e9bf81bb04ae2c425eea1f2db6dc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0cf4577fe9753a2dde691439c0c4581"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">construct_static_dims_state</a> ()</td></tr>
<tr class="memdesc:ab0cf4577fe9753a2dde691439c0c4581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct and return object for dimensions' state filled with the value for non-dynamic state.  <a href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">More...</a><br /></td></tr>
<tr class="separator:ab0cf4577fe9753a2dde691439c0c4581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab53ce08b9e532e8b076c9831908597e6"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:ab53ce08b9e532e8b076c9831908597e6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab53ce08b9e532e8b076c9831908597e6">set_tensor_dynamic</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;t)</td></tr>
<tr class="memdesc:ab53ce08b9e532e8b076c9831908597e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the dimension states of the given tensor to dynamic.  <a href="namespacearm__compute_1_1test.xhtml#ab53ce08b9e532e8b076c9831908597e6">More...</a><br /></td></tr>
<tr class="separator:ab53ce08b9e532e8b076c9831908597e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8e1c85e80e1784f08ca535a18feacf2"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:af8e1c85e80e1784f08ca535a18feacf2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af8e1c85e80e1784f08ca535a18feacf2">set_tensor_static</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;t)</td></tr>
<tr class="memdesc:af8e1c85e80e1784f08ca535a18feacf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the dimension states of the given tensor to state.  <a href="namespacearm__compute_1_1test.xhtml#af8e1c85e80e1784f08ca535a18feacf2">More...</a><br /></td></tr>
<tr class="separator:af8e1c85e80e1784f08ca535a18feacf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ce32989fb2426d6cef29e7b8e2b2d68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ce32989fb2426d6cef29e7b8e2b2d68">convert_pad_stride_info_to_conv_attr</a> (const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;info, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dialation)</td></tr>
<tr class="separator:a1ce32989fb2426d6cef29e7b8e2b2d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:abb222b6342b2b9056ec65056984d5e21"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_parameters_library.xhtml">ParametersLibrary</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a></td></tr>
<tr class="separator:abb222b6342b2b9056ec65056984d5e21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71326f0909d77386e29b511e1990a11f"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a></td></tr>
<tr class="separator:a71326f0909d77386e29b511e1990a11f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af90c2445eb8a45fd74b11c574c8cb6b9"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af90c2445eb8a45fd74b11c574c8cb6b9">fixed_library</a></td></tr>
<tr class="separator:af90c2445eb8a45fd74b11c574c8cb6b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab3a61953b0f41e932f8a2ce8918e7aec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3a61953b0f41e932f8a2ce8918e7aec">&#9670;&nbsp;</a></span>apply()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::apply </td>
          <td>(</td>
          <td class="paramtype">O *&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::tuple&lt; As... &gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00079">79</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a1ce487275e4d9e2072af217789dcdcc5">detail::apply_impl</a>(obj, std::forward&lt;F&gt;(func), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, detail::sequence_t&lt;<span class="keyword">sizeof</span>...(As)&gt;());</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00072">arm_compute::test::framework::apply_impl()</a>, and <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>.</p>

</div>
</div>
<a id="a93690f80f7fb88ea733fdc6f9f3b3ada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93690f80f7fb88ea733fdc6f9f3b3ada">&#9670;&nbsp;</a></span>arithmetic_to_string()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::arithmetic_to_string </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>decimal_places</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a string with the arithmetic value in full precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>Arithmetic value </td></tr>
    <tr><td class="paramname">decimal_places</td><td>How many decimal places to show</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String with the arithmetic value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00164">164</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; std::fixed;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.precision((decimal_places) ? decimal_places : std::numeric_limits&lt;T&gt;::digits10 + 1);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; val;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pretty_printer_8cpp_source.xhtml#l00125">PrettyPrinter::print_measurements()</a>.</p>

</div>
</div>
<a id="a8ab69f8e70173ef637e48967af41c8ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ab69f8e70173ef637e48967af41c8ae">&#9670;&nbsp;</a></span>construct_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a> arm_compute::test::construct_dims_state </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct and return object for dimensions' state filled with the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The value to fill</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Constructed class </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00586">586</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keyword">auto</span> states = ITensorInfo::TensorDimsState{};</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">std::fill</a>(states.begin(), states.end(), value);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">return</span> states;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2validation_2dynamic__fusion_2_utils_8h_source.xhtml#l00056">arm_compute::test::validation::utils::fill()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00597">construct_dynamic_dims_state()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00606">construct_static_dims_state()</a>.</p>

</div>
</div>
<a id="af2e9bf81bb04ae2c425eea1f2db6dc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2e9bf81bb04ae2c425eea1f2db6dc11">&#9670;&nbsp;</a></span>construct_dynamic_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a> arm_compute::test::construct_dynamic_dims_state </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct and return object for dimensions' state filled with the value for dynamic state. </p>
<dl class="section return"><dt>Returns</dt><dd>Constructed class filled with the value for dynamic state </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00597">597</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">construct_dims_state</a>(ITensorInfo::get_dynamic_state_value());</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2_utils_8h_source.xhtml#l00586">construct_dims_state()</a>, and <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_dynamic_state_value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00617">set_tensor_dynamic()</a>.</p>

</div>
</div>
<a id="ab0cf4577fe9753a2dde691439c0c4581"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0cf4577fe9753a2dde691439c0c4581">&#9670;&nbsp;</a></span>construct_static_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">ITensorInfo::TensorDimsState</a> arm_compute::test::construct_static_dims_state </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct and return object for dimensions' state filled with the value for non-dynamic state. </p>
<dl class="section return"><dt>Returns</dt><dd>Constructed class filled with the value for non-dynamic state </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00606">606</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;{</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">construct_dims_state</a>(ITensorInfo::get_static_state_value());</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2_utils_8h_source.xhtml#l00586">construct_dims_state()</a>, and <a class="el" href="_i_tensor_info_8h_source.xhtml#l00067">ITensorInfo::get_static_state_value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00628">set_tensor_static()</a>.</p>

</div>
</div>
<a id="a1ce32989fb2426d6cef29e7b8e2b2d68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ce32989fb2426d6cef29e7b8e2b2d68">&#9670;&nbsp;</a></span>convert_pad_stride_info_to_conv_attr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">experimental::dynamic_fusion::Conv2dAttributes</a> arm_compute::test::convert_pad_stride_info_to_conv_attr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dialation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00633">633</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;{</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keyword">const</span> Padding2D info_pad(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_left(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_right(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_top(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_bottom());</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keyword">const</span> Size2D    info_stride(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.stride().first, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.stride().second);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a>().<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a6177244142d86cabba1c4f7991d1e091">pad</a>(info_pad).<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#acb4fc314422ba7c6bc7a761ba7c6111d">stride</a>(info_stride).<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a5d4c902de99dd0a171d8407a20010093">dilation</a>(dialation);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00051">Conv2dAttributes::dilation()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00033">Conv2dAttributes::pad()</a>, and <a class="el" href="_conv2d_attributes_8cpp_source.xhtml#l00042">Conv2dAttributes::stride()</a>.</p>

</div>
</div>
<a id="a9be4cb7e6ee20063a4a10bc3abb750b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9be4cb7e6ee20063a4a10bc3abb750b9">&#9670;&nbsp;</a></span>coord2index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::test::coord2index </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Linearise the given coordinate. </p>
<p>Transforms the given coordinate into a linear offset in terms of elements.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td>The to be converted coordinate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Linear offset to the element. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00388">388</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size() == 0, <span class="stringliteral">&quot;Cannot get index from empty shape&quot;</span>);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(coord.num_dimensions() == 0, <span class="stringliteral">&quot;Cannot get index of empty coordinate&quot;</span>);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordtype">int</span> index    = 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordtype">int</span> dim_size = 1;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; coord.num_dimensions(); ++i)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        index += coord[i] * dim_size;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        dim_size *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i];</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00102">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="_conv3_d_8cpp_source.xhtml#l00193">arm_compute::test::validation::reference::conv3d()</a>, <a class="el" href="reference_2_instance_normalization_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::instance_normalization()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00057">RawTensor::operator()()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00448">SimpleTensor&lt; uint8_t &gt;::operator()()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="reference_2_pooling3d_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::pooling_3d_layer_internal()</a>, <a class="el" href="reference_2_pooling_layer_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::pooling_layer_internal()</a>, <a class="el" href="reference_2_reverse_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reverse()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, and <a class="el" href="reference_2_weights_reshape_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::weights_reshape()</a>.</p>

</div>
</div>
<a id="aafd2a1bcbb2f4dd73e6f6f322e9014c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafd2a1bcbb2f4dd73e6f6f322e9014c7">&#9670;&nbsp;</a></span>copy_tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt; copy_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00246">246</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    SimpleTensor&lt;T1&gt; st(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.shape(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data_type(),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.num_channels(),</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.quantization_info(),</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data_layout());</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    memcpy((<span class="keywordtype">void</span> *)st.data(), (<span class="keyword">const</span> <span class="keywordtype">void</span> *)<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data(), <span class="keywordtype">size_t</span>(st.num_elements() * <span class="keyword">sizeof</span>(T1)));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> st;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_simple_tensor_8h_source.xhtml#l00436">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00424">SimpleTensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a30aaea1825f3464f073e1d1bce82e420"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30aaea1825f3464f073e1d1bce82e420">&#9670;&nbsp;</a></span>copy_tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt;T1&gt; arm_compute::test::copy_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00232">232</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    SimpleTensor&lt;T1&gt; st(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.shape(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data_type(),</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.num_channels(),</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.quantization_info(),</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data_layout());</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> n = 0; n &lt; size_t(st.num_elements()); n++)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        st.data()[n] = <span class="keyword">static_cast&lt;</span>T1<span class="keyword">&gt;</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data()[n]);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span> st;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_simple_tensor_8h_source.xhtml#l00436">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00424">SimpleTensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a6a747b1db241e659f9f6a9da40a2fcf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a747b1db241e659f9f6a9da40a2fcf2">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a tensor of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> information to be used to create the tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>(Optional) Pointer to the runtime context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00427">427</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    T <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>(ctx);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="ae3f0d4980b4c5bfc29ee9451fe6b7e01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3f0d4980b4c5bfc29ee9451fe6b7e01">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a tensor of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) Number of channels. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>(Optional) Quantization info for asymmetric quantized types. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>(Optional) Data layout. Default is NCHW. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>(Optional) Pointer to the runtime context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00446">446</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    T          <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>(ctx);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    TensorInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, num_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_quantization_info(quantization_info);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.set_data_layout(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">return</span> create_tensor&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, ctx);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="ac350f5959bbdddae52937f2219d58076"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac350f5959bbdddae52937f2219d58076">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a tensor of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>(Optional) Pointer to the runtime context.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00466">466</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;{</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    TensorInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">return</span> create_tensor&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, ctx);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops::format</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="ac35e7a1ad467f5fe8620cbbc5793d53b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac35e7a1ad467f5fe8620cbbc5793d53b">&#9670;&nbsp;</a></span>fill_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::fill_array </td>
          <td>(</td>
          <td class="paramtype">ArrayAccessor_T &amp;&amp;&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00498">498</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;{</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    array.resize(v.size());</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    std::memcpy(array.buffer(), v.data(), v.size() * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3594bac8da97eb819a7bf7e02d642ace"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3594bac8da97eb819a7bf7e02d642ace">&#9670;&nbsp;</a></span>fill_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::fill_tensors </td>
          <td>(</td>
          <td class="paramtype">D &amp;&amp;&#160;</td>
          <td class="paramname"><em>dist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; int &gt;&#160;</td>
          <td class="paramname"><em>seeds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>other_tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml">Helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> std::array &lt; T, 1 + <span class="keyword">sizeof</span>...(Ts) &gt; tensors{ { std::forward&lt;T&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>), std::forward&lt;Ts&gt;(other_tensors)... } };</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::vector&lt;int&gt; vs(seeds);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(vs.size() != tensors.size());</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">int</span> k = 0;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tp : tensors)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(*tp), std::forward&lt;D&gt;(dist), vs[k++]);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="main_8cpp_source.xhtml#l00077">library</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a1ebbb23b0094d47c51226d58e17e6447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ebbb23b0094d47c51226d58e17e6447">&#9670;&nbsp;</a></span>foldl() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00182">182</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> value;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00205">foldl()</a>.</p>

</div>
</div>
<a id="a92a5aaf033153828aef41d3354c204d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92a5aaf033153828aef41d3354c204d9">&#9670;&nbsp;</a></span>foldl() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">I arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">I &amp;&amp;&#160;</td>
          <td class="paramname"><em>initial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Vs &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fold left. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Binary function to be called. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">initial</td><td>Initial value. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Argument passed to the function. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Remaining arguments. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00205">205</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">foldl</a>(std::forward&lt;F&gt;(func), func(std::forward&lt;I&gt;(initial), std::forward&lt;T&gt;(value)), std::forward&lt;Vs&gt;(values)...);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2_utils_8h_source.xhtml#l00182">foldl()</a>.</p>

</div>
</div>
<a id="ad933f996ccb22854ae56dd86de8cbbfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad933f996ccb22854ae56dd86de8cbbfe">&#9670;&nbsp;</a></span>foldl() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>value2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype(func(value1, value2))
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>func(value1, value2). </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00192">192</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> func(value1, value2);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a000a9b9acb976222ee72275cf8852a3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000a9b9acb976222ee72275cf8852a3f">&#9670;&nbsp;</a></span>generate_random_real()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; arm_compute::test::generate_random_real </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a vector with a uniform distribution of floating point values across the specified range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_values</td><td>The number of values to be created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min</td><td>The minimum value in distribution (inclusive). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max</td><td>The maximum value in distribution (inclusive). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>The random seed to be used.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector that contains the requested number of random floating point values </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00483">483</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    std::vector&lt;T&gt;                    v(num_values);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    std::mt19937                      gen(seed);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    std::uniform_real_distribution&lt;T&gt; dist(min, max);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_values; ++i)</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        v.at(i) = dist(gen);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    }</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160; </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> v;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac7dbe33793790fc37a5eda11ed6b0273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7dbe33793790fc37a5eda11ed6b0273">&#9670;&nbsp;</a></span>get_channel_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> arm_compute::test::get_channel_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the format of a channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Channel type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Format of the given channel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00164">164</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">switch</span>(channel)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">case</span> Channel::R:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> Channel::G:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> Channel::B:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">return</span> Format::U8;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::R</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

</div>
</div>
<a id="aa337ab76176f3c4193642ac6de3a61cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa337ab76176f3c4193642ac6de3a61cf">&#9670;&nbsp;</a></span>get_format_for_channel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> arm_compute::test::get_format_for_channel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Look up the format corresponding to a channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Channel type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Format that contains the given channel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00145">145</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">switch</span>(channel)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> Channel::R:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">case</span> Channel::G:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">case</span> Channel::B:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> Format::RGB888;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::R</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assets_library_8cpp_source.xhtml#l00277">AssetsLibrary::fill()</a>, and <a class="el" href="_assets_library_8cpp_source.xhtml#l00500">AssetsLibrary::get()</a>.</p>

</div>
</div>
<a id="ae47155d6186155ec4da9295764b3c05a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae47155d6186155ec4da9295764b3c05a">&#9670;&nbsp;</a></span>get_typestring()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::get_typestring </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Obtain numpy type string from DataType. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>numpy type string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00510">510</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="comment">// Check endianness</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>        *c = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;i);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    std::string        endianness;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">if</span>(*c == 1)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&lt;&quot;</span>);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&gt;&quot;</span>);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> std::string no_endianness(<span class="stringliteral">&quot;|&quot;</span>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160; </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint8_t));</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint16_t));</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int16_t));</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int32_t));</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint64_t));</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int64_t));</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">double</span>));</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    }</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::SIZET</a>, <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

</div>
</div>
<a id="a24d8c0391cfa38e78969b6ad97c0ff09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24d8c0391cfa38e78969b6ad97c0ff09">&#9670;&nbsp;</a></span>index2coord()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> arm_compute::test::index2coord </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a linear index into n-dimensional coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Linear index specifying the i-th element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>n-dimensional coordinates. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00359">359</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordtype">int</span> num_elements = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(index &lt; 0 || index &gt;= num_elements, <span class="stringliteral">&quot;Index has to be in [0, num_elements]&quot;</span>);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_elements == 0, <span class="stringliteral">&quot;Cannot create coordinate from empty shape&quot;</span>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    Coordinates coord{ 0 };</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() - 1; d &gt;= 0; --d)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        num_elements /= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[d];</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        coord.set(d, index / num_elements);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        index %= num_elements;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">return</span> coord;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00672">AssetsLibrary::fill()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00535">AssetsLibrary::fill_boxes()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00587">AssetsLibrary::fill_with_generator()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="reference_2_permute_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::permute()</a>, <a class="el" href="reference_2_reverse_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reverse()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00070">arm_compute::test::validation::transpose()</a>, <a class="el" href="_validation_8cpp_source.xhtml#l00177">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00460">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a856b55fc20ddcbdbeb84c35ae27bedac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a856b55fc20ddcbdbeb84c35ae27bedac">&#9670;&nbsp;</a></span>is_in_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::test::is_in_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>coord</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a coordinate is within a valid region. </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00406">406</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; Coordinates::num_max_dimensions; ++d)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordflow">if</span>(coord[d] &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">start</a>(d) || coord[d] &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">end</a>(d))</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00193">ValidRegion::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00187">ValidRegion::start()</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="_validation_8h_source.xhtml#l00380">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00460">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a69835710fc772315f4e65ce156034530"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69835710fc772315f4e65ce156034530">&#9670;&nbsp;</a></span>join() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple values. </p>
<p>All values are converted to std::string using std::to_string before being joined.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">136</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">join</a>(std::forward&lt;T&gt;(first), std::forward&lt;T&gt;(last), separator, <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">support::cpp11::to_string</a>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00093">join()</a>, and <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>.</p>

</div>
</div>
<a id="a898a0423aace06af0f3a18a26a972a1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a898a0423aace06af0f3a18a26a972a1a">&#9670;&nbsp;</a></span>join() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UnaryOp &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple values. </p>
<p>All values are converted to std::string using the provided operation before being joined.</p>
<p>The signature of op has to be equivalent to std::string op(const T::value_type &amp;val).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Conversion function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00117">117</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(std::next(first), last, op(*first), [&amp;separator, &amp;op](<span class="keyword">const</span> std::string &amp; base, <span class="keyword">const</span> <span class="keyword">typename</span> T::value_type &amp; suffix)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> base + separator + op(suffix);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    });</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>.</p>

</div>
</div>
<a id="aa18932675cbb5eb9c9dbf8ff4d7106c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa18932675cbb5eb9c9dbf8ff4d7106c7">&#9670;&nbsp;</a></span>join() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00093">93</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(std::next(first), last, *first, [&amp;separator](<span class="keyword">const</span> std::string &amp; base, <span class="keyword">const</span> std::string &amp; suffix)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> base + separator + suffix;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    });</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">join()</a>, and <a class="el" href="_j_s_o_n_printer_8cpp_source.xhtml#l00181">JSONPrinter::print_measurements()</a>.</p>

</div>
</div>
<a id="adc5ecf4ff53f742b81ee0f67992ecf30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5ecf4ff53f742b81ee0f67992ecf30">&#9670;&nbsp;</a></span>operator&lt;&lt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; arm_compute::test::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_printer_8h_source.xhtml#l00131">131</a> of file <a class="el" href="_simple_tensor_printer_8h_source.xhtml">SimpleTensorPrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    os &lt;&lt; <a class="code" href="namespacearm__compute_1_1test.xhtml#a4426b0b55d7810717fbdaf2e5ad5c68c">prettify_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, IOFormatInfo{ IOFormatInfo::PrintRegion::NoPadding });</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0a23bb2bd76e5604aace0bdaa7b279a8fd">IOFormatInfo::NoPadding</a>, <a class="el" href="_simple_tensor_printer_8h_source.xhtml#l00041">prettify_tensor()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a4426b0b55d7810717fbdaf2e5ad5c68c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4426b0b55d7810717fbdaf2e5ad5c68c">&#9670;&nbsp;</a></span>prettify_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::prettify_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>io_fmt</em> = <code><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>{&#160;<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0a23bb2bd76e5604aace0bdaa7b279a8fd">IOFormatInfo::PrintRegion::NoPadding</a>&#160;}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_printer_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_simple_tensor_printer_8h_source.xhtml">SimpleTensorPrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                                                                        { IOFormatInfo::PrintRegion::NoPadding })</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.data() == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    RawTensor <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>(std::move(SimpleTensor&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)));</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    TensorInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.shape(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.num_channels(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data_type());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>      slices2D     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape().total_size_upper(2);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> Strides     strides      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>      num_channels = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_channels();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::ostringstream os;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Set precision</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>) &amp;&amp; (io_fmt.precision_type != IOFormatInfo::PrecisionType::Default))</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordtype">int</span> precision = io_fmt.precision;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">if</span>(io_fmt.precision_type == IOFormatInfo::PrecisionType::Full)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            precision = std::numeric_limits&lt;float&gt;().max_digits10;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        os.precision(precision);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Define region to print</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">size_t</span> print_width  = 0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">size_t</span> print_height = 0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">int</span>    start_offset = 0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">switch</span>(io_fmt.print_region)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">case</span> IOFormatInfo::PrintRegion::NoPadding:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            print_width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dimension(0);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            print_height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dimension(1);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            start_offset = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset_first_element_in_bytes();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">case</span> IOFormatInfo::PrintRegion::ValidRegion:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            print_width  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().shape.x();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            print_height = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().shape.y();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            start_offset = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset_element_in_bytes(Coordinates(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().anchor.x(),</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().anchor.y()));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">case</span> IOFormatInfo::PrintRegion::Full:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            print_width  = padding.left + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dimension(0) + padding.right;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            print_height = padding.top + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dimension(1) + padding.bottom;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            start_offset = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset_first_element_in_bytes()) - padding.top * strides[1] - padding.left * strides[0];</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    print_width = print_width * num_channels;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Set pointer to start</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> uint8_t *ptr = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.data() + start_offset;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Start printing</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; slices2D; ++i)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// Find max_width of elements in slice to align columns</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordtype">int</span> max_element_width = 0;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span>(io_fmt.align_columns)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = i * strides[2];</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; print_height; ++h)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                max_element_width = std::max&lt;int&gt;(max_element_width, max_consecutive_elements_display_width(os, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, print_width));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += strides[1];</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Print slice</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = i * strides[2];</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; print_height; ++h)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                print_consecutive_elements(os, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, print_width, max_element_width, io_fmt.element_delim);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += strides[1];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                os &lt;&lt; io_fmt.row_delim;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            os &lt;&lt; io_fmt.row_delim;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> os.str();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0a23bb2bd76e5604aace0bdaa7b279a8fd">IOFormatInfo::NoPadding</a>.</p>

<p class="reference">Referenced by <a class="el" href="_simple_tensor_printer_8h_source.xhtml#l00131">operator&lt;&lt;()</a>.</p>

</div>
</div>
<a id="ad93bb148a873f19ad7692756e59617f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad93bb148a873f19ad7692756e59617f4">&#9670;&nbsp;</a></span>round_half_even()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::round_half_even </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>std::numeric_limits&lt;T&gt;::epsilon()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to nearest even. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>precision.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00082">82</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    T positive_value = std::abs(value);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    T ipart          = 0;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::modf(positive_value, &amp;ipart);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// If &#39;value&#39; is exactly halfway between two integers</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span>(std::abs(positive_value - (ipart + 0.5f)) &lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// If &#39;ipart&#39; is even then return &#39;ipart&#39;</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span>(std::fmod(ipart, 2.f) &lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(ipart, value);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Else return the nearest even integer</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(std::ceil(ipart + 0.5f), value);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Otherwise use the usual round to closest</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(positive_value), value);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00231">arm_compute::support::cpp11::copysign()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00185">arm_compute::support::cpp11::round()</a>.</p>

</div>
</div>
<a id="af4bcf30f8c56f547f66d61c7c5ae01db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4bcf30f8c56f547f66d61c7c5ae01db">&#9670;&nbsp;</a></span>round_half_up()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::round_half_up </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to positive infinity. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00069">69</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> std::floor(value + 0.5f);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4965b2f6821e0cf0afee738158bd8377"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4965b2f6821e0cf0afee738158bd8377">&#9670;&nbsp;</a></span>saturate_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::saturate_cast </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Saturate a value of type T against the numeric limits of type U. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value to be saturated.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>saturated value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00313">313</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span>(val &gt; <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(std::numeric_limits&lt;U&gt;::max()))</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        val = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(std::numeric_limits&lt;U&gt;::max());</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">if</span>(val &lt; <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;U&gt;::lowest</a>()))</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        val = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;U&gt;::lowest</a>());</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> val;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00278">arm_compute::support::cpp11::lowest()</a>.</p>

</div>
</div>
<a id="ab53ce08b9e532e8b076c9831908597e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab53ce08b9e532e8b076c9831908597e6">&#9670;&nbsp;</a></span>set_tensor_dynamic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::set_tensor_dynamic </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the dimension states of the given tensor to dynamic. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>The tensor to set to dynamic state </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00617">617</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>.info()-&gt;set_tensor_dims_state(<a class="code" href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">construct_dynamic_dims_state</a>());</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2_utils_8h_source.xhtml#l00597">construct_dynamic_dims_state()</a>, and <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>.</p>

</div>
</div>
<a id="af8e1c85e80e1784f08ca535a18feacf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8e1c85e80e1784f08ca535a18feacf2">&#9670;&nbsp;</a></span>set_tensor_static()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::set_tensor_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the dimension states of the given tensor to state. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>The tensor to set to static state </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00628">628</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>.info()-&gt;set_tensor_dims_state(<a class="code" href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">construct_static_dims_state</a>());</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2_utils_8h_source.xhtml#l00606">construct_static_dims_state()</a>, and <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>.</p>

</div>
</div>
<a id="a8103df0e6c416f55f40106aa49072b42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8103df0e6c416f55f40106aa49072b42">&#9670;&nbsp;</a></span>shape_to_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> arm_compute::test::shape_to_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>a_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em> = <code><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a valid region based on tensor shape, border mode and border size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a_shape</td><td>Shape used as size of the valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>(Optional) Boolean indicating if the border mode is undefined. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_size</td><td>(Optional) Border size used to specify the region to exclude.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A valid region starting at (0, 0, ...) with size of <code>shape</code> if <code>border_undefined</code> is false; otherwise return A valid region starting at (<code>border_size.left</code>, <code>border_size.top</code>, ...) with reduced size of <code>shape</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00219">219</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    ValidRegion <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>{ Coordinates(), a_shape };</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span>(border_undefined)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() &lt; 2);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        anchor.set(0, border_size.left);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        anchor.set(1, border_size.top);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_x = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x()) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.left) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.right));</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_y = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y()) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.top) - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(border_size.bottom));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, valid_shape_x);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, valid_shape_y);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">valid_region</a>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, and <a class="el" href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="_validation_8h_source.xhtml#l00366">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00373">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a33ac4283b9c9c207c968dbd286a87e50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33ac4283b9c9c207c968dbd286a87e50">&#9670;&nbsp;</a></span>sleep_in_seconds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::sleep_in_seconds </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>seconds</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Makes the calling thread to sleep for a specified number of seconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">seconds</td><td>Amount of seconds to sleep. Will return immediately if less or equal to zero. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="tests_2framework_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// Early return on non-positive input</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span>(seconds &lt;= 0.f)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#ifndef NO_MULTI_THREADING</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> int64_t us = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(seconds * 1e6);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::this_thread::sleep_for(std::chrono::microseconds(us));</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* NO_MULTI_THREADING */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00546">Framework::run()</a>.</p>

</div>
</div>
<a id="a1e6934e95738573214c2ce1d6648d116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e6934e95738573214c2ce1d6648d116">&#9670;&nbsp;</a></span>store_value_with_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::store_value_with_data_type </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write the value after casting the pointer according to <code>data_type</code>. </p>
<dl class="section warning"><dt>Warning</dt><dd>The type of the value must match the specified data type.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to memory where the <code>value</code> will be written. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value that will be written. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type that will be written. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00252">252</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint16_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint64_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int64_t *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">case</span> DataType::BFLOAT16:</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a> *<span class="keyword">&gt;</span>(ptr) = <a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a>(value);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">double</span> *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">size_t</span> *<span class="keyword">&gt;</span>(ptr) = value;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::BFLOAT16</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::SIZET</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assets_library_8h_source.xhtml#l00658">AssetsLibrary::fill()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00535">AssetsLibrary::fill_boxes()</a>, and <a class="el" href="_assets_library_8h_source.xhtml#l00587">AssetsLibrary::fill_with_generator()</a>.</p>

</div>
</div>
<a id="a28edc8880596d14c099f3c2509efc8b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28edc8880596d14c099f3c2509efc8b3">&#9670;&nbsp;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor1</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be swapped. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor2</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be swapped. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00460">460</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="comment">// Use unqualified call to swap to enable ADL. But make std::swap available</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="comment">// as backup.</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">std::swap</a>;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._shape, tensor2._shape);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._format, tensor2._format);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._data_type, tensor2._data_type);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._num_channels, tensor2._num_channels);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._quantization_info, tensor2._quantization_info);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._buffer, tensor2._buffer);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_simple_tensor_8h_source.xhtml#l00309">SimpleTensor&lt; uint8_t &gt;::operator=()</a>.</p>

</div>
</div>
<a id="a5967bb62a612be6b300aa96049a2166a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5967bb62a612be6b300aa96049a2166a">&#9670;&nbsp;</a></span>sync_if_necessary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::sync_if_necessary </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sync if necessary. </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00558">558</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;{</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>() &amp;&amp; std::is_same&lt;<span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::decay&lt;TensorType&gt;::type</a>, <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a>&gt;::value)</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        CLScheduler::get().sync();</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00236">arm_compute::opencl_is_available()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00071">CLScheduler::sync()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a619736e19838c20cac8f668ab13aae37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a619736e19838c20cac8f668ab13aae37">&#9670;&nbsp;</a></span>sync_tensor_if_necessary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::sync_tensor_if_necessary </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sync tensor if necessary. </p>
<dl class="section note"><dt>Note</dt><dd>: If the destination tensor not being used on OpenGL ES, GPU will optimize out the operation.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be sync. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00575">575</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;{</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="ad98da810dec350d13c281c15ce2f8590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad98da810dec350d13c281c15ce2f8590">&#9670;&nbsp;</a></span>to_string()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::to_string </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_printer_8h_source.xhtml#l00138">138</a> of file <a class="el" href="_simple_tensor_printer_8h_source.xhtml">SimpleTensorPrinter.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>.</p>

</div>
</div>
<a id="a5b67cbf475b1e1d3bec9b0b937fdafac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b67cbf475b1e1d3bec9b0b937fdafac">&#9670;&nbsp;</a></span>tolower()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::tolower </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string to lower case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">string</td><td>To be converted string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Lower case string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00147">147</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::transform(<span class="keywordtype">string</span>.begin(), <span class="keywordtype">string</span>.<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), <span class="keywordtype">string</span>.begin(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">std::tolower</a>(c);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    });</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> string;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dataset_modes_8cpp_source.xhtml#l00036">arm_compute::test::framework::dataset_mode_from_name()</a>, <a class="el" href="_instruments_8cpp_source.xhtml#l00037">arm_compute::test::framework::instrument_type_from_name()</a>, <a class="el" href="_printers_8cpp_source.xhtml#l00037">arm_compute::test::framework::log_format_from_name()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00037">arm_compute::test::framework::log_level_from_name()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="af90c2445eb8a45fd74b11c574c8cb6b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af90c2445eb8a45fd74b11c574c8cb6b9">&#9670;&nbsp;</a></span>fixed_library</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt; fixed_library</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="main_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="main_8cpp_source.xhtml">main.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>.</p>

</div>
</div>
<a id="a71326f0909d77386e29b511e1990a11f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71326f0909d77386e29b511e1990a11f">&#9670;&nbsp;</a></span>library</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt; library</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="main_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="main_8cpp_source.xhtml">main.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="_accumulate_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::accumulate_squared()</a>, <a class="el" href="_accumulate_8cpp_source.xhtml#l00058">arm_compute::test::validation::reference::accumulate_weighted()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00331">arm_compute::test::validation::add_padding_x()</a>, <a class="el" href="_c_l_2_p_relu_layer_8cpp_source.xhtml#l00103">arm_compute::test::validation::compute_float_reference()</a>, <a class="el" href="_c_l_2_p_relu_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::compute_float_target_in_place()</a>, <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="tests_2validation_2dynamic__fusion_2_utils_8h_source.xhtml#l00056">arm_compute::test::validation::utils::fill()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00045">fill_tensors()</a>, <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>, and <a class="el" href="tests_2validation_2_n_e_o_n_2_fully_connected_layer_8cpp_source.xhtml#l00204">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="abb222b6342b2b9056ec65056984d5e21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb222b6342b2b9056ec65056984d5e21">&#9670;&nbsp;</a></span>parameters</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_parameters_library.xhtml">ParametersLibrary</a> &gt; parameters</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_framework_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_framework_8cpp_source.xhtml">Framework.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00533">DepthwiseDepthfirstMultiplier&lt; TInput, TWeight, TOutput, TAccum, is_generic, OutputStage &gt;::compute_tile_padded()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00337">StrategyType&lt; IsGeneric, TInput, TWeight, TOutput, TAccum, OutputStage &gt;::execute()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00358">StrategyType&lt; true, TInput, TWeight, TOutput, TAccum, OutputStage &gt;::execute()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00381">StrategyType&lt; false, TInput, TWeight, TOutput, int32_t, arm_gemm::Requantize32 &gt;::execute()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00402">StrategyType&lt; true, TInput, TWeight, TOutput, int32_t, arm_gemm::Requantize32 &gt;::execute()</a>, <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>, and <a class="el" href="_multithreaded_8cpp_source.xhtml#l00046">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00236">OpenCL.cpp:236</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml_a6177244142d86cabba1c4f7991d1e091"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a6177244142d86cabba1c4f7991d1e091">arm_compute::experimental::dynamic_fusion::Conv2dAttributes::pad</a></div><div class="ttdeci">Conv2dAttributes &amp; pad(const Padding2D &amp;pad)</div><div class="ttdoc">Set padding.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8cpp_source.xhtml#l00033">Conv2dAttributes.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a8ab69f8e70173ef637e48967af41c8ae"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a8ab69f8e70173ef637e48967af41c8ae">arm_compute::test::construct_dims_state</a></div><div class="ttdeci">ITensorInfo::TensorDimsState construct_dims_state(int32_t value)</div><div class="ttdoc">Construct and return object for dimensions' state filled with the given value.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00586">Utils.h:586</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_af2e9bf81bb04ae2c425eea1f2db6dc11"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#af2e9bf81bb04ae2c425eea1f2db6dc11">arm_compute::test::construct_dynamic_dims_state</a></div><div class="ttdeci">ITensorInfo::TensorDimsState construct_dynamic_dims_state()</div><div class="ttdoc">Construct and return object for dimensions' state filled with the value for dynamic state.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00597">Utils.h:597</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1utils_xhtml_aba1951c4bc7afc65e9ef8b1b2c194b94"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">arm_compute::test::validation::utils::fill</a></div><div class="ttdeci">void fill(U &amp;&amp;tensor, int seed, AssetsLibrary *library)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2dynamic__fusion_2_utils_8h_source.xhtml#l00056">Utils.h:56</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00482">Acl.hpp:482</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_ab0cf4577fe9753a2dde691439c0c4581"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ab0cf4577fe9753a2dde691439c0c4581">arm_compute::test::construct_static_dims_state</a></div><div class="ttdeci">ITensorInfo::TensorDimsState construct_static_dims_state()</div><div class="ttdoc">Construct and return object for dimensions' state filled with the value for non-dynamic state.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00606">Utils.h:606</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac17b415bc5b5a1f5072ae28aab0f2013"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac17b415bc5b5a1f5072ae28aab0f2013">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_scale_8cpp_source.xhtml#l00214">Scale.cpp:214</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a></div><div class="ttdoc">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8h_source.xhtml#l00042">Conv2dAttributes.h:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml_acb4fc314422ba7c6bc7a761ba7c6111d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#acb4fc314422ba7c6bc7a761ba7c6111d">arm_compute::experimental::dynamic_fusion::Conv2dAttributes::stride</a></div><div class="ttdeci">Conv2dAttributes &amp; stride(const Size2D &amp;stride)</div><div class="ttdoc">Set stride.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8cpp_source.xhtml#l00042">Conv2dAttributes.cpp:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00036">CoreTypes.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00036">Rounding.cpp:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a4426b0b55d7810717fbdaf2e5ad5c68c"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4426b0b55d7810717fbdaf2e5ad5c68c">arm_compute::test::prettify_tensor</a></div><div class="ttdeci">std::string prettify_tensor(const SimpleTensor&lt; T &gt; &amp;input, const IOFormatInfo &amp;io_fmt=IOFormatInfo{ IOFormatInfo::PrintRegion::NoPadding })</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_printer_8h_source.xhtml#l00041">SimpleTensorPrinter.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a69835710fc772315f4e65ce156034530"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">arm_compute::test::join</a></div><div class="ttdeci">std::string join(T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator)</div><div class="ttdoc">Helper function to concatenate multiple values.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00136">Utils.h:136</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_ac882ca3f500a8e83c76a8acc59831255"><div class="ttname"><a href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">arm_gemm::bfloat16</a></div><div class="ttdeci">arm_compute::bfloat16 bfloat16</div><div class="ttdef"><b>Definition:</b> <a href="bfloat_8hpp_source.xhtml#l00030">bfloat.hpp:30</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_aae139363fa58e04c3d391339e820a06f"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">arm_compute::ValidRegion::start</a></div><div class="ttdeci">int start(unsigned int d) const</div><div class="ttdoc">Return the start of the valid region for the given dimension d.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00187">Types.h:187</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a5b67cbf475b1e1d3bec9b0b937fdafac"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">arm_compute::test::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00147">Utils.h:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">NEBatchNormalizationLayerKernel.cpp:50</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00077">main.cpp:77</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a1ce487275e4d9e2072af217789dcdcc5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a1ce487275e4d9e2072af217789dcdcc5">arm_compute::test::framework::apply_impl</a></div><div class="ttdeci">void apply_impl(O *obj, F &amp;&amp;func, const std::tuple&lt; As... &gt; &amp;args, detail::sequence&lt; S... &gt;)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00072">Utils.h:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes_xhtml_a5d4c902de99dd0a171d8407a20010093"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#a5d4c902de99dd0a171d8407a20010093">arm_compute::experimental::dynamic_fusion::Conv2dAttributes::dilation</a></div><div class="ttdeci">Conv2dAttributes &amp; dilation(const Size2D &amp;dilation)</div><div class="ttdoc">Set dilation.</div><div class="ttdef"><b>Definition:</b> <a href="_conv2d_attributes_8cpp_source.xhtml#l00051">Conv2dAttributes.cpp:51</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4467b302fc9ec312c40580336ab783da"><div class="ttname"><a href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a></div><div class="ttdeci">BorderSize PaddingSize</div><div class="ttdoc">Container for 2D padding size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00346">Types.h:346</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00223">Types.h:223</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a92a5aaf033153828aef41d3354c204d9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">arm_compute::test::foldl</a></div><div class="ttdeci">I foldl(F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</div><div class="ttdoc">Fold left.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00205">Utils.h:205</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a062b90d0a8defe70b0cd19300fee2825"><div class="ttname"><a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const ClComponentElementwiseBinary::Attributes::ElementwiseOp &amp;op)</div><div class="ttdoc">Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...</div><div class="ttdef"><b>Definition:</b> <a href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">ElementwiseBinary.h:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a28096f8372c0ad762864c790917375e2"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">arm_compute::support::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00231">ToolchainSupport.h:231</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00304">DataTypeUtils.h:304</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a1cb8fae6eb760594815b62ec5af5eca2"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">arm_compute::ValidRegion::end</a></div><div class="ttdeci">int end(unsigned int d) const</div><div class="ttdoc">Return the end of the valid region for the given dimension d.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00193">Types.h:193</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a28edc8880596d14c099f3c2509efc8b3"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">arm_compute::test::swap</a></div><div class="ttdeci">void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00460">SimpleTensor.h:460</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="anamespaceupdate__supported__ops_xhtml_a387137c43ed9616d39ba90e890d181eb"><div class="ttname"><a href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">update_supported_ops.format</a></div><div class="ttdeci">format</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops.py:405</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00222">Types.h:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00041">AsymmHelpers.cpp:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:15:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
