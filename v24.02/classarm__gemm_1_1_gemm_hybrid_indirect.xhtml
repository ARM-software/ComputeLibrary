<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_hybrid_indirect.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_hybrid_indirect__coll__graph.svg" width="246" height="231"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac56a22200f2dc32c4a166ffb51fd6118"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac56a22200f2dc32c4a166ffb51fd6118">GemmHybridIndirect</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;)=delete</td></tr>
<tr class="separator:ac56a22200f2dc32c4a166ffb51fd6118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f134875119ebf78406ddc0f49eb5e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a98f134875119ebf78406ddc0f49eb5e8">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;)=delete</td></tr>
<tr class="separator:a98f134875119ebf78406ddc0f49eb5e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf3825f729cb74269c80674c27985902"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aaf3825f729cb74269c80674c27985902">GemmHybridIndirect</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:aaf3825f729cb74269c80674c27985902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf49fb074e8b7b29cb88fc2f8db0113b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acf49fb074e8b7b29cb88fc2f8db0113b">GemmHybridIndirect</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</td></tr>
<tr class="separator:acf49fb074e8b7b29cb88fc2f8db0113b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a> () const override</td></tr>
<tr class="separator:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a> () const override</td></tr>
<tr class="separator:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d37407e8d582183b35dedbf7fa43b43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">execute</a> (const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;work_range, const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;, int) override</td></tr>
<tr class="memdesc:a1d37407e8d582183b35dedbf7fa43b43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main execute member fucntion.  <a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">More...</a><br /></td></tr>
<tr class="separator:a1d37407e8d582183b35dedbf7fa43b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa64943c3fd124c455d3c30599d0f663e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a> () const override</td></tr>
<tr class="separator:aa64943c3fd124c455d3c30599d0f663e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae716040d875abeeba60aa4a6b73363"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:a0ae716040d875abeeba60aa4a6b73363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae385dce1a98e03f0a3ca311f031e5110"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:ae385dce1a98e03f0a3ca311f031e5110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc55eb5049f295e8ea170a9e4bf8d2f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2">pretranspose_B_array_part</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride, size_t start, size_t end) override</td></tr>
<tr class="separator:acc55eb5049f295e8ea170a9e4bf8d2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f282c5814fcd207308c4737a1fc567b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a> (const int32_t *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, size_t bias_multi_stride) override</td></tr>
<tr class="separator:a4f282c5814fcd207308c4737a1fc567b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82b688818137467809617daf73ffdc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a82b688818137467809617daf73ffdc11">set_indirect_parameters</a> (size_t string_len, const To *const *const *ptr) override</td></tr>
<tr class="separator:a82b688818137467809617daf73ffdc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">set_convolution_parameters</a> (<a class="el" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a> parms) override</td></tr>
<tr class="separator:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cde60064c88a363415fc0639d09cc3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a7cde60064c88a363415fc0639d09cc3e">get_config</a> () override</td></tr>
<tr class="separator:a7cde60064c88a363415fc0639d09cc3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon&lt; To, Tr &gt;</a></td></tr>
<tr class="memitem:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">set_arrays</a> (const To *A, const int lda, const int A_batch_stride, const int A_multi_stride, const To *B, const int ldb, const int B_multi_stride, Tr *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const Tr *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride)</td></tr>
<tr class="separator:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">set_arrays_generic</a> (const void *A, const int lda, const int A_batch_stride, const int A_multi_stride, const void *B, const int ldb, const int B_multi_stride, void *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const void *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride) override</td></tr>
<tr class="separator:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d4b10407385edb146b05c9df9a9f4b inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a06d4b10407385edb146b05c9df9a9f4b">pretranspose_B_array_generic</a> (void *out, const void *in, const int row_stride, const int multi_stride) override</td></tr>
<tr class="separator:a06d4b10407385edb146b05c9df9a9f4b inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4359651317954ea79919cc9823097947 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a4359651317954ea79919cc9823097947">pretranspose_B_array_part_generic</a> (void *out, const void *in, const int row_stride, const int multi_stride, size_t start, size_t end) override</td></tr>
<tr class="separator:a4359651317954ea79919cc9823097947 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">set_indirect_parameters_generic</a> (size_t sz, const void *const *const *ptr) override</td></tr>
<tr class="separator:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_i_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_i_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml">IGemmCommon</a></td></tr>
<tr class="memitem:a568b1d289dcf3226443fd87e8a261f91 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">set_nthreads</a> (int)</td></tr>
<tr class="separator:a568b1d289dcf3226443fd87e8a261f91 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0a90e40986e0daec072bfbfb89aa17d inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">get_working_size</a> () const</td></tr>
<tr class="separator:ab0a90e40986e0daec072bfbfb89aa17d inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e424d4bc279d4bb932d2a26f66ec418 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">set_working_space</a> (void *)</td></tr>
<tr class="separator:a5e424d4bc279d4bb932d2a26f66ec418 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">~IGemmCommon</a> ()</td></tr>
<tr class="separator:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1f2f50f190980ff2ee79b62300a85c20"><td class="memTemplParams" colspan="2">template&lt;typename perf_type &gt; </td></tr>
<tr class="memitem:a1f2f50f190980ff2ee79b62300a85c20"><td class="memTemplItemLeft" align="right" valign="top">static uint64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1f2f50f190980ff2ee79b62300a85c20">estimate_cycles</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, const OutputStage &amp;os={})</td></tr>
<tr class="separator:a1f2f50f190980ff2ee79b62300a85c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr, typename OutputStage = Nothing, bool SeparateQuantize = false, bool FixedFormat = false&gt;<br />
class arm_gemm::GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00264">264</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ac56a22200f2dc32c4a166ffb51fd6118"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac56a22200f2dc32c4a166ffb51fd6118">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaf3825f729cb74269c80674c27985902"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf3825f729cb74269c80674c27985902">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00389">389</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;              : _args(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), _os(os), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll())),</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                _k_block(compute_k_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _n_block(compute_n_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os)),</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, _n_block), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00154">GemmArgs::_cfg</a>.</p>

</div>
</div>
<a id="acf49fb074e8b7b29cb88fc2f8db0113b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf49fb074e8b7b29cb88fc2f8db0113b">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00403">403</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;              : _args(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll())),</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                _k_block(compute_k_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _n_block(compute_n_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches,</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, _n_block), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00154">GemmArgs::_cfg</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00591">591</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                             {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00595">595</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                                  {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>) &amp;&amp; (_B_transposed==<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f2f50f190980ff2ee79b62300a85c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f2f50f190980ff2ee79b62300a85c20">&#9670;&nbsp;</a></span>estimate_cycles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint64_t estimate_cycles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00751">751</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                                                                  {}) {</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keyword">const</span> PerformanceParameters params = strategy::template get_performance_parameters&lt;perf_type&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160; </div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="comment">// Note: Current hybrid kernels don&#39;t actually round up height (they</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="comment">// have paths for each possible height).  Might need to make this</span></div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="comment">// configurable in future.</span></div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        uint64_t total_macs = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordtype">float</span> mac_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.kernel_macs_cycle;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160; </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="comment">// TODO: A bit of a kludge here: current hybrid kernels incur extra</span></div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="comment">// overhead where the width is not a multiple of kernel width.  It&#39;s</span></div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <span class="comment">// most noticable where the overall width is quite low, so add 15%</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="comment">// penalty for such widths.</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        if ((<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &lt; strategy::out_width()) || (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &gt; strategy::out_width() &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &lt; 2*strategy::out_width())) {</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            mac_cycles *= 1.15f;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        }</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160; </div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        uint64_t total_cycles = mac_cycles;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160; </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <span class="comment">// Quantizing kernels with separate quantize need to add in the extra stages.</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value &amp;&amp; SeparateQuantize) {</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="keyword">const</span> Requantize32 *qp = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Requantize32 *<span class="keyword">&gt;</span>(&amp;os);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160; </div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            <span class="comment">// Row sums: need to consider each value in A (batch * multi * M * K)...</span></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            uint64_t rowsum_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            <span class="comment">// ... but row sums are skipped if B offset==0.</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            <span class="keywordflow">if</span> (qp-&gt;b_offset == 0) {</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                rowsum_bytes = 0;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160; </div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="comment">// Use &quot;prepare bytes per cycle&quot; to store &quot;row sum values per cycle&quot;.</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keywordtype">float</span> rowsum_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(rowsum_bytes) / params.prepare_bytes_cycle;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160; </div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            <span class="comment">// Requantize: need to consider each value in C (batch * multi * M * N)</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            uint64_t requantize_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160; </div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            <span class="comment">// Use &quot;merge bytes per cycle&quot; to store &quot;requantize values per cycle&quot;.</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordtype">float</span> requantize_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(requantize_bytes) / params.merge_bytes_cycle;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="comment">// Recalculate total_cycles with the extra components.</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            total_cycles = mac_cycles + rowsum_cycles + requantize_cycles;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        }</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keywordflow">return</span> total_cycles;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d37407e8d582183b35dedbf7fa43b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d37407e8d582183b35dedbf7fa43b43">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>work_range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>thread_locator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threadid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Main execute member fucntion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">work_range</td><td>specifies the range of work we want to be computed, total range defined by <a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thread_locator</td><td>where are we inside of the thread space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">threadid</td><td>a unique threadid </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a7686815e0e1a7ed5d703a2f85ecd3b65">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00427">427</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                                                               {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        profiler prof;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        std::vector&lt;const To *&gt;         in_row_ptrs;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        std::vector&lt;const To * const *&gt; in_row_strings;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        std::vector&lt;unsigned int&gt;       string_lengths;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="comment">// In convolution mode, we need input pointers.</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">if</span> (_convolver) {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            in_row_ptrs = std::vector&lt;const To *&gt;(strategy::out_height() * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            in_row_strings = std::vector&lt;const To * const *&gt;(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>; i++) {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                in_row_strings[i] = &amp;(in_row_ptrs.data()[i * strategy::out_height()]);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="comment">// In any indirect mode, we need the string lengths.</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">_indirect_input</a>) {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            string_lengths = std::vector&lt;unsigned int&gt;(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, 0);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        assert(FixedFormat || _B_transposed);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        static_assert(std::is_same&lt;To, Tloi&gt;::value, <span class="stringliteral">&quot;gemm_native: Operand types must be the same.&quot;</span>);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">//        static_assert(std::is_same&lt;Tr, Tri&gt;::value, &quot;gemm_native: Result types must be the same.&quot;);</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="comment">/* For now, each work item implies all the K for a given output</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">         * pixel (so we don&#39;t need to synchronize access to the output</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">         * array).  So separate the loop over K blocks here.  */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax   = std::min(k0 + _k_block, _Ktotal);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0 == 0);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass = (kmax == _Ktotal);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_section = (k0 / _rounded_Ksize);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_offset  = (k0 % _rounded_Ksize);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = kern_k;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>=0;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = first_offset;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">_indirect_input</a>) {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <span class="keywordflow">while</span> (kleft) {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    <span class="comment">// When chopping into sections: the amount that goes into &#39;string_lengths&#39; is the amount to be</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    <span class="comment">// processed (excluding padding).  But the amount we subtract from &#39;kleft&#39; takes account of any</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    <span class="comment">// padding applied.</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    string_lengths[<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>] = std::min(kleft, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    kleft -= std::min(kleft, _rounded_Ksize - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>++;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>=0;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            }</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keyword">auto</span> p = _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">iterator</a>(work_range.get_position(0), work_range.get_position_end(0));</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">if</span> (p.done()) {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160; </div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="comment">// Process rows either &#39;out_height&#39; rows at a time, or do all valid rows at once with a single kernel call.</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="comment">// The separate quantizer path only handles one block of rows at a time (as it has to store sums and intermediate results).</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="comment">// THe convolution path only generates the pointers for one block of rows at a time.</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> process_all_rows = (!SeparateQuantize &amp;&amp; !_convolver);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_start = p.dim(0) * strategy::out_height();</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_end   = process_all_rows ? std::min(p.dim0_max() * strategy::out_height(), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>) : std::min(m_start + <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height(), _args._Msize);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">//                const unsigned int m_end   = std::min(m_start + strategy::out_height(), _args._Msize);</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch   = p.dim(1);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0      = p.dim(2) * _n_block;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nmax    = std::min(n0 + _n_block, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi   = p.dim(3);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160; </div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> Troi *b_panel;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keywordflow">if</span> (FixedFormat) {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    b_panel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Troi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) +</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                               (multi * this-&gt;_B_multi_stride) +</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                               ((n0 / stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                               (k0 * stripe_width&lt;strategy, FixedFormat&gt;::get());</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    b_panel = _B_transposed +</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                               (multi * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * _Ktotal) +</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                               (k0 * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width())) +</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                               (n0 * kern_k);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                IndirectOutputArg&lt;Tr&gt; out_arg(this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160; </div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(m_end - m_start) * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(nmax-n0, strategy::out_width()));</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <span class="keywordflow">if</span> (_indirect_buf) {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;#ifdef CYCLE_PROFILING</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                                 prof,</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;#endif</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                 strat, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>, string_lengths.data(),</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                 IndirectInputArg&lt;To&gt;(_indirect_buf + (multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>) + (batch * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>) + first_section, m_start, first_offset),</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                 !first_pass,</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                 <span class="comment">// Quantization parameters</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <span class="keyword">auto</span> conv_cols = _convolver-&gt;process_columns(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride), this-&gt;_lda, k0, kmax, _rounded_Ksize);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160; </div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos=0;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keyword">auto</span> conv_rows = conv_cols.process_rows(m_start, m_end - m_start);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    <span class="keywordflow">while</span> (!conv_rows.finished()) {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, conv_offset;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        assert(pos &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160; </div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        std::tie(width, conv_offset) = conv_rows.next_block(&amp;(in_row_ptrs[pos * strategy::out_height()]));</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                        <span class="keywordflow">if</span> (pos==0) {</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                            assert(conv_offset == first_offset);</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                        }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        assert(width == string_lengths[pos]);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                        pos++;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                    assert(pos == <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;#ifdef CYCLE_PROFILING</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                 prof,</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;#endif</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                 strat, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>, string_lengths.data(),</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                 IndirectInputArg&lt;To&gt;(in_row_strings.data(), 0, first_offset),</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                 !first_pass,</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                 <span class="comment">// Quantization parameters</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="comment">// Length to process.  This needs to exclude padding, but &#39;kmax&#39; potentially includes it.</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len = (std::min(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, kmax) - k0);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize, FixedFormat&gt;::run</a>(</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;#ifdef CYCLE_PROFILING</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                 prof,</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;#endif</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                 strat, 1, &amp;len,</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                 IndirectInputArg&lt;To&gt;(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride) + m_start * this-&gt;_lda + k0, this-&gt;_lda),</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, this-&gt;_ldb, out_arg,</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                 last_pass ? _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">_act</a> : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                                 !first_pass,</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                 <span class="comment">// Quantization parameters</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                 _os, _col_bias+(multi * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), n0);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            } <span class="keywordflow">while</span> (process_all_rows ? p.next_dim1() : p.next_dim0());</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        }</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00150">GemmArgs::_act</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00142">GemmArgs::_ci</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00149">GemmArgs::_indirect_input</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00146">GemmArgs::_Ksections</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00145">GemmArgs::_Ksize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00143">GemmArgs::_Msize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00147">GemmArgs::_nbatches</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00144">GemmArgs::_Nsize</a>, <a class="el" href="ndrange_8hpp_source.xhtml#l00173">NDCoordinate&lt; N &gt;::get_position()</a>, <a class="el" href="ndrange_8hpp_source.xhtml#l00187">NDCoordinate&lt; N &gt;::get_position_end()</a>, <a class="el" href="ndrange_8hpp_source.xhtml#l00128">NDRange&lt; D &gt;::iterator()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00107">sections</a>, and <a class="el" href="working__space_8hpp_source.xhtml#l00105">strategy</a>.</p>

</div>
</div>
<a id="aa64943c3fd124c455d3c30599d0f663e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa64943c3fd124c455d3c30599d0f663e">&#9670;&nbsp;</a></span>get_B_pretranspose_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretranspose_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a37e8736d7db6afdeab374b248599a573">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00617">617</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                                           {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">return</span> _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width());</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00148">GemmArgs::_nmulti</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00144">GemmArgs::_Nsize</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00634">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::pretranspose_B_array()</a>, and <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00638">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00599">599</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                                           {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">if</span> (FixedFormat) {</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        }</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="comment">// Start with actual pretransposed buffer...</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <span class="keywordtype">size_t</span> size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * _Ktotal * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <span class="keyword">sizeof</span>(Troi);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="comment">// Space for result row pointers (not strictly needed any more but retained for indirect output testing)</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        size += _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <span class="keyword">sizeof</span>(<span class="keyword">const</span> Tr *);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            size += get_col_sum_size();</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">return</span> size;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00143">GemmArgs::_Msize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00147">GemmArgs::_nbatches</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00148">GemmArgs::_nmulti</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00144">GemmArgs::_Nsize</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>.</p>

</div>
</div>
<a id="a7cde60064c88a363415fc0639d09cc3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cde60064c88a363415fc0639d09cc3e">&#9670;&nbsp;</a></span>get_config()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> get_config </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9a7fd4eeb44e91ea8f8ed53d21b9691f">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00818">818</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                                     {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        GemmConfig c;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160; </div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        c.method = <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14">GemmMethod::GEMM_HYBRID</a>;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        c.inner_block_size = _k_block;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        c.outer_block_size = _n_block;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        c.filter = get_type_name&lt;strategy&gt;();</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        c.weight_format = <a class="code" href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">get_weight_format</a>(kernel_weight_format&lt;strategy, FixedFormat&gt;::get(), <span class="keyword">sizeof</span>(To));</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160; </div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00108">GemmConfig::filter</a>, <a class="el" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14">arm_gemm::GEMM_HYBRID</a>, <a class="el" href="misc_8cpp_source.xhtml#l00040">arm_gemm::get_weight_format()</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00109">GemmConfig::inner_block_size</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00107">GemmConfig::method</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00110">GemmConfig::outer_block_size</a>, and <a class="el" href="arm__gemm_8hpp_source.xhtml#l00111">GemmConfig::weight_format</a>.</p>

</div>
</div>
<a id="a8f983ca114ef72d25515a8651ea1d0e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f983ca114ef72d25515a8651ea1d0e7">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a> get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an ndrange containing ranges of the compute space which can be broken up and parallelised over </dd></dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a06ec4bc84b2197e53f665ac9a31df52e">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00417">417</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                               {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keywordflow">return</span> { _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">total_size</a>() };</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="ndrange_8hpp_source.xhtml#l00133">NDRange&lt; D &gt;::total_size()</a>.</p>

</div>
</div>
<a id="a98f134875119ebf78406ddc0f49eb5e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98f134875119ebf78406ddc0f49eb5e8">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae385dce1a98e03f0a3ca311f031e5110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae385dce1a98e03f0a3ca311f031e5110">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#abcc95242f389687b72fa2ec63faec7e3">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00634">634</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                                                                                                              {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2">pretranspose_B_array_part</a>(in_buffer, B, ldb, B_multi_stride, 0, <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a>());</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00617">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::get_B_pretranspose_window_size()</a>, and <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00638">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="acc55eb5049f295e8ea170a9e4bf8d2f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc55eb5049f295e8ea170a9e4bf8d2f2">&#9670;&nbsp;</a></span>pretranspose_B_array_part()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array_part </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a5addbdb1697735d2024f01186c222841">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00638">638</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                                                                                                                             {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> &gt;= <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a>()) {</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <a class="code" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(in_buffer, B, ldb, B_multi_stride);</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        }</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160; </div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        Troi *buffer_base = <span class="keyword">reinterpret_cast&lt;</span>Troi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        _B_transposed = buffer_base;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160; </div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordtype">size_t</span> work_per_multi = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width());</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=(start / work_per_multi); multi&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a>; multi++) {</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="comment">// Work out which part of the window space this multi occupies,</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="comment">// skip to the next multi or exit as needed.</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <span class="keywordtype">size_t</span> wk_start = multi * work_per_multi;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordtype">size_t</span> wk_end = (multi + 1) * work_per_multi;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            assert(wk_end &gt; start);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160; </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keywordflow">if</span> (wk_start &gt;= <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>) {</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            }</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax=std::min(k0 + _k_block, _Ktotal);</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                <span class="comment">/* Figure out the size of each block. */</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = kmax - k0;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                <span class="comment">// Correct the N range and buffer base if we are not processing the whole block.</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                <span class="keywordtype">size_t</span> n_start = 0;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                <span class="keywordtype">size_t</span> n_end = _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                <span class="comment">// If we are not doing the first columns, update the buffer write position and starting N value.</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                <span class="keywordflow">if</span> (start &gt; wk_start) {</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    n_start = (start - wk_start) * strategy::out_width();</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                }</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160; </div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="comment">// If we are not doing the last items, update the final N value.</span></div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> &lt; wk_end) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                    n_end = (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - wk_start) * strategy::out_width();</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160; </div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                <span class="comment">// Set the buffer pointer</span></div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                Troi *buffer = buffer_base +</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                               (<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * (multi * _Ktotal + k0)) +</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                               (n_start * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_size, strategy::k_unroll()));</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160; </div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="keywordflow">if</span> (_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a> &gt; 1) {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    <span class="comment">// We need to insert padding at the end of each K section.</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                    <span class="comment">// The computation needed is a little delicate - the k0/kmax coordinates are expressed in</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    <span class="comment">// terms of the full, padded, _Ktotal.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    <span class="comment">// But we need to transform each section with reference to the original, unpadded, input, letting the</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                    <span class="comment">// transform pad each section as needed.</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160; </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    <span class="comment">// This is needed for computations below.</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_section_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, strategy::k_unroll());</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                    <span class="comment">// The expected output format is also an entire &lt;out_width&gt; columns interleaved, then the next set of</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                    <span class="comment">// columns, and so on.  This means, as we are breaking it up vertically, we have to do it one column at</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                    <span class="comment">// a time.</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0 = n_start; x0 &lt; n_end; x0 += strategy::out_width()) {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0 + strategy::out_width(), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160; </div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                        <span class="comment">// Track where we are and how much work is left.</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kpos  = k0;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = k_size;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                        <span class="keywordflow">while</span> (kleft) {</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                            <span class="comment">// Which section are we in?  Based on the rounded-up section size.</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_section_base = kpos / rounded_section_size;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                            <span class="comment">// How far into the section are we?</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_offset = kpos - (k_section_base * rounded_section_size);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160; </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                            <span class="comment">// We will either copy the rest of this section, or to the end of the requested length.</span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_length = std::min(_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> - k_offset, kleft);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160; </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                            strat.transforms.PrepareB(buffer, B + (multi * B_multi_stride), ldb,</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                                      x0, xmax,</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                                                      (k_section_base * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>) + k_offset,               <span class="comment">// K starting point - compute row to read based on our section and the true section length.</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                                      (k_section_base * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>) + k_offset + k_length);   <span class="comment">// K end point - starting point plus length computed above.</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                            <span class="comment">// We need to modify our position based on the ROUNDED version of what we just did.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padded_length = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_length, strategy::k_unroll());</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160; </div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                            buffer += strategy::out_width() * padded_length;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160; </div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                            kpos  += padded_length;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                            kleft -= padded_length;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                        }</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                    }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                    <span class="comment">// In the single K section case, can process the whole lot in one go.</span></div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                    strat.transforms.PrepareB(buffer, B + (multi * B_multi_stride), ldb,</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                              n_start, n_end, k0, std::min(kmax, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>));</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                }</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        }</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00142">GemmArgs::_ci</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00146">GemmArgs::_Ksections</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00145">GemmArgs::_Ksize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00148">GemmArgs::_nmulti</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00144">GemmArgs::_Nsize</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00617">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::get_B_pretranspose_window_size()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00621">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::requantize_bias()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>, and <a class="el" href="working__space_8hpp_source.xhtml#l00105">strategy</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00634">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::pretranspose_B_array()</a>.</p>

</div>
</div>
<a id="a0ae716040d875abeeba60aa4a6b73363"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ae716040d875abeeba60aa4a6b73363">&#9670;&nbsp;</a></span>requantize_bias()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void requantize_bias </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00621">621</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                                                                                         {</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160; </div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            Requantize32 *qp_ptr = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a>; i++) {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                <span class="comment">// The input is assumed not to have any padding between sections, so straightforward Ksize * Ksections computation gets the total size.</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(*qp_ptr, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, B + (i * B_multi_stride), ldb, _col_bias + (i * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>), _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a> * _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a>, i, 0);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00146">GemmArgs::_Ksections</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00145">GemmArgs::_Ksize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00148">GemmArgs::_nmulti</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00144">GemmArgs::_Nsize</a>, and <a class="el" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00638">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize, FixedFormat &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="ae7e6d203d0e3e46ebd521951b72c6f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7e6d203d0e3e46ebd521951b72c6f7c">&#9670;&nbsp;</a></span>set_convolution_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_convolution_parameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a>&#160;</td>
          <td class="paramname"><em>parms</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00813">813</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                                                          {</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        assert(parms.input_channels == _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>);</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        _convolver = std::unique_ptr&lt;convolver&lt;To&gt;&gt;(<span class="keyword">new</span> convolver&lt;To&gt;(parms));</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00145">GemmArgs::_Ksize</a>, and <a class="el" href="convolution__parameters_8hpp_source.xhtml#l00052">ConvolutionParameters::input_channels</a>.</p>

</div>
</div>
<a id="a82b688818137467809617daf73ffdc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82b688818137467809617daf73ffdc11">&#9670;&nbsp;</a></span>set_indirect_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_indirect_parameters </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>string_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *const *const *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00808">808</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                                                                            {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        assert(string_len == _args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        _indirect_buf = ptr;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00145">GemmArgs::_Ksize</a>.</p>

</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00740">740</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                                            {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Troi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f282c5814fcd207308c4737a1fc567b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f282c5814fcd207308c4737a1fc567b">&#9670;&nbsp;</a></span>set_quantized_bias()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_quantized_bias </td>
          <td>(</td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bias_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00799">799</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                                                                    {</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            Requantize32 *qp = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160; </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            qp-&gt;bias = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            qp-&gt;bias_multi_stride = bias_multi_stride;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00189">Requantize32::bias</a>, <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, and <a class="el" href="arm__gemm_8hpp_source.xhtml#l00190">Requantize32::bias_multi_stride</a>.</p>

</div>
</div>
<a id="a1bb76b8a32e09fb5ffffd66e04d7f741"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bb76b8a32e09fb5ffffd66e04d7f741">&#9670;&nbsp;</a></span>supports_dynamic_scheduling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supports_dynamic_scheduling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00422">422</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                      {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_abb02a9fd23c6187807ad015022708985"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">arm_gemm::GemmArgs::_ci</a></div><div class="ttdeci">const CPUInfo * _ci</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00142">arm_gemm.hpp:142</a></div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_hybrid_indirect_xhtml_a0ae716040d875abeeba60aa4a6b73363"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a0ae716040d875abeeba60aa4a6b73363">arm_gemm::GemmHybridIndirect::requantize_bias</a></div><div class="ttdeci">void requantize_bias(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00621">gemm_hybrid_indirect.hpp:621</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_aca00029952f2150554138015af1ac1ce"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">arm_gemm::GemmArgs::_nbatches</a></div><div class="ttdeci">unsigned int _nbatches</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00147">arm_gemm.hpp:147</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_ab6f473669f97dc471c5dd2945da5f2da"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ab6f473669f97dc471c5dd2945da5f2da">arm_gemm::GemmArgs::_indirect_input</a></div><div class="ttdeci">bool _indirect_input</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00149">arm_gemm.hpp:149</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_acf6183a5e4721a137bfce29c8b2febdb"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">arm_gemm::GemmArgs::_cfg</a></div><div class="ttdeci">const GemmConfig * _cfg</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00154">arm_gemm.hpp:154</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ad92c19f85e6eee3a06810736da11329d"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a></div><div class="ttdeci">unsigned int sections</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00107">CpuGemmAssemblyDispatch.cpp:107</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_a85b38740fa6151d6e5fcfc48e8008d47"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">arm_gemm::GemmArgs::_Msize</a></div><div class="ttdeci">unsigned int _Msize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00143">arm_gemm.hpp:143</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
<div class="ttc" id="aclassarm__gemm_1_1_n_d_range_xhtml_a2ee55bf0e2d8324a1360f6994a762e28"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">arm_gemm::NDRange::total_size</a></div><div class="ttdeci">unsigned int total_size() const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00133">ndrange.hpp:133</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_a2ab0ad50d3c2b2be030026132b00add6"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">arm_gemm::GemmArgs::_Ksections</a></div><div class="ttdeci">unsigned int _Ksections</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00146">arm_gemm.hpp:146</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_ac5c8d64b5f5a1c32846af7e260c56f04"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">arm_gemm::GemmArgs::_Nsize</a></div><div class="ttdeci">unsigned int _Nsize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00144">arm_gemm.hpp:144</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a2ca80c12b0bbb50666d5a1a122359616"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">arm_gemm::get_weight_format</a></div><div class="ttdeci">WeightFormat get_weight_format(const KernelWeightFormat, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8cpp_source.xhtml#l00040">misc.cpp:40</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5ae88784abc2816bf2775a68900540cb14">arm_gemm::GemmMethod::GEMM_HYBRID</a></div><div class="ttdeci">@ GEMM_HYBRID</div></div>
<div class="ttc" id="aclassarm__gemm_1_1_n_d_range_xhtml_a78a5c697e8717cb27954513e8ad2a508"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">arm_gemm::NDRange::iterator</a></div><div class="ttdeci">NDRangeIterator iterator(unsigned int start, unsigned int end) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00128">ndrange.hpp:128</a></div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_hybrid_indirect_xhtml_acc55eb5049f295e8ea170a9e4bf8d2f2"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2">arm_gemm::GemmHybridIndirect::pretranspose_B_array_part</a></div><div class="ttdeci">void pretranspose_B_array_part(void *in_buffer, const To *B, const int ldb, const int B_multi_stride, size_t start, size_t end) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00638">gemm_hybrid_indirect.hpp:638</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_a3e10740489c6494181b9bb7c3f8fb36d"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a3e10740489c6494181b9bb7c3f8fb36d">arm_gemm::GemmArgs::_act</a></div><div class="ttdeci">Activation _act</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00150">arm_gemm.hpp:150</a></div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_hybrid_indirect_xhtml_aa64943c3fd124c455d3c30599d0f663e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa64943c3fd124c455d3c30599d0f663e">arm_gemm::GemmHybridIndirect::get_B_pretranspose_window_size</a></div><div class="ttdeci">size_t get_B_pretranspose_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__indirect_8hpp_source.xhtml#l00617">gemm_hybrid_indirect.hpp:617</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_adb59e12af95e4ab605ffc3e12b41de58"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">arm_gemm::GemmArgs::_Ksize</a></div><div class="ttdeci">unsigned int _Ksize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00145">arm_gemm.hpp:145</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="astructarm__gemm_1_1_gemm_args_xhtml_a967adad6c21766e82315265eccfd0ca5"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">arm_gemm::GemmArgs::_nmulti</a></div><div class="ttdeci">unsigned int _nmulti</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00148">arm_gemm.hpp:148</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a></li>
    <li class="footer">Generated on Wed Feb 14 2024 11:15:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
