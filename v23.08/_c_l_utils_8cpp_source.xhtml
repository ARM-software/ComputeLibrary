<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/CLUtils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_utils_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLUtils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_utils_8h.xhtml">src/core/CL/CLUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_activation_function_utils_8h.xhtml">arm_compute/core/utils/ActivationFunctionUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h.xhtml">arm_compute/core/CL/CLCompileContext.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_l_tensor_8h.xhtml">arm_compute/core/CL/ICLTensor.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_utils_8h.xhtml">arm_compute/core/utils/StringUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_post_op_utils_8h.xhtml">src/core/experimental/PostOpUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abedaa5482ac9390bc612c6f4891c4d80">   38</a></span>&#160;cl::Image2D <a class="code" href="namespacearm__compute.xhtml#abedaa5482ac9390bc612c6f4891c4d80">create_image2d_from_tensor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a> image_type)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> cl::Context &amp;ctx    = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> cl::Buffer  &amp;buffer = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a53c338c0d76f41c472cdbf66fafdfe91">cl_buffer</a>();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>   = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>();</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;lock_paddings(),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                             <span class="stringliteral">&quot;Tensor paddings must not be locked to allow extending paddings to satisfy cl_image pitch alignment requirement&quot;</span>);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_w{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(0) / 4 };</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_h{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;tensor_shape().total_size() / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(0) };</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_w{ <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">get_device</a>().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_WIDTH&gt;() };</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_image_h{ <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">get_device</a>().getInfo&lt;CL_DEVICE_IMAGE2D_MAX_HEIGHT&gt;() };</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(max_image_w, max_image_h);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(image_w &gt; max_image_w, <span class="stringliteral">&quot;Image width exceeds maximum width for exporting to cl_image&quot;</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(image_h &gt; max_image_h, <span class="stringliteral">&quot;Image height exceeds maximum height for exporting to cl_image&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape2d(image_w, image_h);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>      image_row_pitch = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">create_image2d_from_buffer</a>(ctx, buffer, shape2d, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;data_type(), image_row_pitch, image_type);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">   63</a></span>&#160;cl::Image2D <a class="code" href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">create_image2d_from_buffer</a>(<span class="keyword">const</span> cl::Context &amp;ctx, <span class="keyword">const</span> cl::Buffer &amp;buffer, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape2d, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <span class="keywordtype">size_t</span> image_row_pitch, <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">CLImage2DType</a> image_type)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!<a class="code" href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">image2d_from_buffer_supported</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_device()),</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                             <span class="stringliteral">&quot;The extension cl_khr_image2d_from_buffer is not supported on the target platform&quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">get_cl_image_pitch_alignment</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_device()) == 0,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                             <span class="stringliteral">&quot;Impossible to retrieve the cl_image pitch alignment&quot;</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(buffer.get() == <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                             <span class="stringliteral">&quot;Cannot create cl_image from empty cl_buffer&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    cl_channel_type cl_data_type;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            cl_data_type = CL_FLOAT;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            cl_data_type = CL_HALF_FLOAT;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not support with OpenCL image2d&quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    cl_mem cl_image;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    cl_int err = CL_SUCCESS;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> cl_image_format format = { CL_RGBA, cl_data_type };</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    cl_image_desc desc;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    memset(&amp;desc, 0, <span class="keyword">sizeof</span>(desc));</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    desc.image_type      = CL_MEM_OBJECT_IMAGE2D;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    desc.mem_object      = buffer();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    desc.image_row_pitch = image_row_pitch;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    desc.image_width     = shape2d[0];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    desc.image_height    = shape2d[1];</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">switch</span>(image_type)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">CLImage2DType::ReadOnly</a>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            cl_image = <a class="code" href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a>(ctx(), CL_MEM_READ_ONLY, &amp;format, &amp;desc, <span class="keyword">nullptr</span>, &amp;err);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">CLImage2DType::WriteOnly</a>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            cl_image = <a class="code" href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a>(ctx(), CL_MEM_WRITE_ONLY, &amp;format, &amp;desc, <span class="keyword">nullptr</span>, &amp;err);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported CLImage2DType&quot;</span>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(err);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(err != CL_SUCCESS, <span class="stringliteral">&quot;Error during the creation of CL image from buffer&quot;</span>);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> cl::Image2D(cl_image);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a887bf9bb250974b5d375de9d68a69884">  119</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a887bf9bb250974b5d375de9d68a69884">PostOpCLKernelUtils::PostOpCLKernelUtils</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">Config</a> &amp;supported_config)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    : _supported_config(supported_config)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(supported_config.empty(), <span class="stringliteral">&quot;Empty PostOp CL kernel support configuration is not allowed&quot;</span>);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> it = _supported_config.begin(); it != _supported_config.end(); ++it)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">auto</span> post_op_sequence = it-&gt;first;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">auto</span> post_op_slots    = std::get&lt;1&gt;(it-&gt;second);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(post_op_sequence.size() != post_op_slots.size(), <span class="stringliteral">&quot;The number of PostOps must be the same as that of the assigned slots&quot;</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a73245e6f8ba369a4edb5ed8d07c10beb">  131</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a73245e6f8ba369a4edb5ed8d07c10beb">PostOpCLKernelUtils::are_post_op_shapes_compliant</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;op : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list())</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : op-&gt;arguments())</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">TensorShape::broadcast_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), (*tensor)-&gt;tensor_shape());</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="comment">// All post ops must be elementwise and must not alter the shape of the original dst tensor after broadcasting</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(out_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), 0))</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="comment">// NOTE: Kernel limitation: currently only the following broadcasting types are supported:</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="comment">//  1. Post op arg is scalar, broadcast in both first and second dims</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="comment">//  2. Post op arg is of shape: second dim=1, first dim=N, broadcast only in second dim</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">//  This means this case: Post op arg is of shape: second dim=M, first dim=1, broadcast only in first dim, is NOT supported</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(0) &gt; 1 &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(1) &gt; 1 &amp;&amp; (*tensor)-&gt;dimension(0) == 1 &amp;&amp; (*tensor)-&gt;dimension(1) &gt; 1)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a9fb148f9751fb3540a74318bf3d4b34b">  156</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a9fb148f9751fb3540a74318bf3d4b34b">PostOpCLKernelUtils::is_post_op_sequence_supported</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.size() == 0)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Always support cases where no post op is specified</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> _supported_config.find(post_op_sequence) != _supported_config.end();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a8b7fef56bc17f71a1ff3afc6490aa278">  167</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a8b7fef56bc17f71a1ff3afc6490aa278">PostOpCLKernelUtils::set_post_ops_cl_build_options</a>(<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;build_opts, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> slots            = std::get&lt;1&gt;(_supported_config.at(post_op_sequence));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> post_op_id = 0; post_op_id &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.size(); ++post_op_id)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list().at(post_op_id);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>  slot_prefix = <span class="stringliteral">&quot;-DP&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(slots[post_op_id]);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">experimental::PostOpType::Activation</a>)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> _post_op  = utils::cast::polymorphic_downcast&lt;const experimental::PostOpAct&lt;ITensorInfo *&gt; *&gt;(post_op.get());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_type  = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_TYPE=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">lower_string</a>(<a class="code" href="namespacearm__compute.xhtml#a5f2b06a162f0ca4e7bc8caac9525197f">string_from_activation_func</a>(_post_op-&gt;_act_info.activation()));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_a_val = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_A_VAL=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">float_to_string_with_full_precision</a>(_post_op-&gt;_act_info.a());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_b_val = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_B_VAL=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">float_to_string_with_full_precision</a>(_post_op-&gt;_act_info.b());</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(act_type);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(act_a_val);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(act_b_val);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">experimental::PostOpType::Eltwise_Add</a>)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordtype">size_t</span>     arg_id     = 1;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_op = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_OP=ADD&quot;</span> + <span class="stringliteral">&quot;_X_POS_&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(post_op-&gt;prev_dst_pos());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(eltwise_op);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : post_op-&gt;arguments())</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> height = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_HEIGHT=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(1));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> width  = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_WIDTH=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(0));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(height);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(width);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                ++arg_id;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">experimental::PostOpType::Eltwise_PRelu</a>)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordtype">size_t</span>     arg_id     = 1;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_op = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_OP=PRELU&quot;</span> + <span class="stringliteral">&quot;_X_POS_&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(post_op-&gt;prev_dst_pos());</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(eltwise_op);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : post_op-&gt;arguments())</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> height = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_HEIGHT=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(1));</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> width  = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_WIDTH=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(0));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(height);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                build_opts.<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(width);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                ++arg_id;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#ab6e7d4765c75a84efeb061f6cfc8a549">  216</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#ab6e7d4765c75a84efeb061f6cfc8a549">PostOpCLKernelUtils::set_post_ops_cl_kernel_name</a>(std::string &amp;<a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> postfix          = std::get&lt;0&gt;(_supported_config.at(post_op_sequence));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += postfix;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00065">CLKernelLibrary.cpp:65</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="a_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="a_i_c_l_tensor_8h_xhtml"><div class="ttname"><a href="_i_c_l_tensor_8h.xhtml">ICLTensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_abedaa5482ac9390bc612c6f4891c4d80"><div class="ttname"><a href="namespacearm__compute.xhtml#abedaa5482ac9390bc612c6f4891c4d80">arm_compute::create_image2d_from_tensor</a></div><div class="ttdeci">cl::Image2D create_image2d_from_tensor(const ICLTensor *tensor, CLImage2DType image_type)</div><div class="ttdoc">Create a cl::Image2D object from a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00038">CLUtils.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41a1889b2fdf01056017b9f8b58dda6e"><div class="ttname"><a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6e">arm_compute::CLImage2DType</a></div><div class="ttdeci">CLImage2DType</div><div class="ttdoc">OpenCL Image2D types.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8h_source.xhtml#l00042">CLUtils.h:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_a73245e6f8ba369a4edb5ed8d07c10beb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a73245e6f8ba369a4edb5ed8d07c10beb">arm_compute::experimental::PostOpCLKernelUtils::are_post_op_shapes_compliant</a></div><div class="ttdeci">static bool are_post_op_shapes_compliant(const ITensorInfo *dst, const experimental::PostOpList&lt; ITensorInfo * &gt; &amp;post_ops)</div><div class="ttdoc">Check if post op argument tensor shapes are compliant All post ops must not alter the shape of the or...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00131">CLUtils.cpp:131</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0a7bb17a0a0414a7162f635776a02eb5"><div class="ttname"><a href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">arm_compute::lower_string</a></div><div class="ttdeci">std::string lower_string(const std::string &amp;val)</div><div class="ttdoc">Lower a given string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00038">StringUtils.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5"><div class="ttname"><a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea53dfe5089ae9e65887cb0215cb0098f5">arm_compute::CLImage2DType::WriteOnly</a></div><div class="ttdeci">@ WriteOnly</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00042">ICLTensor.h:42</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00353">Error.h:353</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a777eb2ab77bdf5aea2d25c31b4acee2c"><div class="ttname"><a href="namespacearm__compute.xhtml#a777eb2ab77bdf5aea2d25c31b4acee2c">arm_compute::image2d_from_buffer_supported</a></div><div class="ttdeci">bool image2d_from_buffer_supported(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to check whether the cl_khr_image2d_from_buffer extension is supported.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00374">CLHelpers.cpp:374</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::PostOpType::Eltwise_Add</a></div><div class="ttdeci">@ Eltwise_Add</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context.</div></div>
<div class="ttc" id="a_string_utils_8h_xhtml"><div class="ttname"><a href="_string_utils_8h.xhtml">StringUtils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::PostOpType::Eltwise_PRelu</a></div><div class="ttdeci">@ Eltwise_PRelu</div></div>
<div class="ttc" id="a_c_l_utils_8h_xhtml"><div class="ttname"><a href="_c_l_utils_8h.xhtml">CLUtils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_a887bf9bb250974b5d375de9d68a69884"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a887bf9bb250974b5d375de9d68a69884">arm_compute::experimental::PostOpCLKernelUtils::PostOpCLKernelUtils</a></div><div class="ttdeci">PostOpCLKernelUtils(const Config &amp;config)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00119">CLUtils.cpp:119</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_build_options_xhtml_a3e2b80ff5463b7d2017de847f5c32a30"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">arm_compute::CLBuildOptions::add_option</a></div><div class="ttdeci">void add_option(std::string option)</div><div class="ttdoc">Adds option to the existing build option list.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00041">CLCompileContext.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_ab6e7d4765c75a84efeb061f6cfc8a549"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#ab6e7d4765c75a84efeb061f6cfc8a549">arm_compute::experimental::PostOpCLKernelUtils::set_post_ops_cl_kernel_name</a></div><div class="ttdeci">void set_post_ops_cl_kernel_name(std::string &amp;kernel_name, const PostOpList&lt; ITensorInfo * &gt; &amp;post_ops) const</div><div class="ttdoc">Helper function to set PostOp kernel name.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00216">CLUtils.cpp:216</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197"><div class="ttname"><a href="namespacearm__compute.xhtml#a41a1889b2fdf01056017b9f8b58dda6ea131fb182a881796e7606ed6da27f1197">arm_compute::CLImage2DType::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a244a32cac2f5011bd0fc49700bf3d5de"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;... shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00215">TensorShape.h:215</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">ConvolutionLayer.cpp:413</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a45d610a8bc262f7007c934293361e888"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">arm_compute::detail::have_different_dimensions</a></div><div class="ttdeci">bool have_different_dimensions(const Dimensions&lt; T &gt; &amp;dim1, const Dimensions&lt; T &gt; &amp;dim2, unsigned int upper_dim)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00051">Validate.h:51</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_c_l_2_c_l_compile_context_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h.xhtml">CLCompileContext.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_a53c338c0d76f41c472cdbf66fafdfe91"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a53c338c0d76f41c472cdbf66fafdfe91">arm_compute::CLTensor::cl_buffer</a></div><div class="ttdeci">const cl::Buffer &amp; cl_buffer() const override</div><div class="ttdoc">Interface to be implemented by the child class to return a reference to the OpenCL buffer containing ...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00051">CLTensor.cpp:51</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59cc7dde3c479fa90260c12c992f2cae"><div class="ttname"><a href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">arm_compute::float_to_string_with_full_precision</a></div><div class="ttdeci">std::string float_to_string_with_full_precision(float val)</div><div class="ttdoc">Create a string with the float in full precision.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00052">StringUtils.cpp:52</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_a283ea1fb18effc662f97182b20e63313"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">arm_compute::experimental::PostOpCLKernelUtils::Config</a></div><div class="ttdeci">std::map&lt; PostOpTypeSequence, std::tuple&lt; NamePostfix, Slots &gt; &gt; Config</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8h_source.xhtml#l00106">CLUtils.h:106</a></div></div>
<div class="ttc" id="a_post_op_utils_8h_xhtml"><div class="ttname"><a href="_post_op_utils_8h.xhtml">PostOpUtils.h</a></div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_aa31e96a1fb21520f2e391b4f7f46f5a9"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a></div><div class="ttdeci">cl_mem clCreateImage(cl_context context, cl_mem_flags flags, const cl_image_format *image_format, const cl_image_desc *image_desc, void *host_ptr, cl_int *errcode_ret)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l01046">OpenCL.cpp:1046</a></div></div>
<div class="ttc" id="a_activation_function_utils_8h_xhtml"><div class="ttname"><a href="_activation_function_utils_8h.xhtml">ActivationFunctionUtils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00223">Cast.cpp:223</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::PostOpType::Activation</a></div><div class="ttdeci">@ Activation</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_a8b7fef56bc17f71a1ff3afc6490aa278"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a8b7fef56bc17f71a1ff3afc6490aa278">arm_compute::experimental::PostOpCLKernelUtils::set_post_ops_cl_build_options</a></div><div class="ttdeci">void set_post_ops_cl_build_options(CLBuildOptions &amp;built_opts, const PostOpList&lt; ITensorInfo * &gt; &amp;post_ops) const</div><div class="ttdoc">Helper function to set PostOp related build options.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00167">CLUtils.cpp:167</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae9cd3d5db8015683dda5f39efa60e553"><div class="ttname"><a href="namespacearm__compute.xhtml#ae9cd3d5db8015683dda5f39efa60e553">arm_compute::create_image2d_from_buffer</a></div><div class="ttdeci">cl::Image2D create_image2d_from_buffer(const cl::Context &amp;ctx, const cl::Buffer &amp;buffer, const TensorShape &amp;shape2d, DataType data_type, size_t image_row_pitch, CLImage2DType image_type)</div><div class="ttdoc">Create a cl::Image2D object from an OpenCL buffer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00063">CLUtils.cpp:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a97428e76ac2940d45fc9772854b7fd8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a97428e76ac2940d45fc9772854b7fd8c">arm_compute::get_cl_image_pitch_alignment</a></div><div class="ttdeci">size_t get_cl_image_pitch_alignment(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the cl_image pitch alignment in pixels.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00379">CLHelpers.cpp:379</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils_xhtml_a9fb148f9751fb3540a74318bf3d4b34b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a9fb148f9751fb3540a74318bf3d4b34b">arm_compute::experimental::PostOpCLKernelUtils::is_post_op_sequence_supported</a></div><div class="ttdeci">bool is_post_op_sequence_supported(const PostOpList&lt; ITensorInfo * &gt; &amp;post_ops) const</div><div class="ttdoc">Check if the post op sequence is supported in the current configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_utils_8cpp_source.xhtml#l00156">CLUtils.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5f2b06a162f0ca4e7bc8caac9525197f"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f2b06a162f0ca4e7bc8caac9525197f">arm_compute::string_from_activation_func</a></div><div class="ttdeci">const std::string &amp; string_from_activation_func(const ActivationFunction &amp;act)</div><div class="ttdoc">Translates a given activation function to a string.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_function_utils_8cpp_source.xhtml#l00031">ActivationFunctionUtils.cpp:31</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a22525cfde930b77c53f9b6f5e98f2eae"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">arm_compute::experimental::get_post_op_sequence</a></div><div class="ttdeci">PostOpTypeSequence get_post_op_sequence(const PostOpList&lt; T &gt; &amp;post_ops)</div><div class="ttdoc">Get a sequence of PostOp Types from PostOpList.</div><div class="ttdef"><b>Definition:</b> <a href="_post_op_utils_8h_source.xhtml#l00085">PostOpUtils.h:85</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00043">ITensorInfo.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_build_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml">arm_compute::CLBuildOptions</a></div><div class="ttdoc">Build options.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00038">CLCompileContext.h:38</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00082">CoreTypes.h:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_list_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">arm_compute::experimental::PostOpList</a></div><div class="ttdoc">A sequence of PostOps that can be appended to the end of other operators.</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00119">IPostOp.h:119</a></div></div>
<div class="ttc" id="a_cl_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00057">ClIm2ColKernel.cpp:57</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a1b3919fb1e9372257947abe01e74e3d4"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">arm_compute::CLKernelLibrary::get_device</a></div><div class="ttdeci">const cl::Device &amp; get_device()</div><div class="ttdoc">Gets the CL device for which the programs are created.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00069">CLKernelLibrary.cpp:69</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_utils_8cpp.xhtml">CLUtils.cpp</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:08 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
