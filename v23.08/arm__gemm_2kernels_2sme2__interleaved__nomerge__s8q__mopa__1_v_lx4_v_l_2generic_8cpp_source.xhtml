<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/kernels/sme2_interleaved_nomerge_s8q_mopa_1VLx4VL/generic.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('arm__gemm_2kernels_2sme2__interleaved__nomerge__s8q__mopa__1_v_lx4_v_l_2generic_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">generic.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arm__gemm_2kernels_2sme2__interleaved__nomerge__s8q__mopa__1_v_lx4_v_l_2generic_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ENABLE_SME2</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;../../asmlib.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;../../utils.hpp&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">void</span> sme2_interleaved_nomerge_s8q_mopa_1VLx4VL(<span class="keyword">const</span> int8_t *<span class="keyword">const</span> A, <span class="keyword">const</span> int8_t *<span class="keyword">const</span> B, int8_t *<span class="keyword">const</span> C, <span class="keywordtype">int</span> ldc, <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>, <span class="keyword">const</span> int32_t *<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keyword">const</span> Requantize32 &amp;rq, <span class="keyword">const</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>, int32_t *<span class="keyword">const</span> accumulator_buffer)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">struct </span>KernelArgs</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    KernelArgs(</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      <span class="keyword">const</span> int8_t *<span class="keyword">const</span> A,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      <span class="keyword">const</span> int8_t *<span class="keyword">const</span> B,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      int8_t *<span class="keyword">const</span> C, <span class="keyword">const</span> <span class="keywordtype">int</span> ldc,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>, <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keyword">const</span> int32_t *<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      <span class="keyword">const</span> Requantize32 &amp;rq,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> n_0,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      int32_t *<span class="keyword">const</span> accumulator_buffer</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    ) : <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>),</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>), kstride_bytes(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>, 4) * sizeof(int8_t)),</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        C(C), ldcb(ldc * sizeof(int8_t)),</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>), <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>), <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>),</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        n_loops(((<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> / 4) - 1) / 2), n_tail_iters(((<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> / 4) - 1) % 2),</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>(<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>), n_0(n_0),</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        accumulator_buffer(accumulator_buffer),</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        flags(0x0)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        flags |= 1 &lt;&lt; 0;  <span class="comment">// FILL_ACCUMULATORS_FROM_BUFFER</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordflow">if</span> (C == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        flags |= 1 &lt;&lt; 1;  <span class="comment">// STORE_ACCUMULATORS_TO_BUFFER</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="keywordflow">if</span> (rq.per_channel_requant)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        flags |= 1 &lt;&lt; 2;  <span class="comment">// PER_CHANNEL_QUANTISATION</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> int8_t *<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> int8_t *<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> kstride_bytes;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    int8_t *<span class="keyword">const</span> C;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> ldcb;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>, n_loops, n_tail_iters;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    int32_t min = std::numeric_limits&lt;int8_t&gt;::min();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    int32_t max = std::numeric_limits&lt;int8_t&gt;::max();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> int32_t *<span class="keyword">const</span> <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    int32_t *<span class="keyword">const</span> accumulator_buffer;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    uint64_t flags;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  };</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="comment">// Construct arguments for this kernel</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  KernelArgs <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>(A, B, C, ldc, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, rq, n_0, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>, accumulator_buffer);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  __asm__ __volatile__(</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="stringliteral">&quot;ldr x14, [%x[args], %[offsetof_flags]]\n&quot;</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="stringliteral">&quot;.inst 0xd503477f  // SMSTART ZA\n&quot;</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="stringliteral">&quot;ptrue p1.b\n&quot;</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="stringliteral">&quot;.inst 0x25207811  // ptrue pn9.b\n&quot;</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="stringliteral">&quot;ldr x13, [%x[args], %[offsetof_accumulator_buffer]]\n&quot;</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <span class="stringliteral">&quot;ldr x11, [%x[args], %[offsetof_accumulator_buffer]]\n&quot;</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <span class="stringliteral">&quot;tbz x14, #0, 2f\n&quot;</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="stringliteral">&quot;mov x12, #0x0\n&quot;</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="stringliteral">&quot;cntw x20\n&quot;</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      <span class="stringliteral">&quot;1:&quot;</span>  <span class="comment">// Initial accumulator load from buffer: Loop</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="stringliteral">&quot;.inst 0xa040c5a4  // ld1w { z4.s-z7.s }, pn9.b/Z, [x13]\n&quot;</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840480  // mova za0h.s[x12], { z4.s-z7.s }\n&quot;</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      <span class="stringliteral">&quot;.inst 0xa041c5a8  // ld1w { z8.s-z11.s }, pn9.b/Z, [x13, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840501  // mova za1h.s[x12], { z8.s-z11.s }\n&quot;</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <span class="stringliteral">&quot;.inst 0xa042c5a8  // ld1w { z8.s-z11.s }, pn9.b/Z, [x13, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840502  // mova za2h.s[x12], { z8.s-z11.s }\n&quot;</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="stringliteral">&quot;.inst 0xa043c5b0  // ld1w { z16.s-z19.s }, pn9.b/Z, [x13, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840603  // mova za3h.s[x12], { z16.s-z19.s }\n&quot;</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="stringliteral">&quot;add x12, x12, #0x4\n&quot;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <span class="stringliteral">&quot;cmp x12, x20\n&quot;</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <span class="stringliteral">&quot;addvl x13, x13, #16\n&quot;</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="stringliteral">&quot;blt 1b\n&quot;</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="stringliteral">&quot;2:&quot;</span>  <span class="comment">// Initial accumulator load from buffer: End</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <span class="stringliteral">&quot;ldr w10, [%x[args], %[offsetof_M]]\n&quot;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="stringliteral">&quot;mov x9, #0x0\n&quot;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      <span class="stringliteral">&quot;mov x28, #0x0\n&quot;</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <span class="stringliteral">&quot;ldr w27, [%x[args], %[offsetof_N]]\n&quot;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="stringliteral">&quot;ldr x26, [%x[args], %[offsetof_A]]\n&quot;</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="stringliteral">&quot;3:&quot;</span>  <span class="comment">// M and N loop</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="stringliteral">&quot;mov x25, x26\n&quot;</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="stringliteral">&quot;.inst 0x25bb6790  // whilelt pn8.s, x28, x27, VLx4\n&quot;</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="stringliteral">&quot;tbnz x14, #0, 4f\n&quot;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="stringliteral">&quot;ldr x20, [%x[args], %[offsetof_bias]]\n&quot;</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="stringliteral">&quot;.inst 0xc00800ff  // zero { zad0, zad1, zad2, zad3, zad4, zad5, zad6, zad7 }\n&quot;</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      <span class="stringliteral">&quot;cbz x20, 5f\n&quot;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      <span class="stringliteral">&quot;.inst 0xa11cc289  // ldnt1w { z1.s, z5.s, z9.s, z13.s }, p8/Z, [x20, x28, LSL #2]\n&quot;</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0902420  // addha za0.s, p1/M, p1/M, z1.s\n&quot;</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09024a1  // addha za1.s, p1/M, p1/M, z5.s\n&quot;</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0902522  // addha za2.s, p1/M, p1/M, z9.s\n&quot;</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09025a3  // addha za3.s, p1/M, p1/M, z13.s\n&quot;</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="stringliteral">&quot;4:&quot;</span>  <span class="comment">// Prepare accumulators: Test for last block</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      <span class="stringliteral">&quot;mov x20, x28\n&quot;</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      <span class="stringliteral">&quot;mov x21, x9\n&quot;</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <span class="stringliteral">&quot;incw x20, ALL, MUL #4\n&quot;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="stringliteral">&quot;incw x21\n&quot;</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="stringliteral">&quot;cmp x20, x27\n&quot;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="stringliteral">&quot;csel x21, x9, x21, LT\n&quot;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="stringliteral">&quot;mov x20, x14\n&quot;</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      <span class="stringliteral">&quot;bfm x14, XZR, #0x0, #0x0  // bfc x14, #0x0, #0x1\n&quot;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="stringliteral">&quot;cmp x21, x10\n&quot;</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <span class="stringliteral">&quot;csel x14, x20, x14, LT\n&quot;</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="stringliteral">&quot;5:&quot;</span>  <span class="comment">// Prepare accumulators: End</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="stringliteral">&quot;ldr x20, [%x[args], %[offsetof_K]]\n&quot;</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="stringliteral">&quot;add x20, x20, #0x3\n&quot;</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="stringliteral">&quot;lsr x20, x20, #0x2\n&quot;</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="stringliteral">&quot;ldr x23, [%x[args], %[offsetof_B]]\n&quot;</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      <span class="stringliteral">&quot;lsr x22, x20, #0x2\n&quot;</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="stringliteral">&quot;and x21, x20, #0x3\n&quot;</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      <span class="stringliteral">&quot;ldr x20, [%x[args], %[offsetof_kstride_bytes]]\n&quot;</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="stringliteral">&quot;madd x23, x28, x20, x23\n&quot;</span>  <span class="comment">// bptr = B + n * kstride_bytes</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      <span class="stringliteral">&quot;cbz x22, 8f\n&quot;</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="stringliteral">&quot;subs x22, x22, #0x1\n&quot;</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="stringliteral">&quot;ld1b { z20.b }, p1/Z, [x25]\n&quot;</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04086e5  // ldnt1b { z4.b-z7.b }, pn9.b/Z, [x23]\n&quot;</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      <span class="stringliteral">&quot;ld1b { z11.b }, p1/Z, [x25, #1, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04186f9  // ldnt1b { z24.b-z27.b }, pn9.b/Z, [x23, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      <span class="stringliteral">&quot;ld1b { z2.b }, p1/Z, [x25, #2, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04286fd  // ldnt1b { z28.b-z31.b }, pn9.b/Z, [x23, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      <span class="stringliteral">&quot;ld1b { z14.b }, p1/Z, [x25, #3, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="stringliteral">&quot;addvl x25, x25, #4\n&quot;</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04386f1  // ldnt1b { z16.b-z19.b }, pn9.b/Z, [x23, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="stringliteral">&quot;addvl x23, x23, #16\n&quot;</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      <span class="stringliteral">&quot;ble 7f\n&quot;</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      <span class="stringliteral">&quot;6:&quot;</span>  <span class="comment">// K loop</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0842680  // smopa za0.s, p1/M, p1/M, z20.b, z4.b\n&quot;</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="stringliteral">&quot;subs x22, x22, #0x1\n&quot;</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0852681  // smopa za1.s, p1/M, p1/M, z20.b, z5.b\n&quot;</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0862682  // smopa za2.s, p1/M, p1/M, z20.b, z6.b\n&quot;</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0872683  // smopa za3.s, p1/M, p1/M, z20.b, z7.b\n&quot;</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      <span class="stringliteral">&quot;ld1b { z20.b }, p1/Z, [x25]\n&quot;</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0982560  // smopa za0.s, p1/M, p1/M, z11.b, z24.b\n&quot;</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04086e5  // ldnt1b { z4.b-z7.b }, pn9.b/Z, [x23]\n&quot;</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0992561  // smopa za1.s, p1/M, p1/M, z11.b, z25.b\n&quot;</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09a2562  // smopa za2.s, p1/M, p1/M, z11.b, z26.b\n&quot;</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09b2563  // smopa za3.s, p1/M, p1/M, z11.b, z27.b\n&quot;</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      <span class="stringliteral">&quot;ld1b { z11.b }, p1/Z, [x25, #1, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09c2440  // smopa za0.s, p1/M, p1/M, z2.b, z28.b\n&quot;</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04186f9  // ldnt1b { z24.b-z27.b }, pn9.b/Z, [x23, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09d2441  // smopa za1.s, p1/M, p1/M, z2.b, z29.b\n&quot;</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09e2442  // smopa za2.s, p1/M, p1/M, z2.b, z30.b\n&quot;</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09f2443  // smopa za3.s, p1/M, p1/M, z2.b, z31.b\n&quot;</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      <span class="stringliteral">&quot;ld1b { z2.b }, p1/Z, [x25, #2, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04286fd  // ldnt1b { z28.b-z31.b }, pn9.b/Z, [x23, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09025c0  // smopa za0.s, p1/M, p1/M, z14.b, z16.b\n&quot;</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09125c1  // smopa za1.s, p1/M, p1/M, z14.b, z17.b\n&quot;</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09225c2  // smopa za2.s, p1/M, p1/M, z14.b, z18.b\n&quot;</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09325c3  // smopa za3.s, p1/M, p1/M, z14.b, z19.b\n&quot;</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      <span class="stringliteral">&quot;ld1b { z14.b }, p1/Z, [x25, #3, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      <span class="stringliteral">&quot;addvl x25, x25, #4\n&quot;</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04386f1  // ldnt1b { z16.b-z19.b }, pn9.b/Z, [x23, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="stringliteral">&quot;addvl x23, x23, #16\n&quot;</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      <span class="stringliteral">&quot;bgt 6b\n&quot;</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="stringliteral">&quot;7:&quot;</span>  <span class="comment">// K loop tail</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0842680  // smopa za0.s, p1/M, p1/M, z20.b, z4.b\n&quot;</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0852681  // smopa za1.s, p1/M, p1/M, z20.b, z5.b\n&quot;</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0862682  // smopa za2.s, p1/M, p1/M, z20.b, z6.b\n&quot;</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0872683  // smopa za3.s, p1/M, p1/M, z20.b, z7.b\n&quot;</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0982560  // smopa za0.s, p1/M, p1/M, z11.b, z24.b\n&quot;</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0992561  // smopa za1.s, p1/M, p1/M, z11.b, z25.b\n&quot;</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09a2562  // smopa za2.s, p1/M, p1/M, z11.b, z26.b\n&quot;</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09b2563  // smopa za3.s, p1/M, p1/M, z11.b, z27.b\n&quot;</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09c2440  // smopa za0.s, p1/M, p1/M, z2.b, z28.b\n&quot;</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09d2441  // smopa za1.s, p1/M, p1/M, z2.b, z29.b\n&quot;</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09e2442  // smopa za2.s, p1/M, p1/M, z2.b, z30.b\n&quot;</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09f2443  // smopa za3.s, p1/M, p1/M, z2.b, z31.b\n&quot;</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09025c0  // smopa za0.s, p1/M, p1/M, z14.b, z16.b\n&quot;</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09125c1  // smopa za1.s, p1/M, p1/M, z14.b, z17.b\n&quot;</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09225c2  // smopa za2.s, p1/M, p1/M, z14.b, z18.b\n&quot;</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      <span class="stringliteral">&quot;.inst 0xa09325c3  // smopa za3.s, p1/M, p1/M, z14.b, z19.b\n&quot;</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="stringliteral">&quot;8:&quot;</span>  <span class="comment">// K oddments</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="stringliteral">&quot;cbz x21, 10f\n&quot;</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      <span class="stringliteral">&quot;9:&quot;</span>  <span class="comment">// K oddments: Loop</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="stringliteral">&quot;ld1b { z16.b }, p1/Z, [x25]\n&quot;</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="stringliteral">&quot;subs x21, x21, #0x1\n&quot;</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      <span class="stringliteral">&quot;addvl x25, x25, #1\n&quot;</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      <span class="stringliteral">&quot;.inst 0xa04086e4  // ld1b { z4.b-z7.b }, pn9.b/Z, [x23]\n&quot;</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="stringliteral">&quot;addvl x23, x23, #4\n&quot;</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0842600  // smopa za0.s, p1/M, p1/M, z16.b, z4.b\n&quot;</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0852601  // smopa za1.s, p1/M, p1/M, z16.b, z5.b\n&quot;</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0862602  // smopa za2.s, p1/M, p1/M, z16.b, z6.b\n&quot;</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="stringliteral">&quot;.inst 0xa0872603  // smopa za3.s, p1/M, p1/M, z16.b, z7.b\n&quot;</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      <span class="stringliteral">&quot;bgt 9b\n&quot;</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="stringliteral">&quot;10:&quot;</span>  <span class="comment">// K oddments: End</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="stringliteral">&quot;ld1w { z15.s }, p1/Z, [x25]\n&quot;</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="stringliteral">&quot;addvl x25, x25, #1\n&quot;</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09125e0  // addva za0.s, p1/M, p1/M, z15.s\n&quot;</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09125e1  // addva za1.s, p1/M, p1/M, z15.s\n&quot;</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09125e2  // addva za2.s, p1/M, p1/M, z15.s\n&quot;</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="stringliteral">&quot;.inst 0xc09125e3  // addva za3.s, p1/M, p1/M, z15.s\n&quot;</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="stringliteral">&quot;tbz x14, #1, 14f\n&quot;</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      <span class="stringliteral">&quot;tbz x14, #0, 12f\n&quot;</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      <span class="stringliteral">&quot;mov x12, #0x0\n&quot;</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="stringliteral">&quot;cntw x20\n&quot;</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <span class="stringliteral">&quot;11:&quot;</span>  <span class="comment">// Store to partial result buffer: Store and refill: Loop</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="stringliteral">&quot;.inst 0xa040c5a0  // ld1w { z0.s-z3.s }, pn9.b/Z, [x13]\n&quot;</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860418  // mova { z24.s-z27.s }, za0h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840400  // mova za0h.s[x12], { z0.s-z3.s }\n&quot;</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860424  // mova { z4.s-z7.s }, za1h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="stringliteral">&quot;.inst 0xa041c5a0  // ld1w { z0.s-z3.s }, pn9.b/Z, [x13, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840401  // mova za1h.s[x12], { z0.s-z3.s }\n&quot;</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860454  // mova { z20.s-z23.s }, za2h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860460  // mova { z0.s-z3.s }, za3h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="stringliteral">&quot;.inst 0xa042c5b0  // ld1w { z16.s-z19.s }, pn9.b/Z, [x13, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840602  // mova za2h.s[x12], { z16.s-z19.s }\n&quot;</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      <span class="stringliteral">&quot;.inst 0xa043c5b0  // ld1w { z16.s-z19.s }, pn9.b/Z, [x13, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840603  // mova za3h.s[x12], { z16.s-z19.s }\n&quot;</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="stringliteral">&quot;add x12, x12, #0x4\n&quot;</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="stringliteral">&quot;cmp x12, x20\n&quot;</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="stringliteral">&quot;.inst 0xa060c578  // st1w { z24.s-z27.s }, pn9.b, [x11]\n&quot;</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="stringliteral">&quot;addvl x13, x13, #16\n&quot;</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      <span class="stringliteral">&quot;.inst 0xa061c564  // st1w { z4.s-z7.s }, pn9.b, [x11, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="stringliteral">&quot;.inst 0xa062c574  // st1w { z20.s-z23.s }, pn9.b, [x11, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      <span class="stringliteral">&quot;.inst 0xa063c560  // st1w { z0.s-z3.s }, pn9.b, [x11, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="stringliteral">&quot;addvl x11, x11, #16\n&quot;</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <span class="stringliteral">&quot;blt 11b\n&quot;</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="stringliteral">&quot;b 21f\n&quot;</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="stringliteral">&quot;12:&quot;</span>  <span class="comment">// Store to partial result buffer: Store only</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      <span class="stringliteral">&quot;mov x12, #0x0\n&quot;</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <span class="stringliteral">&quot;cntw x20\n&quot;</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="stringliteral">&quot;13:&quot;</span>  <span class="comment">// Store to partial result buffer: Store only: Loop</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860404  // mova { z4.s-z7.s }, za0h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860434  // mova { z20.s-z23.s }, za1h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      <span class="stringliteral">&quot;.inst 0xa060c564  // st1w { z4.s-z7.s }, pn9.b, [x11]\n&quot;</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      <span class="stringliteral">&quot;.inst 0xc086044c  // mova { z12.s-z15.s }, za2h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860468  // mova { z8.s-z11.s }, za3h.s[x12]\n&quot;</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="stringliteral">&quot;.inst 0xa061c574  // st1w { z20.s-z23.s }, pn9.b, [x11, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      <span class="stringliteral">&quot;add x12, x12, #0x4\n&quot;</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="stringliteral">&quot;cmp x12, x20\n&quot;</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      <span class="stringliteral">&quot;.inst 0xa062c56c  // st1w { z12.s-z15.s }, pn9.b, [x11, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="stringliteral">&quot;.inst 0xa063c568  // st1w { z8.s-z11.s }, pn9.b, [x11, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      <span class="stringliteral">&quot;addvl x11, x11, #16\n&quot;</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      <span class="stringliteral">&quot;blt 13b\n&quot;</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="stringliteral">&quot;b 21f\n&quot;</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      <span class="stringliteral">&quot;14:&quot;</span>  <span class="comment">// Store to output array</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      <span class="stringliteral">&quot;ldr x24, [%x[args], %[offsetof_C]]\n&quot;</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      <span class="stringliteral">&quot;add x24, x24, x28\n&quot;</span>  <span class="comment">// C += n</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="stringliteral">&quot;sub x23, x10, x9\n&quot;</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="stringliteral">&quot;ld1rw { z4.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_mul]]\n&quot;</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="stringliteral">&quot;ldr x22, [%x[args], %[offsetof_ldcb]]\n&quot;</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      <span class="stringliteral">&quot;madd x24, x9, x22, x24\n&quot;</span>  <span class="comment">// C += m * ldc</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      <span class="stringliteral">&quot;ld1rw { z5.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_mul]]\n&quot;</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      <span class="stringliteral">&quot;ld1rw { z6.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_mul]]\n&quot;</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="stringliteral">&quot;ld1rw { z7.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_mul]]\n&quot;</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      <span class="stringliteral">&quot;ld1rw { z12.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_right_shift]]\n&quot;</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      <span class="stringliteral">&quot;ld1rw { z13.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_right_shift]]\n&quot;</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      <span class="stringliteral">&quot;ld1rw { z14.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_right_shift]]\n&quot;</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;      <span class="stringliteral">&quot;ld1rw { z15.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_per_layer_right_shift]]\n&quot;</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="stringliteral">&quot;ld1rw { z0.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_c_offset]]\n&quot;</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      <span class="stringliteral">&quot;ld1rw { z21.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_minval]]\n&quot;</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      <span class="stringliteral">&quot;ld1rw { z20.s }, p1/Z, [%x[rq], %[offsetof_Requantize32_maxval]]\n&quot;</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="stringliteral">&quot;tbz x14, #2, 15f\n&quot;</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      <span class="stringliteral">&quot;ldr w21, [%x[args], %[offsetof_n_0]]\n&quot;</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;      <span class="stringliteral">&quot;add x21, x21, x28\n&quot;</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      <span class="stringliteral">&quot;ldr x20, [%x[rq], %[offsetof_Requantize32_per_channel_muls]]\n&quot;</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      <span class="stringliteral">&quot;add x20, x20, x21, LSL #2\n&quot;</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="stringliteral">&quot;.inst 0xa040c284  // ld1w { z4.s-z7.s }, p8/Z, [x20]\n&quot;</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      <span class="stringliteral">&quot;ldr x20, [%x[rq], %[offsetof_Requantize32_per_channel_right_shifts]]\n&quot;</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      <span class="stringliteral">&quot;add x20, x20, x21, LSL #2\n&quot;</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      <span class="stringliteral">&quot;.inst 0xa040c28c  // ld1w { z12.s-z15.s }, p8/Z, [x20]\n&quot;</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;      <span class="stringliteral">&quot;15:&quot;</span>  <span class="comment">// Store to output array: Load per-channel parameters: End</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;      <span class="stringliteral">&quot;cntw x20\n&quot;</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;      <span class="stringliteral">&quot;whilelt p0.b, x28, x27\n&quot;</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      <span class="stringliteral">&quot;cmp x23, x20\n&quot;</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      <span class="stringliteral">&quot;csel x20, x23, x20, LT\n&quot;</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      <span class="stringliteral">&quot;lsr x21, x20, #0x1\n&quot;</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      <span class="stringliteral">&quot;mov x12, #0x0\n&quot;</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      <span class="stringliteral">&quot;and x20, x20, #0x1\n&quot;</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      <span class="stringliteral">&quot;cbz x21, 17f\n&quot;</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      <span class="stringliteral">&quot;16:&quot;</span>  <span class="comment">// Store to output array: Accumulator row 0 loop</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;      <span class="stringliteral">&quot;.inst 0xc086001a  // mova { z26.s-z27.s }, za0h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;      <span class="stringliteral">&quot;.inst 0xc086005c  // mova { z28.s-z29.s }, za1h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a4a41a  // sqdmulh { z26.s-z27.s }, { z26.s-z27.s }, z4.s\n&quot;</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860096  // mova { z22.s-z23.s }, za2h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;      <span class="stringliteral">&quot;.inst 0xc08600d0  // mova { z16.s-z17.s }, za3h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a5a41c  // sqdmulh { z28.s-z29.s }, { z28.s-z29.s }, z5.s\n&quot;</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a6a416  // sqdmulh { z22.s-z23.s }, { z22.s-z23.s }, z6.s\n&quot;</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      <span class="stringliteral">&quot;add x12, x12, #0x2\n&quot;</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      <span class="stringliteral">&quot;cmp x12, x21, LSL #1\n&quot;</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a7a410  // sqdmulh { z16.s-z17.s }, { z16.s-z17.s }, z7.s\n&quot;</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1aca23a  // srshl { z26.s-z27.s }, { z26.s-z27.s }, z12.s\n&quot;</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1ada23c  // srshl { z28.s-z29.s }, { z28.s-z29.s }, z13.s\n&quot;</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1aea236  // srshl { z22.s-z23.s }, { z22.s-z23.s }, z14.s\n&quot;</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1afa230  // srshl { z16.s-z17.s }, { z16.s-z17.s }, z15.s\n&quot;</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a31a  // add { z26.s-z27.s }, { z26.s-z27.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a31c  // add { z28.s-z29.s }, { z28.s-z29.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a316  // add { z22.s-z23.s }, { z22.s-z23.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a310  // add { z16.s-z17.s }, { z16.s-z17.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6ba  // sclamp { z26.s-z27.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6bc  // sclamp { z28.s-z29.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      <span class="stringliteral">&quot;uzp1 z19.b, z26.b, z28.b\n&quot;</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6b6  // sclamp { z22.s-z23.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6b0  // sclamp { z16.s-z17.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      <span class="stringliteral">&quot;uzp1 z16.b, z22.b, z16.b\n&quot;</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="stringliteral">&quot;uzp1 z18.b, z27.b, z29.b\n&quot;</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      <span class="stringliteral">&quot;uzp1 z17.b, z23.b, z17.b\n&quot;</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="stringliteral">&quot;uzp1 z16.b, z19.b, z16.b\n&quot;</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      <span class="stringliteral">&quot;st1b { z16.b }, p0, [x24]\n&quot;</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      <span class="stringliteral">&quot;add x24, x24, x22\n&quot;</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      <span class="stringliteral">&quot;uzp1 z16.b, z18.b, z17.b\n&quot;</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      <span class="stringliteral">&quot;st1b { z16.b }, p0, [x24]\n&quot;</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <span class="stringliteral">&quot;add x24, x24, x22\n&quot;</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;      <span class="stringliteral">&quot;blt 16b\n&quot;</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;      <span class="stringliteral">&quot;17:&quot;</span>  <span class="comment">// Store to output array: Accumulator row 0 oddments</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <span class="stringliteral">&quot;cbz x20, 18f\n&quot;</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      <span class="stringliteral">&quot;.inst 0xc086000a  // mova { z10.s-z11.s }, za0h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0860058  // mova { z24.s-z25.s }, za1h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a4a40a  // sqdmulh { z10.s-z11.s }, { z10.s-z11.s }, z4.s\n&quot;</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;      <span class="stringliteral">&quot;.inst 0xc086009a  // mova { z26.s-z27.s }, za2h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="stringliteral">&quot;.inst 0xc08600de  // mova { z30.s-z31.s }, za3h.s[x12, 0:1]\n&quot;</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a5a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z5.s\n&quot;</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a6a41a  // sqdmulh { z26.s-z27.s }, { z26.s-z27.s }, z6.s\n&quot;</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a7a41e  // sqdmulh { z30.s-z31.s }, { z30.s-z31.s }, z7.s\n&quot;</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1aca22a  // srshl { z10.s-z11.s }, { z10.s-z11.s }, z12.s\n&quot;</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1ada238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z13.s\n&quot;</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1aea23a  // srshl { z26.s-z27.s }, { z26.s-z27.s }, z14.s\n&quot;</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1afa23e  // srshl { z30.s-z31.s }, { z30.s-z31.s }, z15.s\n&quot;</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a30a  // add { z10.s-z11.s }, { z10.s-z11.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a31a  // add { z26.s-z27.s }, { z26.s-z27.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1a0a31e  // add { z30.s-z31.s }, { z30.s-z31.s }, z0.s\n&quot;</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6aa  // sclamp { z10.s-z11.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6b8  // sclamp { z24.s-z25.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <span class="stringliteral">&quot;uzp1 z17.b, z10.b, z24.b\n&quot;</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6ba  // sclamp { z26.s-z27.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;      <span class="stringliteral">&quot;.inst 0xc1b4c6be  // sclamp { z30.s-z31.s }, z21.s, z20.s\n&quot;</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      <span class="stringliteral">&quot;uzp1 z16.b, z26.b, z30.b\n&quot;</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;      <span class="stringliteral">&quot;uzp1 z16.b, z17.b, z16.b\n&quot;</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <span class="stringliteral">&quot;st1b { z16.b }, p0, [x24]\n&quot;</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="stringliteral">&quot;18:&quot;</span>  <span class="comment">// Store to output array: Accumulator row 0 oddments: End</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;      <span class="stringliteral">&quot;19:&quot;</span>  <span class="comment">// Store to output array: End</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;      <span class="stringliteral">&quot;tbz x14, #0, 21f\n&quot;</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      <span class="stringliteral">&quot;mov x12, #0x0\n&quot;</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;      <span class="stringliteral">&quot;cntw x20\n&quot;</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;      <span class="stringliteral">&quot;20:&quot;</span>  <span class="comment">// Store to output array: Refill accumulators: Loop</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <span class="stringliteral">&quot;.inst 0xa040c5bc  // ld1w { z28.s-z31.s }, pn9.b/Z, [x13]\n&quot;</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840780  // mova za0h.s[x12], { z28.s-z31.s }\n&quot;</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;      <span class="stringliteral">&quot;.inst 0xa041c5b0  // ld1w { z16.s-z19.s }, pn9.b/Z, [x13, #0x4, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840601  // mova za1h.s[x12], { z16.s-z19.s }\n&quot;</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      <span class="stringliteral">&quot;.inst 0xa042c5ac  // ld1w { z12.s-z15.s }, pn9.b/Z, [x13, #0x8, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840582  // mova za2h.s[x12], { z12.s-z15.s }\n&quot;</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      <span class="stringliteral">&quot;.inst 0xa043c5a0  // ld1w { z0.s-z3.s }, pn9.b/Z, [x13, #0xc, MUL VL]\n&quot;</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      <span class="stringliteral">&quot;.inst 0xc0840403  // mova za3h.s[x12], { z0.s-z3.s }\n&quot;</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;      <span class="stringliteral">&quot;add x12, x12, #0x4\n&quot;</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;      <span class="stringliteral">&quot;cmp x12, x20\n&quot;</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;      <span class="stringliteral">&quot;addvl x13, x13, #16\n&quot;</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="stringliteral">&quot;blt 20b\n&quot;</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      <span class="stringliteral">&quot;21:&quot;</span>  <span class="comment">// End block</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      <span class="stringliteral">&quot;incw x28, ALL, MUL #4\n&quot;</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      <span class="stringliteral">&quot;cmp x28, x27\n&quot;</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      <span class="stringliteral">&quot;blt 3b\n&quot;</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      <span class="stringliteral">&quot;incw x9\n&quot;</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;      <span class="stringliteral">&quot;cmp x9, x10\n&quot;</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      <span class="stringliteral">&quot;mov x28, #0x0\n&quot;</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;      <span class="stringliteral">&quot;mov x26, x25\n&quot;</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;      <span class="stringliteral">&quot;blt 3b\n&quot;</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;      <span class="stringliteral">&quot;.inst 0xd503467f  // SMSTOP\n&quot;</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      :</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;      : [<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>] <span class="stringliteral">&quot;r&quot;</span> (&amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), [offsetof_A] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, A)), [offsetof_B] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, B)), [offsetof_C] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, C)), [offsetof_K] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>)), [offsetof_M] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>)), [offsetof_N] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>)), [offsetof_Requantize32_c_offset] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, c_offset)), [offsetof_Requantize32_maxval] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, maxval)), [offsetof_Requantize32_minval] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, minval)), [offsetof_Requantize32_per_channel_muls] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, per_channel_muls)), [offsetof_Requantize32_per_channel_right_shifts] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, per_channel_right_shifts)), [offsetof_Requantize32_per_layer_mul] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, per_layer_mul)), [offsetof_Requantize32_per_layer_right_shift] <span class="stringliteral">&quot;I&quot;</span> (offsetof(Requantize32, per_layer_right_shift)), [offsetof_accumulator_buffer] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, accumulator_buffer)), [offsetof_bias] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>)), [offsetof_flags] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, flags)), [offsetof_kstride_bytes] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, kstride_bytes)), [offsetof_ldcb] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, ldcb)), [offsetof_n_0] <span class="stringliteral">&quot;I&quot;</span> (offsetof(KernelArgs, n_0)), [rq] <span class="stringliteral">&quot;r&quot;</span> (&amp;rq)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      : <span class="stringliteral">&quot;cc&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span>, <span class="stringliteral">&quot;p0&quot;</span>, <span class="stringliteral">&quot;p1&quot;</span>, <span class="stringliteral">&quot;p2&quot;</span>, <span class="stringliteral">&quot;p3&quot;</span>, <span class="stringliteral">&quot;p4&quot;</span>, <span class="stringliteral">&quot;p5&quot;</span>, <span class="stringliteral">&quot;p6&quot;</span>, <span class="stringliteral">&quot;p7&quot;</span>, <span class="stringliteral">&quot;p8&quot;</span>, <span class="stringliteral">&quot;p9&quot;</span>, <span class="stringliteral">&quot;p10&quot;</span>, <span class="stringliteral">&quot;p11&quot;</span>, <span class="stringliteral">&quot;p12&quot;</span>, <span class="stringliteral">&quot;p13&quot;</span>, <span class="stringliteral">&quot;p14&quot;</span>, <span class="stringliteral">&quot;p15&quot;</span>, <span class="stringliteral">&quot;x9&quot;</span>, <span class="stringliteral">&quot;x10&quot;</span>, <span class="stringliteral">&quot;x11&quot;</span>, <span class="stringliteral">&quot;x12&quot;</span>, <span class="stringliteral">&quot;x13&quot;</span>, <span class="stringliteral">&quot;x14&quot;</span>, <span class="stringliteral">&quot;x20&quot;</span>, <span class="stringliteral">&quot;x21&quot;</span>, <span class="stringliteral">&quot;x22&quot;</span>, <span class="stringliteral">&quot;x23&quot;</span>, <span class="stringliteral">&quot;x24&quot;</span>, <span class="stringliteral">&quot;x25&quot;</span>, <span class="stringliteral">&quot;x26&quot;</span>, <span class="stringliteral">&quot;x27&quot;</span>, <span class="stringliteral">&quot;x28&quot;</span>, <span class="stringliteral">&quot;z0&quot;</span>, <span class="stringliteral">&quot;z1&quot;</span>, <span class="stringliteral">&quot;z2&quot;</span>, <span class="stringliteral">&quot;z3&quot;</span>, <span class="stringliteral">&quot;z4&quot;</span>, <span class="stringliteral">&quot;z5&quot;</span>, <span class="stringliteral">&quot;z6&quot;</span>, <span class="stringliteral">&quot;z7&quot;</span>, <span class="stringliteral">&quot;z8&quot;</span>, <span class="stringliteral">&quot;z9&quot;</span>, <span class="stringliteral">&quot;z10&quot;</span>, <span class="stringliteral">&quot;z11&quot;</span>, <span class="stringliteral">&quot;z12&quot;</span>, <span class="stringliteral">&quot;z13&quot;</span>, <span class="stringliteral">&quot;z14&quot;</span>, <span class="stringliteral">&quot;z15&quot;</span>, <span class="stringliteral">&quot;z16&quot;</span>, <span class="stringliteral">&quot;z17&quot;</span>, <span class="stringliteral">&quot;z18&quot;</span>, <span class="stringliteral">&quot;z19&quot;</span>, <span class="stringliteral">&quot;z20&quot;</span>, <span class="stringliteral">&quot;z21&quot;</span>, <span class="stringliteral">&quot;z22&quot;</span>, <span class="stringliteral">&quot;z23&quot;</span>, <span class="stringliteral">&quot;z24&quot;</span>, <span class="stringliteral">&quot;z25&quot;</span>, <span class="stringliteral">&quot;z26&quot;</span>, <span class="stringliteral">&quot;z27&quot;</span>, <span class="stringliteral">&quot;z28&quot;</span>, <span class="stringliteral">&quot;z29&quot;</span>, <span class="stringliteral">&quot;z30&quot;</span>, <span class="stringliteral">&quot;z31&quot;</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    );</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}  <span class="comment">// namespace arm_gemm</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="preprocessor">#endif  // ARM_COMPUTE_ENABLE_SME2</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00096">CpuGemmAssemblyDispatch.cpp:96</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdeci">@ B</div><div class="ttdoc">Blue channel.</div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="aarm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00097">CpuGemmAssemblyDispatch.cpp:97</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00095">CpuGemmAssemblyDispatch.cpp:95</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdeci">@ A</div><div class="ttdoc">Alpha channel.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="dir_1bfffff844e6b15c54f06f69450095a2.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_723cad0a9fc6b3eccaf5eb37dae8df5c.xhtml">sme2_interleaved_nomerge_s8q_mopa_1VLx4VL</a></li><li class="navelem"><a class="el" href="arm__gemm_2kernels_2sme2__interleaved__nomerge__s8q__mopa__1_v_lx4_v_l_2generic_8cpp.xhtml">generic.cpp</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
