<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Program Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_program.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">Program Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> class.  
 <a href="classarm__compute_1_1_program.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml">CLCompileContext.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad00a93de0aaf77172116c42bed3a5627"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a> ()</td></tr>
<tr class="memdesc:ad00a93de0aaf77172116c42bed3a5627"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">More...</a><br /></td></tr>
<tr class="separator:ad00a93de0aaf77172116c42bed3a5627"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab761eeac6f1072ad0c2920feeb0a8076"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#ab761eeac6f1072ad0c2920feeb0a8076">Program</a> (cl::Context context, std::string <a class="el" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, std::string source)</td></tr>
<tr class="memdesc:ab761eeac6f1072ad0c2920feeb0a8076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct program from source file.  <a href="classarm__compute_1_1_program.xhtml#ab761eeac6f1072ad0c2920feeb0a8076">More...</a><br /></td></tr>
<tr class="separator:ab761eeac6f1072ad0c2920feeb0a8076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1615f70129362da8c0c0cd82ef6c1b44"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a1615f70129362da8c0c0cd82ef6c1b44">Program</a> (cl::Context context, cl::Device device, std::string <a class="el" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, std::vector&lt; unsigned char &gt; <a class="el" href="classarm__compute_1_1_program.xhtml#a1720acc8e4df8f0a5f8032dc4bb1bf7b">binary</a>)</td></tr>
<tr class="memdesc:a1615f70129362da8c0c0cd82ef6c1b44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct program from binary file.  <a href="classarm__compute_1_1_program.xhtml#a1615f70129362da8c0c0cd82ef6c1b44">More...</a><br /></td></tr>
<tr class="separator:a1615f70129362da8c0c0cd82ef6c1b44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40ae1e88dc2e254ba8304fbc13349efb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a40ae1e88dc2e254ba8304fbc13349efb">Program</a> (const <a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;)=default</td></tr>
<tr class="memdesc:a40ae1e88dc2e254ba8304fbc13349efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Copy Constructor.  <a href="classarm__compute_1_1_program.xhtml#a40ae1e88dc2e254ba8304fbc13349efb">More...</a><br /></td></tr>
<tr class="separator:a40ae1e88dc2e254ba8304fbc13349efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a466ef007aa3d82a7b5910fac373a3a11"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a466ef007aa3d82a7b5910fac373a3a11">Program</a> (<a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a466ef007aa3d82a7b5910fac373a3a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Move Constructor.  <a href="classarm__compute_1_1_program.xhtml#a466ef007aa3d82a7b5910fac373a3a11">More...</a><br /></td></tr>
<tr class="separator:a466ef007aa3d82a7b5910fac373a3a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa960ae62f188ce6593855ea9d90f3140"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#aa960ae62f188ce6593855ea9d90f3140">operator=</a> (const <a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;)=default</td></tr>
<tr class="memdesc:aa960ae62f188ce6593855ea9d90f3140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default copy assignment operator.  <a href="classarm__compute_1_1_program.xhtml#aa960ae62f188ce6593855ea9d90f3140">More...</a><br /></td></tr>
<tr class="separator:aa960ae62f188ce6593855ea9d90f3140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac068143ead400561b25102c60ccd817d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#ac068143ead400561b25102c60ccd817d">operator=</a> (<a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ac068143ead400561b25102c60ccd817d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classarm__compute_1_1_program.xhtml#ac068143ead400561b25102c60ccd817d">More...</a><br /></td></tr>
<tr class="separator:ac068143ead400561b25102c60ccd817d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d89c28bd42ba9a52da008bb69367171"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a> () const</td></tr>
<tr class="memdesc:a1d89c28bd42ba9a52da008bb69367171"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns program name.  <a href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">More...</a><br /></td></tr>
<tr class="separator:a1d89c28bd42ba9a52da008bb69367171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1720acc8e4df8f0a5f8032dc4bb1bf7b"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; unsigned char &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a1720acc8e4df8f0a5f8032dc4bb1bf7b">binary</a> () const</td></tr>
<tr class="memdesc:a1720acc8e4df8f0a5f8032dc4bb1bf7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns program binary data.  <a href="classarm__compute_1_1_program.xhtml#a1720acc8e4df8f0a5f8032dc4bb1bf7b">More...</a><br /></td></tr>
<tr class="separator:a1720acc8e4df8f0a5f8032dc4bb1bf7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab55379a8baa25825d27d3c8339114862"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#ab55379a8baa25825d27d3c8339114862">operator cl::Program</a> () const</td></tr>
<tr class="memdesc:ab55379a8baa25825d27d3c8339114862"><td class="mdescLeft">&#160;</td><td class="mdescRight">User-defined conversion to the underlying CL program.  <a href="classarm__compute_1_1_program.xhtml#ab55379a8baa25825d27d3c8339114862">More...</a><br /></td></tr>
<tr class="separator:ab55379a8baa25825d27d3c8339114862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae6f29a93332f73bbb8371e43521476"><td class="memItemLeft" align="right" valign="top">cl::Program&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#aeae6f29a93332f73bbb8371e43521476">build</a> (const std::string &amp;<a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a3e76c95cfc49454dbfff42e02d25ccb8">build_options</a>=&quot;&quot;) const</td></tr>
<tr class="memdesc:aeae6f29a93332f73bbb8371e43521476"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build the underlying CL program.  <a href="classarm__compute_1_1_program.xhtml#aeae6f29a93332f73bbb8371e43521476">More...</a><br /></td></tr>
<tr class="separator:aeae6f29a93332f73bbb8371e43521476"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a14c39544e9ac2c2fce1179bd99f093c4"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">build</a> (const cl::Program &amp;program, const std::string &amp;<a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a3e76c95cfc49454dbfff42e02d25ccb8">build_options</a>=&quot;&quot;)</td></tr>
<tr class="memdesc:a14c39544e9ac2c2fce1179bd99f093c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build the given CL program.  <a href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">More...</a><br /></td></tr>
<tr class="separator:a14c39544e9ac2c2fce1179bd99f093c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> class. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00087">87</a> of file <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml">CLCompileContext.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad00a93de0aaf77172116c42bed3a5627"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad00a93de0aaf77172116c42bed3a5627">&#9670;&nbsp;</a></span>Program() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00082">82</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    : _context(), _device(), _is_binary(<span class="keyword">false</span>), _name(), _source(), _binary()</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab761eeac6f1072ad0c2920feeb0a8076"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab761eeac6f1072ad0c2920feeb0a8076">&#9670;&nbsp;</a></span>Program() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct program from source file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>CL context used to create the program. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> name. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">source</td><td><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> source. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00087">87</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    : _context(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>)), _device(), _is_binary(<span class="keyword">false</span>), _name(std::move(<a class="code" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>)), _source(std::move(source)), _binary()</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1615f70129362da8c0c0cd82ef6c1b44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1615f70129362da8c0c0cd82ef6c1b44">&#9670;&nbsp;</a></span>Program() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::Device&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned char &gt;&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct program from binary file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>CL context used to create the program. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>CL device for which the programs are created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> name. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">binary</td><td><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a> binary. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    : _context(std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>)), _device(std::move(device)), _is_binary(<span class="keyword">true</span>), _name(std::move(<a class="code" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>)), _source(), _binary(std::move(<a class="code" href="classarm__compute_1_1_program.xhtml#a1720acc8e4df8f0a5f8032dc4bb1bf7b">binary</a>))</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a40ae1e88dc2e254ba8304fbc13349efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40ae1e88dc2e254ba8304fbc13349efb">&#9670;&nbsp;</a></span>Program() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Copy Constructor. </p>

</div>
</div>
<a id="a466ef007aa3d82a7b5910fac373a3a11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a466ef007aa3d82a7b5910fac373a3a11">&#9670;&nbsp;</a></span>Program() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Move Constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a1720acc8e4df8f0a5f8032dc4bb1bf7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1720acc8e4df8f0a5f8032dc4bb1bf7b">&#9670;&nbsp;</a></span>binary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;unsigned char&gt;&amp; binary </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns program binary data. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a>'s binary data. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00127">127</a> of file <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml">CLCompileContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> _binary;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a14c39544e9ac2c2fce1179bd99f093c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14c39544e9ac2c2fce1179bd99f093c4">&#9670;&nbsp;</a></span>build() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool build </td>
          <td>(</td>
          <td class="paramtype">const cl::Program &amp;&#160;</td>
          <td class="paramname"><em>program</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>build_options</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Build the given CL program. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">program</td><td>The CL program to build. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">build_options</td><td>Options to build the CL program.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the CL program builds successfully. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">return</span> program.build(<a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a3e76c95cfc49454dbfff42e02d25ccb8">build_options</a>.c_str()) == CL_SUCCESS;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> cl::Error &amp;e)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        cl_int     err        = CL_SUCCESS;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> build_info = program.getBuildInfo&lt;CL_PROGRAM_BUILD_LOG&gt;(&amp;err);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;pair : build_info)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            std::cerr &lt;&lt; pair.second &lt;&lt; std::endl;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">build_options</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00129">Program::build()</a>, and <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00159">CLCompileContext::create_kernel()</a>.</p>

</div>
</div>
<a id="aeae6f29a93332f73bbb8371e43521476"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeae6f29a93332f73bbb8371e43521476">&#9670;&nbsp;</a></span>build() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Program build </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>build_options</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Build the underlying CL program. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">build_options</td><td>Options used to build the CL program.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to itself. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    cl::Program cl_program = <span class="keyword">static_cast&lt;</span>cl::Program<span class="keyword">&gt;</span>(*this);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">build</a>(cl_program, <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a3e76c95cfc49454dbfff42e02d25ccb8">build_options</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> cl_program;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00109">Program::build()</a>, and <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">build_options</a>.</p>

</div>
</div>
<a id="a1d89c28bd42ba9a52da008bb69367171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d89c28bd42ba9a52da008bb69367171">&#9670;&nbsp;</a></span>name()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns program name. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class.">Program</a>'s name. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00119">119</a> of file <a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml">CLCompileContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> _name;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab55379a8baa25825d27d3c8339114862"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab55379a8baa25825d27d3c8339114862">&#9670;&nbsp;</a></span>operator cl::Program()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">operator cl::Program </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>User-defined conversion to the underlying CL program. </p>
<dl class="section return"><dt>Returns</dt><dd>The CL program object. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span>(_is_binary)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> cl::Program(_context, { _device }, { _binary });</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> cl::Program(_context, _source, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa960ae62f188ce6593855ea9d90f3140"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa960ae62f188ce6593855ea9d90f3140">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default copy assignment operator. </p>

</div>
</div>
<a id="ac068143ead400561b25102c60ccd817d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac068143ead400561b25102c60ccd817d">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/CL/<a class="el" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml">CLCompileContext.h</a></li>
<li>src/core/CL/<a class="el" href="_c_l_compile_context_8cpp_source.xhtml">CLCompileContext.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_program_xhtml_a1720acc8e4df8f0a5f8032dc4bb1bf7b"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a1720acc8e4df8f0a5f8032dc4bb1bf7b">arm_compute::Program::binary</a></div><div class="ttdeci">const std::vector&lt; unsigned char &gt; &amp; binary() const</div><div class="ttdoc">Returns program binary data.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00127">CLCompileContext.h:127</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_program_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::Program::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns program name.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00119">CLCompileContext.h:119</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00160">DirectConv2d.cpp:160</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_program_xhtml_a14c39544e9ac2c2fce1179bd99f093c4"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">arm_compute::Program::build</a></div><div class="ttdeci">static bool build(const cl::Program &amp;program, const std::string &amp;build_options=&quot;&quot;)</div><div class="ttdoc">Build the given CL program.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00109">CLCompileContext.cpp:109</a></div></div>
<div class="ttc" id="a_cl_im2_col_kernel_8cpp_xhtml_a3e76c95cfc49454dbfff42e02d25ccb8"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a3e76c95cfc49454dbfff42e02d25ccb8">build_options</a></div><div class="ttdeci">std::set&lt; std::string &gt; build_options</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">ClIm2ColKernel.cpp:58</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_program.xhtml">Program</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
