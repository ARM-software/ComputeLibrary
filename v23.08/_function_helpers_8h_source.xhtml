<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/backends/FunctionHelpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_function_helpers_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FunctionHelpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_function_helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_post_op_8h.xhtml">arm_compute/core/experimental/IPostOp.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_post_ops_8h.xhtml">arm_compute/core/experimental/PostOps.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_type_printer_8h.xhtml">arm_compute/graph/TypePrinter.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_convolution_batch_normalization_function_8h.xhtml">arm_compute/graph/backends/FusedConvolutionBatchNormalizationFunction.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_convolution_batch_normalization_with_post_ops_function_8h.xhtml">arm_compute/graph/backends/FusedConvolutionBatchNormalizationWithPostOpsFunction.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_depthwise_convolution_batch_normalization_function_8h.xhtml">arm_compute/graph/backends/FusedDepthwiseConvolutionBatchNormalizationFunction.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2backends_2_utils_8h.xhtml">arm_compute/graph/backends/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_nodes_8h.xhtml">arm_compute/graph/nodes/Nodes.h</a>&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>graph</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>backends</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span>detail</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/** Returns backing tensor of a given tensor</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @tparam TargetInfo Target information</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in] tensor Tensor to extract the backing tensor from</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * @return Backing tensor if present else nullptr</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">   62</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">get_backing_tensor</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *backing_tensor = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc().target != TargetInfo::TargetType);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">// Get backing tensor handle</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml">ITensorHandle</a> *tensor_handle = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Get backing tensor</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        backing_tensor = (tensor_handle != <span class="keyword">nullptr</span>) ? arm_compute::utils::cast::polymorphic_cast&lt;typename TargetInfo::TensorType *&gt;(&amp;tensor_handle-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">tensor</a>()) : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> backing_tensor;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">   78</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">validate_node</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node, <span class="keywordtype">size_t</span> num_expected_inputs, <span class="keywordtype">size_t</span> num_expected_outputs)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>()</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; ID: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>()</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                  &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                  &lt;&lt; std::endl);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(TargetInfo::TargetType != node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">assigned_target</a>());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>() != num_expected_inputs);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != num_expected_outputs);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(node, num_expected_inputs, num_expected_outputs);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">/** Creates a backend activation layer function</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * @tparam ActivationLayerFunction Backend activation function</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> * @tparam TargetInfo              Target-specific information</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> * @return Backend activation layer function</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ActivationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">  102</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">create_activation_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#a39a8dd296461705ee5cb54eacb4b2818">activation_info</a>();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Create function</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ActivationLayerFunction&gt;();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Activation function: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation()</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; a: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a()</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; b: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b()</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace : &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/** Creates a backend argminmax layer function</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @tparam ArgMinMaxLayerFunction Backend activation function</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * @tparam TargetInfo             Target-specific information</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * @return Backend argminmax layer function</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ArgMinMaxLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac707d7ce6578bee792a6bb794236bd49">  140</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac707d7ce6578bee792a6bb794236bd49">create_arg_min_max_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml">ArgMinMaxLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>         op     = node.<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a397a10d63c17d6505a7470fa35f344e0">reduction_operation</a>();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                     axis   = node.<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Create function</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ArgMinMaxLayerFunction&gt;();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, axis, output, op);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Reduction Operation: &quot;</span> &lt;&lt; op</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; axis: &quot;</span> &lt;&lt; axis</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">/** Create a backend batch normalization layer function</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> * @tparam BatchNormalizationLayerFunction Backend batch normalization function</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * @tparam TargetInfo                      Target-specific information</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> * @return Backend batch normalization layer function</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> BatchNormalizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">  177</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">create_batch_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">BatchNormalizationLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 5 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *mean  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *var   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *beta  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *gamma = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(4));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>   = node.<a class="code" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        fused_act = node.<a class="code" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;BatchNormalizationLayerFunction&gt;();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, fused_act);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Epsilon: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">/** Create a backend batch normalization layer function</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * @tparam BatchNormalizationLayerFunction Backend batch normalization function</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * @tparam TargetInfo                      Target-specific information</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> * @return Backend batch normalization layer function</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FusedLayerTypes, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">  222</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">create_fused_convolution_batch_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">FusedConvolutionBatchNormalizationNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 7 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *mean    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *var     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(4));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *beta    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(5));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *gamma   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(6));</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>                fast_math  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">fast_math_hint</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>               <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>    = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    std::string                     func_name;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">using</span> FType = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_function.xhtml">FusedConvolutionBatchNormalizationFunction&lt;TargetInfo, FusedLayerTypes&gt;</a>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;FType&gt;(</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                    std::string(<span class="stringliteral">&quot;FusedConvolutionBatchNormalizationLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, fast_math, fused_act);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">/** Create a backend fused depthwise convolution batch normalization layer function</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> * @tparam FusedLayerTypes             Fused layer types</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> * @tparam TargetInfo                  Target-specific information</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"> * @return Backend fused depthwise convolution batch normalization layer function</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FusedLayerTypes, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">  279</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">create_fused_depthwise_convolution_batch_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">FusedDepthwiseConvolutionBatchNormalizationNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 7 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *mean    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *var     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(4));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *beta    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(5));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *gamma   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(6));</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        depth_multiplier = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#ac8cef0874f04203401b5d7f5a6fa2a34">depth_multiplier</a>();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act        = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>               <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>          = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::string                     func_name;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">using</span> FType = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_fused_depthwise_convolution_batch_normalization_function.xhtml">FusedDepthwiseConvolutionBatchNormalizationFunction&lt;TargetInfo, FusedLayerTypes&gt;</a>;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;FType&gt;(</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                    std::string(<span class="stringliteral">&quot;FusedDepthwiseConvolutionBatchNormalizationLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;}</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">/** Create a backend bounding box transform layer function</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> * @tparam BoundingBoxTransformLayerFunction    Backend bounding box transform function</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> * @tparam TargetInfo                           Target-specific information</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> * @return Backend bounding box transform layer function</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> BoundingBoxTransformLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">  334</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">create_bounding_box_transform_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *deltas    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>   bbox_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a7a5bf7cea9e9cf19a6cf3e5240c5fff7">info</a>();</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;BoundingBoxTransformLayerFunction&gt;();</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, deltas, bbox_info);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; BoundingBox Info img W: &quot;</span> &lt;&lt; bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">img_width</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; BoundingBox Info img H: &quot;</span> &lt;&lt; bbox_info.<a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">img_height</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">/** Create a backend channel shuffle layer function</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> * @tparam ChannelShuffleLayerFunction Backend channel shuffle function</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> * @tparam TargetInfo                  Target-specific information</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> * @return Backend channel shuffle layer function</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ChannelShuffleLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">  372</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">create_channel_shuffle_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// Create function</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ChannelShuffleLayerFunction&gt;();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num groups: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">/** Create a backend layer concatenate function</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"> * @tparam ConcatenateLayerFunction Backend concatenate function</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"> * @tparam TargetInfo               Target-specific information</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> * @return Backend concatenate layer function</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConcatenateLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">  407</a></span>&#160;std::unique_ptr&lt;arm_compute::IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">create_concatenate_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating Concatenate node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// Return nullptr if depth concatenate is switched off</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">if</span>(!node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a6507f40ddf408e1f124cb84fa5cbfd1e">is_enabled</a>())</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    std::vector&lt;typename TargetInfo::SrcTensorType *&gt; inputs;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>(); ++i)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        inputs.push_back(get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(i)));</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0) != <span class="keyword">nullptr</span> ? node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a> : <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>                     concat_axis = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a051cd2a8d15cf783e9ab9a00451c77f6">concatenation_axis</a>());</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ConcatenateLayerFunction&gt;();</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    func-&gt;configure(inputs, output, concat_axis);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(output-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    std::ostringstream qss;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; output-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num Inputs: &quot;</span> &lt;&lt; inputs.size()</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; concat_axis</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                               &lt;&lt; qss.str()</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">/** Create a backend convolution layer function</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment"> * @tparam ConvolutionLayerFunctions Backend convolution functions</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"> * @tparam TargetInfo                Target-specific information</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"> * @return Backend convolution layer function</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConvolutionLayerFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">  464</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">create_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        biases-&gt;info()-&gt;set_data_type(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>     = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>   conv_algorithm = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">convolution_method</a>();</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>                fast_math      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">fast_math_hint</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act      = node.<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    std::string                     func_name;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">ConvolutionMethod::Winograd</a>)</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;WinogradConvolutionLayer does not support grouping!&quot;</span>);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::WinogradConvolutionLayer&gt;(</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                        std::string(<span class="stringliteral">&quot;WinogradConvolutionLayer&quot;</span>), mm,</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act, fast_math);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">ConvolutionMethod::Direct</a>)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> != 1, <span class="stringliteral">&quot;DirectConvolutionLayer does not support grouping!&quot;</span>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename ConvolutionLayerFunctions::DirectConvolutionLayer&gt;(</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>),</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, fused_act);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GEMMConvolutionLayer&gt;(</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                        std::string(<span class="stringliteral">&quot;GEMMConvolutionLayer&quot;</span>), mm,</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                        <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>), fused_act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GenericConvolutionLayer&gt;(</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                        std::string(<span class="stringliteral">&quot;GenericConvolutionLayer&quot;</span>), mm,</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                        <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>), fused_act, fast_math, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160; </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    std::ostringstream qss;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Groups: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                               &lt;&lt; qss.str()</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">/** Create a backend convolution layer function with post operator</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment"> * @tparam ConvolutionLayerFunctions Backend convolution functions</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"> * @tparam TargetInfo                Target-specific information</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment"> * @return Backend convolution layer function</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConvolutionLayerFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00555"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae1fc8d58864f288cb356851d79f1c28d">  555</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae1fc8d58864f288cb356851d79f1c28d">create_fused_convolution_with_post_op</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">FusedConvolutionWithPostOpNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;{</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 4 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160; </div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    {</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        biases-&gt;info()-&gt;set_data_type(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; </div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;typename TargetInfo::TensorType *&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">auto</span> &amp;post_op_info_list = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">post_op_info_list</a>();</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op_info : post_op_info_list)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">switch</span>(post_op_info-&gt;type())</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">PostOpType::Activation</a>:</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            {</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a> = utils::cast::polymorphic_downcast&lt;const ConvPostOpInfoActivation *&gt;(post_op_info.get());</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.template push_back_op&lt;experimental::PostOpAct&lt;typename TargetInfo::TensorType *&gt;&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>-&gt;_act);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordflow">case</span> PostOpType::Eltwise_Add:</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *add_input    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>                       eltwise_info = utils::cast::polymorphic_downcast&lt;const ConvPostOpInfoEltwiseAdd *&gt;(post_op_info.get());</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.template push_back_op&lt;experimental::PostOpEltwiseAdd&lt;typename TargetInfo::TensorType *&gt;&gt;(add_input, eltwise_info-&gt;_prev_op_dst_pos, eltwise_info-&gt;_policy);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported PostOpType&quot;</span>);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            }</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    }</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    std::string                     func_name;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160; </div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="comment">// Fuse convolution with post ops is only supported for conv1x1, which is only implemented as gemmconv2d</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GEMMConvolutionLayer&gt;(</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                    std::string(<span class="stringliteral">&quot;GEMMConvolutionLayer&quot;</span>), mm,</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                    <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>), fused_act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    std::ostringstream qss;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    }</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Groups: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                               &lt;&lt; qss.str()</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Post ops&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;}</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">/** Create a backend convolution batch normalization layer function with post operator</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment"> * @tparam FusedLayerTypes           Backend convolution functions</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment"> * @tparam TargetInfo                Target-specific information</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"> * @return Backend fused convolution with batch normalization layer function</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FusedLayerTypes, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00649"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af2cc0b57645cd940d1ac0fd9b7171ffc">  649</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af2cc0b57645cd940d1ac0fd9b7171ffc">create_fused_convolution_batch_normalization_with_post_op</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml">FusedConvolutionBatchNormalizationWithPostOpsNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;{</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 8 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *mean    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *var     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(4));</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *beta    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(5));</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *gamma   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(6));</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160; </div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160; </div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">num_groups</a>();</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>          fast_math  = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">fast_math_hint</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>    = node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;typename TargetInfo::TensorType *&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keyword">auto</span> &amp;post_op_info_list = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">post_op_info_list</a>();</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op_info : post_op_info_list)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">switch</span>(post_op_info-&gt;type())</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        {</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">PostOpType::Activation</a>:</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            {</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a> = utils::cast::polymorphic_downcast&lt;const ConvPostOpInfoActivation *&gt;(post_op_info.get());</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.template push_back_op&lt;experimental::PostOpAct&lt;typename TargetInfo::TensorType *&gt;&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>-&gt;_act);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            <span class="keywordflow">case</span> PostOpType::Eltwise_Add:</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            {</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *add_input    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(3));</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>                       eltwise_info = utils::cast::polymorphic_downcast&lt;const ConvPostOpInfoEltwiseAdd *&gt;(post_op_info.get());</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.template push_back_op&lt;experimental::PostOpEltwiseAdd&lt;typename TargetInfo::TensorType *&gt;&gt;(add_input, eltwise_info-&gt;_prev_op_dst_pos, eltwise_info-&gt;_policy);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            {</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported PostOpType&quot;</span>);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            }</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    }</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160; </div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    std::string                     func_name;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160; </div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keyword">using</span> FType = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_with_post_ops_function.xhtml">FusedConvolutionBatchNormalizationWithPostOpsFunction&lt;TargetInfo, FusedLayerTypes&gt;</a>;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160; </div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    std::tie(func, func_name) = create_named_memory_managed_function&lt;FType&gt;(</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                    std::string(<span class="stringliteral">&quot;FusedConvolutionBatchNormalizationLayerWithPostOpsLayer&quot;</span>), mm, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, fast_math, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160; </div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Post Ops:&quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">/** Create a backend deconvolution layer function</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment"> * @tparam DeconvolutionLayerFunction Backend deconvolution function</span></div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment"> * @tparam TargetInfo                 Target-specific information</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment"> * @return Backend deconvolution layer function</span></div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DeconvolutionLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00732"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">  732</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">create_deconvolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">DeconvolutionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;{</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160; </div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160; </div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> deconv_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml#ae304796bd723ec2b2d50b88236498bd1">deconvolution_info</a>();</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160; </div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160; </div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    std::tie(func, std::ignore) = create_named_memory_managed_function&lt;DeconvolutionLayerFunction&gt;(</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                      std::string(), mm,</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, deconv_info);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160; </div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordflow">return</span> func;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;}</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">/** Create a backend layer depth-wise convolution function</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment"> * @tparam DepthwiseConvolutionLayerFunctions Backend depthwise convolution function</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment"> * @tparam TargetInfo                         Target-specific information</span></div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment"> * @return Backend depth-wise convolution layer function</span></div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthwiseConvolutionLayer, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">  775</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">create_depthwise_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160; </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160; </div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160; </div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        biases-&gt;info()-&gt;set_data_type(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">convolution_info</a>();</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        depth_multiplier = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">depth_multiplier</a>();</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> fused_act        = node.<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    std::unique_ptr&lt;IFunction&gt; func;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    std::string                func_name;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160; </div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    std::tie(func, func_name) = create_named_function&lt;DepthwiseConvolutionLayer&gt;(</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                    std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer&quot;</span>),</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, fused_act);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160; </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    std::ostringstream qss;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    {</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    }</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; func_name</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Depth multiplier: &quot;</span> &lt;&lt; depth_multiplier</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                               &lt;&lt; qss.str()</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() ? <span class="stringliteral">&quot; &quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;}</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment">/** Create a backend depth to space layer function</span></div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment"> * @tparam DepthToSpaceLayerNode Function Backend depth to space function</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment"> * @tparam TargetInfo            Target-specific information</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment"> * @return Backend depth to space layer function</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthToSpaceLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00837"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aae3c0800f31c468404c636104f3c118d">  837</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aae3c0800f31c468404c636104f3c118d">create_depth_to_space_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml">DepthToSpaceLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;{</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160; </div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160; </div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160; </div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;DepthToSpaceLayerFunction&gt;();</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a20c3747fefdcc35a82acee379098a840">block_shape</a>());</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160; </div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Block Size: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a20c3747fefdcc35a82acee379098a840">block_shape</a>()</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160; </div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;}</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">/** Create a backend dequantize layer function</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment"> * @tparam DequantizationLayer Function Backend dequantize function</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment"> * @tparam TargetInfo          Target-specific information</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment"> * @return Backend dequantize layer function</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DequantizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00876"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">  876</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">create_dequantization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;{</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160; </div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160; </div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;DequantizationLayerFunction&gt;();</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; </div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input quantization info: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160; </div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">/** Create a backend detection output layer function</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment"> * @tparam DetectionOutputLayer Function Backend detection output function</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment"> * @return Backend detection output layer function</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DetectionOutputLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00914"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">  914</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">create_detection_output_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;{</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160; </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input0      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input1      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input2      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a>   detect_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a4491336dccd18464fbbf617c981736cf">detection_output_info</a>();</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160; </div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160; </div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;DetectionOutputLayerFunction&gt;();</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    func-&gt;configure(input0, input1, input2, output, detect_info);</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160; </div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionOutputLayer info: &quot;</span> &lt;&lt; detect_info</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160; </div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;}</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="comment">/** Create a backend detection post process layer function</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment"> * @tparam DetectionPostProcessLayerFunction Backend detection output function</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment"> * @tparam TargetInfo                        Target-specific information</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment"> * @return Backend detection post process layer function</span></div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DetectionPostProcessLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l00960"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">  960</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">create_detection_post_process_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a> &amp;node)</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;{</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 4 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160; </div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *input0      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *input1      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *input2      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *output0     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *output1     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(1));</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *output2     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(2));</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a>    *output3     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(3));</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> detect_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a23ab280af362e61b91763038fc3194f4">detection_post_process_info</a>();</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160; </div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output0 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output1 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output2 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output3 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160; </div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;DetectionPostProcessLayerFunction&gt;();</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    func-&gt;configure(input0, input1, input2, output0, output1, output2, output3, detect_info);</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160; </div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input2 shape: &quot;</span> &lt;&lt; input2-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output0 shape: &quot;</span> &lt;&lt; output0-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output1 shape: &quot;</span> &lt;&lt; output1-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output2 shape: &quot;</span> &lt;&lt; output2-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output3 shape: &quot;</span> &lt;&lt; output3-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; DetectionPostProcessLayer info: &quot;</span> &lt;&lt; detect_info</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160; </div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;}</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment">/** Create a backend element-wise operation layer function</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment"> * @tparam EltwiseFunctions Backend element-wise function</span></div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"> * @tparam TargetInfo       Target-specific information</span></div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment"> * @return Backend element-wise operation layer function</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EltwiseFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01015"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18"> 1015</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">create_eltwise_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;{</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160; </div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input1         = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input2         = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output         = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>           eltwise_op     = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">eltwise_operation</a>();</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              convert_policy = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">convert_policy</a>();</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>       = node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">fused_activation</a>();</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160; </div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    std::string                func_name;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">EltwiseOperation::Add</a>)</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    {</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Addition&gt;(</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticAddition&quot;</span>),</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                                        input1, input2, output, convert_policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    }</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">EltwiseOperation::Sub</a>)</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    {</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Subtraction&gt;(</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticSubtraction&quot;</span>),</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                        input1, input2, output, convert_policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    }</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">EltwiseOperation::Mul</a>)</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    {</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Multiplication&gt;(</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                                        std::string(<span class="stringliteral">&quot;PixelWiseMultiplication&quot;</span>),</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                                        input1, input2, output, 1.f, convert_policy, node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a0f09377db195c78de49f1d2be26ee649">rounding_policy</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    }</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">EltwiseOperation::Max</a>)</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    {</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Maximum&gt;(</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                                        std::string(<span class="stringliteral">&quot;ElementwiseMaximum&quot;</span>),</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    }</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">EltwiseOperation::Div</a>)</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    {</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Division&gt;(</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticDivision&quot;</span>),</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    }</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    {</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    }</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160; </div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; func_name</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160; </div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;}</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment">/** Create a backend unary element-wise operation layer function</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"> * @tparam UnaryEltwiseFunctions Backend unary element-wise function</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment"> * @tparam TargetInfo       Target-specific information</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment"> * @return Backend unary element-wise operation layer function</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> UnaryEltwiseFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01090"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2649717c86236a4308f258322df73114"> 1090</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2649717c86236a4308f258322df73114">create_unary_eltwise_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml">UnaryEltwiseLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;{</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160; </div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">UnaryEltwiseOperation</a>      eltwise_op = node.<a class="code" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a2cbac381e95fd352a594977fb12754dc">eltwise_descriptor</a>().<a class="code" href="structarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor.xhtml#a36c3d2d309d852df2e5cb7df0e2332cf">op</a>;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160; </div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160; </div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    std::string                func_name;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">UnaryEltwiseOperation::Exp</a>)</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    {</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename UnaryEltwiseFunctions::Exp&gt;(</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                                        std::string(<span class="stringliteral">&quot;Exp&quot;</span>),</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    }</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    {</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported unary element-wise operation!&quot;</span>);</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    }</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160; </div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; func_name</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160; </div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;}</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment">/** Create a backend flatten layer function</span></div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="comment"> * @tparam FlattenLayerFunction Backend flatten function</span></div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="comment"> * @return Backend flatten layer function</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FlattenLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01138"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1"> 1138</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">create_flatten_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">FlattenLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;{</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160; </div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160; </div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160; </div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;FlattenLayerFunction&gt;();</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160; </div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160; </div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;}</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="comment">/** Create a backend fully connected layer function</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment"> * @tparam FullyConnectedLayerFunction Backend fully-connected function</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment"> * @tparam TargetInfo                  Target-specific information</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="comment"> * @return Backend fully connected layer function</span></div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FullyConnectedLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01177"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178"> 1177</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">create_fully_connected_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">FullyConnectedLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;{</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160; </div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *weights = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>          fc_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#acadd42ba204d72f78bfef07cc4c864ab">info</a>();</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    fc_info.<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a94c30e1956b73564d2ea11c8aea6d975">enable_fast_math</a>                 = (node.<a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">fast_math_hint</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>);</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160; </div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160; </div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keyword">auto</span> wm   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a32d8fea34ca818386a078939a03e3cb8">get_weights_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keyword">auto</span> mm   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;FullyConnectedLayerFunction&gt;(mm, wm.get());</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, weights, biases, output, fc_info);</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160; </div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160; </div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    std::ostringstream qss;</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keywordflow">if</span>(is_quantized)</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        qss &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; Output QuantInfo: &quot;</span> &lt;&lt; output-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    }</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                               &lt;&lt; qss.str()</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160; </div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;}</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment">/** Create a backend generate proposals layer function</span></div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="comment"> * @tparam GenerateProposalsLayerFunction Backend generate proposals function</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="comment"> * @tparam TargetInfo                     Target-specific information</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"> * @return Backend generate proposals layer function</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> GenerateProposalsLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01234"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1"> 1234</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1">create_generate_proposals_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;{</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 3 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160; </div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *scores              = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *deltas              = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *anchors             = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *proposals           = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *scores_out          = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(1));</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *num_valid_proposals = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(2));</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>                = node.<a class="code" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#acfa649555ddb4df4cc5ae52b8205ee5f">info</a>();</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160; </div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(scores == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(deltas == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(anchors == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(proposals == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(scores_out == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160; </div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;GenerateProposalsLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    func-&gt;configure(scores, deltas, anchors, proposals, scores_out, num_valid_proposals, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160; </div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; scores-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Scores shape: &quot;</span> &lt;&lt; scores-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Deltas shape: &quot;</span> &lt;&lt; deltas-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Anchors shape: &quot;</span> &lt;&lt; anchors-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Proposals shape: &quot;</span> &lt;&lt; proposals-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num valid proposals shape: &quot;</span> &lt;&lt; num_valid_proposals-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Scores Out shape: &quot;</span> &lt;&lt; scores_out-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160; </div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;}</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="comment">/** Create a backend l2 normalization layer function</span></div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="comment"> * @tparam NormalizationLayerFunction Backend normalization function</span></div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="comment"> * @tparam TargetInfo                 Target-specific information</span></div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="comment"> * @return Backend normalization layer function</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> L2NormalizeLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01283"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2deabaddc31b1c05c9176c0f5b79073f"> 1283</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2deabaddc31b1c05c9176c0f5b79073f">create_l2_normalize_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml">L2NormalizeLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;{</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160; </div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keywordtype">int</span>                              axis    = node.<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">axis</a>();</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keywordtype">float</span>                            <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = node.<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">epsilon</a>();</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160; </div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160; </div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <span class="keyword">auto</span> mm   = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;L2NormalizeLayerFunction&gt;(mm);</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, axis, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160; </div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; axis</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Epsilon: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160; </div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;}</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="comment">/** Create a backend normalization layer function</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="comment"> * @tparam NormalizationLayerFunction Backend normalization function</span></div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="comment"> * @tparam TargetInfo                 Target-specific information</span></div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="comment"> * @return Backend normalization layer function</span></div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NormalizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01327"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8"> 1327</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">create_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;{</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ctx);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160; </div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160; </div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>     norm_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml#a3bfea94983e45ff8d1a3061206593349">normalization_info</a>();</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160; </div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;NormalizationLayerFunction&gt;();</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, norm_info);</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160; </div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Normalization info: &quot;</span> &lt;&lt; norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#abf43f970446f0b82889df52463b9c2b8">type</a>()</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160; </div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;}</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="comment">/** Create a backend normalize planar YUV layer function</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<span class="comment"> * @tparam NormalizePlanarYUVLayerFunction Backend normalize planar YUV function</span></div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="comment"> * @tparam TargetInfo                      Target-specific information</span></div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="comment"> * @return Backend normalize plnar YUV layer function</span></div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NormalizePlanarYUVLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01368"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e"> 1368</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e">create_normalize_planar_yuv_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;{</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160; </div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *mean   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *std    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(2));</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(mean == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(std == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160; </div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;NormalizePlanarYUVLayerFunction&gt;();</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, std);</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160; </div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160; </div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;}</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="comment">/** Create a backend pad layer function</span></div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="comment"> * @tparam PadLayerFunction Backend pad function</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="comment"> * @tparam TargetInfo       Target-specific information</span></div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;<span class="comment"> * @return Backend pad layer function</span></div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PadLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01408"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1"> 1408</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1">create_pad_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;{</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160; </div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a>               &amp;padding   = node.<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#af98c64901f2fef6b6e26563bbb358f7e">padding</a>();</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>                 pad_value = node.<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#ade988c364f9cbd855359f8fa5d695212">pad_value</a>();</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160; </div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;PadLayerFunction&gt;();</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, padding, pad_value);</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160; </div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160; </div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;}</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment">/** Create a backend permute layer function</span></div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment"> * @tparam PermuteLayerFunction Backend permute function</span></div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="comment"> * @return Backend permute layer function</span></div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PermuteLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01447"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c"> 1447</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">create_permute_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;{</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160; </div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a>         &amp;perm   = node.<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a509cfef89595612c50bce4ef1eae181b">permutation_vector</a>();</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160; </div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;PermuteLayerFunction&gt;();</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, perm);</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160; </div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Permutation vector: &quot;</span> &lt;&lt; perm</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160; </div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;}</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="comment">/** Create a backend pooling layer function</span></div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;<span class="comment"> * @tparam PoolingLayerFunction Backend pooling function</span></div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="comment"> * @return Backend pooling layer function</span></div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PoolingLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01486"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480"> 1486</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">create_pooling_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">PoolingLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;{</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160; </div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>           pool_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml#a27ad0a381c4ccbc80999d452c4dfe18b">pooling_info</a>();</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160; </div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;PoolingLayerFunction&gt;();</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, pool_info);</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160; </div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Pooling info: &quot;</span> &lt;&lt; pool_info.<a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">pool_type</a></div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160; </div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;}</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;<span class="comment">/** Create a backend PRelu layer function</span></div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;<span class="comment"> * @tparam PReluFunction Backend PRelu function</span></div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;<span class="comment"> * @tparam TargetInfo    Target-specific information</span></div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;<span class="comment"> * @return Backend PRelu layer function</span></div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PReluFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01525"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b"> 1525</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b">create_prelu_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;{</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160; </div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *alpha  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span> || alpha == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160; </div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;PReluFunction&gt;();</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, alpha, output);</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160; </div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160; </div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;}</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;<span class="comment">/** Create a backend print layer function</span></div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;<span class="comment"> * @tparam TargetInfo Target-specific information</span></div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;<span class="comment"> * @return Backend print layer function</span></div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01562"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530"> 1562</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530">create_print_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml">PrintLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;{</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160; </div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160; </div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160; </div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;}</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;<span class="comment">/** Create a backend priorbox layer function</span></div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;<span class="comment"> * @tparam PriorBoxLayerFunction Backend priorbox function</span></div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;<span class="comment"> * @return Backend priorbox layer function</span></div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PriorBoxLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01592"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0"> 1592</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0">create_priorbox_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;{</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160; </div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input0     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *input1     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a>          prior_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a0f62f59c57a7cdbdc20f7d850f1dfd8c">priorbox_info</a>();</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input0 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160; </div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;PriorBoxLayerFunction&gt;();</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;    func-&gt;configure(input0, input1, output, prior_info);</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160; </div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input0 shape: &quot;</span> &lt;&lt; input0-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input1 shape: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; PriorBoxLayer info: &quot;</span> &lt;&lt; prior_info</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160; </div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;}</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;<span class="comment">/** Create a backend quantization layer function</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;<span class="comment"> * @tparam QuantizationLayerFunction Backend quantization function</span></div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;<span class="comment"> * @tparam TargetInfo                Target-specific information</span></div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;<span class="comment"> * @return Backend quantization layer function</span></div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QuantizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01634"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad"> 1634</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad">create_quantization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;{</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160; </div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160; </div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;QuantizationLayerFunction&gt;();</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160; </div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160; </div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;}</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;<span class="comment">/** Create a backend reduction operation layer function</span></div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;<span class="comment"> * @tparam ReductionOperationFunction Backend reduction operation function</span></div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="comment"> * @tparam TargetInfo                 Target-specific information</span></div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;<span class="comment"> * @return Backend reduction sum layer function</span></div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReductionOperationFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01672"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae0223bc805b02792657b46bca60e320b"> 1672</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae0223bc805b02792657b46bca60e320b">create_reduction_operation_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml">ReductionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;{</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160; </div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>     = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output    = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>               op        = node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5f4e9cd96ebc9f9a93c5e35f98375199">op</a>();</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;    <span class="keywordtype">int</span>                              axis      = node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">axis</a>();</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    <span class="keywordtype">bool</span>                             keep_dims = node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#ab2c4ec7190acaef8abd6ddeec407d70d">keep_dims</a>();</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160; </div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ReductionOperationFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, axis, op, keep_dims);</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160; </div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation: &quot;</span> &lt;&lt; op</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; axis</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Keep dimensions:&quot;</span> &lt;&lt; keep_dims</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160; </div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;}</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;<span class="comment">/** Create a backend reorg layer function</span></div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;<span class="comment"> * @tparam ReorgLayerFunction Backend reorg function</span></div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;<span class="comment"> * @tparam TargetInfo         Target-specific information</span></div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;<span class="comment"> * @return Backend reshape layer function</span></div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReorgLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01715"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601"> 1715</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601">create_reorg_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;{</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160; </div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160; </div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ReorgLayerFunction&gt;();</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a47d010db0ab9940009209db7cf529f36">stride</a>());</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160; </div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160; </div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;}</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;<span class="comment">/** Create a backend reshape layer function</span></div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;<span class="comment"> * @tparam ReshapeLayerFunction Backend reshape function</span></div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;<span class="comment"> * @return Backend reshape layer function</span></div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReshapeLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01752"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73"> 1752</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">create_reshape_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;{</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160; </div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160; </div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ReshapeLayerFunction&gt;();</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160; </div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160; </div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;}</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;<span class="comment">/** Create a backend resize layer function</span></div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;<span class="comment"> * @tparam ResizeLayerFunction Backend resize function</span></div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;<span class="comment"> * @tparam TargetInfo          Target-specific information</span></div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;<span class="comment"> * @return Backend resize layer function</span></div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ResizeLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01789"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533"> 1789</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">create_resize_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">ResizeLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;{</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160; </div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy = node.<a class="code" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml#a718c049decea6397c493df9cb2f581da">policy</a>();</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160; </div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ResizeLayerFunction&gt;();</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a>{ policy, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>(), <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">SamplingPolicy::CENTER</a>, <span class="keyword">false</span>, <span class="keyword">false</span> });</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160; </div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Interpolation: &quot;</span> &lt;&lt; policy</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160; </div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;}</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;<span class="comment">/** Create a backend ROI align layer function</span></div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;<span class="comment"> * @tparam ROIAlignLayerFunction    ROI Align function</span></div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;<span class="comment"> * @tparam TargetInfo               Target-specific information</span></div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;<span class="comment"> * @return ROI Align layer function</span></div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ROIAlignLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01828"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df"> 1828</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df">create_roi_align_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;{</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160; </div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *rois   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(1));</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(rois == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160; </div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info = node.<a class="code" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a51a2c95a0b98cf92e99d06672db84060">pooling_info</a>();</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160; </div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;ROIAlignLayerFunction&gt;();</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160; </div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, rois, output, pool_info);</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160; </div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIs shape: &quot;</span> &lt;&lt; rois-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIPooling width: &quot;</span> &lt;&lt; pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">pooled_width</a>()</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; ROIPooling height: &quot;</span> &lt;&lt; pool_info.<a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">pooled_height</a>()</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160; </div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;}</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;<span class="comment">/** Create a backend slice layer function</span></div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;<span class="comment"> * @tparam SliceLayerFunction Backend slice function</span></div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;<span class="comment"> * @tparam TargetInfo         Target-specific information</span></div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;<span class="comment"> * @return Backend slice layer function</span></div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SliceLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01873"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602"> 1873</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602">create_slice_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;{</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160; </div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160; </div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;SliceLayerFunction&gt;();</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, node.<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">starts</a>(), node.<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">ends</a>());</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160; </div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160; </div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;}</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;<span class="comment">/** Create a backend softmax layer function</span></div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;<span class="comment"> * @tparam SoftmaxLayerFunction Backend softmax function</span></div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;<span class="comment"> * @tparam TargetInfo           Target-specific information</span></div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;<span class="comment"> * @param[in] ctx  Graph context</span></div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;<span class="comment"> * @return Backend softmax layer function</span></div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SoftmaxLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01911"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da"> 1911</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">create_softmax_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">SoftmaxLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;{</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160; </div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      beta   = node.<a class="code" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml#a01524f49fa1d982d4382e390bef91de7">beta</a>();</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160; </div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;SoftmaxLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, beta);</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160; </div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160; </div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;}</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;<span class="comment">/** Create a backend layer stack function</span></div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;<span class="comment"> * @tparam StackLayerFunction Backend stack function</span></div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;<span class="comment"> * @tparam TargetInfo         Target-specific information</span></div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;<span class="comment"> * @return Backend stack layer function</span></div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> StackLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01949"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014"> 1949</a></span>&#160;std::unique_ptr&lt;arm_compute::IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014">create_stack_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml">StackLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;{</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating Stack node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">num_outputs</a>() != 1);</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160; </div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;    std::vector&lt;typename TargetInfo::TensorType *&gt; inputs;</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">num_inputs</a>(); ++i)</div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;    {</div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;        inputs.push_back(get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(i)));</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    }</div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                        axis   = node.<a class="code" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">axis</a>();</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160; </div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;StackLayerFunction&gt;();</div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;    func-&gt;configure(inputs, axis, output);</div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160; </div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; output-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Inputs shape: &quot;</span> &lt;&lt; inputs[0]-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num Inputs: &quot;</span> &lt;&lt; inputs.size()</div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; axis</div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160; </div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;}</div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;<span class="comment">/** Create a backend slice layer function</span></div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;<span class="comment"> * @tparam StridedSliceLayerFunction Backend strided slice function</span></div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;<span class="comment"> * @tparam TargetInfo                Target-specific information</span></div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;<span class="comment"> * @param[in] node Node to create the backend function for</span></div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;<span class="comment"> * @return Backend strided slice layer function</span></div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Str<span class="keywordtype">id</span>edSliceLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div>
<div class="line"><a name="l01992"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a15a83bd3d4be8671bf012385eb508c8f"> 1992</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a15a83bd3d4be8671bf012385eb508c8f">create_strided_slice_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml">StridedSliceLayerNode</a> &amp;node)</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;{</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160; </div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    <span class="comment">// Extract IO and info</span></div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>   = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0));</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;    <span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TargetInfo::TensorType</a> *output  = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>                      starts  = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">starts</a>();</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>                      ends    = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">ends</a>();</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">BiStrides</a>                        strides = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#ae42377172cf17e3ac33205018768bd62">strides</a>();</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a>            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>    = node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a9ed1b4c467dc74e107d884251fab3193">strided_slice_info</a>();</div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160; </div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160; </div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;    <span class="comment">// Create and configure function</span></div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;    <span class="keyword">auto</span> func = std::make_unique&lt;StridedSliceLayerFunction&gt;();</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;    func-&gt;configure(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, starts, ends, strides, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.begin_mask(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.end_mask(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.shrink_axis_mask());</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160; </div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    <span class="comment">// Log info</span></div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span></div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;                               &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()</div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Type: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target: &quot;</span> &lt;&lt; TargetInfo::TargetType</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()</div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;                               &lt;&lt; std::endl);</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160; </div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;}</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;} <span class="comment">// namespace detail</span></div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;} <span class="comment">// namespace backends</span></div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;} <span class="comment">// namespace graph</span></div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160; </div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_with_post_ops_function_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_with_post_ops_function.xhtml">arm_compute::graph::backends::FusedConvolutionBatchNormalizationWithPostOpsFunction</a></div><div class="ttdoc">Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE,...</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_function_8h_source.xhtml#l00040">FusedConvolutionBatchNormalizationWithPostOpsFunction.h:40</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00054">Logger.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::EltwiseOperation::Mul</a></div><div class="ttdeci">@ Mul</div><div class="ttdoc">Arithmetic multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div><div class="ttdoc">Pixels outside the image are assumed to have a constant value.</div></div>
<div class="ttc" id="a_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_unary_eltwise_layer_node_xhtml_a2cbac381e95fd352a594977fb12754dc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a2cbac381e95fd352a594977fb12754dc">arm_compute::graph::UnaryEltwiseLayerNode::eltwise_descriptor</a></div><div class="ttdeci">descriptors::UnaryEltwiseLayerDescriptor eltwise_descriptor() const</div><div class="ttdoc">Unary eltwise layer descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00125">EltwiseLayerNode.cpp:125</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a6806f347d8b4c0986cdfe4c45918972b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b">arm_compute::graph::backends::detail::create_prelu_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_prelu_layer(PReluLayerNode &amp;node)</div><div class="ttdoc">Create a backend PRelu layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01525">FunctionHelpers.h:1525</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ConcatenateLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8cpp_source.xhtml#l00130">ConcatenateLayerNode.cpp:130</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reorg_layer_node_xhtml_a47d010db0ab9940009209db7cf529f36"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a47d010db0ab9940009209db7cf529f36">arm_compute::graph::ReorgLayerNode::stride</a></div><div class="ttdeci">int stride() const</div><div class="ttdoc">Stride value to use for reorganizing the values in the output tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_reorg_layer_node_8cpp_source.xhtml#l00041">ReorgLayerNode.cpp:41</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2backends_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2backends_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01611">Types.h:1611</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5271c97b6bef5972c5e259307d52a4da"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">arm_compute::graph::backends::detail::create_softmax_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_softmax_layer(SoftmaxLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend softmax layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01911">FunctionHelpers.h:1911</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::EltwiseLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00108">EltwiseLayerNode.cpp:108</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a16b2c6652c4cee5b566daf018f768a42"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a16b2c6652c4cee5b566daf018f768a42">arm_compute::graph::ConvolutionLayerNode::convolution_method</a></div><div class="ttdeci">ConvolutionMethod convolution_method() const</div><div class="ttdoc">Convolution layer method accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00051">ConvolutionLayerNode.cpp:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_output_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::DetectionOutputLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_output_layer_node_8cpp_source.xhtml#l00082">DetectionOutputLayerNode.cpp:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::FusedConvolutionBatchNormalizationNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00076">FusedConvolutionBatchNormalizationNode.cpp:76</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a5a00bf3cb11be124771cf7e3958e218e"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">arm_compute::ROIPoolingLayerInfo::pooled_width</a></div><div class="ttdeci">unsigned int pooled_width() const</div><div class="ttdoc">Get the pooled width of the layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01249">Types.h:1249</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_prior_box_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">arm_compute::graph::PriorBoxLayerNode</a></div><div class="ttdoc">PriorBox Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_prior_box_layer_node_8h_source.xhtml#l00034">PriorBoxLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00109">CoreTypes.h:109</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::FastMathHint::Enabled</a></div><div class="ttdeci">@ Enabled</div><div class="ttdoc">Fast math enabled for Convolution layer.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a807d0a897f65b2fa1f8ea92892fa2c2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">arm_compute::graph::ConvolutionLayerNode::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint() const</div><div class="ttdoc">Fast math hint accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00061">ConvolutionLayerNode.cpp:61</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_prior_box_layer_node_xhtml_a0f62f59c57a7cdbdc20f7d850f1dfd8c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a0f62f59c57a7cdbdc20f7d850f1dfd8c">arm_compute::graph::PriorBoxLayerNode::priorbox_info</a></div><div class="ttdeci">PriorBoxLayerInfo priorbox_info() const</div><div class="ttdoc">PriorBox metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_prior_box_layer_node_8cpp_source.xhtml#l00042">PriorBoxLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">arm_compute::graph::EltwiseLayerNode</a></div><div class="ttdoc">Eltwise Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00034">EltwiseLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::ConvolutionMethod::Direct</a></div><div class="ttdeci">@ Direct</div><div class="ttdoc">Deep direct convolution.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ChannelShuffleLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00068">ChannelShuffleLayerNode.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a836dbfcb541878d045cac29f9b35d5cb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">arm_compute::graph::StridedSliceLayerNode::ends</a></div><div class="ttdeci">Coordinates ends() const</div><div class="ttdoc">End coordinates accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00050">StridedSliceLayerNode.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_batch_normalization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">arm_compute::graph::BatchNormalizationLayerNode</a></div><div class="ttdoc">Batch Normalization Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_node_8h_source.xhtml#l00034">BatchNormalizationLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">arm_compute::graph::ChannelShuffleLayerNode</a></div><div class="ttdoc">Channel Shuffle Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8h_source.xhtml#l00034">ChannelShuffleLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_flatten_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">arm_compute::graph::FlattenLayerNode</a></div><div class="ttdoc">Flatten Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_flatten_layer_node_8h_source.xhtml#l00034">FlattenLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_r_o_i_align_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ROIAlignLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00085">ROIAlignLayerNode.cpp:85</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00071">FusedDepthwiseConvolutionBatchNormalizationNode.cpp:71</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_fully_connected_layer_info_xhtml_a94c30e1956b73564d2ea11c8aea6d975"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a94c30e1956b73564d2ea11c8aea6d975">arm_compute::FullyConnectedLayerInfo::enable_fast_math</a></div><div class="ttdeci">bool enable_fast_math</div><div class="ttdoc">Enable fast math computation.</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_info_8h_source.xhtml#l00042">FullyConnectedLayerInfo.h:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_add5d19cbee93d3d134f88d02e1259248"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00061">FusedDepthwiseConvolutionBatchNormalizationNode.cpp:61</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_tensor_handle_xhtml_a91efb5b2e262ec5e55059ff1fd9accc6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#a91efb5b2e262ec5e55059ff1fd9accc6">arm_compute::graph::ITensorHandle::tensor</a></div><div class="ttdeci">virtual arm_compute::ITensor &amp; tensor()=0</div><div class="ttdoc">Backend tensor object accessor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ae157076aa533f9db0960dea1d5fc5014"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014">arm_compute::graph::backends::detail::create_stack_layer</a></div><div class="ttdeci">std::unique_ptr&lt; arm_compute::IFunction &gt; create_stack_layer(StackLayerNode &amp;node)</div><div class="ttdoc">Create a backend layer stack function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01949">FunctionHelpers.h:1949</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::DepthwiseConvolutionLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00063">DepthwiseConvolutionLayerNode.cpp:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a0e51b62035e79b0f12964cae17ce0480"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">arm_compute::graph::backends::detail::create_pooling_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_pooling_layer(PoolingLayerNode &amp;node)</div><div class="ttdoc">Create a backend pooling layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01486">FunctionHelpers.h:1486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">arm_compute::graph::FullyConnectedLayerNode</a></div><div class="ttdoc">Fully Connected Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_node_8h_source.xhtml#l00034">FullyConnectedLayerNode.h:34</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00353">Error.h:353</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00159">INode.cpp:159</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pad_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">arm_compute::graph::PadLayerNode</a></div><div class="ttdoc">Pad Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8h_source.xhtml#l00034">PadLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_abe0cb3e4411a1c289e3e40e3f9d79fec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abe0cb3e4411a1c289e3e40e3f9d79fec">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const</div><div class="ttdoc">Returns number of inputs of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00179">INode.cpp:179</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml_ac8cef0874f04203401b5d7f5a6fa2a34"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#ac8cef0874f04203401b5d7f5a6fa2a34">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode::depth_multiplier</a></div><div class="ttdeci">unsigned int depth_multiplier() const</div><div class="ttdoc">Depth multiplier accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00066">FusedDepthwiseConvolutionBatchNormalizationNode.cpp:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00371">Types.h:371</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_normalization_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::NormalizationLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_normalization_layer_node_8cpp_source.xhtml#l00069">NormalizationLayerNode.cpp:69</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a></div><div class="ttdeci">TensorType</div><div class="ttdoc">Memory type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_aa7b3781f10fc0ac73a9a4f748e22d3d4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#aa7b3781f10fc0ac73a9a4f748e22d3d4">arm_compute::graph::EltwiseLayerNode::convert_policy</a></div><div class="ttdeci">ConvertPolicy convert_policy() const</div><div class="ttdoc">Convert policy accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00046">EltwiseLayerNode.cpp:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa6fabefcb8c4bd308219565ddcf00928"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">arm_compute::graph::backends::detail::validate_node</a></div><div class="ttdeci">void validate_node(const INode &amp;node, size_t num_expected_inputs, size_t num_expected_outputs)</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00078">FunctionHelpers.h:78</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ad1922deea021647290d0c206723e6c73"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">arm_compute::graph::backends::detail::create_reshape_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_reshape_layer(ReshapeLayerNode &amp;node)</div><div class="ttdoc">Create a backend reshape layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01752">FunctionHelpers.h:1752</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::FusedConvolutionBatchNormalizationNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00071">FusedConvolutionBatchNormalizationNode.cpp:71</a></div></div>
<div class="ttc" id="a_fused_convolution_batch_normalization_function_8h_xhtml"><div class="ttname"><a href="_fused_convolution_batch_normalization_function_8h.xhtml">FusedConvolutionBatchNormalizationFunction.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_adef77d1f64203fe2828b3f992c87f5df"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df">arm_compute::graph::backends::detail::create_roi_align_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_roi_align_layer(ROIAlignLayerNode &amp;node)</div><div class="ttdoc">Create a backend ROI align layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01828">FunctionHelpers.h:1828</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depth_to_space_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::DepthToSpaceLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_node_8cpp_source.xhtml#l00086">DepthToSpaceLayerNode.cpp:86</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reduction_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml">arm_compute::graph::ReductionLayerNode</a></div><div class="ttdoc">Reduction Operation node.</div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8h_source.xhtml#l00034">ReductionLayerNode.h:34</a></div></div>
<div class="ttc" id="aarm__compute_2core_2experimental_2_post_ops_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_post_ops_8h.xhtml">PostOps.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_flatten_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::FlattenLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_flatten_layer_node_8cpp_source.xhtml#l00065">FlattenLayerNode.cpp:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pooling_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">arm_compute::graph::PoolingLayerNode</a></div><div class="ttdoc">Pooling Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_pooling_layer_node_8h_source.xhtml#l00034">PoolingLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ArgMinMaxLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8cpp_source.xhtml#l00094">ArgMinMaxLayerNode.cpp:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_unary_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml">arm_compute::graph::UnaryEltwiseLayerNode</a></div><div class="ttdoc">Unary Eltwise Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00091">EltwiseLayerNode.h:91</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::ConvolutionLayerNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00071">ConvolutionLayerNode.cpp:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml_a9e0fb1d1462557f28966ae19988532c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">arm_compute::ActivationLayerInfo::activation</a></div><div class="ttdeci">ActivationFunction activation() const</div><div class="ttdoc">Get the type of activation function.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00076">ActivationLayerInfo.h:76</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor_xhtml_a36c3d2d309d852df2e5cb7df0e2332cf"><div class="ttname"><a href="structarm__compute_1_1graph_1_1descriptors_1_1_unary_eltwise_layer_descriptor.xhtml#a36c3d2d309d852df2e5cb7df0e2332cf">arm_compute::graph::descriptors::UnaryEltwiseLayerDescriptor::op</a></div><div class="ttdeci">UnaryEltwiseOperation op</div><div class="ttdoc">Unary element-wise operation to perform.</div><div class="ttdef"><b>Definition:</b> <a href="_layer_descriptors_8h_source.xhtml#l00110">LayerDescriptors.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_afce1d2d783bb97a3a8c3c406c8cf6b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">arm_compute::graph::backends::detail::create_detection_output_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_detection_output_layer(DetectionOutputLayerNode &amp;node)</div><div class="ttdoc">Create a backend detection output layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00914">FunctionHelpers.h:914</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_dequantization_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::DequantizationLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_dequantization_layer_node_8cpp_source.xhtml#l00067">DequantizationLayerNode.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_aee6a0c75a44f00d3306101e14ffc3ebb"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">arm_compute::ROIPoolingLayerInfo::pooled_height</a></div><div class="ttdeci">unsigned int pooled_height() const</div><div class="ttdoc">Get the pooled height of the layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01254">Types.h:1254</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pad_layer_node_xhtml_af98c64901f2fef6b6e26563bbb358f7e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#af98c64901f2fef6b6e26563bbb358f7e">arm_compute::graph::PadLayerNode::padding</a></div><div class="ttdeci">const PaddingList &amp; padding() const</div><div class="ttdoc">Padding list accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8cpp_source.xhtml#l00042">PadLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_slice_layer_node_xhtml_a476f08a0729f8861bec63b7e62c7b514"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">arm_compute::graph::SliceLayerNode::starts</a></div><div class="ttdeci">Coordinates starts() const</div><div class="ttdoc">Start coordinates accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8cpp_source.xhtml#l00042">SliceLayerNode.cpp:42</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="a_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_a5f4e9cd96ebc9f9a93c5e35f98375199"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5f4e9cd96ebc9f9a93c5e35f98375199">arm_compute::graph::ReductionLayerNode::op</a></div><div class="ttdeci">ReductionOperation op() const</div><div class="ttdoc">op accessor</div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00042">ReductionLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_generate_proposals_layer_node_xhtml_acfa649555ddb4df4cc5ae52b8205ee5f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#acfa649555ddb4df4cc5ae52b8205ee5f">arm_compute::graph::GenerateProposalsLayerNode::info</a></div><div class="ttdeci">const GenerateProposalsInfo &amp; info() const</div><div class="ttdoc">GenerateProposalsInfo accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_generate_proposals_layer_node_8cpp_source.xhtml#l00042">GenerateProposalsLayerNode.cpp:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">arm_compute::ReductionOperation</a></div><div class="ttdeci">ReductionOperation</div><div class="ttdoc">Available reduction operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00419">Types.h:419</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">arm_compute::graph::EltwiseOperation::Sub</a></div><div class="ttdeci">@ Sub</div><div class="ttdoc">Arithmetic subtraction.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_print_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PrintLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_print_layer_node_8cpp_source.xhtml#l00081">PrintLayerNode.cpp:81</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_deconvolution_layer_node_xhtml_ae304796bd723ec2b2d50b88236498bd1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml#ae304796bd723ec2b2d50b88236498bd1">arm_compute::graph::DeconvolutionLayerNode::deconvolution_info</a></div><div class="ttdeci">PadStrideInfo deconvolution_info() const</div><div class="ttdoc">Deconvolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_deconvolution_layer_node_8cpp_source.xhtml#l00042">DeconvolutionLayerNode.cpp:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a2dbe319a9ac9b6820b2ef5eff8c46ddc"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">arm_compute::graph::backends::detail::create_detection_post_process_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_detection_post_process_layer(DetectionPostProcessLayerNode &amp;node)</div><div class="ttdoc">Create a backend detection post process layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00960">FunctionHelpers.h:960</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_quantization_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::QuantizationLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_layer_node_8cpp_source.xhtml#l00075">QuantizationLayerNode.cpp:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_deconvolution_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::DeconvolutionLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_deconvolution_layer_node_8cpp_source.xhtml#l00100">DeconvolutionLayerNode.cpp:100</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml_a18ffaef3d2889fbba089ffbf7ea2f12d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">arm_compute::graph::L2NormalizeLayerNode::axis</a></div><div class="ttdeci">int axis() const</div><div class="ttdoc">axis accessors</div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8cpp_source.xhtml#l00075">L2NormalizeLayerNode.cpp:75</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">arm_compute::graph::UnaryEltwiseOperation::Exp</a></div><div class="ttdeci">@ Exp</div><div class="ttdoc">Exp.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_batch_normalization_layer_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::BatchNormalizationLayerNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">Epsilon parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_node_8cpp_source.xhtml#l00041">BatchNormalizationLayerNode.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">arm_compute::graph::EltwiseOperation::Div</a></div><div class="ttdeci">@ Div</div><div class="ttdoc">Arithmetic division.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_resize_layer_node_xhtml_a718c049decea6397c493df9cb2f581da"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml#a718c049decea6397c493df9cb2f581da">arm_compute::graph::ResizeLayerNode::policy</a></div><div class="ttdeci">InterpolationPolicy policy() const</div><div class="ttdoc">Interpolation policy accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_node_8cpp_source.xhtml#l00041">ResizeLayerNode.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_permute_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">arm_compute::graph::PermuteLayerNode</a></div><div class="ttdoc">Permute Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8h_source.xhtml#l00034">PermuteLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00055">ActivationLayerInfo.h:55</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a0331e6b2b68ea76e9415f7f148d92601"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601">arm_compute::graph::backends::detail::create_reorg_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_reorg_layer(ReorgLayerNode &amp;node)</div><div class="ttdoc">Create a backend reorg layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01715">FunctionHelpers.h:1715</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::FullyConnectedLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00140">FullyConnectedLayer.cpp:140</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00038">Strides.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_xhtml_a32d8fea34ca818386a078939a03e3cb8"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a32d8fea34ca818386a078939a03e3cb8">arm_compute::graph::backends::get_weights_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IWeightsManager &gt; get_weights_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the weights manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00102">Utils.h:102</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pad_layer_node_xhtml_ade988c364f9cbd855359f8fa5d695212"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#ade988c364f9cbd855359f8fa5d695212">arm_compute::graph::PadLayerNode::pad_value</a></div><div class="ttdeci">PixelValue pad_value() const</div><div class="ttdoc">Padding value accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8cpp_source.xhtml#l00047">PadLayerNode.cpp:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::FusedConvolutionBatchNormalizationNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">Epsilon parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00051">FusedConvolutionBatchNormalizationNode.cpp:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::FusedConvolutionBatchNormalizationNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00081">FusedConvolutionBatchNormalizationNode.cpp:81</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_permute_layer_node_xhtml_a509cfef89595612c50bce4ef1eae181b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a509cfef89595612c50bce4ef1eae181b">arm_compute::graph::PermuteLayerNode::permutation_vector</a></div><div class="ttdeci">const PermutationVector &amp; permutation_vector() const</div><div class="ttdoc">Permutation vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8cpp_source.xhtml#l00042">PermuteLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_activation_layer_node_xhtml_a39a8dd296461705ee5cb54eacb4b2818"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#a39a8dd296461705ee5cb54eacb4b2818">arm_compute::graph::ActivationLayerNode::activation_info</a></div><div class="ttdeci">ActivationLayerInfo activation_info() const</div><div class="ttdoc">Activation metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8cpp_source.xhtml#l00040">ActivationLayerNode.cpp:40</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_fully_connected_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml">arm_compute::FullyConnectedLayerInfo</a></div><div class="ttdoc">Fully connected layer info.</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_info_8h_source.xhtml#l00033">FullyConnectedLayerInfo.h:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_bounding_box_transform_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">arm_compute::graph::BoundingBoxTransformLayerNode</a></div><div class="ttdoc">Bounding Box Transform Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_bounding_box_transform_layer_node_8h_source.xhtml#l00035">BoundingBoxTransformLayerNode.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a15a83bd3d4be8671bf012385eb508c8f"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a15a83bd3d4be8671bf012385eb508c8f">arm_compute::graph::backends::detail::create_strided_slice_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_strided_slice_layer(StridedSliceLayerNode &amp;node)</div><div class="ttdoc">Create a backend slice layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01992">FunctionHelpers.h:1992</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_ab2c4ec7190acaef8abd6ddeec407d70d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#ab2c4ec7190acaef8abd6ddeec407d70d">arm_compute::graph::ReductionLayerNode::keep_dims</a></div><div class="ttdeci">bool keep_dims() const</div><div class="ttdoc">keep_dims accessor</div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00052">ReductionLayerNode.cpp:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00064">SaturateCast.h:64</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ac64bbd0df74207f9ab59953e21311178"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">arm_compute::graph::backends::detail::create_fully_connected_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fully_connected_layer(FullyConnectedLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend fully connected layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01177">FunctionHelpers.h:1177</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_prior_box_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PriorBoxLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_prior_box_layer_node_8cpp_source.xhtml#l00085">PriorBoxLayerNode.cpp:85</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ae0223bc805b02792657b46bca60e320b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae0223bc805b02792657b46bca60e320b">arm_compute::graph::backends::detail::create_reduction_operation_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_reduction_operation_layer(ReductionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend reduction operation layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01672">FunctionHelpers.h:1672</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">arm_compute::graph::ConcatenateLayerNode</a></div><div class="ttdoc">Concatenation Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8h_source.xhtml#l00034">ConcatenateLayerNode.h:34</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00467">Error.h:467</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a69a819dc92f559ed0b788392391da602"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602">arm_compute::graph::backends::detail::create_slice_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_slice_layer(SliceLayerNode &amp;node)</div><div class="ttdoc">Create a backend slice layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01873">FunctionHelpers.h:1873</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">arm_compute::graph::NormalizePlanarYUVLayerNode</a></div><div class="ttdoc">Batch Normalization Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_normalize_planar_y_u_v_layer_node_8h_source.xhtml#l00034">NormalizePlanarYUVLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::ReductionLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">axis accessor</div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00047">ReductionLayerNode.cpp:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">arm_compute::graph::ConvolutionLayerNode</a></div><div class="ttdoc">Convolution Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8h_source.xhtml#l00034">ConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_type_printer_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_activation_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ActivationLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8cpp_source.xhtml#l00074">ActivationLayerNode.cpp:74</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pooling_layer_node_xhtml_a27ad0a381c4ccbc80999d452c4dfe18b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml#a27ad0a381c4ccbc80999d452c4dfe18b">arm_compute::graph::PoolingLayerNode::pooling_info</a></div><div class="ttdeci">PoolingLayerInfo pooling_info() const</div><div class="ttdoc">Pooling metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_pooling_layer_node_8cpp_source.xhtml#l00042">PoolingLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_afaed16fbc0fe52a692a812b66b4e10f8"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">arm_compute::graph::INode::post_op_info_list</a></div><div class="ttdeci">const std::list&lt; std::unique_ptr&lt; ConvPostOpInfo &gt; &gt; &amp; post_op_info_list() const</div><div class="ttdoc">Post operator info list.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00204">INode.cpp:204</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00089">Utils.h:89</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a127d0cce11ed3d411eaa5bd25c7a3ac1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1">arm_compute::graph::backends::detail::create_pad_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_pad_layer(PadLayerNode &amp;node)</div><div class="ttdoc">Create a backend pad layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01408">FunctionHelpers.h:1408</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_bounding_box_transform_layer_node_xhtml_a7a5bf7cea9e9cf19a6cf3e5240c5fff7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a7a5bf7cea9e9cf19a6cf3e5240c5fff7">arm_compute::graph::BoundingBoxTransformLayerNode::info</a></div><div class="ttdeci">const BoundingBoxTransformInfo &amp; info() const</div><div class="ttdoc">BoundingBoxTransformInfo accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00042">BoundingBoxTransformLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml_af5a8385102f8f8dd6c5957eac08b04c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">arm_compute::ActivationLayerInfo::enabled</a></div><div class="ttdeci">bool enabled() const</div><div class="ttdoc">Check if initialised.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00091">ActivationLayerInfo.h:91</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_post_process_layer_node_xhtml_a23ab280af362e61b91763038fc3194f4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a23ab280af362e61b91763038fc3194f4">arm_compute::graph::DetectionPostProcessLayerNode::detection_post_process_info</a></div><div class="ttdeci">DetectionPostProcessLayerInfo detection_post_process_info() const</div><div class="ttdoc">DetectionPostProcess metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_node_8cpp_source.xhtml#l00042">DetectionPostProcessLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_quantization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">arm_compute::graph::QuantizationLayerNode</a></div><div class="ttdoc">Quantization Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_layer_node_8h_source.xhtml#l00034">QuantizationLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5d1a73ab4a0b267033a569c46813b9d5"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">arm_compute::graph::backends::detail::create_batch_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_batch_normalization_layer(BatchNormalizationLayerNode &amp;node)</div><div class="ttdoc">Create a backend batch normalization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00177">FunctionHelpers.h:177</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::L2NormalizeLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8cpp_source.xhtml#l00085">L2NormalizeLayerNode.cpp:85</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_dequantization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">arm_compute::graph::DequantizationLayerNode</a></div><div class="ttdoc">Dequantize Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_dequantization_layer_node_8h_source.xhtml#l00038">DequantizationLayerNode.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_generate_proposals_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::GenerateProposalsLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_generate_proposals_layer_node_8cpp_source.xhtml#l00092">GenerateProposalsLayerNode.cpp:92</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">Epsilon parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00056">FusedDepthwiseConvolutionBatchNormalizationNode.cpp:56</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml">arm_compute::graph::L2NormalizeLayerNode</a></div><div class="ttdoc">L2Normalize Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8h_source.xhtml#l00034">L2NormalizeLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml_acadd42ba204d72f78bfef07cc4c864ab"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#acadd42ba204d72f78bfef07cc4c864ab">arm_compute::graph::FullyConnectedLayerNode::info</a></div><div class="ttdeci">FullyConnectedLayerInfo info() const</div><div class="ttdoc">Fully connected layer addition information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00114">FullyConnectedLayer.cpp:114</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_activation_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">arm_compute::graph::ActivationLayerNode</a></div><div class="ttdoc">Activation Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8h_source.xhtml#l00034">ActivationLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_r_o_i_align_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">arm_compute::graph::ROIAlignLayerNode</a></div><div class="ttdoc">ROI Align node.</div><div class="ttdef"><b>Definition:</b> <a href="_r_o_i_align_layer_node_8h_source.xhtml#l00036">ROIAlignLayerNode.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml_a397a10d63c17d6505a7470fa35f344e0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a397a10d63c17d6505a7470fa35f344e0">arm_compute::graph::ArgMinMaxLayerNode::reduction_operation</a></div><div class="ttdeci">ReductionOperation reduction_operation() const</div><div class="ttdoc">Operator accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8cpp_source.xhtml#l00042">ArgMinMaxLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::FusedConvolutionWithPostOpNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00076">FusedConvolutionWithPostOpNode.cpp:76</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a4b52bb397c7296e8efe864967b44f97e"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">arm_compute::graph::TensorDescriptor::layout</a></div><div class="ttdeci">DataLayout layout</div><div class="ttdoc">Data layout.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor.h:111</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_adb3a9be16de941b0f601e16c8ac76533"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">arm_compute::graph::backends::detail::create_resize_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_resize_layer(ResizeLayerNode &amp;node)</div><div class="ttdoc">Create a backend resize layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01789">FunctionHelpers.h:1789</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa37faf92f78c0f5cefe2d43c8bf07f18"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">arm_compute::graph::backends::detail::create_eltwise_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_eltwise_layer(EltwiseLayerNode &amp;node)</div><div class="ttdoc">Create a backend element-wise operation layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01015">FunctionHelpers.h:1015</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">arm_compute::graph::backends::detail::create_activation_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_activation_layer(ActivationLayerNode &amp;node)</div><div class="ttdoc">Creates a backend activation layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00102">FunctionHelpers.h:102</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">ConvolutionLayer.cpp:413</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01018">Types.h:1018</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">arm_compute::graph::FusedConvolutionBatchNormalizationNode</a></div><div class="ttdoc">Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8h_source.xhtml#l00034">FusedConvolutionBatchNormalizationNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pad_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PadLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_node_8cpp_source.xhtml#l00082">PadLayerNode.cpp:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reshape_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">arm_compute::graph::ReshapeLayerNode</a></div><div class="ttdoc">Reshape Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_reshape_layer_node_8h_source.xhtml#l00034">ReshapeLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_unary_eltwise_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::UnaryEltwiseLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00164">EltwiseLayerNode.cpp:164</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">arm_compute::graph::FusedConvolutionWithPostOpNode</a></div><div class="ttdoc">Convolution node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8h_source.xhtml#l00036">FusedConvolutionWithPostOpNode.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a69dd1fc17c7a15f4125873be182c8c76"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">arm_compute::graph::backends::detail::get_backing_tensor</a></div><div class="ttdeci">TargetInfo::TensorType * get_backing_tensor(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00062">FunctionHelpers.h:62</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::ChannelShuffleLayerNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00040">ChannelShuffleLayerNode.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_post_process_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">arm_compute::graph::DetectionPostProcessLayerNode</a></div><div class="ttdoc">DetectionPostProcess Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_node_8h_source.xhtml#l00034">DetectionPostProcessLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a2deabaddc31b1c05c9176c0f5b79073f"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2deabaddc31b1c05c9176c0f5b79073f">arm_compute::graph::backends::detail::create_l2_normalize_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_l2_normalize_layer(L2NormalizeLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend l2 normalization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01283">FunctionHelpers.h:1283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_detection_output_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml">arm_compute::DetectionOutputLayerInfo</a></div><div class="ttdoc">Detection Output layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00780">Types.h:780</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a7ec865e1ee296647ec995b501e5ceb8b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">arm_compute::graph::backends::detail::create_fused_depthwise_convolution_batch_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fused_depthwise_convolution_batch_normalization_layer(FusedDepthwiseConvolutionBatchNormalizationNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend fused depthwise convolution batch normalization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00279">FunctionHelpers.h:279</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_resize_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ResizeLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_node_8cpp_source.xhtml#l00081">ResizeLayerNode.cpp:81</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_bounding_box_transform_info_xhtml_a7f5fdd9585e3de60e819aa6cc7356b7e"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">arm_compute::BoundingBoxTransformInfo::img_height</a></div><div class="ttdeci">float img_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01439">Types.h:1439</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depth_to_space_layer_node_xhtml_a20c3747fefdcc35a82acee379098a840"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#a20c3747fefdcc35a82acee379098a840">arm_compute::graph::DepthToSpaceLayerNode::block_shape</a></div><div class="ttdeci">int block_shape() const</div><div class="ttdoc">Block shape policy accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_node_8cpp_source.xhtml#l00042">DepthToSpaceLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_stack_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml">arm_compute::graph::StackLayerNode</a></div><div class="ttdoc">Stack Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_stack_layer_node_8h_source.xhtml#l00034">StackLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa65a1becdfa5fc3533d79bba0cd4095c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">arm_compute::graph::backends::detail::create_permute_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_permute_layer(PermuteLayerNode &amp;node)</div><div class="ttdoc">Create a backend permute layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01447">FunctionHelpers.h:1447</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a9ed1b4c467dc74e107d884251fab3193"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a9ed1b4c467dc74e107d884251fab3193">arm_compute::graph::StridedSliceLayerNode::strided_slice_info</a></div><div class="ttdeci">StridedSliceLayerInfo strided_slice_info() const</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00060">StridedSliceLayerNode.cpp:60</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node's name.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00108">INode.cpp:108</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ac77fa3bf0d7d7c3fde6243192f93f380"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">arm_compute::graph::backends::detail::create_deconvolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_deconvolution_layer(DeconvolutionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend deconvolution layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00732">FunctionHelpers.h:732</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reduction_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ReductionLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_reduction_layer_node_8cpp_source.xhtml#l00084">ReductionLayerNode.cpp:84</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::StridedSliceLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00103">StridedSliceLayerNode.cpp:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reshape_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ReshapeLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2nodes_2_reshape_layer_8cpp_source.xhtml#l00066">ReshapeLayer.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reorg_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ReorgLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_reorg_layer_node_8cpp_source.xhtml#l00088">ReorgLayerNode.cpp:88</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">arm_compute::graph::EltwiseOperation::Max</a></div><div class="ttdeci">@ Max</div><div class="ttdoc">Arithmetic maximum.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_p_relu_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">arm_compute::graph::PReluLayerNode</a></div><div class="ttdoc">PRelu Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_p_relu_layer_node_8h_source.xhtml#l00034">PReluLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_batch_normalization_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::BatchNormalizationLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_node_8cpp_source.xhtml#l00046">BatchNormalizationLayerNode.cpp:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_softmax_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">arm_compute::graph::SoftmaxLayerNode</a></div><div class="ttdoc">Softmax Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_layer_node_8h_source.xhtml#l00034">SoftmaxLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::ConvolutionMethod::GEMM</a></div><div class="ttdeci">@ GEMM</div><div class="ttdoc">GEMM based convolution.</div></div>
<div class="ttc" id="a_i_post_op_8h_xhtml"><div class="ttname"><a href="_i_post_op_8h.xhtml">IPostOp.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Types.h:643</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_post_process_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::DetectionPostProcessLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_node_8cpp_source.xhtml#l00094">DetectionPostProcessLayerNode.cpp:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00070">FusedConvolutionBatchNormalizationWithPostOpsNode.cpp:70</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00138">CoreTypes.h:138</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00899">Types.h:899</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_output_layer_node_xhtml_a4491336dccd18464fbbf617c981736cf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#a4491336dccd18464fbbf617c981736cf">arm_compute::graph::DetectionOutputLayerNode::detection_output_info</a></div><div class="ttdeci">DetectionOutputLayerInfo detection_output_info() const</div><div class="ttdoc">DetectionOutput metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_output_layer_node_8cpp_source.xhtml#l00042">DetectionOutputLayerNode.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml">arm_compute::graph::ArgMinMaxLayerNode</a></div><div class="ttdoc">Arg Min/Max Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8h_source.xhtml#l00034">ArgMinMaxLayerNode.h:34</a></div></div>
<div class="ttc" id="a_nodes_8h_xhtml"><div class="ttname"><a href="_nodes_8h.xhtml">Nodes.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::NormalizePlanarYUVLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_normalize_planar_y_u_v_layer_node_8cpp_source.xhtml#l00063">NormalizePlanarYUVLayerNode.cpp:63</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::ConvolutionLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00076">ConvolutionLayerNode.cpp:76</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_softmax_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::SoftmaxLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_layer_node_8cpp_source.xhtml#l00072">SoftmaxLayerNode.cpp:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_bounding_box_transform_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml">arm_compute::BoundingBoxTransformInfo</a></div><div class="ttdoc">Bounding Box Transform information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01408">Types.h:1408</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ae1fc8d58864f288cb356851d79f1c28d"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae1fc8d58864f288cb356851d79f1c28d">arm_compute::graph::backends::detail::create_fused_convolution_with_post_op</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fused_convolution_with_post_op(FusedConvolutionWithPostOpNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend convolution layer function with post operator.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00555">FunctionHelpers.h:555</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::PostOpType::Activation</a></div><div class="ttdeci">@ Activation</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node's type.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00130">FusedDepthwiseConvolutionBatchNormalizationNode.cpp:130</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::FusedConvolutionWithPostOpNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00071">FusedConvolutionWithPostOpNode.cpp:71</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a3f5c14020836599056281fe52d7e9dd3"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">arm_compute::graph::backends::detail::create_channel_shuffle_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_channel_shuffle_layer(ChannelShuffleLayerNode &amp;node)</div><div class="ttdoc">Create a backend channel shuffle layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00372">FunctionHelpers.h:372</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_bounding_box_transform_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::BoundingBoxTransformLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00071">BoundingBoxTransformLayerNode.cpp:71</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depth_to_space_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml">arm_compute::graph::DepthToSpaceLayerNode</a></div><div class="ttdoc">DepthToSpace Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_node_8h_source.xhtml#l00034">DepthToSpaceLayerNode.h:34</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a2dfc97df083b68f8409ba21d8a0110d8"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">arm_compute::graph::backends::detail::create_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_normalization_layer(NormalizationLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend normalization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01327">FunctionHelpers.h:1327</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a92b35a365f58606a13baaf4501d78d9e"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e">arm_compute::graph::backends::detail::create_normalize_planar_yuv_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_normalize_planar_yuv_layer(NormalizePlanarYUVLayerNode &amp;node)</div><div class="ttdoc">Create a backend normalize planar YUV layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01368">FunctionHelpers.h:1368</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_resize_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">arm_compute::graph::ResizeLayerNode</a></div><div class="ttdoc">Resize Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_node_8h_source.xhtml#l00034">ResizeLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_softmax_layer_node_xhtml_a01524f49fa1d982d4382e390bef91de7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml#a01524f49fa1d982d4382e390bef91de7">arm_compute::graph::SoftmaxLayerNode::beta</a></div><div class="ttdeci">float beta() const</div><div class="ttdoc">Beta parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_layer_node_8cpp_source.xhtml#l00041">SoftmaxLayerNode.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::FusedConvolutionBatchNormalizationNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00139">FusedConvolutionBatchNormalizationNode.cpp:139</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">arm_compute::graph::backends::detail::create_convolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_convolution_layer(ConvolutionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend convolution layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00464">FunctionHelpers.h:464</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">arm_compute::graph::backends::detail::create_concatenate_layer</a></div><div class="ttdeci">std::unique_ptr&lt; arm_compute::IFunction &gt; create_concatenate_layer(ConcatenateLayerNode &amp;node)</div><div class="ttdoc">Create a backend layer concatenate function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00407">FunctionHelpers.h:407</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ab3787ac008a709edda8d347370bbad61"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">arm_compute::graph::backends::detail::create_bounding_box_transform_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_bounding_box_transform_layer(BoundingBoxTransformLayerNode &amp;node)</div><div class="ttdoc">Create a backend bounding box transform layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00334">FunctionHelpers.h:334</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_pooling_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PoolingLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_pooling_layer_node_8cpp_source.xhtml#l00091">PoolingLayerNode.cpp:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::graph::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Supported Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00130">Types.h:130</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_p_relu_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PReluLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_p_relu_layer_node_8cpp_source.xhtml#l00061">PReluLayerNode.cpp:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::EltwiseOperation::Add</a></div><div class="ttdeci">@ Add</div><div class="ttdoc">Arithmetic addition.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_stack_layer_node_xhtml_a18ffaef3d2889fbba089ffbf7ea2f12d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml#a18ffaef3d2889fbba089ffbf7ea2f12d">arm_compute::graph::StackLayerNode::axis</a></div><div class="ttdeci">int axis() const</div><div class="ttdoc">Stack axis parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_stack_layer_node_8cpp_source.xhtml#l00045">StackLayerNode.cpp:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01475">Types.h:1475</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_arg_min_max_layer_node_xhtml_a5c86a49e3cc9c3c03c1c3fb1e027e22b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#a5c86a49e3cc9c3c03c1c3fb1e027e22b">arm_compute::graph::ArgMinMaxLayerNode::axis</a></div><div class="ttdeci">unsigned int axis() const</div><div class="ttdoc">Axis accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_arg_min_max_layer_node_8cpp_source.xhtml#l00047">ArgMinMaxLayerNode.cpp:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_permute_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::PermuteLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8cpp_source.xhtml#l00077">PermuteLayerNode.cpp:77</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_a051cd2a8d15cf783e9ab9a00451c77f6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a051cd2a8d15cf783e9ab9a00451c77f6">arm_compute::graph::ConcatenateLayerNode::concatenation_axis</a></div><div class="ttdeci">DataLayoutDimension concatenation_axis() const</div><div class="ttdoc">Concatenation axis parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8cpp_source.xhtml#l00054">ConcatenateLayerNode.cpp:54</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml_a984881c2c9e6de259af8fcd4ecbc4d80"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a984881c2c9e6de259af8fcd4ecbc4d80">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode::num_groups</a></div><div class="ttdeci">unsigned int num_groups() const</div><div class="ttdoc">Number of groups in convolution accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00075">FusedConvolutionBatchNormalizationWithPostOpsNode.cpp:75</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
<div class="ttc" id="a_fused_convolution_batch_normalization_with_post_ops_function_8h_xhtml"><div class="ttname"><a href="_fused_convolution_batch_normalization_with_post_ops_function_8h.xhtml">FusedConvolutionBatchNormalizationWithPostOpsFunction.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a751e39ebd690d1cd1027d165cdbe143d"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">arm_compute::graph::backends::detail::create_dequantization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_dequantization_layer(DequantizationLayerNode &amp;node)</div><div class="ttdoc">Create a backend dequantize layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00876">FunctionHelpers.h:876</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_stack_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::StackLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_stack_layer_node_8cpp_source.xhtml#l00105">StackLayerNode.cpp:105</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_generate_proposals_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">arm_compute::graph::GenerateProposalsLayerNode</a></div><div class="ttdoc">Generate Proposals Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_generate_proposals_layer_node_8h_source.xhtml#l00035">GenerateProposalsLayerNode.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_slice_layer_node_xhtml_a836dbfcb541878d045cac29f9b35d5cb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a836dbfcb541878d045cac29f9b35d5cb">arm_compute::graph::SliceLayerNode::ends</a></div><div class="ttdeci">Coordinates ends() const</div><div class="ttdoc">End coordinates accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8cpp_source.xhtml#l00047">SliceLayerNode.cpp:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a062b90d0a8defe70b0cd19300fee2825"><div class="ttname"><a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const ClComponentElementwiseBinary::Attributes::ElementwiseOp &amp;op)</div><div class="ttdoc">Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...</div><div class="ttdef"><b>Definition:</b> <a href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00070">ElementwiseBinary.h:70</a></div></div>
<div class="ttc" id="a_fused_depthwise_convolution_batch_normalization_function_8h_xhtml"><div class="ttname"><a href="_fused_depthwise_convolution_batch_normalization_function_8h.xhtml">FusedDepthwiseConvolutionBatchNormalizationFunction.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_scale_kernel_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_scale_kernel_info.xhtml">arm_compute::ScaleKernelInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00190">KernelDescriptors.h:190</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00364">Types.h:364</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml_a807d0a897f65b2fa1f8ea92892fa2c2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">arm_compute::graph::FullyConnectedLayerNode::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint() const</div><div class="ttdoc">Fast math hint accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00045">FullyConnectedLayer.cpp:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::ConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8cpp_source.xhtml#l00066">ConvolutionLayerNode.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_slice_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::SliceLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8cpp_source.xhtml#l00086">SliceLayerNode.cpp:86</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a7f44d10197128d3f478626b5c68b3c35"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fused_convolution_batch_normalization_layer(FusedConvolutionBatchNormalizationNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend batch normalization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00222">FunctionHelpers.h:222</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a32186582e0a6e02ed7ac3944f60b9c62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a32186582e0a6e02ed7ac3944f60b9c62">arm_compute::graph::EltwiseLayerNode::fused_activation</a></div><div class="ttdeci">ActivationLayerInfo fused_activation() const</div><div class="ttdoc">Returns fused activation.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00056">EltwiseLayerNode.cpp:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="agraph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00151">INode.cpp:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00346">DataTypeUtils.h:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_xhtml_a4403f766b0d02eb3882a9521d0390986"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">arm_compute::graph::backends::is_in_place_operation</a></div><div class="ttdeci">bool is_in_place_operation(void *input, void *output)</div><div class="ttdoc">Checks if an operation is in place.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00077">Utils.h:77</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ab8ff2a40f95b76ec10ac2a98d1a8d594"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">arm_compute::graph::backends::detail::create_depthwise_convolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &amp;node)</div><div class="ttdoc">Create a backend layer depth-wise convolution function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00775">FunctionHelpers.h:775</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a75d7c8bdf0059bb235880f8ef8d190bc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75d7c8bdf0059bb235880f8ef8d190bc">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const</div><div class="ttdoc">Returns number of outputs of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00184">INode.cpp:184</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_strided_slice_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml">arm_compute::StridedSliceLayerInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01554">Types.h:1554</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_batch_normalization_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::BatchNormalizationLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_node_8cpp_source.xhtml#l00079">BatchNormalizationLayerNode.cpp:79</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ac707d7ce6578bee792a6bb794236bd49"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac707d7ce6578bee792a6bb794236bd49">arm_compute::graph::backends::detail::create_arg_min_max_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_arg_min_max_layer(ArgMinMaxLayerNode &amp;node)</div><div class="ttdoc">Creates a backend argminmax layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00140">FunctionHelpers.h:140</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_aa26cd423e8fc9233bd2bff46f82f46ab"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aa26cd423e8fc9233bd2bff46f82f46ab">arm_compute::graph::INode::assigned_target</a></div><div class="ttdeci">Target assigned_target() const</div><div class="ttdoc">Returns assigned target for this node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00199">INode.cpp:199</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">arm_compute::SamplingPolicy::CENTER</a></div><div class="ttdeci">@ CENTER</div><div class="ttdoc">Samples are taken at pixel center.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00057">GraphContext.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a31be99a5d0f75045fc411e211824baad"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad">arm_compute::graph::backends::detail::create_quantization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_quantization_layer(QuantizationLayerNode &amp;node)</div><div class="ttdoc">Create a backend quantization layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01634">FunctionHelpers.h:1634</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::DataLayout::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown data layout.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_reorg_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">arm_compute::graph::ReorgLayerNode</a></div><div class="ttdoc">Reorg Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_reorg_layer_node_8h_source.xhtml#l00034">ReorgLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_a6507f40ddf408e1f124cb84fa5cbfd1e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a6507f40ddf408e1f124cb84fa5cbfd1e">arm_compute::graph::ConcatenateLayerNode::is_enabled</a></div><div class="ttdeci">bool is_enabled() const</div><div class="ttdoc">Enabled parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8cpp_source.xhtml#l00049">ConcatenateLayerNode.cpp:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_acda6687f669fe87581d7bff8fcd82ebc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#acda6687f669fe87581d7bff8fcd82ebc">arm_compute::graph::EltwiseLayerNode::eltwise_operation</a></div><div class="ttdeci">EltwiseOperation eltwise_operation() const</div><div class="ttdoc">Eltwise operation accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00041">EltwiseLayerNode.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_ae42377172cf17e3ac33205018768bd62"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#ae42377172cf17e3ac33205018768bd62">arm_compute::graph::StridedSliceLayerNode::strides</a></div><div class="ttdeci">BiStrides strides() const</div><div class="ttdoc">Strides vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00055">StridedSliceLayerNode.cpp:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_l2_normalize_layer_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::L2NormalizeLayerNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">epsilon accessors</div><div class="ttdef"><b>Definition:</b> <a href="_l2_normalize_layer_node_8cpp_source.xhtml#l00080">L2NormalizeLayerNode.cpp:80</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_af2cc0b57645cd940d1ac0fd9b7171ffc"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af2cc0b57645cd940d1ac0fd9b7171ffc">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_with_post_op</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fused_convolution_batch_normalization_with_post_op(FusedConvolutionBatchNormalizationWithPostOpsNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend convolution batch normalization layer function with post operator.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00649">FunctionHelpers.h:649</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode</a></div><div class="ttdoc">Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8h_source.xhtml#l00034">FusedConvolutionBatchNormalizationWithPostOpsNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml_a476f08a0729f8861bec63b7e62c7b514"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#a476f08a0729f8861bec63b7e62c7b514">arm_compute::graph::StridedSliceLayerNode::starts</a></div><div class="ttdeci">Coordinates starts() const</div><div class="ttdoc">Start coordinates accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8cpp_source.xhtml#l00045">StridedSliceLayerNode.cpp:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aaf28fee838c38cc4da407a4dbc62f7b0"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0">arm_compute::graph::backends::detail::create_priorbox_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_priorbox_layer(PriorBoxLayerNode &amp;node)</div><div class="ttdoc">Create a backend priorbox layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01592">FunctionHelpers.h:1592</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::ConvolutionMethod::Winograd</a></div><div class="ttdeci">@ Winograd</div><div class="ttdoc">Winograd based convolution.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a7880c3b249a6dad40da0ebcf6600b0e1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">arm_compute::graph::backends::detail::create_flatten_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_flatten_layer(FlattenLayerNode &amp;node)</div><div class="ttdoc">Create a backend flatten layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01138">FunctionHelpers.h:1138</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node's ID.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00103">INode.cpp:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_function_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_function.xhtml">arm_compute::graph::backends::FusedConvolutionBatchNormalizationFunction</a></div><div class="ttdoc">Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE,...</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_function_8h_source.xhtml#l00039">FusedConvolutionBatchNormalizationFunction.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml">arm_compute::graph::ITensorHandle</a></div><div class="ttdoc">Tensor handle interface object.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_handle_8h_source.xhtml#l00038">ITensorHandle.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_slice_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">arm_compute::graph::SliceLayerNode</a></div><div class="ttdoc">Slice Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_slice_layer_node_8h_source.xhtml#l00036">SliceLayerNode.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_strided_slice_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml">arm_compute::graph::StridedSliceLayerNode</a></div><div class="ttdoc">Slice Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_layer_node_8h_source.xhtml#l00036">StridedSliceLayerNode.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_a88e38a50a2e964b19521fe8f2e9a144f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#a88e38a50a2e964b19521fe8f2e9a144f">arm_compute::graph::DepthwiseConvolutionLayerNode::depth_multiplier</a></div><div class="ttdeci">int depth_multiplier() const</div><div class="ttdoc">Depth multiplier accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00043">DepthwiseConvolutionLayerNode.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aae3c0800f31c468404c636104f3c118d"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aae3c0800f31c468404c636104f3c118d">arm_compute::graph::backends::detail::create_depth_to_space_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_depth_to_space_layer(DepthToSpaceLayerNode &amp;node)</div><div class="ttdoc">Create a backend depth to space layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00837">FunctionHelpers.h:837</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a1a18725e5da4a7ae62c9a3b731ab8fe1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1">arm_compute::graph::backends::detail::create_generate_proposals_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_generate_proposals_layer(GenerateProposalsLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend generate proposals layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01234">FunctionHelpers.h:1234</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a2649717c86236a4308f258322df73114"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2649717c86236a4308f258322df73114">arm_compute::graph::backends::detail::create_unary_eltwise_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_unary_eltwise_layer(UnaryEltwiseLayerNode &amp;node)</div><div class="ttdoc">Create a backend unary element-wise operation layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01090">FunctionHelpers.h:1090</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_detection_output_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">arm_compute::graph::DetectionOutputLayerNode</a></div><div class="ttdoc">DetectionOutput Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_detection_output_layer_node_8h_source.xhtml#l00034">DetectionOutputLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_print_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml">arm_compute::graph::PrintLayerNode</a></div><div class="ttdoc">Print Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_print_layer_node_8h_source.xhtml#l00037">PrintLayerNode.h:37</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling_layer_info_xhtml_a9454e2a604136e9b2bddf630b4c9b09a"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">arm_compute::PoolingLayerInfo::pool_type</a></div><div class="ttdeci">PoolingType pool_type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01119">Types.h:1119</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_fused_depthwise_convolution_batch_normalization_function_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_fused_depthwise_convolution_batch_normalization_function.xhtml">arm_compute::graph::backends::FusedDepthwiseConvolutionBatchNormalizationFunction</a></div><div class="ttdoc">Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE,...</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_function_8h_source.xhtml#l00039">FusedDepthwiseConvolutionBatchNormalizationFunction.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::FusedConvolutionWithPostOpNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00066">FusedConvolutionWithPostOpNode.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml_a807d0a897f65b2fa1f8ea92892fa2c2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint() const</div><div class="ttdoc">Fast math hint accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00065">FusedConvolutionBatchNormalizationWithPostOpsNode.cpp:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01234">Types.h:1234</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_bounding_box_transform_info_xhtml_a4a5b4a276ace0cc81f724921643ceb85"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">arm_compute::BoundingBoxTransformInfo::img_width</a></div><div class="ttdeci">float img_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01444">Types.h:1444</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a3805b9005b1d842bad30e09846e1f4e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">arm_compute::graph::UnaryEltwiseOperation</a></div><div class="ttdeci">UnaryEltwiseOperation</div><div class="ttdoc">Supported Unary Element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00124">Types.h:124</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_generate_proposals_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml">arm_compute::GenerateProposalsInfo</a></div><div class="ttdoc">Generate Proposals Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01277">Types.h:1277</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml_acd39aa81617eab4d3482fa904d5dee87"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#acd39aa81617eab4d3482fa904d5dee87">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode::epsilon</a></div><div class="ttdeci">float epsilon() const</div><div class="ttdoc">Epsilon parameter accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00050">FusedConvolutionBatchNormalizationWithPostOpsNode.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml_ad087f1f9aa1e444236911adf6c57df04"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#ad087f1f9aa1e444236911adf6c57df04">arm_compute::graph::DepthwiseConvolutionLayerNode::convolution_info</a></div><div class="ttdeci">PadStrideInfo convolution_info() const</div><div class="ttdoc">Convolution metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00058">DepthwiseConvolutionLayerNode.cpp:58</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">arm_compute::graph::DepthwiseConvolutionLayerNode</a></div><div class="ttdoc">Depthwise Convolution Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8h_source.xhtml#l00034">DepthwiseConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_normalization_layer_info_xhtml_abf43f970446f0b82889df52463b9c2b8"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#abf43f970446f0b82889df52463b9c2b8">arm_compute::NormalizationLayerInfo::type</a></div><div class="ttdeci">NormType type() const</div><div class="ttdoc">Get the normalization type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01493">Types.h:1493</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_r_o_i_align_layer_node_xhtml_a51a2c95a0b98cf92e99d06672db84060"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#a51a2c95a0b98cf92e99d06672db84060">arm_compute::graph::ROIAlignLayerNode::pooling_info</a></div><div class="ttdeci">const ROIPoolingLayerInfo &amp; pooling_info() const</div><div class="ttdoc">ROIPoolingLayerInfo accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00043">ROIAlignLayerNode.cpp:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_deconvolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">arm_compute::graph::DeconvolutionLayerNode</a></div><div class="ttdoc">Deconvolution Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_deconvolution_layer_node_8h_source.xhtml#l00035">DeconvolutionLayerNode.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_normalization_layer_node_xhtml_a3bfea94983e45ff8d1a3061206593349"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml#a3bfea94983e45ff8d1a3061206593349">arm_compute::graph::NormalizationLayerNode::normalization_info</a></div><div class="ttdeci">NormalizationLayerInfo normalization_info() const</div><div class="ttdoc">Normalization info accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_normalization_layer_node_8cpp_source.xhtml#l00041">NormalizationLayerNode.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_post_op_list_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">arm_compute::experimental::PostOpList</a></div><div class="ttdoc">A sequence of PostOps that can be appended to the end of other operators.</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00119">IPostOp.h:119</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_normalization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">arm_compute::graph::NormalizationLayerNode</a></div><div class="ttdoc">Normalization Layer node.</div><div class="ttdef"><b>Definition:</b> <a href="_normalization_layer_node_8h_source.xhtml#l00034">NormalizationLayerNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml_a807d0a897f65b2fa1f8ea92892fa2c2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#a807d0a897f65b2fa1f8ea92892fa2c2a">arm_compute::graph::FusedConvolutionBatchNormalizationNode::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint() const</div><div class="ttdoc">Fast math hint accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00066">FusedConvolutionBatchNormalizationNode.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode</a></div><div class="ttdoc">Fused Depthwise Convolution Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8h_source.xhtml#l00034">FusedDepthwiseConvolutionBatchNormalizationNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5567ed5ad9c8fb45d2748bab27163530"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530">arm_compute::graph::backends::detail::create_print_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_print_layer(PrintLayerNode &amp;node)</div><div class="ttdoc">Create a backend print layer function.</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l01562">FunctionHelpers.h:1562</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_a0f09377db195c78de49f1d2be26ee649"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#a0f09377db195c78de49f1d2be26ee649">arm_compute::graph::EltwiseLayerNode::rounding_policy</a></div><div class="ttdeci">RoundingPolicy rounding_policy() const</div><div class="ttdoc">Rounding policy accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8cpp_source.xhtml#l00051">EltwiseLayerNode.cpp:51</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node's type.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00128">FusedConvolutionBatchNormalizationWithPostOpsNode.cpp:128</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_59b2231210c554f4cc243709030bf1f8.xhtml">backends</a></li><li class="navelem"><a class="el" href="_function_helpers_8h.xhtml">FunctionHelpers.h</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:06 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
