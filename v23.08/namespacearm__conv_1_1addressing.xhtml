<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::addressing Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__conv_1_1addressing.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::addressing Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac9211d5ee87bf4727d20cb4fbb73d413"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1addressing.xhtml#ac9211d5ee87bf4727d20cb4fbb73d413">fill_pointer_array</a> (size_t element_size, void **dest_raw, const unsigned int array_rows, const unsigned int array_cols, void *base_ptr_raw, size_t ld_row, size_t ld_col, void *pad_buffer_raw, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</td></tr>
<tr class="separator:ac9211d5ee87bf4727d20cb4fbb73d413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e4bd2f9db0e2bf819f3aa1f3635bd5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1addressing.xhtml#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">fill_pointer_array_generic_kernel</a> (const size_t element_size, void **dest_raw, const unsigned int output_rows, const unsigned int output_cols, const unsigned int kernel_rows, const unsigned int kernel_cols, const unsigned int stride_rows, const unsigned int stride_cols, void *base_ptr_raw, size_t ld_row, size_t ld_col, void *pad_buffer_raw, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</td></tr>
<tr class="separator:aa3e4bd2f9db0e2bf819f3aa1f3635bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a719b338d6f0e8dbca5c79e186e35d7dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1addressing.xhtml#a719b338d6f0e8dbca5c79e186e35d7dc">fill_nchw_patch_array</a> (size_t element_size, const void **dest_row_pointers_raw, void *dest_patch_raw, const unsigned int patch_rows, unsigned int patch_cols, const void *src_ptr_raw, size_t ld_row, size_t ld_col, const void *pad_row, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</td></tr>
<tr class="separator:a719b338d6f0e8dbca5c79e186e35d7dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8907161c1f7f9e0fba0a270607659cc8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1addressing.xhtml#a8907161c1f7f9e0fba0a270607659cc8">fill_patch_array_generic_kernel</a> (size_t element_size, const void **dest_pointers_raw, void *patch_raw, const unsigned int output_rows, const unsigned int output_cols, const unsigned int kernel_rows, const unsigned int kernel_cols, const unsigned int stride_rows, const unsigned int stride_cols, const void *src_ptr_raw, size_t ld_row, size_t ld_col, const void *pad_row, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</td></tr>
<tr class="separator:a8907161c1f7f9e0fba0a270607659cc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a719b338d6f0e8dbca5c79e186e35d7dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a719b338d6f0e8dbca5c79e186e35d7dc">&#9670;&nbsp;</a></span>fill_nchw_patch_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fill_nchw_patch_array </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void **&#160;</td>
          <td class="paramname"><em>dest_row_pointers_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dest_patch_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>patch_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>patch_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src_ptr_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pad_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="addressing_8cpp_source.xhtml#l00171">171</a> of file <a class="el" href="addressing_8cpp_source.xhtml">addressing.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="comment">// Convert into more useful types</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keyword">auto</span> row_pointers = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> **<span class="keyword">&gt;</span>(dest_row_pointers_raw);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keyword">auto</span> dest_patch = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(dest_patch_raw);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(src_ptr_raw);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  ld_row *= element_size;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  ld_col *= element_size;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="comment">// Round up the patch columns to be a full quad</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  patch_cols = arm_gemm::roundup&lt;unsigned int&gt;(patch_cols, 16 / element_size);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_row = std::min(pad_top + valid_rows, patch_rows);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_col = std::min(pad_left + valid_cols, patch_cols);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="comment">// Construct the patch and row pointer array together</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordflow">for</span> (; i &lt; pad_top; i++)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Insert pointers into the padding row</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    *(row_pointers++) = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_row);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordflow">for</span> (; i &lt; last_valid_row; i++)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Get a copy of the pointer for this row</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">auto</span> colptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> += ld_row;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// If the input is already in NCHW format (ld_col == element_size) AND</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// there is no padding, then we just use a pointer to the source tensor;</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// otherwise we need to construct a patch and provide a pointer to it.</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span> (ld_col == element_size &amp;&amp; pad_left == 0 &amp;&amp; last_valid_col == patch_cols)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      *(row_pointers++) = colptr;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      <span class="keyword">auto</span> patch_col = dest_patch;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      *(row_pointers++) = dest_patch;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      dest_patch += element_size * patch_cols;  <span class="comment">// Move the patch pointer on</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      <span class="comment">// Construct the patch; fill the entirety with padding and then copy in</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="comment">// the valid elements.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      memcpy(patch_col, pad_row, element_size * patch_cols);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      patch_col += pad_left * element_size;  <span class="comment">// Move over the left padding</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">if</span> (ld_col == element_size)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="comment">// If the input is NCHW then copy across as many columns as we can.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        memcpy(patch_col, colptr, (last_valid_col - pad_left) * element_size);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="comment">// If the input is NHWC then copy columns across in turn.</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = pad_left; j &lt; last_valid_col; j++)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          memcpy(patch_col, colptr, element_size);  <span class="comment">// Copy the valid element</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;          patch_col += element_size;  <span class="comment">// Progress the patch destination</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          colptr += ld_col;  <span class="comment">// Progress the patch source</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keywordflow">for</span> (; i &lt; patch_rows; i++)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Insert pointers into the padding row</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    *(row_pointers++) = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_row);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00432">PrepareInputSample&lt; false &gt;::execute()</a>.</p>

</div>
</div>
<a id="a8907161c1f7f9e0fba0a270607659cc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8907161c1f7f9e0fba0a270607659cc8">&#9670;&nbsp;</a></span>fill_patch_array_generic_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fill_patch_array_generic_kernel </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void **&#160;</td>
          <td class="paramname"><em>dest_pointers_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>patch_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>kernel_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>kernel_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>stride_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>stride_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src_ptr_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pad_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="addressing_8cpp_source.xhtml#l00259">259</a> of file <a class="el" href="addressing_8cpp_source.xhtml">addressing.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keyword">auto</span> <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a> = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> **<span class="keyword">&gt;</span>(dest_pointers_raw);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">auto</span> patch = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(patch_raw);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keyword">auto</span> src_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(src_ptr_raw);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  ld_row *= element_size;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  ld_col *= element_size;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="comment">// Round up the patch columns to a multiple of quad-length</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> patch_cols = arm_gemm::roundup&lt;unsigned int&gt;(output_cols, 16 / element_size);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> input_rows = kernel_rows + (output_rows - 1) * stride_rows;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_row = std::min(pad_top + valid_rows, input_rows);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> input_cols = kernel_cols + (output_cols - 1) * stride_cols;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_col = std::min(pad_left + valid_cols, input_cols);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> ki = 0u; ki &lt; kernel_rows; ki++)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> kj = 0u; kj &lt; kernel_cols; kj++)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      <span class="keyword">auto</span> oi = 0u, ii = ki;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">for</span> (; oi &lt; output_rows &amp;&amp; ii &lt; pad_top; oi++, ii += stride_rows)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Insert a pointer to the padding row</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_row);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="keywordflow">for</span> (; oi &lt; output_rows &amp;&amp; ii &lt; last_valid_row; oi++, ii += stride_rows)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keyword">auto</span> rowptr = src_ptr + (ii - pad_top) * ld_row;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="comment">// Construct a sample of the input here</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keyword">auto</span> patch_pos = patch;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = patch;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        patch += patch_cols * element_size;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="comment">// Fill with padding</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        memcpy(patch_pos, pad_row, patch_cols * element_size);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="comment">// Fill in the valid elements</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keyword">auto</span> oj = 0u, ij = kj;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">for</span> (; oj &lt; patch_cols &amp;&amp; ij &lt; pad_left; oj++, ij += stride_cols)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;          <span class="comment">// Do nothing for padding</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;          patch_pos += element_size;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">for</span> (; oj &lt; patch_cols &amp;&amp; ij &lt; last_valid_col; oj++, ij += stride_cols)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;          <span class="comment">// Copy from the source tensor</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;          memcpy(patch_pos, rowptr + (ij - pad_left)*ld_col, element_size);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;          patch_pos += element_size;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="comment">// No action required for right-hand padding</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      <span class="keywordflow">for</span> (; oi &lt; output_rows; oi++)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_row);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00644">GemmTuner::dest</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00452">PrepareInputSample&lt; true &gt;::execute()</a>.</p>

</div>
</div>
<a id="ac9211d5ee87bf4727d20cb4fbb73d413"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9211d5ee87bf4727d20cb4fbb73d413">&#9670;&nbsp;</a></span>fill_pointer_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fill_pointer_array </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>dest_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>array_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>array_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>base_ptr_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pad_buffer_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="addressing_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="addressing_8cpp_source.xhtml">addressing.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">auto</span> <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a> = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> **<span class="keyword">&gt;</span>(dest_raw);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">auto</span> base_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(base_ptr_raw);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">auto</span> pad_buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_buffer_raw);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  ld_row *= element_size;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  ld_col *= element_size;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_row = std::min(pad_top + valid_rows, array_rows);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_col = std::min(pad_left + valid_cols, array_cols);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">for</span> (; i &lt; pad_top; i++)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; array_cols; j++)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = pad_buffer;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">for</span> (; i &lt; last_valid_row; i++)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">auto</span> colptr = base_ptr;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    base_ptr += ld_row;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">for</span> (; j &lt; pad_left; j++)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = pad_buffer;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> (; j &lt; last_valid_col; j++)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = colptr;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      colptr += ld_col;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">for</span> (; j &lt; array_cols; j++)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = pad_buffer;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">for</span> (; i &lt; array_rows; i++)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; array_cols; j++)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      *(<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++) = pad_buffer;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00644">GemmTuner::dest</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00533">DepthwiseDepthfirstMultiplier&lt; TInput, TWeight, TOutput, TAccum, is_generic, OutputStage &gt;::compute_tile_padded()</a>.</p>

</div>
</div>
<a id="aa3e4bd2f9db0e2bf819f3aa1f3635bd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">&#9670;&nbsp;</a></span>fill_pointer_array_generic_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fill_pointer_array_generic_kernel </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>dest_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>kernel_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>kernel_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>stride_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>stride_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>base_ptr_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pad_buffer_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>valid_cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="addressing_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="addressing_8cpp_source.xhtml">addressing.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keyword">auto</span> <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a> = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> **<span class="keyword">&gt;</span>(dest_raw);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keyword">auto</span> base_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(base_ptr_raw);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">auto</span> pad_buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(pad_buffer_raw);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  ld_row *= element_size;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  ld_col *= element_size;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_row = pad_top + valid_rows;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> last_valid_col = pad_left + valid_cols;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> point_stride = output_rows * output_cols;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="comment">// Iterate over the output points, after every point increment the pointer</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="comment">// into the address array.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> oi = 0; oi &lt; output_rows; oi++)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> oj = 0; oj &lt; output_cols; oj++)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      <span class="keyword">auto</span> point_dest = <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>++;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="comment">// Iterate over kernel points and fill in the pointer array.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ki = 0, ii = oi*stride_rows;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">for</span> (; ii &lt; pad_top &amp;&amp; ki &lt; kernel_rows; ii++, ki++)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Fill with padding</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; kernel_cols; j++)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;          *point_dest = pad_buffer;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;          point_dest += point_stride;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="keywordflow">for</span> (; ii &lt; last_valid_row &amp;&amp; ki &lt; kernel_rows; ii++, ki++)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kj = 0, ij = oj*stride_cols;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">for</span> (; ij &lt; pad_left &amp;&amp; kj &lt; kernel_cols; ij++, kj++)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;          <span class="comment">// Padding</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;          *point_dest = pad_buffer;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;          point_dest += point_stride;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">for</span> (; ij &lt; last_valid_col &amp;&amp; kj &lt; kernel_cols; ij++, kj++)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;          *point_dest = base_ptr + (ii - pad_top)*ld_row + (ij - pad_left)*ld_col;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;          point_dest += point_stride;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">for</span> (; kj &lt; kernel_cols; kj++)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;          <span class="comment">// Padding</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;          *point_dest = pad_buffer;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;          point_dest += point_stride;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      <span class="keywordflow">for</span> (; ki &lt; kernel_rows; ki++)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Fill with padding</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; kernel_cols; j++)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;          *point_dest = pad_buffer;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;          point_dest += point_stride;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00644">GemmTuner::dest</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_ab0bede79c5f4cbed9c2cd932a0ace201"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">GemmTuner.dest</a></div><div class="ttdeci">dest</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00644">GemmTuner.py:644</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1addressing.xhtml">addressing</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:28 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
