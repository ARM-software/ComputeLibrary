<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: HeuristicTree Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">HeuristicTree Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A binary decision tree based heuristic.  
 <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1mlgo_1_1_heuristic_tree_1_1_branch_node.xhtml">BranchNode</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1mlgo_1_1_heuristic_tree_1_1_leaf_node.xhtml">LeafNode</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1mlgo_1_1_heuristic_tree_1_1_node.xhtml">Node</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:acac9cbaeea226ed297804c012dc12b16"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> { <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8">Branch</a>, 
<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5">Leaf</a>
 }</td></tr>
<tr class="separator:acac9cbaeea226ed297804c012dc12b16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e3fff3e83ba8bbf7eef6887d9b153d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> = size_t</td></tr>
<tr class="separator:a16e3fff3e83ba8bbf7eef6887d9b153d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdbbde2bc0640d1aea22a1cbbc2ac59c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a> = size_t</td></tr>
<tr class="separator:afdbbde2bc0640d1aea22a1cbbc2ac59c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c77363b9aae279f1e6a9fdabf1f927f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a4c77363b9aae279f1e6a9fdabf1f927f">Index</a> = std::tuple&lt; <a class="el" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09">HeuristicType</a>, std::string, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;</td></tr>
<tr class="separator:a4c77363b9aae279f1e6a9fdabf1f927f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9e7bd1393b35e766715ab934dfee7e40"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a9e7bd1393b35e766715ab934dfee7e40">HeuristicTree</a> ()</td></tr>
<tr class="memdesc:a9e7bd1393b35e766715ab934dfee7e40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a9e7bd1393b35e766715ab934dfee7e40">More...</a><br /></td></tr>
<tr class="separator:a9e7bd1393b35e766715ab934dfee7e40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac82117f20004c81ccb8b21445e813659"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ac82117f20004c81ccb8b21445e813659">HeuristicTree</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09">HeuristicType</a> h_type, const std::string &amp;ip_target, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ac82117f20004c81ccb8b21445e813659"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ac82117f20004c81ccb8b21445e813659">More...</a><br /></td></tr>
<tr class="separator:ac82117f20004c81ccb8b21445e813659"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22711b76f26e6a82eb42178b54f4609f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a22711b76f26e6a82eb42178b54f4609f">HeuristicTree</a> (const <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;)=delete</td></tr>
<tr class="memdesc:a22711b76f26e6a82eb42178b54f4609f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent copy construction.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a22711b76f26e6a82eb42178b54f4609f">More...</a><br /></td></tr>
<tr class="separator:a22711b76f26e6a82eb42178b54f4609f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740760ee5d91c2d4ab7815c7bc3cd185"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a740760ee5d91c2d4ab7815c7bc3cd185">operator=</a> (const <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;)=delete</td></tr>
<tr class="memdesc:a740760ee5d91c2d4ab7815c7bc3cd185"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent copy assignment.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a740760ee5d91c2d4ab7815c7bc3cd185">More...</a><br /></td></tr>
<tr class="separator:a740760ee5d91c2d4ab7815c7bc3cd185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5348c128f9e8a917a8cb618177dccd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afd5348c128f9e8a917a8cb618177dccd">HeuristicTree</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:afd5348c128f9e8a917a8cb618177dccd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructor.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afd5348c128f9e8a917a8cb618177dccd">More...</a><br /></td></tr>
<tr class="separator:afd5348c128f9e8a917a8cb618177dccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9eaaa4ab89bdac0f1a711147ca0c441"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ac9eaaa4ab89bdac0f1a711147ca0c441">operator=</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&amp;other)=default</td></tr>
<tr class="memdesc:ac9eaaa4ab89bdac0f1a711147ca0c441"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ac9eaaa4ab89bdac0f1a711147ca0c441">More...</a><br /></td></tr>
<tr class="separator:ac9eaaa4ab89bdac0f1a711147ca0c441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53d45213a730d052997de2f15d6324ab"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a53d45213a730d052997de2f15d6324ab"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; bool, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a53d45213a730d052997de2f15d6324ab">query</a> (<a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> shape) const</td></tr>
<tr class="memdesc:a53d45213a730d052997de2f15d6324ab"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="structarm__compute_1_1mlgo_1_1_query.xhtml" title="Query interface.">Query</a> a leaf value given a gemm shape.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a53d45213a730d052997de2f15d6324ab">More...</a><br /></td></tr>
<tr class="separator:a53d45213a730d052997de2f15d6324ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd73cff52d4133f4ecfa00f5699614d1"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afd73cff52d4133f4ecfa00f5699614d1"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afd73cff52d4133f4ecfa00f5699614d1">add_leaf</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, T leaf_value)</td></tr>
<tr class="memdesc:afd73cff52d4133f4ecfa00f5699614d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a leaf node.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afd73cff52d4133f4ecfa00f5699614d1">More...</a><br /></td></tr>
<tr class="separator:afd73cff52d4133f4ecfa00f5699614d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa133e1d9d7080a4071bbe101bc350f22"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#aa133e1d9d7080a4071bbe101bc350f22">add_branch</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="structarm__compute_1_1mlgo_1_1_condition.xhtml">Condition</a> cond, <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> true_node, <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> false_node)</td></tr>
<tr class="memdesc:aa133e1d9d7080a4071bbe101bc350f22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a branch node.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#aa133e1d9d7080a4071bbe101bc350f22">More...</a><br /></td></tr>
<tr class="separator:aa133e1d9d7080a4071bbe101bc350f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63d163d35294f57ea6bea903892616df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a> () const</td></tr>
<tr class="memdesc:a63d163d35294f57ea6bea903892616df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tree ID.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">More...</a><br /></td></tr>
<tr class="separator:a63d163d35294f57ea6bea903892616df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70df641c5212f2d7cd26b31595daa5b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a4c77363b9aae279f1e6a9fdabf1f927f">Index</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a70df641c5212f2d7cd26b31595daa5b2">index</a> () const</td></tr>
<tr class="memdesc:a70df641c5212f2d7cd26b31595daa5b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tree index.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a70df641c5212f2d7cd26b31595daa5b2">More...</a><br /></td></tr>
<tr class="separator:a70df641c5212f2d7cd26b31595daa5b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1ee541bb22588b6a71650c807efca90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ae1ee541bb22588b6a71650c807efca90">check</a> ()</td></tr>
<tr class="memdesc:ae1ee541bb22588b6a71650c807efca90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if tree is valid.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ae1ee541bb22588b6a71650c807efca90">More...</a><br /></td></tr>
<tr class="separator:ae1ee541bb22588b6a71650c807efca90"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:a439541c990c0ce827b8ab09a403a0683"><td class="memItemLeft" align="right" valign="top">template std::pair&lt; bool, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">GEMMType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a439541c990c0ce827b8ab09a403a0683">query</a> (<a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> shape) const</td></tr>
<tr class="memdesc:a439541c990c0ce827b8ab09a403a0683"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a439541c990c0ce827b8ab09a403a0683">More...</a><br /></td></tr>
<tr class="separator:a439541c990c0ce827b8ab09a403a0683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acae8b472b417be1d77ce4913cd2acef4"><td class="memItemLeft" align="right" valign="top">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_native.xhtml">GEMMConfigNative</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acae8b472b417be1d77ce4913cd2acef4">query</a> (<a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> shape) const</td></tr>
<tr class="memdesc:acae8b472b417be1d77ce4913cd2acef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acae8b472b417be1d77ce4913cd2acef4">More...</a><br /></td></tr>
<tr class="separator:acae8b472b417be1d77ce4913cd2acef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aa659d0336a0abdae3c097febf52cc2"><td class="memItemLeft" align="right" valign="top">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped_only_r_h_s.xhtml">GEMMConfigReshapedOnlyRHS</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a3aa659d0336a0abdae3c097febf52cc2">query</a> (<a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> shape) const</td></tr>
<tr class="memdesc:a3aa659d0336a0abdae3c097febf52cc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a3aa659d0336a0abdae3c097febf52cc2">More...</a><br /></td></tr>
<tr class="separator:a3aa659d0336a0abdae3c097febf52cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebbb99b941e7196e0c8c3451d48fccb1"><td class="memItemLeft" align="right" valign="top">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped.xhtml">GEMMConfigReshaped</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#aebbb99b941e7196e0c8c3451d48fccb1">query</a> (<a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> shape) const</td></tr>
<tr class="memdesc:aebbb99b941e7196e0c8c3451d48fccb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#aebbb99b941e7196e0c8c3451d48fccb1">More...</a><br /></td></tr>
<tr class="separator:aebbb99b941e7196e0c8c3451d48fccb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ee2ed2904d8aa7b89922191183adce3"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a6ee2ed2904d8aa7b89922191183adce3">add_leaf</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">GEMMType</a> val)</td></tr>
<tr class="memdesc:a6ee2ed2904d8aa7b89922191183adce3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a6ee2ed2904d8aa7b89922191183adce3">More...</a><br /></td></tr>
<tr class="separator:a6ee2ed2904d8aa7b89922191183adce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c4d11e37e7830c1c1488b8983c57d0f"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a7c4d11e37e7830c1c1488b8983c57d0f">add_leaf</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_native.xhtml">GEMMConfigNative</a> val)</td></tr>
<tr class="memdesc:a7c4d11e37e7830c1c1488b8983c57d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a7c4d11e37e7830c1c1488b8983c57d0f">More...</a><br /></td></tr>
<tr class="separator:a7c4d11e37e7830c1c1488b8983c57d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c5f17b85c925a084d8ba654957dd857"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a3c5f17b85c925a084d8ba654957dd857">add_leaf</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped_only_r_h_s.xhtml">GEMMConfigReshapedOnlyRHS</a> val)</td></tr>
<tr class="memdesc:a3c5f17b85c925a084d8ba654957dd857"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a3c5f17b85c925a084d8ba654957dd857">More...</a><br /></td></tr>
<tr class="separator:a3c5f17b85c925a084d8ba654957dd857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae54f5878b3fc9052ac1cd02cbd5d466a"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ae54f5878b3fc9052ac1cd02cbd5d466a">add_leaf</a> (<a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped.xhtml">GEMMConfigReshaped</a> val)</td></tr>
<tr class="memdesc:ae54f5878b3fc9052ac1cd02cbd5d466a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explicit template instantiation.  <a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#ae54f5878b3fc9052ac1cd02cbd5d466a">More...</a><br /></td></tr>
<tr class="separator:ae54f5878b3fc9052ac1cd02cbd5d466a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A binary decision tree based heuristic. </p>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00067">67</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a4c77363b9aae279f1e6a9fdabf1f927f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c77363b9aae279f1e6a9fdabf1f927f">&#9670;&nbsp;</a></span>Index</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a4c77363b9aae279f1e6a9fdabf1f927f">Index</a> =  std::tuple&lt;<a class="el" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09">HeuristicType</a>, std::string, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00072">72</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>

</div>
</div>
<a id="a16e3fff3e83ba8bbf7eef6887d9b153d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16e3fff3e83ba8bbf7eef6887d9b153d">&#9670;&nbsp;</a></span>NodeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a> =  size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00070">70</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>

</div>
</div>
<a id="afdbbde2bc0640d1aea22a1cbbc2ac59c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdbbde2bc0640d1aea22a1cbbc2ac59c">&#9670;&nbsp;</a></span>TreeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a> =  size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="acac9cbaeea226ed297804c012dc12b16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acac9cbaeea226ed297804c012dc12b16">&#9670;&nbsp;</a></span>NodeType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8"></a>Branch&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5"></a>Leaf&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00073">73</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Branch,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Leaf</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    };</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a9e7bd1393b35e766715ab934dfee7e40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e7bd1393b35e766715ab934dfee7e40">&#9670;&nbsp;</a></span>HeuristicTree() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    : <a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a9e7bd1393b35e766715ab934dfee7e40">HeuristicTree</a>(0, <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09a57ca8feb86455287489c64d4d2f92832">HeuristicType::GEMM_Type</a>, <span class="stringliteral">&quot;&quot;</span>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, and <a class="el" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09a57ca8feb86455287489c64d4d2f92832">arm_compute::mlgo::GEMM_Type</a>.</p>

</div>
</div>
<a id="ac82117f20004c81ccb8b21445e813659"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac82117f20004c81ccb8b21445e813659">&#9670;&nbsp;</a></span>HeuristicTree() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09">HeuristicType</a>&#160;</td>
          <td class="paramname"><em>h_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ip_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    : _id{ <span class="keywordtype">id</span> }, _heuristic_type{ h_type }, _ip_target{ ip_target }, _data_type{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> }, _tree{}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a22711b76f26e6a82eb42178b54f4609f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22711b76f26e6a82eb42178b54f4609f">&#9670;&nbsp;</a></span>HeuristicTree() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent copy construction. </p>

</div>
</div>
<a id="afd5348c128f9e8a917a8cb618177dccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5348c128f9e8a917a8cb618177dccd">&#9670;&nbsp;</a></span>HeuristicTree() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa133e1d9d7080a4071bbe101bc350f22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa133e1d9d7080a4071bbe101bc350f22">&#9670;&nbsp;</a></span>add_branch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool add_branch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_condition.xhtml">Condition</a>&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>true_node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>false_node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a branch node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>Branch node ID </td></tr>
    <tr><td class="paramname">cond</td><td>Branch node <a class="el" href="structarm__compute_1_1mlgo_1_1_condition.xhtml">Condition</a> </td></tr>
    <tr><td class="paramname">true_node</td><td>True node's ID </td></tr>
    <tr><td class="paramname">false_node</td><td>False node's ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool If the addition succeeded or not </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span>(_tree.size() &gt;= _max_num_nodes)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Exceeding the maximum number of nodes allowed %zu&quot;</span>, _max_num_nodes);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> std::set&lt;std::string&gt; supported_features =</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="stringliteral">&quot;m&quot;</span>, <span class="stringliteral">&quot;n&quot;</span>, <span class="stringliteral">&quot;k&quot;</span>, <span class="stringliteral">&quot;b&quot;</span>, <span class="stringliteral">&quot;r_mn&quot;</span>, <span class="stringliteral">&quot;r_mk&quot;</span>, <span class="stringliteral">&quot;r_nk&quot;</span>, <span class="stringliteral">&quot;r_mnk&quot;</span>, <span class="stringliteral">&quot;workload&quot;</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    };</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> orig_feature = cond.feature;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::transform(cond.feature.begin(), cond.feature.end(), cond.feature.begin(), [](<span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        return std::tolower(c);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    });</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span>(supported_features.find(cond.feature) == supported_features.end())</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Unsupported feature %s&quot;</span>, orig_feature.c_str());</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">if</span>(_tree.find(<span class="keywordtype">id</span>) != _tree.end())</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Cannot add node; node id %zu already exists&quot;</span>, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    _tree[<a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>] = std::make_unique&lt;BranchNode&gt;(<span class="keywordtype">id</span>, cond, t_node, f_node);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00099">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>, <a class="el" href="_heuristic_tree_8h_source.xhtml#l00052">Condition::feature</a>, and <a class="el" href="_heuristic_tree_8h_source.xhtml#l00161">HeuristicTree::id()</a>.</p>

</div>
</div>
<a id="afd73cff52d4133f4ecfa00f5699614d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd73cff52d4133f4ecfa00f5699614d1">&#9670;&nbsp;</a></span>add_leaf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool add_leaf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>leaf_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a leaf node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Leaf value type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>Leaf node ID </td></tr>
    <tr><td class="paramname">leaf_value</td><td>Leaf node value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool If the addition succeeded or not </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span>(_tree.size() &gt;= _max_num_nodes)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Exceeding the maximum number of nodes allowed %zu&quot;</span>, _max_num_nodes);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span>(_tree.find(<span class="keywordtype">id</span>) != _tree.end())</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Cannot add node; node id %zu already exists&quot;</span>, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    _tree[<a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>] = std::make_unique&lt;LeafNode&lt;T&gt;&gt;(<a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">id</a>, val);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00099">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>, and <a class="el" href="_heuristic_tree_8h_source.xhtml#l00161">HeuristicTree::id()</a>.</p>

</div>
</div>
<a id="ae1ee541bb22588b6a71650c807efca90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1ee541bb22588b6a71650c807efca90">&#9670;&nbsp;</a></span>check()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool check </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if tree is valid. </p>
<dl class="section return"><dt>Returns</dt><dd>bool </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00220">220</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span>(_tree.empty())</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(<span class="stringliteral">&quot;Empty tree encountered&quot;</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">if</span>(_tree.find(_root) == _tree.end())</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Missing root. Root must have a Node ID of %zu&quot;</span>, _root);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> check_if_structurally_correct();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00087">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>, and <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00099">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>.</p>

</div>
</div>
<a id="a63d163d35294f57ea6bea903892616df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63d163d35294f57ea6bea903892616df">&#9670;&nbsp;</a></span>id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#afdbbde2bc0640d1aea22a1cbbc2ac59c">TreeID</a> id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get tree ID. </p>
<dl class="section return"><dt>Returns</dt><dd>TreeID </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00161">161</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> _id;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00152">HeuristicTree::add_branch()</a>, and <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00136">HeuristicTree::add_leaf()</a>.</p>

</div>
</div>
<a id="a70df641c5212f2d7cd26b31595daa5b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70df641c5212f2d7cd26b31595daa5b2">&#9670;&nbsp;</a></span>index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a4c77363b9aae279f1e6a9fdabf1f927f">Index</a> index </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get tree index. </p>
<dl class="section return"><dt>Returns</dt><dd>Index </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8h_source.xhtml#l00169">169</a> of file <a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> std::make_tuple(_heuristic_type, _ip_target, _data_type);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a740760ee5d91c2d4ab7815c7bc3cd185"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a740760ee5d91c2d4ab7815c7bc3cd185">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent copy assignment. </p>

</div>
</div>
<a id="ac9eaaa4ab89bdac0f1a711147ca0c441"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9eaaa4ab89bdac0f1a711147ca0c441">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment. </p>

</div>
</div>
<a id="a53d45213a730d052997de2f15d6324ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53d45213a730d052997de2f15d6324ab">&#9670;&nbsp;</a></span>query()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; bool, T &gt; query </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="structarm__compute_1_1mlgo_1_1_query.xhtml" title="Query interface.">Query</a> a leaf value given a gemm shape. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Leaf value type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shape</td><td>A <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a> for the query </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::pair&lt;bool, T&gt; Outcome contains bool, signalling if the query succeeded or not </dd></dl>

<p class="definition">Definition at line <a class="el" href="_heuristic_tree_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Root ID = 0;</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">auto</span>   cur_node = _tree.at(_root).get();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">size_t</span> depth    = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">while</span>(cur_node-&gt;type() != <a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5">NodeType::Leaf</a>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span>(depth &gt; _max_query_depth)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Exceeding max query depth: %zu. Is the tree too deep?&quot;</span>, _max_query_depth);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> std::make_pair(<span class="keyword">false</span>, T{});</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(cur_node-&gt;type() != <a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8">NodeType::Branch</a>, <span class="stringliteral">&quot;Unexpected NodeType&quot;</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">auto</span> br_node = utils::cast::polymorphic_downcast&lt;BranchNode *&gt;(cur_node);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span>(evaluate(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, br_node-&gt;condition))</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            cur_node = _tree.at(br_node-&gt;true_node).get();</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            cur_node = _tree.at(br_node-&gt;false_node).get();</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        ++depth;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(cur_node-&gt;type() != <a class="code" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5">NodeType::Leaf</a>, <span class="stringliteral">&quot;Unexpected NodeType&quot;</span>);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">auto</span> l_node = utils::cast::polymorphic_downcast&lt;LeafNode&lt;T&gt; *&gt;(cur_node);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> std::make_pair(<span class="keyword">true</span>, l_node-&gt;value);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00457">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="arm__compute_2core_2_log_8h_source.xhtml#l00099">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>, <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8">HeuristicTree::Branch</a>, <a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5">HeuristicTree::Leaf</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a7c4d11e37e7830c1c1488b8983c57d0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c4d11e37e7830c1c1488b8983c57d0f">&#9670;&nbsp;</a></span>add_leaf() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template bool add_leaf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_native.xhtml">GEMMConfigNative</a>&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="ae54f5878b3fc9052ac1cd02cbd5d466a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae54f5878b3fc9052ac1cd02cbd5d466a">&#9670;&nbsp;</a></span>add_leaf() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template bool add_leaf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped.xhtml">GEMMConfigReshaped</a>&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="a3c5f17b85c925a084d8ba654957dd857"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c5f17b85c925a084d8ba654957dd857">&#9670;&nbsp;</a></span>add_leaf() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template bool add_leaf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped_only_r_h_s.xhtml">GEMMConfigReshapedOnlyRHS</a>&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="a6ee2ed2904d8aa7b89922191183adce3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ee2ed2904d8aa7b89922191183adce3">&#9670;&nbsp;</a></span>add_leaf() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template bool add_leaf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a16e3fff3e83ba8bbf7eef6887d9b153d">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">GEMMType</a>&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="a439541c990c0ce827b8ab09a403a0683"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a439541c990c0ce827b8ab09a403a0683">&#9670;&nbsp;</a></span>query() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template std::pair&lt; bool, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">GEMMType</a> &gt; query&lt; <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">GEMMType</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="acae8b472b417be1d77ce4913cd2acef4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acae8b472b417be1d77ce4913cd2acef4">&#9670;&nbsp;</a></span>query() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_native.xhtml">GEMMConfigNative</a> &gt; query&lt; <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_native.xhtml">GEMMConfigNative</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="a3aa659d0336a0abdae3c097febf52cc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aa659d0336a0abdae3c097febf52cc2">&#9670;&nbsp;</a></span>query() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped_only_r_h_s.xhtml">GEMMConfigReshapedOnlyRHS</a> &gt; query&lt; <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped_only_r_h_s.xhtml">GEMMConfigReshapedOnlyRHS</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<a id="aebbb99b941e7196e0c8c3451d48fccb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebbb99b941e7196e0c8c3451d48fccb1">&#9670;&nbsp;</a></span>query() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">template std::pair&lt; bool, <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped.xhtml">GEMMConfigReshaped</a> &gt; query&lt; <a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_config_reshaped.xhtml">GEMMConfigReshaped</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1mlgo_1_1_g_e_m_m_shape.xhtml">GEMMShape</a>&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Explicit template instantiation. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/runtime/CL/mlgo/<a class="el" href="_heuristic_tree_8h_source.xhtml">HeuristicTree.h</a></li>
<li>src/runtime/CL/mlgo/<a class="el" href="_heuristic_tree_8cpp_source.xhtml">HeuristicTree.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1mlgo_1_1_heuristic_tree_xhtml_acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8"><div class="ttname"><a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16adacdb83ade6c4e8878717e206175dfd8">arm_compute::mlgo::HeuristicTree::NodeType::Branch</a></div><div class="ttdeci">@ Branch</div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_af641430e72aa4c9f28d83131bb8e0fb9"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE(fmt,...)</div><div class="ttdoc">Log information level formatted message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00099">Log.h:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1mlgo_1_1_heuristic_tree_xhtml_a63d163d35294f57ea6bea903892616df"><div class="ttname"><a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a63d163d35294f57ea6bea903892616df">arm_compute::mlgo::HeuristicTree::id</a></div><div class="ttdeci">TreeID id() const</div><div class="ttdoc">Get tree ID.</div><div class="ttdef"><b>Definition:</b> <a href="_heuristic_tree_8h_source.xhtml#l00161">HeuristicTree.h:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00457">Error.h:457</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00223">Cast.cpp:223</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_a14f4c3a00d20ad742642767c9449993e"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_CORE(msg)</div><div class="ttdoc">Log information level message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00087">Log.h:87</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1mlgo_1_1_heuristic_tree_xhtml_a9e7bd1393b35e766715ab934dfee7e40"><div class="ttname"><a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#a9e7bd1393b35e766715ab934dfee7e40">arm_compute::mlgo::HeuristicTree::HeuristicTree</a></div><div class="ttdeci">HeuristicTree()</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_heuristic_tree_8cpp_source.xhtml#l00095">HeuristicTree.cpp:95</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_xhtml_abf73f846abd6dfb414f6b51f8286ba09a57ca8feb86455287489c64d4d2f92832"><div class="ttname"><a href="namespacearm__compute_1_1mlgo.xhtml#abf73f846abd6dfb414f6b51f8286ba09a57ca8feb86455287489c64d4d2f92832">arm_compute::mlgo::HeuristicType::GEMM_Type</a></div><div class="ttdeci">@ GEMM_Type</div><div class="ttdoc">About the type of gemm.</div></div>
<div class="ttc" id="aclassarm__compute_1_1mlgo_1_1_heuristic_tree_xhtml_acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5"><div class="ttname"><a href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml#acac9cbaeea226ed297804c012dc12b16ac3b5e1f7de11d645fb1da6c5415b1fa5">arm_compute::mlgo::HeuristicTree::NodeType::Leaf</a></div><div class="ttdeci">@ Leaf</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1mlgo.xhtml">mlgo</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1mlgo_1_1_heuristic_tree.xhtml">HeuristicTree</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:25 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
