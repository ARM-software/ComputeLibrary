<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/common/experimental/gemm_fused_post_ops/act_eltwise_op_act/gemm_mm_native.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gemm__mm__native_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_mm_native.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__mm__native_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fp__post__ops__act__eltwise__op__act_8h.xhtml">common/experimental/gemm_fused_post_ops/act_eltwise_op_act/fp_post_ops_act_eltwise_op_act.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fp__elementwise__op__helpers_8h.xhtml">common/experimental/gemm_fused_post_ops/fp_elementwise_op_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fp__mixed__precision__helpers_8h.xhtml">common/experimental/gemm_fused_post_ops/fp_mixed_precision_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="gemm__helpers_8h.xhtml">gemm_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="repeat_8h.xhtml">repeat.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/** (EXPERIMENTAL_POST_OPS) gemm_mm_native kernel */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#if defined(M0) &amp;&amp; defined(N0) &amp;&amp; defined(K0) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PARTIAL_STORE_M0) &amp;&amp; defined(PARTIAL_STORE_N0)</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#if defined(P2_ELTWISE_OP) &amp;&amp; defined(P2_ELTWISE_ARG1_HEIGHT) &amp;&amp; defined(P2_ELTWISE_ARG1_WIDTH)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#define VFMA(a, b, c)     \</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">    ({                    \</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">        c = fma(a, b, c); \</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#if M0 == 1</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#elif M0 == 2 // M0 == 2</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#elif M0 == 3 // M0 == 3</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#elif M0 == 4 // M0 == 4</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##3).s##i), b, (c##3)); \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#elif M0 == 5 // M0 == 5</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##3).s##i), b, (c##3)); \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##4).s##i), b, (c##4)); \</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#elif M0 == 6 // M0 == 6</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##3).s##i), b, (c##3)); \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##4).s##i), b, (c##4)); \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##5).s##i), b, (c##5)); \</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#elif M0 == 7 // M0 == 7</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##3).s##i), b, (c##3)); \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##4).s##i), b, (c##4)); \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##5).s##i), b, (c##5)); \</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##6).s##i), b, (c##6)); \</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#elif M0 == 8 // M0 == 8</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#define RHS_VFMA_M0xN0(i, a, b, c)                                    \</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">    ({                                                                \</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##0).s##i), b, (c##0)); \</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##1).s##i), b, (c##1)); \</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##2).s##i), b, (c##2)); \</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##3).s##i), b, (c##3)); \</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##4).s##i), b, (c##4)); \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##5).s##i), b, (c##5)); \</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##6).s##i), b, (c##6)); \</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">        VFMA((VEC_DATA_TYPE(DATA_TYPE, N0))((a##7).s##i), b, (c##7)); \</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">#else // M0 not supported</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#error &quot;M0 not supported&quot;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#endif // M0 not supported</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#if defined(GEMM_MM_NATIVE_POST_ACT_ELTWISE_OP_ACT)</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/** This OpenCL kernel computes the matrix multiplication between 2 matrices plus 3 post ops:</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * Post op 1: activation (optional)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * Post op 2: elementwise op</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * Post op 3: activation (optional)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @note (Optional) -DP1_ACTIVATION_TYPE, -DP1_ACTIVATION_A_VAL, -DP1_ACTIVATION_B_VAL: The activation type, alpha and beta values of the activation post op at slot 3</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> * @note (Required) -DP2_ELTWISE_OP: The (binary) elementwise post op to perform</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * @note (Required) -DP2_ELTWISE_ARG1_HEIGHT: The height (Y dimension) of the eltwise operand matrix of the eltwise post op at slot 2</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * @note (Required) -DP2_ELTWISE_ARG1_WIDTH: The width (X dimension) of the eltwise operand matrix of the eltwise post op at slot 2</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * @note (Optional) -DP3_ACTIVATION_TYPE, -DP3_ACTIVATION_A_VAL, -DP3_ACTIVATION_B_VAL: The activation type, alpha and beta values of the activation post op at slot 3</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> * All parameters are similarly defined in kernel gemm_mm_native, with these additions:</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @param[in] eltwise_operand_ptr      Pointer to the eltwise operand matrix. Supported data type: F16/F32</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @param[in] eltwise_operand_stride_x Stride of the eltwise operand matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in] eltwise_operand_step_x   eltwise_operand_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in] eltwise_operand_stride_y Stride of the eltwise operand matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * @param[in] eltwise_operand_step_y   eltwise_operand_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @param[in] eltwise_operand_stride_z Stride of the eltwise operand tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;__kernel <span class="keywordtype">void</span> gemm_mm_native_post_act_eltwise_op_act(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(lhs),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(rhs),</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;#<span class="keywordflow">if</span> defined(BETA)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;#endif <span class="comment">// defined(BETA)</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                     <span class="comment">// Post Op arguments</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(eltwise_operand),</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                     uint lhs_stride_z,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                     uint rhs_stride_z,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;#<span class="keywordflow">if</span> defined(BETA)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                     uint bias_stride_z,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;#endif <span class="comment">//defined(BETA)</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                     uint      dst_stride_z,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                                     uint      eltwise_operand_stride_z,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>,</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;#<span class="keywordflow">if</span> defined(REINTERPRET_INPUT_AS_3D)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                     ,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                     uint lhs_cross_plane_pad</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;#endif <span class="comment">// REINTERPRET_INPUT_AS_3D</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;#<span class="keywordflow">if</span> defined(REINTERPRET_OUTPUT_AS_3D)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                                     ,</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                                     uint dst_cross_plane_pad</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;#endif <span class="comment">// REINTERPRET_OUTPUT_AS_3D</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                                    )</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#define RHS_BLOCK_SIZE ((K0) * (N0))</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// RHS offset and step X</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#define RHS_OFFSET_X (RHS_BLOCK_SIZE)</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    uint z = get_global_id(2);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">#if defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>((x * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>) || (y * M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>))</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#endif // defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Compute LHS matrix address</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    uint lhs_offset = lhs_offset_first_element_in_bytes + <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>) * (uint)lhs_stride_y;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Compute RHS matrix address</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    uint rhs_offset = rhs_offset_first_element_in_bytes + x * N0 * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#if defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Do not slide matrix B if the matrix B has 3 dimensions and matrix A more than 3</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    rhs_offset += (z % MATRIX_B_DEPTH) * rhs_stride_z;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    rhs_offset += z * rhs_stride_z;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, uint, zlhs, 0);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(16, uint, zero, 0);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// The plane (zlhs) is calculated dividing M (y * M0) by HEIGHT_GEMM3D</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a>(M0, uint, zlhs, <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>), HEIGHT_GEMM3D, DEPTH_GEMM3D, lhs_cross_plane_pad, lhs_stride_y);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Add offset for batched GEMM. The batches will be in the fourth dimension and for this reason we</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// multiply lhs_stride_z by DEPTH_GEMM3D</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    lhs_offset += z * lhs_stride_z * DEPTH_GEMM3D;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#else // defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// Add offset for batched GEMM</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    lhs_offset += z * lhs_stride_z;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Initialize the accumulators</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, N0), c, 0); <span class="comment">//VEC_DATA_TYPE(DATA_TYPE, N0)    c0=0,c1=0,c2=0,... c(M0-1)=0;</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#if K0 &gt; 1</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= (<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> - K0); i += K0)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Supported cases (M0, K0):</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="comment">// 1,2 - 1,3 - 1,4 - 1,8 - 1,16</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment">// 2,2 - 2,3 - 2,4 - 2,8 - 2,16</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="comment">// 3,2 - 3,3 - 3,4 - 3,8 - 3,16</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="comment">// 4,2 - 4,3 - 4,4 - 4,8 - 4,16</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="comment">// 5,2 - 5,3 - 5,4 - 5,8 - 5,16</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="comment">// 6,2 - 6,3 - 6,4 - 6,8 - 6,16</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="comment">// 7,2 - 7,3 - 7,4 - 7,8 - 7,16</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="comment">// 8,2 - 8,3 - 8,4 - 8,8 - 8,16</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(M0, K0, DATA_TYPE, a, lhs_ptr, lhs_offset, lhs_stride_y, zlhs);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Load values from RHS matrix</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(K0, N0, DATA_TYPE, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, rhs_ptr, rhs_offset, rhs_stride_y, zero);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        RHS_VFMA_M0xN0(0, a, b0, c);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        RHS_VFMA_M0xN0(1, a, b1, c);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#if K0 &gt; 2</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        RHS_VFMA_M0xN0(2, a, b2, c);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">#endif // K0 &gt; 2</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#if K0 &gt; 3</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        RHS_VFMA_M0xN0(3, a, b3, c);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">#endif // K0 &gt; 3</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#if K0 &gt; 4</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        RHS_VFMA_M0xN0(4, a, b4, c);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        RHS_VFMA_M0xN0(5, a, b5, c);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        RHS_VFMA_M0xN0(6, a, b6, c);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        RHS_VFMA_M0xN0(7, a, b7, c);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#endif // K0 &gt; 4</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">#if K0 &gt; 8</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        RHS_VFMA_M0xN0(8, a, b8, c);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        RHS_VFMA_M0xN0(9, a, b9, c);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        RHS_VFMA_M0xN0(A, a, bA, c);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        RHS_VFMA_M0xN0(B, a, bB, c);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        RHS_VFMA_M0xN0(C, a, bC, c);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        RHS_VFMA_M0xN0(D, a, bD, c);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        RHS_VFMA_M0xN0(E, a, bE, c);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        RHS_VFMA_M0xN0(F, a, bF, c);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#endif // K0 &gt; 8</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        lhs_offset += K0 * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        rhs_offset += K0 * rhs_stride_y;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#endif // K0 &gt; 1</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// Left-over accumulations</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">for</span>(; i &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>; ++i)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        a0 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 0 * lhs_stride_y + zlhs0));</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#if M0 &gt; 1</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        a1 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 1 * lhs_stride_y + zlhs1));</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#endif // M0 &gt; 1</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">#if M0 &gt; 2</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        a2 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 2 * lhs_stride_y + zlhs2));</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="preprocessor">#endif // M0 &gt; 2</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#if M0 &gt; 3</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        a3 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 3 * lhs_stride_y + zlhs3));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">#endif // M0 &gt; 3</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">#if M0 &gt; 4</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        a4 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 4 * lhs_stride_y + zlhs4));</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#endif // M0 &gt; 4</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">#if M0 &gt; 5</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        a5 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 5 * lhs_stride_y + zlhs5));</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">#endif // M0 &gt; 5</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#if M0 &gt; 6</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        a6 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 6 * lhs_stride_y + zlhs6));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">#endif // M0 &gt; 6</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">#if M0 &gt; 7</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        a7 = *((__global DATA_TYPE *)(lhs_ptr + lhs_offset + 7 * lhs_stride_y + zlhs7));</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="preprocessor">#endif // M0 &gt; 7</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, N0)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(N0)(0, (__global DATA_TYPE *)(rhs_ptr + rhs_offset + 0 * rhs_stride_y));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        RHS_VFMA_M0xN0(0, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        lhs_offset += <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        rhs_offset += rhs_stride_y;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + (x * (uint)N0 * <span class="keyword">sizeof</span>(DATA_TYPE)) + (<a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>) * dst_stride_y);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, uint, zout, 0);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">// The plane (zout) is calculated dividing M (y * M0) by HEIGHT_GEMM3D</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a>(M0, uint, zout, <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>), HEIGHT_GEMM3D, DEPTH_GEMM3D, dst_cross_plane_pad, dst_stride_y);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// Add offset for batched GEMM. The batches will be in the fourth dimension and for this reason we</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// multiply dst_stride_z by DEPTH_GEMM3D</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    dst_addr += z * dst_stride_z * DEPTH_GEMM3D;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">#else // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// Add offset for batched GEMM</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    dst_addr += z * dst_stride_z;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Multiply by the weight of matrix-matrix product and store the result</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#if defined(ALPHA)</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a4e4f47c0a33bb8a9ab20b355d7fa84ca">SCALE_BLOCK</a>(M0, DATA_TYPE, c, ALPHA);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">#endif // defined(ALPHA)</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// Add beta*bias</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor">#if defined(BETA)</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#if defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    __global uchar *bias_addr = bias_ptr + bias_offset_first_element_in_bytes + (get_global_id(0) * (uint)N0 * <span class="keyword">sizeof</span>(DATA_TYPE));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(1, N0, DATA_TYPE, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, bias_addr, 0, bias_stride_y, zero);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">#ifndef UNIT_BETA</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a4e4f47c0a33bb8a9ab20b355d7fa84ca">SCALE_BLOCK</a>(1, DATA_TYPE, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, BETA);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">#endif // UNIT_BIAS</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="comment">// c = c + bias[broadcasted]</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a055f3dc1bfec3462a3c48de0203a2c80">ADD_BLOCK_BROADCAST</a>(M0, c, bias0);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor">#else // defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    __global uchar *bias_addr = bias_ptr + bias_offset_first_element_in_bytes + (x * (uint)N0 * <span class="keyword">sizeof</span>(DATA_TYPE)) + (<a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>) * bias_stride_y) + z * bias_stride_z;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(M0, N0, DATA_TYPE, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, bias_addr, 0, bias_stride_y, zero);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#ifndef UNIT_BETA</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a4e4f47c0a33bb8a9ab20b355d7fa84ca">SCALE_BLOCK</a>(M0, DATA_TYPE, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, BETA);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor">#endif // UNIT_BIAS</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">// c = c + bias</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#a47f4d3ee6a1f83a0c3d1744f42da118f">ADD_BLOCK</a>(M0, c, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="preprocessor">#endif // defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">#endif // defined(BETA)</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_y = y == 0;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_x = ((x + 1) * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">// c = act(c)</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="fp__post__ops__act__eltwise__op__act_8h.xhtml#abdd7b3e5ebc76e20970d4c88ff351afc">POST_OP1_ACTIVATION_OPTIONAL</a>(M0, DATA_TYPE, DATA_TYPE_ACCUMULATOR, N0, c);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// c = c + eltwise_operand (mix-precision, broadcast, boundary aware)</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    POST_OP2_ELTWISE_OP(P2_ELTWISE_OP, M0, N0, c, eltwise_operand, <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>), DATA_TYPE, DATA_TYPE_ACCUMULATOR, zero, 1, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, <span class="keyword">false</span>, cond_x);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// c = act(c)</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="fp__post__ops__act__eltwise__op__act_8h.xhtml#a7d18d99ed311abeaed6c54be9a892d7a">POST_OP3_ACTIVATION_OPTIONAL</a>(M0, DATA_TYPE, DATA_TYPE_ACCUMULATOR, N0, c);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// Store output block</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    STORE_BLOCK_BOUNDARY_AWARE(M0, N0, DATA_TYPE, c, dst_addr, dst_stride_y, zout, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, cond_y, cond_x);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#endif // defined(GEMM_MM_NATIVE_POST_ACT_ELTWISE_OP_ACT)</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">#endif // defined(P2_ELTWISE_OP) &amp;&amp; defined(P2_ELTWISE_ARG1_HEIGHT) &amp;&amp; defined(P2_ELTWISE_ARG1_WIDTH)</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#endif // defined(M0) &amp;&amp; defined(N0) &amp;&amp; defined(K0) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PARTIAL_STORE_M0) &amp;&amp; defined(PARTIAL_STORE_N0)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agemm__helpers_8h_xhtml"><div class="ttname"><a href="gemm__helpers_8h.xhtml">gemm_helpers.h</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00096">CpuGemmAssemblyDispatch.cpp:96</a></div></div>
<div class="ttc" id="afp__post__ops__act__eltwise__op__act_8h_xhtml_abdd7b3e5ebc76e20970d4c88ff351afc"><div class="ttname"><a href="fp__post__ops__act__eltwise__op__act_8h.xhtml#abdd7b3e5ebc76e20970d4c88ff351afc">POST_OP1_ACTIVATION_OPTIONAL</a></div><div class="ttdeci">#define POST_OP1_ACTIVATION_OPTIONAL(N, DATA_TYPE, DATA_TYPE_ACCUMULATOR, VEC_SIZE, BASENAME)</div><div class="ttdef"><b>Definition:</b> <a href="fp__post__ops__act__eltwise__op__act_8h_source.xhtml#l00042">fp_post_ops_act_eltwise_op_act.h:42</a></div></div>
<div class="ttc" id="afp__elementwise__op__helpers_8h_xhtml"><div class="ttname"><a href="fp__elementwise__op__helpers_8h.xhtml">fp_elementwise_op_helpers.h</a></div></div>
<div class="ttc" id="afp__post__ops__act__eltwise__op__act_8h_xhtml"><div class="ttname"><a href="fp__post__ops__act__eltwise__op__act_8h.xhtml">fp_post_ops_act_eltwise_op_act.h</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml_a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9"><div class="ttname"><a href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a></div><div class="ttdeci">#define REPEAT_VAR_INIT_TO_CONST(N, TYPE, VAR, VAL)</div><div class="ttdef"><b>Definition:</b> <a href="repeat_8h_source.xhtml#l00134">repeat.h:134</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml"><div class="ttname"><a href="repeat_8h.xhtml">repeat.h</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_ade58486d6b2d13d7941106a9d2ec86d3"><div class="ttname"><a href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a></div><div class="ttdeci">#define CALCULATE_Z_OFFSET(M0, DATA_TYPE, Z, Y, HEIGHT_GEMM3D, DEPTH_GEMM3D, CROSS_PLANE_PAD, STRIDE_Y)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01191">gemm_helpers.h:1191</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00756">helpers.h:756</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_a4e4f47c0a33bb8a9ab20b355d7fa84ca"><div class="ttname"><a href="gemm__helpers_8h.xhtml#a4e4f47c0a33bb8a9ab20b355d7fa84ca">SCALE_BLOCK</a></div><div class="ttdeci">#define SCALE_BLOCK(N, DATA_TYPE, BASENAME, SCALE)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01278">gemm_helpers.h:1278</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_a47f4d3ee6a1f83a0c3d1744f42da118f"><div class="ttname"><a href="gemm__helpers_8h.xhtml#a47f4d3ee6a1f83a0c3d1744f42da118f">ADD_BLOCK</a></div><div class="ttdeci">#define ADD_BLOCK(N, BASENAME, BIAS)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01496">gemm_helpers.h:1496</a></div></div>
<div class="ttc" id="atranspose_8cl_xhtml_a202537333048b910de7fc7ad58567200"><div class="ttname"><a href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a></div><div class="ttdeci">#define PARTIAL_STORE_M0</div><div class="ttdef"><b>Definition:</b> <a href="transpose_8cl_source.xhtml#l00024">transpose.cl:24</a></div></div>
<div class="ttc" id="aload__store__utility_8h_xhtml_aa67f21cebb5ef7733af9fe64a140038f"><div class="ttname"><a href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a></div><div class="ttdeci">#define COMPUTE_M0_START_ROW(y, M0, PARTIAL_STORE_M0)</div><div class="ttdef"><b>Definition:</b> <a href="load__store__utility_8h_source.xhtml#l00563">load_store_utility.h:563</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00204">helpers.h:204</a></div></div>
<div class="ttc" id="afp__mixed__precision__helpers_8h_xhtml"><div class="ttname"><a href="fp__mixed__precision__helpers_8h.xhtml">fp_mixed_precision_helpers.h</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_a055f3dc1bfec3462a3c48de0203a2c80"><div class="ttname"><a href="gemm__helpers_8h.xhtml#a055f3dc1bfec3462a3c48de0203a2c80">ADD_BLOCK_BROADCAST</a></div><div class="ttdeci">#define ADD_BLOCK_BROADCAST(N, BASENAME, BIAS)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01581">gemm_helpers.h:1581</a></div></div>
<div class="ttc" id="atranspose_8cl_xhtml_a384384e4aff4a5ab95d1e0f9e3808924"><div class="ttname"><a href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a></div><div class="ttdeci">#define PARTIAL_STORE_N0</div><div class="ttdef"><b>Definition:</b> <a href="transpose_8cl_source.xhtml#l00025">transpose.cl:25</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00097">CpuGemmAssemblyDispatch.cpp:97</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00095">CpuGemmAssemblyDispatch.cpp:95</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_a9fe7ded27e552f48fa285d34fb00427d"><div class="ttname"><a href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a></div><div class="ttdeci">#define LOAD_BLOCK(M0, N0, DATA_TYPE, BASENAME, PTR, OFFSET, STRIDE_Y, Z)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l00399">gemm_helpers.h:399</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00833">helpers.h:833</a></div></div>
<div class="ttc" id="afp__post__ops__act__eltwise__op__act_8h_xhtml_a7d18d99ed311abeaed6c54be9a892d7a"><div class="ttname"><a href="fp__post__ops__act__eltwise__op__act_8h.xhtml#a7d18d99ed311abeaed6c54be9a892d7a">POST_OP3_ACTIVATION_OPTIONAL</a></div><div class="ttdeci">#define POST_OP3_ACTIVATION_OPTIONAL(N, DATA_TYPE, DATA_TYPE_ACCUMULATOR, VEC_SIZE, BASENAME)</div><div class="ttdef"><b>Definition:</b> <a href="fp__post__ops__act__eltwise__op__act_8h_source.xhtml#l00101">fp_post_ops_act_eltwise_op_act.h:101</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_a50b9933354d81525095b5e7ad336497.xhtml">common</a></li><li class="navelem"><a class="el" href="dir_75521c644d837c7ebf43e673a346bce4.xhtml">experimental</a></li><li class="navelem"><a class="el" href="dir_70024722ad4085cf40d9a19a01bb1977.xhtml">gemm_fused_post_ops</a></li><li class="navelem"><a class="el" href="dir_616aa6795f1f32f54bd81d3300f96b2a.xhtml">act_eltwise_op_act</a></li><li class="navelem"><a class="el" href="gemm__mm__native_8cl.xhtml">gemm_mm_native.cl</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
