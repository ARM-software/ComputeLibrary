<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/mutators/NodeFusionMutator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_node_fusion_mutator_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NodeFusionMutator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_node_fusion_mutator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021, 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_node_fusion_mutator_8h.xhtml">arm_compute/graph/mutators/NodeFusionMutator.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_data_type_utils_8h.xhtml">arm_compute/core/utils/DataTypeUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_builder_8h.xhtml">arm_compute/graph/GraphBuilder.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_registry_8h.xhtml">arm_compute/graph/backends/BackendRegistry.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_convolution_batch_normalization_node_8h.xhtml">arm_compute/graph/nodes/FusedConvolutionBatchNormalizationNode.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_convolution_batch_normalization_with_post_ops_node_8h.xhtml">arm_compute/graph/nodes/FusedConvolutionBatchNormalizationWithPostOpsNode.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fused_convolution_with_post_op_node_8h.xhtml">arm_compute/graph/nodes/FusedConvolutionWithPostOpNode.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_nodes_8h.xhtml">arm_compute/graph/nodes/Nodes.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mutator_utils_8h.xhtml">src/graph/mutators/MutatorUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span>graph</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>detail</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">   49</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *new_node, <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *old_node, <span class="keywordtype">bool</span> add_output_tensor)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">if</span>(new_node == <span class="keyword">nullptr</span> || old_node == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Get driving nodes of last fusable node</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;NodeIdxPair&gt; last_driving_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(*old_node);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Extract last fusable node accessor if any</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(old_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0) == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">auto</span> old_node_accessor = old_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0cec440e0579d01d55a4e194f1c7178c">extract_accessor</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Remove node</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(old_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>());</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Update fused node outputs</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driving_node : last_driving_nodes)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(new_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>(), 0, driving_node.node_id, driving_node.index);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">if</span>(add_output_tensor)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(new_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Update accessor to fused node</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    new_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(0)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a7ca865118188dd8c307ae9e84f8a75f6">set_accessor</a>(std::move(old_node_accessor));</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">   83</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">fuse_convolution_with_batch_normalization</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">auto</span> *bn_node   = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Not fusing if number of groups is greater than 1</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;num_groups() &gt; 1)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">producer_id</a>()</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#ad00e584f78c622e5ee9ec9613f6d6633">consumer_id</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Extract conv inputs</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>        = bn_node-&gt;fused_activation();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// Extract bn inputs</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id = bn_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id  = bn_node-&gt;input_edge(2)-&gt;producer_id();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = bn_node-&gt;epsilon();</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Create the fused node</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">FusedConvolutionBatchNormalizationNode</a>&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">input_edge</a>(2)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">producer_id</a>();</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_bias_id, 0, fused_id, 2);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_input_id, 0, fused_id, 0);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_weights_id, 0, fused_id, 1);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_mean_id, 0, fused_id, 3);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_var_id, 0, fused_id, 4);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(3) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id = bn_node-&gt;input_edge(3)-&gt;producer_id();</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_beta_id, 0, fused_id, 5);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span>(bn_node-&gt;input_edge(4) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_gamma_id, 0, fused_id, 6);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">auto</span> fused_node   = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(fused_id);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">auto</span> bn_node_name = bn_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, bn_node, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        fused_node-&gt;set_common_node_parameters(<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>{ conv_node-&gt;<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Remove convolution node</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(conv_node-&gt;id());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">  163</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">fuse_depthwise_convolution_with_batch_normalization</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">auto</span> *depth_conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;DepthwiseConvolutionLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">auto</span> *bn_node         = arm_compute::utils::cast::polymorphic_downcast&lt;BatchNormalizationLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>());</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing depthwise convolution node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">producer_id</a>()</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with BatchNormalization Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#ad00e584f78c622e5ee9ec9613f6d6633">consumer_id</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(depth_conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = depth_conv_node-&gt;assigned_target();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Extract conv inputs</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_input_id = depth_conv_node-&gt;input_edge(0)-&gt;producer_id();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv_weights_id     = depth_conv_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>           = depth_conv_node-&gt;convolution_info();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_conv_method   = depth_conv_node-&gt;depthwise_convolution_method();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> depth_multiplier    = depth_conv_node-&gt;depth_multiplier();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>            = bn_node-&gt;fused_activation();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Extract bn inputs</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_mean_id  = bn_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_var_id   = bn_node-&gt;input_edge(2)-&gt;producer_id();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id  = bn_node-&gt;input_edge(3)-&gt;producer_id();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = bn_node-&gt;input_edge(4)-&gt;producer_id();</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>     = bn_node-&gt;epsilon();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// Create the fused node</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">FusedDepthwiseConvolutionBatchNormalizationNode</a>&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, depth_conv_method, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span>(depth_conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> conv_bias_id = depth_conv_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">input_edge</a>(2)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">producer_id</a>();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_bias_id, 0, fused_id, 2);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="comment">// Add connections from the conv/batch_norm inputs to the fused node</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(depth_conv_input_id, 0, fused_id, 0);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_weights_id, 0, fused_id, 1);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_mean_id, 0, fused_id, 3);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_var_id, 0, fused_id, 4);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_beta_id, 0, fused_id, 5);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_gamma_id, 0, fused_id, 6);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keyword">auto</span> fused_node   = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(fused_id);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keyword">auto</span> bn_node_name = bn_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>();</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, bn_node, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        fused_node-&gt;set_assigned_target(assigned_target);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        fused_node-&gt;set_common_node_parameters(<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>{ depth_conv_node-&gt;<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>() + <span class="stringliteral">&quot;+&quot;</span> + bn_node_name, assigned_target });</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="comment">// Remove convolution node</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(depth_conv_node-&gt;id());</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of depthwise convolution with batch normalization due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> N&gt;</div>
<div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a36b5b67e26dfdfbedf39e6703ef059bd">  228</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a36b5b67e26dfdfbedf39e6703ef059bd">fuse_node_with_activation</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, <span class="keyword">const</span> std::set&lt;Activation&gt; &amp;supported_fused_activations)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">auto</span> *n_node   = arm_compute::utils::cast::polymorphic_downcast&lt;N *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>());</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span> || n_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Check if activation is supported for fusion</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span>(supported_fused_activations.count(act_node-&gt;activation_info().activation()) == 0)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// EltwiseLayerNode can only be fused when dataype is float</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span>(n_node-&gt;type() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">NodeType::EltwiseLayer</a> &amp;&amp; !<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(n_node-&gt;output(0)-&gt;desc().data_type))</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">producer_id</a>()</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; with Activation Layer node with ID : &quot;</span> &lt;&lt; output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#ad00e584f78c622e5ee9ec9613f6d6633">consumer_id</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">if</span>(n_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="comment">// Set activation info to fused node</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        n_node-&gt;set_fused_activation(act_node-&gt;activation_info());</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, n_node, act_node, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of node with activation due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> N&gt;</div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ace556aabec6b58080b5faec2e0afb885">  267</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ace556aabec6b58080b5faec2e0afb885">fuse_pad_with_convolution</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">auto</span> *pad_node  = arm_compute::utils::cast::polymorphic_downcast&lt;PadLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;N *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>());</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *input_edge = pad_node-&gt;input_edge(0);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>() != <span class="keyword">nullptr</span> &amp;&amp; pad_node-&gt;output(0)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a761495426edf3b875f67a8f4c3a199b5">accessor</a>() == <span class="keyword">nullptr</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;       &amp;&amp; pad_node-&gt;pad_value().get&lt;<span class="keywordtype">float</span>&gt;() == 0.0)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  layout       = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a>;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> padding_list = pad_node-&gt;padding();</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_index = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_index  = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> pad_w = width_index &lt; padding_list.size() ? padding_list[width_index] : <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>(0, 0);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> pad_h = height_index &lt; padding_list.size() ? padding_list[height_index] : <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>(0, 0);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#aa3f58c337d128b2d530251c422b05f69">is_padding_in_height_or_width</a>(layout, padding_list))</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="comment">// Add paddings to the convolution node</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a> = conv_node-&gt;convolution_info();</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> new_conv_info(</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride().first,</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride().second,</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left() + pad_w.first,</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right() + pad_w.second,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top() + pad_h.first,</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom() + pad_h.second,</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.round());</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            conv_node-&gt;set_convolution_info(new_conv_info);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="comment">// Update drivers of the convolution node</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            std::vector&lt;NodeIdxPair&gt; pad_driver_nodes = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">get_driver_nodes</a>(*pad_node);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(pad_node-&gt;id());</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="comment">// Update fused node inputs</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;driver_node : pad_driver_nodes)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(driver_node.node_id, driver_node.index, conv_node-&gt;id(), 0);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">N1</a>, <span class="keyword">typename</span> N2, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">  313</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">fuse_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, std::function&lt;<span class="keywordtype">bool</span>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; <span class="keyword">const</span> &amp;prec, <span class="keyword">const</span> F fuse_fcn, Args &amp;&amp;... optional_arguments)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="comment">// Note that fused nodes may be added to the end of the node list.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Instead of only looping over the original list of nodes, we loop over the current node list which could be growing.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// This is intentional as it probes the newly added fused nodes for further fusing opportunities.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>().size(); ++i)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keyword">auto</span> node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(i);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="comment">// Check if the node is of type N1 and not a branching node</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">if</span>(node &amp;&amp; node-&gt;type() == N1::node_type &amp;&amp; node-&gt;output_edges().size() == 1)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>().begin();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(output_edge_id);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="comment">// Check if following node is a type N2 node</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">if</span>((output_edge != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer() != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer()-&gt;type() == N2::node_type) &amp;&amp; prec(*output_edge-&gt;producer()))</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                fuse_fcn(g, output_edge, optional_arguments...);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">/** Check valid combinations:</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"> * | Main operator | Post operators             |</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"> * |:--------------|:---------------------------|</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> * |conv           | add                        |</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * |conv           | act + add                  |</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> * |conv           | add + act                  |</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> * |conv           | act + add + act            |</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">  346</a></span>&#160;<span class="preprocessor">#define MAX_VALIDE_COMBINATION 4</span></div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">  347</a></span>&#160;<span class="preprocessor">#define MAX_POST_OP_NUM 3</span></div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">  348</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">valide_post_op_type</a>[<a class="code" href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">MAX_VALIDE_COMBINATION</a>][<a class="code" href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">MAX_POST_OP_NUM</a>] = { { <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a> },</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    { <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a>, <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a> },</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    { <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a>, <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a> },</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    { <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a>, <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a>, <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a> }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;};</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">  354</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">check_post_op_type</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> *post_op_type, <span class="keywordtype">int</span> len)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">if</span>(len &gt; <a class="code" href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">MAX_POST_OP_NUM</a> || len &lt;= 0)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">MAX_VALIDE_COMBINATION</a>; ++i)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; len; ++j)</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">if</span>(post_op_type[j] != <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">valide_post_op_type</a>[i][j])</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                found = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            found = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">if</span>(found)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> found;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aad23aa93df69deb6c3afd91c42138930">  380</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aad23aa93df69deb6c3afd91c42138930">fuse_convolution_with_post_op</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *fused_node, std::list&lt;INode *&gt; post_op_node_list, <span class="keywordtype">int</span> prev_op_dst_pos)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> op_idx = 0;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="comment">// Fuse post operators with conv</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op : post_op_node_list)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">switch</span>(post_op-&gt;type())</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a>:</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keyword">auto</span> *eltwise_node = arm_compute::utils::cast::polymorphic_downcast&lt;EltwiseLayerNode *&gt;(post_op);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(eltwise_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                fused_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">post_op_info_list</a>().push_back(std::make_unique&lt;ConvPostOpInfoEltwiseAdd&gt;(prev_op_dst_pos, eltwise_node-&gt;convert_policy()));</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot; with Elementwise Layer node with ID : &quot;</span> &lt;&lt; post_op-&gt;id());</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a>:</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(post_op);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                fused_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">post_op_info_list</a>().push_back(std::make_unique&lt;ConvPostOpInfoActivation&gt;(act_node-&gt;activation_info()));</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot; with Activation Layer node with ID : &quot;</span> &lt;&lt; post_op-&gt;id());</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span>(op_idx == post_op_node_list.size() - 1) <span class="comment">// last fusable node</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">transfer_driving_nodes_and_remove_old_node</a>(g, fused_node, post_op, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="comment">// Remove node</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(post_op-&gt;id());</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        op_idx++;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">  425</a></span>&#160;std::list&lt;INode *&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keywordtype">int</span> &amp;eltwise_operand_id, <span class="keywordtype">int</span> &amp;prev_op_dst_pos, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_node_id, <span class="keyword">const</span> std::set&lt;Activation&gt; &amp;supported_fused_activations)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    std::list&lt;INode *&gt; post_op_node_list    = {};</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>             prev_op_dst_id       = conv_node_id;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a>           post_op_type_list[3] = { <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">NodeType::Dummy</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">NodeType::Dummy</a>, <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">NodeType::Dummy</a> };</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">int</span>                post_op_idx          = 0;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Get list of the connected nodes</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">auto</span> current_node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(conv_node_id);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160; </div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">while</span>(post_op_node_list.size() &lt; 3)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="comment">// This convolution node must have only one output edge, otherwise this function would not have been called</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keyword">auto</span> current_output_edge_id = current_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>().begin();</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">auto</span> current_output_edge    = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(*current_output_edge_id);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keyword">auto</span> post_op_node           = current_output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">consumer</a>();</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordtype">bool</span> fusable_post_op = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">if</span>(post_op_node != <span class="keyword">nullptr</span> &amp;&amp; post_op_node-&gt;output_edges().size() &gt; 0)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">switch</span>(post_op_node-&gt;type())</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">EltwiseLayerNode::node_type</a>:</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keyword">auto</span> *eltwise_node = arm_compute::utils::cast::polymorphic_downcast&lt;EltwiseLayerNode *&gt;(post_op_node);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(eltwise_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    <span class="keywordflow">if</span>(eltwise_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        post_op_node_list.push_back(post_op_node);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        fusable_post_op                  = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        post_op_type_list[post_op_idx++] = eltwise_node-&gt;type();</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        <span class="comment">// Extract elementwise inputs</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_input_id_0 = eltwise_node-&gt;input_edge(0)-&gt;producer_id();</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_input_id_1 = eltwise_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        <span class="keywordflow">if</span>(eltwise_input_id_0 == prev_op_dst_id)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                            eltwise_operand_id = eltwise_input_id_1;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            prev_op_dst_pos    = 0;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_input_id_1 == prev_op_dst_id)</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                        {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                            eltwise_operand_id = eltwise_input_id_0;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                            prev_op_dst_pos    = 1;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with elementwise due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">ActivationLayerNode::node_type</a>:</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keyword">auto</span> *act_node = arm_compute::utils::cast::polymorphic_downcast&lt;ActivationLayerNode *&gt;(post_op_node);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(act_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="comment">// Check if activation is supported for fusion</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    <span class="keywordflow">if</span>(supported_fused_activations.count(act_node-&gt;activation_info().activation()) == 0)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                    <span class="keywordflow">if</span>(act_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                        post_op_node_list.push_back(post_op_node);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        fusable_post_op                  = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                        post_op_type_list[post_op_idx++] = act_node-&gt;type();</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                        prev_op_dst_id                   = act_node-&gt;id();</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                    {</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                    }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="comment">// Check if the node is not a branching node and current node is fusable</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">if</span>(post_op_node-&gt;output_edges().size() == 1 &amp;&amp; fusable_post_op == <span class="keyword">true</span>)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                current_node = post_op_node;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// Check whether it&#39;s valid post op list</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">if</span>(post_op_node_list.size() &gt; 0)</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordtype">bool</span> fuse_with_post_op = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">check_post_op_type</a>(post_op_type_list, post_op_node_list.size());</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordflow">if</span>(!fuse_with_post_op)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            post_op_node_list.clear();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160; </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span> post_op_node_list;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">/** Fuse below operators:</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"> * | Main operator | Post operators             |</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"> * |:--------------|:---------------------------|</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"> * |conv           | add                        |</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment"> * |conv           | act + add                  |</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"> * |conv           | add + act                  |</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"> * |conv           | act + add + act            |</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"> * Notes: currently, only GEMM supports fusion with post operator</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00542"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac7fd3d9360e3103b4d73957882171edf">  542</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac7fd3d9360e3103b4d73957882171edf">fuse_convolution_with_post_ops</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_node_id, <span class="keyword">const</span> std::set&lt;Activation&gt; &amp;supported_fused_activations)</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;ConvolutionLayerNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(conv_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = conv_node-&gt;convolution_method();</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm != <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160; </div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="comment">// If data type is FP32/FP16, data layout is NHWC, and filter size is 1x1, fuse convolution with post op, as Conv1x1 always leads to GEMM.</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *input_edge = conv_node-&gt;input_edge(1);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>  = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a>;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>    = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a6118865e7371b107bd5fb4dd4a9e99a3">data_type</a>;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            <span class="keywordflow">if</span>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>) || (<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>) == <span class="keyword">false</span>) || (tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>() != 1) || (tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>() != 1))</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            {</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        {</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="comment">// Get post op list</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordtype">int</span>                eltwise_operand_id = 0;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordtype">int</span>                prev_op_dst_pos    = 0; <span class="comment">// Previous operator dst&#39;s postion in current operator</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        std::list&lt;INode *&gt; post_op_node_list  = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a>(g, eltwise_operand_id, prev_op_dst_pos, conv_node_id, supported_fused_activations);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160; </div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">if</span>(post_op_node_list.size() == 0)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        {</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="keywordflow">else</span> <span class="comment">// Do convolution fusion with post op if there&#39;re one(elementwise), two or more operators</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        {</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160; </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="comment">// Extract conv inputs</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="comment">// Create the fused node</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">FusedConvolutionWithPostOpNode</a>&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing convolution node with ID : &quot;</span> &lt;&lt; conv_node-&gt;id());</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="comment">// Add connections from the conv inputs to the fused node</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_input_id, 0, fused_id, 0);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_weights_id, 0, fused_id, 1);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            {</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_bias_id, 0, fused_id, 2);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="comment">// Adding the Element wise operand in case the post op is element wise operation</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <span class="keyword">auto</span> it = std::find_if(post_op_node_list.begin(),</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                   post_op_node_list.end(),</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                   [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> * nd)</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            {</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                return (nd-&gt;type() == graph::NodeType::EltwiseLayer);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            });</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160; </div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <span class="keywordflow">if</span>(it != post_op_node_list.end())</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(eltwise_operand_id, 0, fused_id, 3);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            }</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(conv_node-&gt;id());</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="comment">// Update fused node outputs</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            <span class="keyword">auto</span> fused_node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(fused_id);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            fused_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">set_assigned_target</a>(assigned_target);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160; </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <span class="comment">// Fuse convolution with post op</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aad23aa93df69deb6c3afd91c42138930">fuse_convolution_with_post_op</a>(g, fused_node, post_op_node_list, prev_op_dst_pos);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160; </div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            post_op_node_list.clear();</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(std::endl);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    }</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;}</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a0b1901e17bde1eedfd8fb289dffe66d6">  641</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a0b1901e17bde1eedfd8fb289dffe66d6">fuse_convolution_batch_normalization_with_post_ops</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *output_edge, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conv_node_id, <span class="keyword">const</span> std::set&lt;Activation&gt; &amp;supported_fused_activations)</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160; </div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">auto</span> *conv_node = arm_compute::utils::cast::polymorphic_downcast&lt;FusedConvolutionBatchNormalizationNode *&gt;(output_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">producer</a>());</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(conv_node-&gt;output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = conv_node-&gt;convolution_method();</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm != <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>)</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    {</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="comment">// Prevent fusion if fused node has an output accessor</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">if</span>(conv_node-&gt;output(0)-&gt;accessor() == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="comment">// If data type is FP32/FP16, data layout is NHWC, and filter size is 1x1, fuse convolution with post op, as Conv1x1 always leads to GEMM.</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *input_edge = conv_node-&gt;input_edge(1);</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span> &amp;&amp; input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>  = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a>;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>    = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a6118865e7371b107bd5fb4dd4a9e99a3">data_type</a>;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape = input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">tensor</a>()-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="keywordflow">if</span>((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>) || (<a class="code" href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">is_data_type_float</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>) == <span class="keyword">false</span>) || (tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>() != 1) || (tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a>() != 1))</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to non GEMM convolution\n&quot;</span>);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            }</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        }</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160; </div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <span class="comment">// Get post op list</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordtype">int</span>                eltwise_operand_id = 0;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordtype">int</span>                prev_op_dst_pos    = 0; <span class="comment">// Previous operator dst&#39;s postion in current operator</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        std::list&lt;INode *&gt; post_op_node_list  = <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">get_post_op_list</a>(g, eltwise_operand_id, prev_op_dst_pos, conv_node_id, supported_fused_activations);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160; </div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordflow">if</span>(post_op_node_list.size() == 0)</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        {</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <span class="keywordflow">else</span> <span class="comment">// Do convolution fusion with post op if there&#39;re one(elementwise), two or more operators</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        {</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> assigned_target = conv_node-&gt;assigned_target();</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160; </div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            <span class="comment">// Extract conv inputs</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_input_id   = conv_node-&gt;input_edge(0)-&gt;producer_id();</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_weights_id = conv_node-&gt;input_edge(1)-&gt;producer_id();</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   bn_mean_id      = conv_node-&gt;input_edge(3)-&gt;producer_id();</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   bn_var_id       = conv_node-&gt;input_edge(4)-&gt;producer_id();</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>       = conv_node-&gt;convolution_info();</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   conv_method     = conv_node-&gt;convolution_method();</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>      = conv_node-&gt;num_groups();</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint  = conv_node-&gt;fast_math_hint();</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            <span class="comment">// Create the fused node</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160; </div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>  <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>  = conv_node-&gt;epsilon();</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fused_id = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">add_node</a>&lt;<a class="code" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml">FusedConvolutionBatchNormalizationWithPostOpsNode</a>&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, conv_method, fast_math_hint);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160; </div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Fusing FusedConvolutionBatchNormalization node with ID : &quot;</span> &lt;&lt; conv_node-&gt;id());</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            <span class="comment">// Add connections from the conv inputs to the fused node</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_input_id, 0, fused_id, 0);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_weights_id, 0, fused_id, 1);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160; </div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(2) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            {</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                <span class="keyword">auto</span> conv_bias_id = conv_node-&gt;input_edge(2)-&gt;producer_id();</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(conv_bias_id, 0, fused_id, 2);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            }</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_mean_id, 0, fused_id, 3);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_var_id, 0, fused_id, 4);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160; </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="comment">// Move connections of old FusedConvolutionBatchNormalization to the fused node</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(5) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bn_beta_id = conv_node-&gt;input_edge(5)-&gt;producer_id();</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_beta_id, 0, fused_id, 5);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            }</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160; </div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">if</span>(conv_node-&gt;input_edge(6) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            {</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bn_gamma_id = conv_node-&gt;input_edge(6)-&gt;producer_id();</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(bn_gamma_id, 0, fused_id, 6);</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            }</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160; </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="comment">// Adding the Element wise operand in case the post op is element wise operation</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            <span class="keyword">auto</span> it = std::find_if(post_op_node_list.begin(),</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                   post_op_node_list.end(),</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                   [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> * nd)</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                return (nd-&gt;type() == graph::NodeType::EltwiseLayer);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            });</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <span class="keywordflow">if</span>(it != post_op_node_list.end())</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            {</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(eltwise_operand_id, 0, fused_id, 7);</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            }</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160; </div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="comment">// Update fused node outputs</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keyword">auto</span> fused_node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(fused_id);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            fused_node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">set_assigned_target</a>(assigned_target);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160; </div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="keyword">auto</span> conv_node_name = conv_node-&gt;name();</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160; </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="comment">// collect the post ops names</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            std::string post_ops_name = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;post_op : post_op_node_list)</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                post_ops_name += post_op-&gt;name();</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            }</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            fused_node-&gt;set_common_node_parameters(<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>{ conv_node-&gt;<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>() + <span class="stringliteral">&quot;+&quot;</span> + post_ops_name, assigned_target });</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160; </div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="comment">// Fuse convolution with post op</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#aad23aa93df69deb6c3afd91c42138930">fuse_convolution_with_post_op</a>(g, fused_node, post_op_node_list, prev_op_dst_pos);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160; </div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            post_op_node_list.clear();</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(conv_node-&gt;id());</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(std::endl);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Prevented fusion of convolution node with post ops due to the presence of an output accessor\n&quot;</span>);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    }</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160; </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">N1</a>, <span class="keyword">typename</span> F, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00772"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5e3001563d5668f924ef151fc1606357">  772</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">fuse_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, std::function&lt;<span class="keywordtype">bool</span>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)&gt; <span class="keyword">const</span> &amp;prec, <span class="keyword">const</span> F fuse_fcn, Args &amp;&amp;... optional_arguments)</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;{</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="comment">// Note that fused nodes may be added to the end of the node list.</span></div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="comment">// Instead of only looping over the original list of nodes, we loop over the current node list which could be growing.</span></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="comment">// This is intentional as it probes the newly added fused nodes for further fusing opportunities.</span></div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>().size(); ++i)</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keyword">auto</span> node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(i);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="comment">// Check if the node is of type N1 and not a branching node</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keywordflow">if</span>(node &amp;&amp; node-&gt;type() == N1::node_type &amp;&amp; node-&gt;output_edges().size() == 1)</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        {</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>().begin();</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(output_edge_id);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160; </div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            <span class="comment">// Check if it&#39;s the correct target</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="keywordflow">if</span>((output_edge != <span class="keyword">nullptr</span>) &amp;&amp; (output_edge-&gt;consumer() != <span class="keyword">nullptr</span>) &amp;&amp; prec(*output_edge-&gt;producer()))</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                fuse_fcn(g, output_edge, i, optional_arguments...);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        }</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    }</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;}</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;} <span class="comment">// namespace detail</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">  796</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">NodeFusionMutator::name</a>()</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;{</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;NodeFusionMutator&quot;</span>;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160; </div>
<div class="line"><a name="l00801"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">  801</a></span>&#160;<a class="code" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9">IGraphMutator::MutationType</a> <a class="code" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">NodeFusionMutator::type</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14">IGraphMutator::MutationType::Backend</a>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160; </div>
<div class="line"><a name="l00806"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">  806</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">NodeFusionMutator::mutate</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="comment">// Supported activations when fusing</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keyword">const</span> std::set&lt;Activation&gt; supported_fused_activations = { Activation::ABS, Activation::BOUNDED_RELU, Activation::ELU,</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                                               Activation::HARD_SWISH, Activation::IDENTITY, Activation::LEAKY_RELU,</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                                                               Activation::LINEAR, Activation::LOGISTIC, Activation::LU_BOUNDED_RELU,</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                                               Activation::RELU, Activation::SOFT_RELU, Activation::SQRT,</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                                               Activation::SQUARE, Activation::TANH</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                                             };</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160; </div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="comment">// Preconditions</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keyword">auto</span> empty_prec = [](<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;)</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    };</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keyword">auto</span> cl_target_prec = [](<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    {</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>.assigned_target() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">Target::CL</a>;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    };</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keyword">auto</span> qs8_prec = [&amp;g](<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>)</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    {</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>.output(0) == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160; </div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_edge_id = *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>.output_edges().begin();</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_edge    = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(output_edge_id);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="comment">// To perform fusion the two nodes must have same output quantization information</span></div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> same_qinfo     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>.output(0)-&gt;desc().quant_info == output_edge-&gt;producer()-&gt;output(0)-&gt;desc().quant_info;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> output_qasymm8 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>.output(0)-&gt;desc().data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160; </div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <span class="keywordflow">return</span> (output_qasymm8 &amp;&amp; same_qinfo) || !output_qasymm8;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    };</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160; </div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="comment">// Fusion mutations</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160; </div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    detail::fuse_layer&lt;PadLayerNode, ConvolutionLayerNode&gt;(g, empty_prec, detail::fuse_pad_with_convolution&lt;ConvolutionLayerNode&gt;);</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    detail::fuse_layer&lt;PadLayerNode, DepthwiseConvolutionLayerNode&gt;(g, empty_prec, detail::fuse_pad_with_convolution&lt;DepthwiseConvolutionLayerNode&gt;);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="comment">// The fusion of PostOps to ConvolutionLayer:</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="comment">// It must occur after the fusion of PadLayer into ConvolutionLayer</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="comment">// It must occur before the fusion of normal ActivationLayer into ConvolutionLayer as it takes precedence</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    detail::fuse_layer&lt;ConvolutionLayerNode&gt;(g, cl_target_prec, <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac7fd3d9360e3103b4d73957882171edf">detail::fuse_convolution_with_post_ops</a>, supported_fused_activations);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    detail::fuse_layer&lt;BatchNormalizationLayerNode, ActivationLayerNode&gt;(g, empty_prec, detail::fuse_node_with_activation&lt;BatchNormalizationLayerNode&gt;, supported_fused_activations);</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    detail::fuse_layer&lt;ConvolutionLayerNode, ActivationLayerNode&gt;(g, empty_prec, detail::fuse_node_with_activation&lt;ConvolutionLayerNode&gt;, supported_fused_activations);</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    detail::fuse_layer&lt;DepthwiseConvolutionLayerNode, ActivationLayerNode&gt;(g, qs8_prec, detail::fuse_node_with_activation&lt;DepthwiseConvolutionLayerNode&gt;, supported_fused_activations);</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    detail::fuse_layer&lt;FullyConnectedLayerNode, ActivationLayerNode&gt;(g, empty_prec, detail::fuse_node_with_activation&lt;FullyConnectedLayerNode&gt;, supported_fused_activations);</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    detail::fuse_layer&lt;EltwiseLayerNode, ActivationLayerNode&gt;(g, cl_target_prec, detail::fuse_node_with_activation&lt;EltwiseLayerNode&gt;, supported_fused_activations);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="comment">// The fusion of BatchNormalizationLayer must occur after the fusion of ActivationLayer. Because FusedConvolutionBatchNormalizationNode assumes the BatchNormalization is already fused with activation, if any</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    detail::fuse_layer&lt;ConvolutionLayerNode, BatchNormalizationLayerNode&gt;(g, empty_prec, <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">detail::fuse_convolution_with_batch_normalization</a>);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    detail::fuse_layer&lt;DepthwiseConvolutionLayerNode, BatchNormalizationLayerNode&gt;(g, empty_prec, <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">detail::fuse_depthwise_convolution_with_batch_normalization</a>);</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    detail::fuse_layer&lt;FusedConvolutionBatchNormalizationNode&gt;(g, cl_target_prec, <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#a0b1901e17bde1eedfd8fb289dffe66d6">detail::fuse_convolution_batch_normalization_with_post_ops</a>, supported_fused_activations);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;}</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;} <span class="comment">// namespace graph</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructarm__compute_1_1graph_1_1_node_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml">arm_compute::graph::NodeParams</a></div><div class="ttdoc">Common node parameters.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00274">Types.h:274</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a0ea47db036b1c140af002ee1494dcb6f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">arm_compute::graph::Graph::edge</a></div><div class="ttdeci">const Edge * edge(EdgeID id) const</div><div class="ttdoc">Get edge object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00214">Graph.cpp:214</a></div></div>
<div class="ttc" id="a_node_fusion_mutator_8cpp_xhtml_a84e62cde71a052f7bac9f037b20a77d7"><div class="ttname"><a href="_node_fusion_mutator_8cpp.xhtml#a84e62cde71a052f7bac9f037b20a77d7">MAX_VALIDE_COMBINATION</a></div><div class="ttdeci">#define MAX_VALIDE_COMBINATION</div><div class="ttdoc">Check valid combinations:</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00346">NodeFusionMutator.cpp:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4a86bc43e556b1df283839f053eb02e2bb">arm_compute::CPUModel::N1</a></div><div class="ttdeci">@ N1</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a5821263ab45591eb3b83e3ca3bb1f7ca"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a5821263ab45591eb3b83e3ca3bb1f7ca">arm_compute::graph::detail::valide_post_op_type</a></div><div class="ttdeci">NodeType valide_post_op_type[4][3]</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00348">NodeFusionMutator.cpp:348</a></div></div>
<div class="ttc" id="a_fused_convolution_batch_normalization_with_post_ops_node_8h_xhtml"><div class="ttname"><a href="_fused_convolution_batch_normalization_with_post_ops_node_8h.xhtml">FusedConvolutionBatchNormalizationWithPostOpsNode.h</a></div></div>
<div class="ttc" id="a_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00177">Utils.cpp:177</a></div></div>
<div class="ttc" id="a_data_type_utils_8h_xhtml"><div class="ttname"><a href="_data_type_utils_8h.xhtml">DataTypeUtils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a761495426edf3b875f67a8f4c3a199b5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a761495426edf3b875f67a8f4c3a199b5">arm_compute::graph::Tensor::accessor</a></div><div class="ttdeci">ITensorAccessor * accessor()</div><div class="ttdoc">Backend tensor accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00065">Tensor.cpp:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml_ab61ddeea8b783f64c3881a123bd7e1f2"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">arm_compute::graph::EltwiseLayerNode::node_type</a></div><div class="ttdeci">static constexpr NodeType node_type</div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00084">EltwiseLayerNode.h:84</a></div></div>
<div class="ttc" id="a_fused_convolution_batch_normalization_node_8h_xhtml"><div class="ttname"><a href="_fused_convolution_batch_normalization_node_8h.xhtml">FusedConvolutionBatchNormalizationNode.h</a></div></div>
<div class="ttc" id="a_fused_convolution_with_post_op_node_8h_xhtml"><div class="ttname"><a href="_fused_convolution_with_post_op_node_8h.xhtml">FusedConvolutionWithPostOpNode.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">arm_compute::graph::Target::CL</a></div><div class="ttdeci">@ CL</div><div class="ttdoc">OpenCL capable target device.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_graph_mutator_xhtml_a15c294efeadfdffb6b0735dd93aedfd9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9">arm_compute::graph::IGraphMutator::MutationType</a></div><div class="ttdeci">MutationType</div><div class="ttdoc">Mutation type.</div><div class="ttdef"><b>Definition:</b> <a href="_i_graph_mutator_8h_source.xhtml#l00039">IGraphMutator.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00109">CoreTypes.h:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a424221c5dfc8fe79f88a677d1b3b4494"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">arm_compute::graph::Graph::add_node</a></div><div class="ttdeci">NodeID add_node(Ts &amp;&amp;... args)</div><div class="ttdoc">Adds a node to the graph.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00234">Graph.h:234</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a07811ee0f5c19da2658a647e6d7dc2fa"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a07811ee0f5c19da2658a647e6d7dc2fa">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization</a></div><div class="ttdeci">void fuse_depthwise_convolution_with_batch_normalization(Graph &amp;g, const Edge *output_edge)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00163">NodeFusionMutator.cpp:163</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_ac7fd3d9360e3103b4d73957882171edf"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac7fd3d9360e3103b4d73957882171edf">arm_compute::graph::detail::fuse_convolution_with_post_ops</a></div><div class="ttdeci">void fuse_convolution_with_post_ops(Graph &amp;g, const Edge *output_edge, unsigned int conv_node_id, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdoc">Fuse below operators:</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00542">NodeFusionMutator.cpp:542</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a501484d2b5f0213bbede4f44471c148b"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a501484d2b5f0213bbede4f44471c148b">arm_compute::graph::detail::fuse_convolution_with_batch_normalization</a></div><div class="ttdeci">void fuse_convolution_with_batch_normalization(Graph &amp;g, const Edge *output_edge)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00083">NodeFusionMutator.cpp:83</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a7ca865118188dd8c307ae9e84f8a75f6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a7ca865118188dd8c307ae9e84f8a75f6">arm_compute::graph::Tensor::set_accessor</a></div><div class="ttdeci">void set_accessor(std::unique_ptr&lt; ITensorAccessor &gt; accessor)</div><div class="ttdoc">Sets the backend tensor accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00060">Tensor.cpp:60</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_ac30f73c1ed95e75d4ff1e68b3f0bdbbe"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ac30f73c1ed95e75d4ff1e68b3f0bdbbe">arm_compute::graph::detail::get_post_op_list</a></div><div class="ttdeci">std::list&lt; INode * &gt; get_post_op_list(Graph &amp;g, int &amp;eltwise_operand_id, int &amp;prev_op_dst_pos, unsigned int conv_node_id, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00425">NodeFusionMutator.cpp:425</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_add5d19cbee93d3d134f88d02e1259248"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00159">INode.cpp:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">arm_compute::graph::NodeType::Dummy</a></div><div class="ttdeci">@ Dummy</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a6f095b69d7dacb7ea9faab4c9dcc0126"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a6f095b69d7dacb7ea9faab4c9dcc0126">arm_compute::graph::detail::check_post_op_type</a></div><div class="ttdeci">bool check_post_op_type(NodeType *post_op_type, int len)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00354">NodeFusionMutator.cpp:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_abbf8678d888561b348dd1c34d9e34af9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const</div><div class="ttdoc">Returns output edge set.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00133">INode.cpp:133</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_node_params_xhtml_a9b45b3e13bd9167aab02e17e08916231"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml#a9b45b3e13bd9167aab02e17e08916231">arm_compute::graph::NodeParams::name</a></div><div class="ttdeci">std::string name</div><div class="ttdoc">Node name.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00276">Types.h:276</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_a592a2c76b00960964a3f6f2ef792a7f0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a592a2c76b00960964a3f6f2ef792a7f0">arm_compute::graph::Edge::consumer</a></div><div class="ttdeci">INode * consumer() const</div><div class="ttdoc">Returns consumer node.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00092">Edge.h:92</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml">arm_compute::graph::Edge</a></div><div class="ttdoc">Graph Edge.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00039">Edge.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_abb29a685080e999c2a0cb874d2f7bb5a"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">arm_compute::Dimensions::z</a></div><div class="ttdeci">T z() const</div><div class="ttdoc">Alias to access the size of the third dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00097">Dimensions.h:97</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_node_fusion_mutator_xhtml_a0ee2c922a45715b33e30f83f8c005b68"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">arm_compute::graph::NodeFusionMutator::name</a></div><div class="ttdeci">const char * name() override</div><div class="ttdoc">Returns mutator name.</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00796">NodeFusionMutator.cpp:796</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a7069f1901ff50cd2ac6ba152cb106058"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">arm_compute::graph::INode::set_assigned_target</a></div><div class="ttdeci">void set_assigned_target(Target target)</div><div class="ttdoc">Sets the final execution target.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00072">INode.cpp:72</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ad17fa352dabb4482cb996a9f8f7f3ba3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">arm_compute::graph::get_driver_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driver_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driver nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00197">Utils.cpp:197</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa3f58c337d128b2d530251c422b05f69"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa3f58c337d128b2d530251c422b05f69">arm_compute::graph::is_padding_in_height_or_width</a></div><div class="ttdeci">bool is_padding_in_height_or_width(const DataLayout &amp;layout, const PaddingList &amp;padding_list)</div><div class="ttdoc">Check if padding is in height and/or width dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_mutator_utils_8cpp_source.xhtml#l00030">MutatorUtils.cpp:30</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_node_fusion_mutator_xhtml_af6705a49326de235df4e9b6028bdcdce"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">arm_compute::graph::NodeFusionMutator::mutate</a></div><div class="ttdeci">virtual void mutate(Graph &amp;g) override</div><div class="ttdoc">Walk the graph and perform a specific mutation.</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00806">NodeFusionMutator.cpp:806</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00467">Error.h:467</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a538f789bf074c367457a6f8f32b83d2d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">arm_compute::graph::Graph::add_connection</a></div><div class="ttdeci">EdgeID add_connection(NodeID source, size_t source_idx, NodeID sink, size_t sink_idx)</div><div class="ttdoc">Adds a connection between two nodes.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00069">Graph.cpp:69</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_ace556aabec6b58080b5faec2e0afb885"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ace556aabec6b58080b5faec2e0afb885">arm_compute::graph::detail::fuse_pad_with_convolution</a></div><div class="ttdeci">void fuse_pad_with_convolution(Graph &amp;g, const Edge *output_edge)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00267">NodeFusionMutator.cpp:267</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00104">Types.h:104</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_aff6b38772acc09675f4f64e510e31055"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#aff6b38772acc09675f4f64e510e31055">arm_compute::graph::Edge::tensor</a></div><div class="ttdeci">Tensor * tensor() const</div><div class="ttdoc">Returns the tensor associated with this edge.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00116">Edge.h:116</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_afaed16fbc0fe52a692a812b66b4e10f8"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#afaed16fbc0fe52a692a812b66b4e10f8">arm_compute::graph::INode::post_op_info_list</a></div><div class="ttdeci">const std::list&lt; std::unique_ptr&lt; ConvPostOpInfo &gt; &gt; &amp; post_op_info_list() const</div><div class="ttdoc">Post operator info list.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00204">INode.cpp:204</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">arm_compute::graph::NodeType::EltwiseLayer</a></div><div class="ttdeci">@ EltwiseLayer</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdeci">@ HEIGHT</div><div class="ttdoc">height</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a4b52bb397c7296e8efe864967b44f97e"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">arm_compute::graph::TensorDescriptor::layout</a></div><div class="ttdeci">DataLayout layout</div><div class="ttdoc">Data layout.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor.h:111</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a36b5b67e26dfdfbedf39e6703ef059bd"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a36b5b67e26dfdfbedf39e6703ef059bd">arm_compute::graph::detail::fuse_node_with_activation</a></div><div class="ttdeci">void fuse_node_with_activation(Graph &amp;g, const Edge *output_edge, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00228">NodeFusionMutator.cpp:228</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">arm_compute::graph::FusedConvolutionBatchNormalizationNode</a></div><div class="ttdoc">Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_node_8h_source.xhtml#l00034">FusedConvolutionBatchNormalizationNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">arm_compute::graph::FusedConvolutionWithPostOpNode</a></div><div class="ttdoc">Convolution node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_with_post_op_node_8h_source.xhtml#l00036">FusedConvolutionWithPostOpNode.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00203">Types.h:203</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node's name.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00108">INode.cpp:108</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_node_fusion_mutator_xhtml_ae8dc84fc3eb9c937069826830b13b06d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">arm_compute::graph::NodeFusionMutator::type</a></div><div class="ttdeci">MutationType type() const override</div><div class="ttdoc">Returns mutation type.</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00801">NodeFusionMutator.cpp:801</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_ad00e584f78c622e5ee9ec9613f6d6633"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#ad00e584f78c622e5ee9ec9613f6d6633">arm_compute::graph::Edge::consumer_id</a></div><div class="ttdeci">NodeID consumer_id() const</div><div class="ttdoc">Returns sink node id.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00076">Edge.h:76</a></div></div>
<div class="ttc" id="a_node_fusion_mutator_8cpp_xhtml_a55a63cf1075ff030f88b9df317adf315"><div class="ttname"><a href="_node_fusion_mutator_8cpp.xhtml#a55a63cf1075ff030f88b9df317adf315">MAX_POST_OP_NUM</a></div><div class="ttdeci">#define MAX_POST_OP_NUM</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00347">NodeFusionMutator.cpp:347</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::ConvolutionMethod::GEMM</a></div><div class="ttdeci">@ GEMM</div><div class="ttdoc">GEMM based convolution.</div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_a73b54dbd7dc72560e805067f2e68207c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a73b54dbd7dc72560e805067f2e68207c">arm_compute::graph::Edge::producer_id</a></div><div class="ttdeci">NodeID producer_id() const</div><div class="ttdoc">Returns producer node id.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00068">Edge.h:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_graph_mutator_xhtml_a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14">arm_compute::graph::IGraphMutator::MutationType::Backend</a></div><div class="ttdeci">@ Backend</div><div class="ttdoc">IR specific mutation.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a0b1901e17bde1eedfd8fb289dffe66d6"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a0b1901e17bde1eedfd8fb289dffe66d6">arm_compute::graph::detail::fuse_convolution_batch_normalization_with_post_ops</a></div><div class="ttdeci">void fuse_convolution_batch_normalization_with_post_ops(Graph &amp;g, const Edge *output_edge, unsigned int conv_node_id, const std::set&lt; Activation &gt; &amp;supported_fused_activations)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00641">NodeFusionMutator.cpp:641</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::graph::TensorDescriptor::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Tensor shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor.h:109</a></div></div>
<div class="ttc" id="a_node_fusion_mutator_8h_xhtml"><div class="ttname"><a href="_node_fusion_mutator_8h.xhtml">NodeFusionMutator.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a6bca7473aa08cb0ecba36cb5dda2badf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6bca7473aa08cb0ecba36cb5dda2badf">arm_compute::graph::INode::input_edge</a></div><div class="ttdeci">Edge * input_edge(size_t idx) const</div><div class="ttdoc">Returns the edge of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00172">INode.cpp:172</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00217">Utils.cpp:217</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00138">CoreTypes.h:138</a></div></div>
<div class="ttc" id="a_nodes_8h_xhtml"><div class="ttname"><a href="_nodes_8h.xhtml">Nodes.h</a></div></div>
<div class="ttc" id="a_backend_registry_8h_xhtml"><div class="ttname"><a href="_backend_registry_8h.xhtml">BackendRegistry.h</a></div></div>
<div class="ttc" id="a_graph_builder_8h_xhtml"><div class="ttname"><a href="_graph_builder_8h.xhtml">GraphBuilder.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_ad8ca8a59006fbe004a4c2e9267c14263"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ad8ca8a59006fbe004a4c2e9267c14263">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node</a></div><div class="ttdeci">void transfer_driving_nodes_and_remove_old_node(Graph &amp;g, INode *new_node, INode *old_node, bool add_output_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00049">NodeFusionMutator.cpp:49</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00223">Cast.cpp:223</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">Types.h:73</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="a_mutator_utils_8h_xhtml"><div class="ttname"><a href="_mutator_utils_8h.xhtml">MutatorUtils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00204">Graph.cpp:204</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00147">Types.h:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::graph::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Supported Convolution layer methods.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00130">Types.h:130</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a09f8d22de4cd2a2881730ad58096c7c1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">arm_compute::graph::Graph::remove_node</a></div><div class="ttdeci">bool remove_node(NodeID nid)</div><div class="ttdoc">Remove the node with the given ID.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00035">Graph.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af5982a092e9eb743fce2d6392bdd8897"><div class="ttname"><a href="namespacearm__compute.xhtml#af5982a092e9eb743fce2d6392bdd8897">arm_compute::is_data_type_float</a></div><div class="ttdeci">bool is_data_type_float(DataType dt)</div><div class="ttdoc">Check if a given data type is of floating point type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00304">DataTypeUtils.h:304</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a669b5d3c5994f9ae3be31df9a1014297"><div class="ttname"><a href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">arm_compute::PaddingInfo</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; PaddingInfo</div><div class="ttdoc">Padding information as a pair of unsigned int start/end.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00410">Types.h:410</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00052">Graph.h:52</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_a1f9900d626af4230ff61f851e8d5eab5"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#a1f9900d626af4230ff61f851e8d5eab5">arm_compute::graph::detail::fuse_layer</a></div><div class="ttdeci">void fuse_layer(Graph &amp;g, std::function&lt; bool(INode &amp;)&gt; const &amp;prec, const F fuse_fcn, Args &amp;&amp;... optional_arguments)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00313">NodeFusionMutator.cpp:313</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a0cec440e0579d01d55a4e194f1c7178c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0cec440e0579d01d55a4e194f1c7178c">arm_compute::graph::Tensor::extract_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorAccessor &gt; extract_accessor()</div><div class="ttdoc">Extracts accessor from the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00070">Tensor.cpp:70</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a6118865e7371b107bd5fb4dd4a9e99a3"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a6118865e7371b107bd5fb4dd4a9e99a3">arm_compute::graph::TensorDescriptor::data_type</a></div><div class="ttdeci">DataType data_type</div><div class="ttdoc">Data type.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00110">TensorDescriptor.h:110</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_edge_xhtml_acef46a426a99b126a412e361125f2ce9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#acef46a426a99b126a412e361125f2ce9">arm_compute::graph::Edge::producer</a></div><div class="ttdeci">INode * producer() const</div><div class="ttdoc">Returns producer node.</div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00084">Edge.h:84</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml">arm_compute::graph::FusedConvolutionBatchNormalizationWithPostOpsNode</a></div><div class="ttdoc">Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_convolution_batch_normalization_with_post_ops_node_8h_source.xhtml#l00034">FusedConvolutionBatchNormalizationWithPostOpsNode.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node's ID.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00103">INode.cpp:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00092">Dimensions.h:92</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a8a979250f01a5edba059a02748b10ea3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">const std::vector&lt; NodeID &gt; &amp; nodes(NodeType type)</div><div class="ttdoc">Returns graph input nodes.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00174">Graph.cpp:174</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_activation_layer_node_xhtml_ab61ddeea8b783f64c3881a123bd7e1f2"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#ab61ddeea8b783f64c3881a123bd7e1f2">arm_compute::graph::ActivationLayerNode::node_type</a></div><div class="ttdeci">static constexpr NodeType node_type</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8h_source.xhtml#l00057">ActivationLayerNode.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00082">CoreTypes.h:82</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">arm_compute::graph::FusedDepthwiseConvolutionBatchNormalizationNode</a></div><div class="ttdoc">Fused Depthwise Convolution Batch Normalization node.</div><div class="ttdef"><b>Definition:</b> <a href="_fused_depthwise_convolution_batch_normalization_node_8h_source.xhtml#l00034">FusedDepthwiseConvolutionBatchNormalizationNode.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_1_1detail_xhtml_aad23aa93df69deb6c3afd91c42138930"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#aad23aa93df69deb6c3afd91c42138930">arm_compute::graph::detail::fuse_convolution_with_post_op</a></div><div class="ttdeci">void fuse_convolution_with_post_op(Graph &amp;g, INode *fused_node, std::list&lt; INode * &gt; post_op_node_list, int prev_op_dst_pos)</div><div class="ttdef"><b>Definition:</b> <a href="_node_fusion_mutator_8cpp_source.xhtml#l00380">NodeFusionMutator.cpp:380</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_1b9e532a4c8623825d945e964c6e4c7f.xhtml">mutators</a></li><li class="navelem"><a class="el" href="_node_fusion_mutator_8cpp.xhtml">NodeFusionMutator.cpp</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
