<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: IScheduler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_scheduler.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">IScheduler Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> interface to run kernels.  
 <a href="classarm__compute_1_1_i_scheduler.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> hints.  <a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad3ab921e075d1edd827faf95870aa808"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> { <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">STATIC</a>, 
<a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">DYNAMIC</a>
 }</td></tr>
<tr class="memdesc:ad3ab921e075d1edd827faf95870aa808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strategies available to split a workload.  <a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">More...</a><br /></td></tr>
<tr class="separator:ad3ab921e075d1edd827faf95870aa808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47266bbd911ce9049fc1194e9fac9051"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> = std::function&lt; int(int, int)&gt;</td></tr>
<tr class="memdesc:a47266bbd911ce9049fc1194e9fac9051"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to be used and map a given thread id to a logical core id.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">More...</a><br /></td></tr>
<tr class="separator:a47266bbd911ce9049fc1194e9fac9051"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cdc00a99619ba76bf79a466cb85d4da"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> = std::function&lt; void(const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;)&gt;</td></tr>
<tr class="memdesc:a4cdc00a99619ba76bf79a466cb85d4da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signature for the workloads to execute.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">More...</a><br /></td></tr>
<tr class="separator:a4cdc00a99619ba76bf79a466cb85d4da"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a34956db09db14c551e9966c9b66036f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">IScheduler</a> ()</td></tr>
<tr class="memdesc:a34956db09db14c551e9966c9b66036f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">More...</a><br /></td></tr>
<tr class="separator:a34956db09db14c551e9966c9b66036f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d209385481644d97e7ca96072b73eb8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">~IScheduler</a> ()=default</td></tr>
<tr class="memdesc:a6d209385481644d97e7ca96072b73eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">More...</a><br /></td></tr>
<tr class="separator:a6d209385481644d97e7ca96072b73eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a645ac2d9d4144fd0174296de7eb1e1b5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a645ac2d9d4144fd0174296de7eb1e1b5">set_num_threads</a> (unsigned int <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>)=0</td></tr>
<tr class="memdesc:a645ac2d9d4144fd0174296de7eb1e1b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads the scheduler will use to run the kernels.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a645ac2d9d4144fd0174296de7eb1e1b5">More...</a><br /></td></tr>
<tr class="separator:a645ac2d9d4144fd0174296de7eb1e1b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64cafb079598059f1ee04f3076f1035e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">set_num_threads_with_affinity</a> (unsigned int <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>, <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func)</td></tr>
<tr class="memdesc:a64cafb079598059f1ee04f3076f1035e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads the scheduler will use to run the kernels but also using a binding function to pin the threads to given logical cores.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">More...</a><br /></td></tr>
<tr class="separator:a64cafb079598059f1ee04f3076f1035e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac24584a63e484123e3756d1b2a1c9e2f"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a> () const =0</td></tr>
<tr class="memdesc:ac24584a63e484123e3756d1b2a1c9e2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of threads that the <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">SingleThreadScheduler</a> has in its pool.  <a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">More...</a><br /></td></tr>
<tr class="separator:ac24584a63e484123e3756d1b2a1c9e2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e58f95544bd5ac6559a421671bd9842"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a> (<a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints)=0</td></tr>
<tr class="memdesc:a4e58f95544bd5ac6559a421671bd9842"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs the kernel in the same thread as the caller synchronously.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">More...</a><br /></td></tr>
<tr class="separator:a4e58f95544bd5ac6559a421671bd9842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15103352886ec83d9c250a7f5d5c630f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a> (<a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)=0</td></tr>
<tr class="memdesc:a15103352886ec83d9c250a7f5d5c630f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs the kernel in the same thread as the caller synchronously.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">More...</a><br /></td></tr>
<tr class="separator:a15103352886ec83d9c250a7f5d5c630f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3becf955da8cad5036399bcb90f1408d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">run_tagged_workloads</a> (std::vector&lt; <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> &gt; &amp;workloads, const char *tag)</td></tr>
<tr class="memdesc:a3becf955da8cad5036399bcb90f1408d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute all the passed workloads.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">More...</a><br /></td></tr>
<tr class="separator:a3becf955da8cad5036399bcb90f1408d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0fd9e7b4f6240c55b4fe6a54d4418b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a> ()</td></tr>
<tr class="memdesc:ab0fd9e7b4f6240c55b4fe6a54d4418b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get CPU info.  <a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">More...</a><br /></td></tr>
<tr class="separator:ab0fd9e7b4f6240c55b4fe6a54d4418b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de5358eb9a099cda48662b2fc523ec5"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a> () const</td></tr>
<tr class="memdesc:a6de5358eb9a099cda48662b2fc523ec5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a hint for the best possible number of execution threads.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">More...</a><br /></td></tr>
<tr class="separator:a6de5358eb9a099cda48662b2fc523ec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:af5e26fa35c7355cf0d41e1e18c709a6e"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">split_dimensions_all</a> = std::numeric_limits&lt;unsigned&gt;::max()</td></tr>
<tr class="memdesc:af5e26fa35c7355cf0d41e1e18c709a6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedular is free to break down the problem space over as many dimensions as it wishes.  <a href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">More...</a><br /></td></tr>
<tr class="separator:af5e26fa35c7355cf0d41e1e18c709a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1_scheduler.xhtml" title="Configurable scheduler which supports multiple multithreading APIs and choosing between different sch...">Scheduler</a> interface to run kernels. </p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a47266bbd911ce9049fc1194e9fac9051"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47266bbd911ce9049fc1194e9fac9051">&#9670;&nbsp;</a></span>BindFunc</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> =  std::function&lt;int(int, int)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to be used and map a given thread id to a logical core id. </p>
<p>Mapping function expects the thread index and total number of cores as input, and returns the logical core index to bind against </p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>.</p>

</div>
</div>
<a id="a4cdc00a99619ba76bf79a466cb85d4da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cdc00a99619ba76bf79a466cb85d4da">&#9670;&nbsp;</a></span>Workload</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> =  std::function&lt;void(const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Signature for the workloads to execute. </p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8h_source.xhtml#l00135">135</a> of file <a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="ad3ab921e075d1edd827faf95870aa808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3ab921e075d1edd827faf95870aa808">&#9670;&nbsp;</a></span>StrategyHint</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Strategies available to split a workload. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc"></a>STATIC&#160;</td><td class="fielddoc"><p>Split the workload evenly among the threads. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"></a>DYNAMIC&#160;</td><td class="fielddoc"><p>Split the workload dynamically using a bucket system. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        STATIC,  <span class="comment">/**&lt; Split the workload evenly among the threads */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        DYNAMIC, <span class="comment">/**&lt; Split the workload dynamically using a bucket system */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    };</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a34956db09db14c551e9966c9b66036f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34956db09db14c551e9966c9b66036f9">&#9670;&nbsp;</a></span>IScheduler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Work out the best possible number of execution threads</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    _num_threads_hint = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">cpuinfo::num_threads_hint</a>();</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cpu_info_8cpp_source.xhtml#l00392">arm_compute::cpuinfo::num_threads_hint()</a>.</p>

</div>
</div>
<a id="a6d209385481644d97e7ca96072b73eb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d209385481644d97e7ca96072b73eb8">&#9670;&nbsp;</a></span>~IScheduler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab0fd9e7b4f6240c55b4fe6a54d4418b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0fd9e7b4f6240c55b4fe6a54d4418b5">&#9670;&nbsp;</a></span>cpu_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp; cpu_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get CPU info. </p>
<dl class="section return"><dt>Returns</dt><dd>CPU info. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">CPUInfo::get</a>();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00040">CPUInfo::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00056">CpuDepthwiseConv2dAssemblyDispatch::configure()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00051">CpuPool2d::configure()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00692">CpuGemmAssemblyDispatch::has_opt_impl()</a>, <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>, <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00038">SingleThreadScheduler::schedule()</a>, <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00056">SingleThreadScheduler::schedule_op()</a>, and <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00056">OMPScheduler::schedule_op()</a>.</p>

</div>
</div>
<a id="ac24584a63e484123e3756d1b2a1c9e2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac24584a63e484123e3756d1b2a1c9e2f">&#9670;&nbsp;</a></span>num_threads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int num_threads </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of threads that the <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">SingleThreadScheduler</a> has in its pool. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of threads available in <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">SingleThreadScheduler</a>. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">CPPScheduler</a>, <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">OMPScheduler</a>, and <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">SingleThreadScheduler</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00056">CpuDepthwiseConv2dAssemblyDispatch::configure()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00051">CpuPool2d::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00692">CpuGemmAssemblyDispatch::has_opt_impl()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00316">CpuWinogradConv2d::run()</a>, and <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00046">IScheduler::set_num_threads_with_affinity()</a>.</p>

</div>
</div>
<a id="a6de5358eb9a099cda48662b2fc523ec5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6de5358eb9a099cda48662b2fc523ec5">&#9670;&nbsp;</a></span>num_threads_hint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_threads_hint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a hint for the best possible number of execution threads. </p>
<dl class="section warning"><dt>Warning</dt><dd>In case we can't work out the best number of threads, std::thread::hardware_concurrency() is returned else 1 in case of bare metal builds</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Best possible number of execution threads to use </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> _num_threads_hint;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00441">CPPScheduler::set_num_threads()</a>, and <a class="el" href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00448">CPPScheduler::set_num_threads_with_affinity()</a>.</p>

</div>
</div>
<a id="a3becf955da8cad5036399bcb90f1408d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3becf955da8cad5036399bcb90f1408d">&#9670;&nbsp;</a></span>run_tagged_workloads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run_tagged_workloads </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>workloads</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>tag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute all the passed workloads. </p>
<dl class="section note"><dt>Note</dt><dd>There is no guarantee regarding the order in which the workloads will be executed or whether or not they will be executed in parallel.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">workloads</td><td>List of workloads to run </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tag</td><td>String that can be used by profiling tools to identify the workloads run by the scheduler (Can be null). </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00172">172</a> of file <a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tag);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    run_workloads(workloads);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a4e58f95544bd5ac6559a421671bd9842"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e58f95544bd5ac6559a421671bd9842">&#9670;&nbsp;</a></span>schedule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void schedule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;&#160;</td>
          <td class="paramname"><em>hints</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs the kernel in the same thread as the caller synchronously. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hints</td><td><a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml" title="Scheduler hints.">Hints</a> for the scheduler. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">CPPScheduler</a>, <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">OMPScheduler</a>, and <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">SingleThreadScheduler</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_p_p_simple_function_8cpp_source.xhtml#l00035">ICPPSimpleFunction::run()</a>, <a class="el" href="_i_n_e_simple_function_8cpp_source.xhtml#l00041">INESimpleFunction::run()</a>, <a class="el" href="_n_e_fill_border_8cpp_source.xhtml#l00045">NEFillBorder::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_8cpp_source.xhtml#l00052">NEROIPoolingLayer::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_8cpp_source.xhtml#l00059">NESpaceToDepthLayer::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00235">CPPBoxWithNonMaximaSuppressionLimit::run()</a>, <a class="el" href="_n_e_stack_layer_8cpp_source.xhtml#l00086">NEStackLayer::run()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00137">NEFFT1D::run()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00083">NEL2NormalizeLayer::run()</a>, <a class="el" href="_n_e_range_8cpp_source.xhtml#l00051">NERange::run()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00145">NEReductionOperation::run()</a>, <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00075">NENormalizationLayer::run()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00082">NEInstanceNormalizationLayer::run()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00257">NEPadLayer::run()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00107">NECropResize::run()</a>, <a class="el" href="_n_e_fuse_batch_normalization_8cpp_source.xhtml#l00063">NEFuseBatchNormalization::run()</a>, <a class="el" href="_n_e_batch_normalization_layer_8cpp_source.xhtml#l00060">NEBatchNormalizationLayer::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00089">NESpaceToBatchLayer::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00324">NEGenerateProposalsLayer::run()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00129">NESynthetizeFunctionWithZeroConstantKernelBorder&lt; K &gt;::run()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01068">NEQLSTMLayer::run()</a>, and <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml#l00055">arm_compute::utils::schedule_kernel_on_ctx()</a>.</p>

</div>
</div>
<a id="a15103352886ec83d9c250a7f5d5c630f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15103352886ec83d9c250a7f5d5c630f">&#9670;&nbsp;</a></span>schedule_op()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void schedule_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs the kernel in the same thread as the caller synchronously. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hints</td><td><a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml" title="Scheduler hints.">Hints</a> for the scheduler. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to use for kernel execution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> containing the tensors to operate on. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">OMPScheduler</a>, <a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">CPPScheduler</a>, and <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">SingleThreadScheduler</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00487">CpuFullyConnected::prepare()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00676">CpuGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00659">CpuGemmConv2d::prepare()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01210">NEQLSTMLayer::prepare()</a>, <a class="el" href="_cpu_dequantize_8cpp_source.xhtml#l00049">CpuDequantize::run()</a>, <a class="el" href="_cpu_quantize_8cpp_source.xhtml#l00054">CpuQuantize::run()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00047">CpuConvertFullyConnectedWeights::run()</a>, <a class="el" href="_cpu_activation_8cpp_source.xhtml#l00050">CpuActivation::run()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00088">CpuAddMulAdd::run()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00256">CpuScale::run()</a>, <a class="el" href="_cpu_pool3d_8cpp_source.xhtml#l00060">CpuPool3d::run()</a>, <a class="el" href="_cpu_sub_8cpp_source.xhtml#l00051">CpuSub::run()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00147">CpuConcatenate::run()</a>, <a class="el" href="_cpu_add_8cpp_source.xhtml#l00051">CpuAdd::run()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00104">CpuPool2d::run()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00101">CpuDepthwiseConv2dAssemblyDispatch::run()</a>, <a class="el" href="_cpu_mul_8cpp_source.xhtml#l00054">CpuMul::run()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00222">CpuMatMul::run()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00158">CpuSoftmaxGeneric&lt; IS_LOG &gt;::run()</a>, <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00067">NELogicalAnd::run()</a>, <a class="el" href="_cpu_gemm_lowp_output_stage_8cpp_source.xhtml#l00144">CpuGemmLowpOutputStage::run()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00117">CpuDirectConv2d::run()</a>, <a class="el" href="_cpu_direct_conv3d_8cpp_source.xhtml#l00084">CpuDirectConv3d::run()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00316">CpuWinogradConv2d::run()</a>, <a class="el" href="_cpu_mul_8cpp_source.xhtml#l00077">CpuComplexMul::run()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00306">CpuGemm::run()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00511">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00129">NESynthetizeFunctionWithZeroConstantKernelBorder&lt; K &gt;::run()</a>, <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00100">NELogicalOr::run()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00564">CpuGemmConv2d::run()</a>, and <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00132">NELogicalNot::run()</a>.</p>

</div>
</div>
<a id="a645ac2d9d4144fd0174296de7eb1e1b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a645ac2d9d4144fd0174296de7eb1e1b5">&#9670;&nbsp;</a></span>set_num_threads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_num_threads </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the number of threads the scheduler will use to run the kernels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_threads</td><td>If set to 0, then one thread per CPU core available on the system will be used, otherwise the number of threads specified. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler</a>, <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">OMPScheduler</a>, and <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">SingleThreadScheduler</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00097">main()</a>, and <a class="el" href="_n_e_device_backend_8cpp_source.xhtml#l00072">NEDeviceBackend::setup_backend_context()</a>.</p>

</div>
</div>
<a id="a64cafb079598059f1ee04f3076f1035e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64cafb079598059f1ee04f3076f1035e">&#9670;&nbsp;</a></span>set_num_threads_with_affinity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_num_threads_with_affinity </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a>&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the number of threads the scheduler will use to run the kernels but also using a binding function to pin the threads to given logical cores. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_threads</td><td>If set to 0, then one thread per CPU core available on the system will be used, otherwise the number of threads specified. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Binding function to use. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ed951f313d17451c99f8aeee200c3ca">CPPScheduler</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>, func);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Feature for affinity setting is not implemented&quot;</span>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00353">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">IScheduler::num_threads()</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="af5e26fa35c7355cf0d41e1e18c709a6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5e26fa35c7355cf0d41e1e18c709a6e">&#9670;&nbsp;</a></span>split_dimensions_all</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr unsigned int split_dimensions_all = std::numeric_limits&lt;unsigned&gt;::max()</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedular is free to break down the problem space over as many dimensions as it wishes. </p>

<p class="definition">Definition at line <a class="el" href="_i_scheduler_8h_source.xhtml#l00062">62</a> of file <a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00038">SingleThreadScheduler::schedule()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/<a class="el" href="_i_scheduler_8h_source.xhtml">IScheduler.h</a></li>
<li>src/runtime/<a class="el" href="_i_scheduler_8cpp_source.xhtml">IScheduler.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00353">Error.h:353</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_a2a42a2a0b91dce5401678766c088dfa7"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">arm_compute::CPUInfo::get</a></div><div class="ttdeci">static CPUInfo &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00040">CPPTypes.cpp:40</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_a8d1f363d679403ae1ad371b85e63c7a3"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">arm_compute::cpuinfo::num_threads_hint</a></div><div class="ttdeci">uint32_t num_threads_hint()</div><div class="ttdoc">Some systems have both big and small cores, this fuction computes the minimum number of cores that ar...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00392">CpuInfo.cpp:392</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:20 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
