<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: deep_unique_ptr&lt; Base &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">deep_unique_ptr&lt; Base &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A deep-copying unique pointer that also supports polymorphic cloning behavior.  
 <a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:af19e5941b885a2b0da5666a1d9a10838"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">CopyFunc</a> = std::function&lt; Base *(const Base *)&gt;</td></tr>
<tr class="separator:af19e5941b885a2b0da5666a1d9a10838"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2d9fa4ea2bb82870f30269acb158523f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">deep_unique_ptr</a> (std::nullptr_t val=nullptr) noexcept</td></tr>
<tr class="separator:a2d9fa4ea2bb82870f30269acb158523f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae58d8465d2b804da4fb9e750e3947a38"><td class="memTemplParams" colspan="2">template&lt;typename Derived , typename CopyFuncDerived &gt; </td></tr>
<tr class="memitem:ae58d8465d2b804da4fb9e750e3947a38"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#ae58d8465d2b804da4fb9e750e3947a38">deep_unique_ptr</a> (Derived *value, const CopyFuncDerived &amp;copy) noexcept</td></tr>
<tr class="separator:ae58d8465d2b804da4fb9e750e3947a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afca2b75d4d718e3f68845a383baaa551"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#afca2b75d4d718e3f68845a383baaa551">deep_unique_ptr</a> (const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;ptr)</td></tr>
<tr class="separator:afca2b75d4d718e3f68845a383baaa551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a649cc0ef4bd9919a899ddd033ddf9009"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a649cc0ef4bd9919a899ddd033ddf9009">operator=</a> (const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;ptr)</td></tr>
<tr class="separator:a649cc0ef4bd9919a899ddd033ddf9009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac841b53639b3e786a8ca6adf5a0f2380"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#ac841b53639b3e786a8ca6adf5a0f2380">deep_unique_ptr</a> (<a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&amp;ptr)=default</td></tr>
<tr class="separator:ac841b53639b3e786a8ca6adf5a0f2380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae4d85ad9593f2ca87d58884630f5da5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#aae4d85ad9593f2ca87d58884630f5da5">operator=</a> (<a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&amp;ptr)=default</td></tr>
<tr class="separator:aae4d85ad9593f2ca87d58884630f5da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76ffa711331aeda4d47de52d92a35e99"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a76ffa711331aeda4d47de52d92a35e99">~deep_unique_ptr</a> ()=default</td></tr>
<tr class="separator:a76ffa711331aeda4d47de52d92a35e99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72216fa65e6711f08ea66a1f60cbfe6d"><td class="memItemLeft" align="right" valign="top">Base &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a72216fa65e6711f08ea66a1f60cbfe6d">operator*</a> () noexcept</td></tr>
<tr class="separator:a72216fa65e6711f08ea66a1f60cbfe6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14b77386b0589c7cda5f1b0906874523"><td class="memItemLeft" align="right" valign="top">const Base &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a14b77386b0589c7cda5f1b0906874523">operator*</a> () const noexcept</td></tr>
<tr class="separator:a14b77386b0589c7cda5f1b0906874523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28b99fdcac18716413b77f56382da0e3"><td class="memItemLeft" align="right" valign="top">Base *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a28b99fdcac18716413b77f56382da0e3">operator-&gt;</a> () noexcept</td></tr>
<tr class="separator:a28b99fdcac18716413b77f56382da0e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e9cbd797d4d19897303d84acf1586c2"><td class="memItemLeft" align="right" valign="top">const Base *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a8e9cbd797d4d19897303d84acf1586c2">operator-&gt;</a> () const noexcept</td></tr>
<tr class="separator:a8e9cbd797d4d19897303d84acf1586c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d71c09b56ba4a1218c32fe7c4e3b39e"><td class="memItemLeft" align="right" valign="top">Base *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">get</a> () noexcept</td></tr>
<tr class="separator:a3d71c09b56ba4a1218c32fe7c4e3b39e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a084833a9a124b044091ac69bf96ffad6"><td class="memItemLeft" align="right" valign="top">const Base *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a084833a9a124b044091ac69bf96ffad6">get</a> () const noexcept</td></tr>
<tr class="separator:a084833a9a124b044091ac69bf96ffad6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a420e60e9788bfa3b52aa3aab72ea3a5e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a420e60e9788bfa3b52aa3aab72ea3a5e">operator bool</a> () const noexcept</td></tr>
<tr class="separator:a420e60e9788bfa3b52aa3aab72ea3a5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ff83e9851412c2f36d66e2e19f38742"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a6ff83e9851412c2f36d66e2e19f38742">operator==</a> (const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;rhs) const</td></tr>
<tr class="separator:a6ff83e9851412c2f36d66e2e19f38742"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:af10963555438c739192d8ac0e77272c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a> (<a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;ptr0, <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;ptr1) noexcept</td></tr>
<tr class="separator:af10963555438c739192d8ac0e77272c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Base&gt;<br />
class arm_compute::utils::memory::deep_unique_ptr&lt; Base &gt;</h3>

<p>A deep-copying unique pointer that also supports polymorphic cloning behavior. </p>
<dl class="section note"><dt>Note</dt><dd>The == operator compares the dereferenced value instead of the pointer itself.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Base</td><td>Base type </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00060">60</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="af19e5941b885a2b0da5666a1d9a10838"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af19e5941b885a2b0da5666a1d9a10838">&#9670;&nbsp;</a></span>CopyFunc</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">CopyFunc</a> =  std::function&lt;Base *(const Base *)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00063">63</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2d9fa4ea2bb82870f30269acb158523f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d9fa4ea2bb82870f30269acb158523f">&#9670;&nbsp;</a></span>deep_unique_ptr() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> </td>
          <td>(</td>
          <td class="paramtype">std::nullptr_t&#160;</td>
          <td class="paramname"><em>val</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_deep_copy_8h_source.xhtml#l00086">deep_unique_ptr&lt; Base &gt;::operator=()</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        : _val{ val },</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    _copy{}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ae58d8465d2b804da4fb9e750e3947a38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae58d8465d2b804da4fb9e750e3947a38">&#9670;&nbsp;</a></span>deep_unique_ptr() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> </td>
          <td>(</td>
          <td class="paramtype">Derived *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CopyFuncDerived &amp;&#160;</td>
          <td class="paramname"><em>copy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">References <a class="el" href="reference_2_copy_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::copy()</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        : _val{ value },</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    _copy{ std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>) }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        static_assert(std::is_base_of&lt;Base, Derived&gt;::value,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                      <span class="stringliteral">&quot;Derived is not a specialization of Base&quot;</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        static_assert(</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            std::is_constructible&lt;CopyFunc, CopyFuncDerived&gt;::value,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="stringliteral">&quot;CopyFuncDerived is not valid for a copy functor&quot;</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afca2b75d4d718e3f68845a383baaa551"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afca2b75d4d718e3f68845a383baaa551">&#9670;&nbsp;</a></span>deep_unique_ptr() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00082">82</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        : <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">deep_unique_ptr</a>(ptr.clone())</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a2d9fa4ea2bb82870f30269acb158523f"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">arm_compute::utils::memory::deep_unique_ptr::deep_unique_ptr</a></div><div class="ttdeci">deep_unique_ptr(std::nullptr_t val=nullptr) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00065">DeepCopy.h:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac841b53639b3e786a8ca6adf5a0f2380"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac841b53639b3e786a8ca6adf5a0f2380">&#9670;&nbsp;</a></span>deep_unique_ptr() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a76ffa711331aeda4d47de52d92a35e99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76ffa711331aeda4d47de52d92a35e99">&#9670;&nbsp;</a></span>~deep_unique_ptr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_deep_copy_8h_source.xhtml#l00086">deep_unique_ptr&lt; Base &gt;::operator=()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3d71c09b56ba4a1218c32fe7c4e3b39e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d71c09b56ba4a1218c32fe7c4e3b39e">&#9670;&nbsp;</a></span>get() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Base* get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00122">122</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_deep_copy_8h_source.xhtml#l00136">deep_unique_ptr&lt; Base &gt;::operator==()</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> _val.get();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a084833a9a124b044091ac69bf96ffad6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a084833a9a124b044091ac69bf96ffad6">&#9670;&nbsp;</a></span>get() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Base* get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">return</span> _val.get();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a420e60e9788bfa3b52aa3aab72ea3a5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a420e60e9788bfa3b52aa3aab72ea3a5e">&#9670;&nbsp;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">operator bool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00131">131</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(_val);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a72216fa65e6711f08ea66a1f60cbfe6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72216fa65e6711f08ea66a1f60cbfe6d">&#9670;&nbsp;</a></span>operator*() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Base&amp; operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00102">102</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> *_val;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a14b77386b0589c7cda5f1b0906874523"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14b77386b0589c7cda5f1b0906874523">&#9670;&nbsp;</a></span>operator*() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Base&amp; operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00107">107</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> *_val;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a28b99fdcac18716413b77f56382da0e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28b99fdcac18716413b77f56382da0e3">&#9670;&nbsp;</a></span>operator->() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Base* operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00112">112</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> _val.operator-&gt;();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a8e9cbd797d4d19897303d84acf1586c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e9cbd797d4d19897303d84acf1586c2">&#9670;&nbsp;</a></span>operator->() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Base* operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00117">117</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">return</span> _val.operator-&gt;();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a649cc0ef4bd9919a899ddd033ddf9009"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a649cc0ef4bd9919a899ddd033ddf9009">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00086">86</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">References <a class="el" href="_deep_copy_8h_source.xhtml#l00065">deep_unique_ptr&lt; Base &gt;::deep_unique_ptr()</a>, <a class="el" href="_deep_copy_8h_source.xhtml#l00096">deep_unique_ptr&lt; Base &gt;::swap</a>, and <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a76ffa711331aeda4d47de52d92a35e99">deep_unique_ptr&lt; Base &gt;::~deep_unique_ptr()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        deep_unique_ptr&lt;Base&gt; tmp(ptr);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(*<span class="keyword">this</span>, tmp);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_af10963555438c739192d8ac0e77272c6"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">arm_compute::utils::memory::deep_unique_ptr::swap</a></div><div class="ttdeci">friend void swap(deep_unique_ptr &amp;ptr0, deep_unique_ptr&lt; Base &gt; &amp;ptr1) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00096">DeepCopy.h:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae4d85ad9593f2ca87d58884630f5da5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae4d85ad9593f2ca87d58884630f5da5">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ff83e9851412c2f36d66e2e19f38742"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ff83e9851412c2f36d66e2e19f38742">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00136">136</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">References <a class="el" href="_deep_copy_8h_source.xhtml#l00122">deep_unique_ptr&lt; Base &gt;::get()</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">if</span>(rhs.get() == <span class="keyword">nullptr</span> &amp;&amp; _val == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(rhs.get() == <span class="keyword">nullptr</span> || _val == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">return</span> (*_val == *rhs);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="af10963555438c739192d8ac0e77272c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af10963555438c739192d8ac0e77272c6">&#9670;&nbsp;</a></span>swap</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>&lt; Base &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_deep_copy_8h_source.xhtml#l00096">96</a> of file <a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_deep_copy_8h_source.xhtml#l00086">deep_unique_ptr&lt; Base &gt;::operator=()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">std::swap</a>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(ptr0._val, ptr1._val);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(ptr0._copy, ptr1._copy);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_af10963555438c739192d8ac0e77272c6"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">arm_compute::utils::memory::deep_unique_ptr::swap</a></div><div class="ttdeci">friend void swap(deep_unique_ptr &amp;ptr0, deep_unique_ptr&lt; Base &gt; &amp;ptr1) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00096">DeepCopy.h:96</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae70b8de3a0b147a476cabb07b8707d7f"><div class="ttname"><a href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">arm_compute::swap</a></div><div class="ttdeci">void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00304">Window.inl:304</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>support/<a class="el" href="_deep_copy_8h_source.xhtml">DeepCopy.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils_1_1memory.xhtml">memory</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
