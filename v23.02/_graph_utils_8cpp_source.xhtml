<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/GraphUtils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_graph_utils_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GraphUtils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_graph_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_utils_8h.xhtml">utils/GraphUtils.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sub_tensor_8h.xhtml">arm_compute/runtime/SubTensor.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#pragma GCC diagnostic push</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wunused-parameter&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_image_loader_8h.xhtml">utils/ImageLoader.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#pragma GCC diagnostic pop</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;utils/Utils.h&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;inttypes.h&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;std::pair&lt;arm_compute::TensorShape, arm_compute::PermutationVector&gt; compute_permutation_parameters(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                                                                   <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Set permutation parameters if needed</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a>       permuted_shape = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Permute only if num_dimensions greater than 2</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span>(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 2)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        perm = (data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a>) ? <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2U, 0U, 1U) : <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a>(1U, 2U, 0U);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm_shape = (data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a>) ? <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2U, 0U, 1U) : <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a>(1U, 2U, 0U);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(permuted_shape, perm_shape);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> std::make_pair(permuted_shape, perm);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#ab58008704726cd07353605b1d9e13d86">   65</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#ab58008704726cd07353605b1d9e13d86">TFPreproccessor::TFPreproccessor</a>(<span class="keywordtype">float</span> min_range, <span class="keywordtype">float</span> max_range)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    : _min_range(min_range), _max_range(max_range)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">TFPreproccessor::preprocess</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        preprocess_typed&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        preprocess_typed&lt;half&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordtype">void</span> TFPreproccessor::preprocess_typed(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a> = _max_range - _min_range;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">const</span> T value                                     = *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordtype">float</span>   res                                       = value / 255.f;            <span class="comment">// Normalize to [0, 1]</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        res                                               = res * range + _min_range; <span class="comment">// Map to [min_range, max_range]</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<span class="keywordtype">id</span>)) = res;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    });</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a17f1b10d24fd28928777ee5c62c9cbfb">  101</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a17f1b10d24fd28928777ee5c62c9cbfb">CaffePreproccessor::CaffePreproccessor</a>(std::array&lt;float, 3&gt; mean, <span class="keywordtype">bool</span> bgr, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    : _mean(mean), _bgr(bgr), _scale(scale)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span>(_bgr)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">std::swap</a>(_mean[0], _mean[2]);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">  110</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">CaffePreproccessor::preprocess</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        preprocess_typed&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        preprocess_typed&lt;half&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">void</span> CaffePreproccessor::preprocess_typed(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> T value                                     = *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<span class="keywordtype">id</span>)) - T(_mean[<span class="keywordtype">id</span>[channel_idx]]);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<span class="keywordtype">id</span>)) = value * T(_scale);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    });</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">  140</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">PPMWriter::PPMWriter</a>(std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    : _name(<a class="code" href="namespacestd.xhtml">std</a>::move(name)), _iterator(0), _maximum(maximum)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  145</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">PPMWriter::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    ss &lt;&lt; _name &lt;&lt; _iterator &lt;&lt; <span class="stringliteral">&quot;.ppm&quot;</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">arm_compute::utils::save_to_ppm</a>(tensor, ss.str());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    _iterator++;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span>(_maximum == 0)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> _iterator &lt; _maximum;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">  160</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">DummyAccessor::DummyAccessor</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    : _iterator(0), _maximum(maximum)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#affa064ad4776fa095844d632c04156f5">  165</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#affa064ad4776fa095844d632c04156f5">DummyAccessor::access_tensor_data</a>()</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  170</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">DummyAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tensor);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">bool</span> ret = _maximum == 0 || _iterator &lt; _maximum;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(_iterator == _maximum)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        _iterator = 0;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        _iterator++;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">  185</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">NumPyAccessor::NumPyAccessor</a>(std::string npy_path, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout, std::ostream &amp;output_stream)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    : _npy_tensor(), _filename(<a class="code" href="namespacestd.xhtml">std</a>::move(npy_path)), _output_stream(output_stream)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a> loader(_filename, data_layout);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(shape, 1, data_type);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">set_data_layout</a>(data_layout);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    _npy_tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">init</a>(info);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    _npy_tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    loader.<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(_npy_tensor);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordtype">void</span> NumPyAccessor::access_numpy_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor, T tolerance)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_elements          = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">total_size</a>();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">int</span>       num_mismatches        = utils::compare_tensor&lt;T&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, _npy_tensor, tolerance);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">float</span>     percentage_mismatches = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;Results: &quot;</span> &lt;&lt; 100.f - (percentage_mismatches * 100) &lt;&lt; <span class="stringliteral">&quot; % matches with the provided output[&quot;</span> &lt;&lt; _filename &lt;&lt; <span class="stringliteral">&quot;].&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;         &quot;</span> &lt;&lt; num_elements - num_mismatches &lt;&lt; <span class="stringliteral">&quot; out of &quot;</span> &lt;&lt; num_elements &lt;&lt; <span class="stringliteral">&quot; matches with the provided output[&quot;</span> &lt;&lt; _filename &lt;&lt; <span class="stringliteral">&quot;].&quot;</span> &lt;&lt; std::endl</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                   &lt;&lt; std::endl;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  211</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">NumPyAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;tensor, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_npy_tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0) != tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">switch</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            access_numpy_tensor&lt;qasymm8_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, 0);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            access_numpy_tensor&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, 0.0001f);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ASSERTS_ENABLED</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">PrintAccessor::PrintAccessor</a>(std::ostream &amp;output_stream, <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> io_fmt)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    : _output_stream(output_stream), _io_fmt(io_fmt)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">PrintAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">print</a>(_output_stream, _io_fmt);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_ASSERTS_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">  244</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">SaveNumPyAccessor::SaveNumPyAccessor</a>(std::string npy_name, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_fortran)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    : _npy_name(<a class="code" href="namespacestd.xhtml">std</a>::move(npy_name)), _is_fortran(is_fortran)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  249</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">SaveNumPyAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;tensor, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">utils::save_to_npy</a>(tensor, _npy_name, _is_fortran);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">  258</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">ImageAccessor::ImageAccessor</a>(std::string filename, <span class="keywordtype">bool</span> bgr, std::unique_ptr&lt;IPreprocessor&gt; preprocessor)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    : _already_loaded(false), _filename(<a class="code" href="namespacestd.xhtml">std</a>::move(filename)), _bgr(bgr), _preprocessor(<a class="code" href="namespacestd.xhtml">std</a>::move(preprocessor))</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  263</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">ImageAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">if</span>(!_already_loaded)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keyword">auto</span> image_loader = <a class="code" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#ada8c92fe057e34525e7f8c4e8e422179">utils::ImageLoaderFactory::create</a>(_filename);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <a class="code" href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a>(image_loader == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Unsupported image type&quot;</span>);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Open image file</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        image_loader-&gt;open(_filename);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="comment">// Get permutated shape and permutation parameters</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>                    permuted_shape = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            std::tie(permuted_shape, perm) = compute_permutation_parameters(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(), tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>());</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">#ifdef __arm__</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <a class="code" href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a>(image_loader-&gt;width() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() || image_loader-&gt;height() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>(),</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                    <span class="stringliteral">&quot;Failed to load image file: dimensions [%d,%d] not correct, expected [%&quot;</span> PRIu32 <span class="stringliteral">&quot;,%&quot;</span> PRIu32 <span class="stringliteral">&quot;].&quot;</span>,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                    image_loader-&gt;width(), image_loader-&gt;height(), permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>(), permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>());</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">#else  // __arm__</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a>(image_loader-&gt;width() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() || image_loader-&gt;height() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>(),</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                    <span class="stringliteral">&quot;Failed to load image file: dimensions [%d,%d] not correct, expected [%&quot;</span> PRIu64 <span class="stringliteral">&quot;,%&quot;</span> PRIu64 <span class="stringliteral">&quot;].&quot;</span>,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                    image_loader-&gt;width(), image_loader-&gt;height(),</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                    <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>()), static_cast&lt;uint64_t&gt;(permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>()));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">#endif // __arm__</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="comment">// Fill the tensor with the PPM content (BGR)</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        image_loader-&gt;fill_planar_tensor(tensor, _bgr);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="comment">// Preprocess tensor</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">if</span>(_preprocessor)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            _preprocessor-&gt;preprocess(tensor);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    _already_loaded = !_already_loaded;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> _already_loaded;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#a458082188f9eec9fdf459f508d64d9be">  306</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#a458082188f9eec9fdf459f508d64d9be">ValidationInputAccessor::ValidationInputAccessor</a>(<span class="keyword">const</span> std::string             &amp;image_list,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                 std::string                    images_path,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                 std::unique_ptr&lt;IPreprocessor&gt; preprocessor,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                 <span class="keywordtype">bool</span>                           bgr,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                   start,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                   <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                 std::ostream                  &amp;output_stream)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    : _path(<a class="code" href="namespacestd.xhtml">std</a>::move(images_path)), _images(), _preprocessor(<a class="code" href="namespacestd.xhtml">std</a>::move(preprocessor)), _bgr(bgr), _offset(0), _output_stream(output_stream)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a>(start &gt; end, <span class="stringliteral">&quot;Invalid validation range!&quot;</span>);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    std::ifstream ifs;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        ifs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        ifs.open(image_list, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="comment">// Parse image names</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">for</span>(std::string line; !std::getline(ifs, line).fail() &amp;&amp; counter &lt;= <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>; ++counter)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="comment">// Add image to process if withing range</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">if</span>(counter &gt;= start)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                std::stringstream linestream(line);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                std::string       image_name;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                linestream &gt;&gt; image_name;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                _images.emplace_back(std::move(image_name));</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, image_list.c_str(), e.what());</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  344</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">ValidationInputAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> &amp;tensor)</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">bool</span> ret = _offset &lt; _images.size();</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">if</span>(ret)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">utils::JPEGLoader</a> jpeg;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="comment">// Open JPEG file</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        std::string image_name = _path + _images[_offset++];</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">open</a>(image_name);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        _output_stream &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt; _offset &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; _images.size() &lt;&lt; <span class="stringliteral">&quot;] Validating &quot;</span> &lt;&lt; image_name &lt;&lt; std::endl;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment">// Get permutated shape and permutation parameters</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>                    permuted_shape = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() != <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            std::tie(permuted_shape, perm) = compute_permutation_parameters(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>(),</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                                                            tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>());</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="preprocessor">#ifdef __arm__</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <a class="code" href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a>(jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7f0f3e5dd09a150b2cc221c01804d1a7">width</a>() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() || jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#adc7679009b582b99d859c0edfc35aa4a">height</a>() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>(),</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                    <span class="stringliteral">&quot;Failed to load image file: dimensions [%d,%d] not correct, expected [%&quot;</span> PRIu32 <span class="stringliteral">&quot;,%&quot;</span> PRIu32 <span class="stringliteral">&quot;].&quot;</span>,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                    jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7f0f3e5dd09a150b2cc221c01804d1a7">width</a>(), jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#adc7679009b582b99d859c0edfc35aa4a">height</a>(), permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>(), permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>());</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">#else  // __arm__</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <a class="code" href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a>(jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7f0f3e5dd09a150b2cc221c01804d1a7">width</a>() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() || jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#adc7679009b582b99d859c0edfc35aa4a">height</a>() != permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>(),</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                    <span class="stringliteral">&quot;Failed to load image file: dimensions [%d,%d] not correct, expected [%&quot;</span> PRIu64 <span class="stringliteral">&quot;,%&quot;</span> PRIu64 <span class="stringliteral">&quot;].&quot;</span>,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                    jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7f0f3e5dd09a150b2cc221c01804d1a7">width</a>(), jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#adc7679009b582b99d859c0edfc35aa4a">height</a>(),</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                    <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>()), static_cast&lt;uint64_t&gt;(permuted_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>()));</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">#endif // __arm__</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="comment">// Fill the tensor with the JPEG content (BGR)</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        jpeg.<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7c3f70e1caee95bb95c62346e130e5ab">fill_planar_tensor</a>(tensor, _bgr);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="comment">// Preprocess tensor</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">if</span>(_preprocessor)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            _preprocessor-&gt;preprocess(tensor);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ac3ae33bed176ca84786a8c910c3072c9">  389</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ac3ae33bed176ca84786a8c910c3072c9">ValidationOutputAccessor::ValidationOutputAccessor</a>(<span class="keyword">const</span> std::string &amp;image_list,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                   std::ostream      &amp;output_stream,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       start,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    : _results(), _output_stream(output_stream), _offset(0), _positive_samples_top1(0), _positive_samples_top5(0)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;{</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a>(start &gt; end, <span class="stringliteral">&quot;Invalid validation range!&quot;</span>);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    std::ifstream ifs;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        ifs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        ifs.open(image_list, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="comment">// Parse image correctly classified labels</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">for</span>(std::string line; !std::getline(ifs, line).fail() &amp;&amp; counter &lt;= <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>; ++counter)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="comment">// Add label if within range</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="keywordflow">if</span>(counter &gt;= start)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                std::stringstream linestream(line);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                std::string       image_name;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <span class="keywordtype">int</span>               result;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                linestream &gt;&gt; image_name &gt;&gt; result;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                _results.emplace_back(result);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, image_list.c_str(), e.what());</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ad20897c5c8bd47f5d4005989bead0e55">  425</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ad20897c5c8bd47f5d4005989bead0e55">ValidationOutputAccessor::reset</a>()</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    _offset                = 0;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    _positive_samples_top1 = 0;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    _positive_samples_top5 = 0;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  432</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">ValidationOutputAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> &amp;tensor)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordtype">bool</span> ret = _offset &lt; _results.size();</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">if</span>(ret)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    {</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="comment">// Get results</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        std::vector&lt;size_t&gt; tensor_results;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">switch</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                tensor_results = access_predictions_tensor&lt;uint8_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                tensor_results = access_predictions_tensor&lt;half&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                tensor_results = access_predictions_tensor&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="comment">// Check if tensor results are within top-n accuracy</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordtype">size_t</span> correct_label = _results[_offset++];</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        aggregate_sample(tensor_results, _positive_samples_top1, 1, correct_label);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        aggregate_sample(tensor_results, _positive_samples_top5, 5, correct_label);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    }</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="comment">// Report top_n accuracy</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">if</span>(_offset &gt;= _results.size())</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        report_top_n(1, _results.size(), _positive_samples_top1);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        report_top_n(5, _results.size(), _positive_samples_top5);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;std::vector&lt;size_t&gt; ValidationOutputAccessor::access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> &amp;tensor)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="comment">// Get the predicted class</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::vector&lt;size_t&gt; index;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   output_net  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() + tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a>());</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_classes = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    index.resize(num_classes);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="comment">// Sort results</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    std::iota(std::begin(index), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(index), static_cast&lt;size_t&gt;(0));</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    std::sort(std::begin(index), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(index),</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;              [&amp;](<span class="keywordtype">size_t</span> a, <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    {</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">return</span> output_net[a] &gt; output_net[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>];</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    });</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">return</span> index;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;}</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keywordtype">void</span> ValidationOutputAccessor::aggregate_sample(<span class="keyword">const</span> std::vector&lt;size_t&gt; &amp;res, <span class="keywordtype">size_t</span> &amp;positive_samples, <span class="keywordtype">size_t</span> top_n, <span class="keywordtype">size_t</span> correct_label)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;{</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">auto</span> is_valid_label = [correct_label](<span class="keywordtype">size_t</span> label)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">return</span> label == correct_label;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    };</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">if</span>(std::any_of(std::begin(res), std::begin(res) + top_n, is_valid_label))</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        ++positive_samples;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;}</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="keywordtype">void</span> ValidationOutputAccessor::report_top_n(<span class="keywordtype">size_t</span> top_n, <span class="keywordtype">size_t</span> total_samples, <span class="keywordtype">size_t</span> positive_samples)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">size_t</span> negative_samples = total_samples - positive_samples;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordtype">float</span>  accuracy         = positive_samples / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_samples);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;----------Top &quot;</span> &lt;&lt; top_n &lt;&lt; <span class="stringliteral">&quot; accuracy ----------&quot;</span> &lt;&lt; std::endl</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                   &lt;&lt; std::endl;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;Positive samples : &quot;</span> &lt;&lt; positive_samples &lt;&lt; std::endl;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;Negative samples : &quot;</span> &lt;&lt; negative_samples &lt;&lt; std::endl;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;Accuracy : &quot;</span> &lt;&lt; accuracy &lt;&lt; std::endl;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;}</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">  518</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">DetectionOutputAccessor::DetectionOutputAccessor</a>(<span class="keyword">const</span> std::string &amp;labels_path, std::vector&lt;TensorShape&gt; &amp;imgs_tensor_shapes, std::ostream &amp;output_stream)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    : _labels(), _tensor_shapes(<a class="code" href="namespacestd.xhtml">std</a>::move(imgs_tensor_shapes)), _output_stream(output_stream)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;{</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    _labels.clear();</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    std::ifstream ifs;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        ifs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        ifs.open(labels_path, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">for</span>(std::string line; !std::getline(ifs, line).fail();)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            _labels.emplace_back(line);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, labels_path.c_str(), e.what());</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="keywordtype">void</span> DetectionOutputAccessor::access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_detection = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>();</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   output_prt    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() + tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a>());</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">if</span>(num_detection &gt; 0)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        _output_stream &lt;&lt; <span class="stringliteral">&quot;---------------------- Detections ----------------------&quot;</span> &lt;&lt; std::endl</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                       &lt;&lt; std::endl;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        _output_stream &lt;&lt; std::left &lt;&lt; std::setprecision(4) &lt;&lt; std::setw(8) &lt;&lt; <span class="stringliteral">&quot;Image | &quot;</span> &lt;&lt; std::setw(8) &lt;&lt; <span class="stringliteral">&quot;Label | &quot;</span> &lt;&lt; std::setw(12) &lt;&lt; <span class="stringliteral">&quot;Confidence | &quot;</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                       &lt;&lt; <span class="stringliteral">&quot;[ xmin, ymin, xmax, ymax ]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; num_detection; ++i)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keyword">auto</span> im = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(output_prt[i * 7]);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            _output_stream &lt;&lt; std::setw(8) &lt;&lt; im &lt;&lt; std::setw(8)</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                           &lt;&lt; _labels[output_prt[i * 7 + 1]] &lt;&lt; std::setw(12) &lt;&lt; output_prt[i * 7 + 2]</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot; [&quot;</span> &lt;&lt; (output_prt[i * 7 + 3] * _tensor_shapes[im].x())</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; (output_prt[i * 7 + 4] * _tensor_shapes[im].y())</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; (output_prt[i * 7 + 5] * _tensor_shapes[im].x())</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; (output_prt[i * 7 + 6] * _tensor_shapes[im].y())</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        _output_stream &lt;&lt; <span class="stringliteral">&quot;No detection found.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  573</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">DetectionOutputAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;{</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;tensor, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">switch</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            access_predictions_tensor&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;}</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">  589</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">TopNPredictionsAccessor::TopNPredictionsAccessor</a>(<span class="keyword">const</span> std::string &amp;labels_path, <span class="keywordtype">size_t</span> top_n, std::ostream &amp;output_stream)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    : _labels(), _output_stream(output_stream), _top_n(top_n)</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    _labels.clear();</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    std::ifstream ifs;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        ifs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        ifs.open(labels_path, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keywordflow">for</span>(std::string line; !std::getline(ifs, line).fail();)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            _labels.emplace_back(line);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, labels_path.c_str(), e.what());</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;}</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="keywordtype">void</span> TopNPredictionsAccessor::access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="comment">// Get the predicted class</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    std::vector&lt;T&gt;      classes_prob;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    std::vector&lt;size_t&gt; index;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   output_net  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() + tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a>());</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_classes = tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    classes_prob.resize(num_classes);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    index.resize(num_classes);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">std::copy</a>(output_net, output_net + num_classes, classes_prob.begin());</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="comment">// Sort results</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    std::iota(std::begin(index), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(index), static_cast&lt;size_t&gt;(0));</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    std::sort(std::begin(index), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(index),</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;              [&amp;](<span class="keywordtype">size_t</span> a, <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        <span class="keywordflow">return</span> classes_prob[a] &gt; classes_prob[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>];</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    });</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    _output_stream &lt;&lt; <span class="stringliteral">&quot;---------- Top &quot;</span> &lt;&lt; _top_n &lt;&lt; <span class="stringliteral">&quot; predictions ----------&quot;</span> &lt;&lt; std::endl</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                   &lt;&lt; std::endl;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _top_n; ++i)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        _output_stream &lt;&lt; std::fixed &lt;&lt; std::setprecision(4)</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                       &lt;&lt; +classes_prob[index.at(i)]</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                       &lt;&lt; <span class="stringliteral">&quot; - [id = &quot;</span> &lt;&lt; index.at(i) &lt;&lt; <span class="stringliteral">&quot;]&quot;</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                       &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; _labels[index.at(i)] &lt;&lt; std::endl;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    }</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;}</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  646</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">TopNPredictionsAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;{</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;tensor, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_labels.size() != tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0));</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">switch</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            access_predictions_tensor&lt;uint8_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            access_predictions_tensor&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    }</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;}</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">  666</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">RandomAccessor::RandomAccessor</a>(<a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, std::random_device::result_type seed)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    : _lower(lower), _upper(upper), _seed(seed)</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;{</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keywordtype">void</span> RandomAccessor::fill(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    std::mt19937 gen(_seed);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordflow">if</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">empty</a>() &amp;&amp; (<span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarm__compute_1_1_sub_tensor.xhtml">SubTensor</a> *<span class="keyword">&gt;</span>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) == <span class="keyword">nullptr</span>))</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    {</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>(); <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>())</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        {</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> value                                 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen));</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) = value;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    }</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="comment">// If tensor has padding accessing tensor elements through execution window.</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        {</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> value                                  = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen));</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<span class="keywordtype">id</span>)) = value;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        });</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  698</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">RandomAccessor::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;{</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordflow">switch</span>(tensor.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        {</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            std::uniform_int_distribution&lt;uint8_t&gt; distribution_u8(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint8_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint8_t&gt;());</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            fill&lt;uint8_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_u8);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        }</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        {</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            std::uniform_int_distribution&lt;int8_t&gt; distribution_s8(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int8_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int8_t&gt;());</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            fill&lt;int8_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_s8);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        {</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            std::uniform_int_distribution&lt;uint16_t&gt; distribution_u16(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint16_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint16_t&gt;());</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            fill&lt;uint16_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_u16);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        }</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        {</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            std::uniform_int_distribution&lt;int16_t&gt; distribution_s16(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int16_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int16_t&gt;());</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            fill&lt;int16_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_s16);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u32(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint32_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint32_t&gt;());</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            fill&lt;uint32_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_u32);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        }</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        {</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s32(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int32_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int32_t&gt;());</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            fill&lt;int32_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_s32);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        }</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        {</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            std::uniform_int_distribution&lt;uint64_t&gt; distribution_u64(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint64_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint64_t&gt;());</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            fill&lt;uint64_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_u64);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        }</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        {</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            std::uniform_int_distribution&lt;int64_t&gt; distribution_s64(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int64_t&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int64_t&gt;());</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            fill&lt;int64_t&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_s64);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        }</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        {</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit&lt;half&gt;</a> distribution_f16(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">float</span>&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">float</span>&gt;());</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            fill&lt;half&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_f16);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        }</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        {</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f32(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">float</span>&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">float</span>&gt;());</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            fill&lt;float&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_f32);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        }</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        {</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            std::uniform_real_distribution&lt;double&gt; distribution_f64(_lower.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">double</span>&gt;(), _upper.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">double</span>&gt;());</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            fill&lt;double&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, distribution_f64);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;}</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">  775</a></span>&#160;<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">NumPyBinLoader::NumPyBinLoader</a>(std::string filename, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> file_layout)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    : _already_loaded(false), _filename(<a class="code" href="namespacestd.xhtml">std</a>::move(filename)), _file_layout(file_layout)</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;{</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;}</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">  780</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">NumPyBinLoader::access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;{</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keywordflow">if</span>(!_already_loaded)</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    {</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">utils::NPYLoader</a> loader;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        loader.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a739fd000f9e30bbc875cb48a9c6edab1">open</a>(_filename, _file_layout);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        loader.<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">fill_tensor</a>(tensor);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    }</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    _already_loaded = !_already_loaded;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keywordflow">return</span> _already_loaded;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml_a33469b1a330d6553d12c0de0c2d8ab6d"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#a33469b1a330d6553d12c0de0c2d8ab6d">arm_compute::graph_utils::SaveNumPyAccessor::SaveNumPyAccessor</a></div><div class="ttdeci">SaveNumPyAccessor(const std::string npy_name, const bool is_fortran=false)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00244">GraphUtils.cpp:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_image_accessor_xhtml_a872e7ef3563a74e35a6912d12706c012"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#a872e7ef3563a74e35a6912d12706c012">arm_compute::graph_utils::ImageAccessor::ImageAccessor</a></div><div class="ttdeci">ImageAccessor(std::string filename, bool bgr=true, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00258">GraphUtils.cpp:258</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01110">helpers.h:1110</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a301d0b7bfd70f73fc1924f4281938d08"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">arm_compute::utils::save_to_ppm</a></div><div class="ttdeci">void save_to_ppm(T &amp;tensor, const std::string &amp;ppm_filename)</div><div class="ttdoc">Template helper function to save a tensor image to a PPM file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00506">Utils.h:506</a></div></div>
<div class="ttc" id="_sub_tensor_8h_xhtml"><div class="ttname"><a href="_sub_tensor_8h.xhtml">SubTensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format. </div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00034">PixelValue.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">arm_compute::utils::JPEGLoader</a></div><div class="ttdoc">Class to load the content of a JPEG file into an Image. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00432">ImageLoader.h:432</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::TopNPredictionsAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00646">GraphUtils.cpp:646</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_adbd73147d41e8a640bc299d12613c31e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">arm_compute::ITensor::ptr_to_element</a></div><div class="ttdeci">uint8_t * ptr_to_element(const Coordinates &amp;id) const</div><div class="ttdoc">Return a pointer to the element at the passed coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00063">ITensor.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a3fc6adad84b23f10d54d5a7b6928f872"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a3fc6adad84b23f10d54d5a7b6928f872">arm_compute::TensorAllocator::init</a></div><div class="ttdeci">void init(const TensorAllocator &amp;allocator, const Coordinates &amp;coords, TensorInfo &amp;sub_info)</div><div class="ttdoc">Shares the same backing memory with another tensor allocator, while the tensor info might be differen...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator.cpp:107</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00268">Types.h:268</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::NumPyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00211">GraphUtils.cpp:211</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pixel_value_xhtml_a66c4c1f8b1962d71162d7ac0b3ef65bc"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">arm_compute::PixelValue::get</a></div><div class="ttdeci">void get(uint8_t &amp;v) const</div><div class="ttdoc">Interpret the pixel value as a U8. </div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00244">PixelValue.h:244</a></div></div>
<div class="ttc" id="_error_8h_xhtml_ac75ba282eb0cacd31fd4c6e6a47dbbc8"><div class="ttname"><a href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_EXIT_ON_MSG_VAR(cond, msg,...)</div><div class="ttdoc">If the condition is true, the given message is printed and program exits. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00395">Error.h:395</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a055a51a536088065021a54e13968521d"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">arm_compute::utils::NPYLoader::fill_tensor</a></div><div class="ttdeci">void fill_tensor(T &amp;tensor)</div><div class="ttdoc">Fill a tensor with the content of the currently open NPY file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00365">Utils.h:365</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::NumPyBinLoader::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00780">GraphUtils.cpp:780</a></div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ac3ae33bed176ca84786a8c910c3072c9"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ac3ae33bed176ca84786a8c910c3072c9">arm_compute::graph_utils::ValidationOutputAccessor::ValidationOutputAccessor</a></div><div class="ttdeci">ValidationOutputAccessor(const std::string &amp;image_list, std::ostream &amp;output_stream=std::cout, unsigned int start=0, unsigned int end=0)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00389">GraphUtils.cpp:389</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_image_loader_factory_xhtml_ada8c92fe057e34525e7f8c4e8e422179"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#ada8c92fe057e34525e7f8c4e8e422179">arm_compute::utils::ImageLoaderFactory::create</a></div><div class="ttdeci">static std::unique_ptr&lt; IImageLoader &gt; create(const std::string &amp;filename)</div><div class="ttdoc">Create an image loader depending on the image type. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00509">ImageLoader.h:509</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor_xhtml_a1545d087d050b8e9733e7e212df73666"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">arm_compute::graph_utils::CaffePreproccessor::preprocess</a></div><div class="ttdeci">void preprocess(ITensor &amp;tensor) override</div><div class="ttdoc">Preprocess the given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00110">GraphUtils.cpp:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_random_accessor_xhtml_a47e2e3f731e842dde7baaf69634a9530"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#a47e2e3f731e842dde7baaf69634a9530">arm_compute::graph_utils::RandomAccessor::RandomAccessor</a></div><div class="ttdeci">RandomAccessor(PixelValue lower, PixelValue upper, const std::random_device::result_type seed=0)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00666">GraphUtils.cpp:666</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a7c3f70e1caee95bb95c62346e130e5ab"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7c3f70e1caee95bb95c62346e130e5ab">arm_compute::utils::IImageLoader::fill_planar_tensor</a></div><div class="ttdeci">void fill_planar_tensor(T &amp;tensor, bool bgr=false)</div><div class="ttdoc">Fill a tensor with 3 planes (one for each channel) with the content of the currently open image file...</div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00257">ImageLoader.h:257</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor&amp;#39;s dimensions to fill the window dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00276">Window.inl:276</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_save_num_py_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::SaveNumPyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00249">GraphUtils.cpp:249</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a74dfd07380a290c34fe7c8e065029b95"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">arm_compute::ITensorInfo::valid_region</a></div><div class="ttdeci">virtual ValidRegion valid_region() const =0</div><div class="ttdoc">Valid region of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a47d74e4e51f9b1a636c4831bd747a97c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">arm_compute::Tensor::info</a></div><div class="ttdeci">ITensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00033">Tensor.cpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">Helpers.h:125</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_validation_input_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ValidationInputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00344">GraphUtils.cpp:344</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdoc">signed 64-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1_sub_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_sub_tensor.xhtml">arm_compute::SubTensor</a></div><div class="ttdoc">Basic implementation of the sub-tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_sub_tensor_8h_source.xhtml#l00037">SubTensor.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit</a></div><div class="ttdoc">Specialized class to generate random non-zero FP16 values. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00254">Utils.h:254</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a70b6e1495b94818cce4981dbac6bdd66"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">arm_compute::TensorInfo::set_data_layout</a></div><div class="ttdeci">ITensorInfo &amp; set_data_layout(const DataLayout &amp;data_layout) override</div><div class="ttdoc">Set the data layout of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00386">TensorInfo.cpp:386</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">arm_compute::graph_utils::NumPyBinLoader</a></div><div class="ttdoc">Numpy Binary loader class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00432">GraphUtils.h:432</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a292b758f9eba8b487d71eae4b37326fc"><div class="ttname"><a href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_EXIT_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, the given message is printed and program exits. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00379">Error.h:379</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml_a27dfee7cd6e032a9d766786a8e1e3c8f"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#a27dfee7cd6e032a9d766786a8e1e3c8f">arm_compute::graph_utils::DetectionOutputAccessor::DetectionOutputAccessor</a></div><div class="ttdeci">DetectionOutputAccessor(const std::string &amp;labels_path, std::vector&lt; TensorShape &gt; &amp;imgs_tensor_shapes, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00518">GraphUtils.cpp:518</a></div></div>
<div class="ttc" id="_graph_utils_8h_xhtml"><div class="ttname"><a href="_graph_utils_8h.xhtml">GraphUtils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a48c0efb64637ab6e965b32d7c683efe9"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">arm_compute::utils::save_to_npy</a></div><div class="ttdeci">void save_to_npy(T &amp;tensor, const std::string &amp;npy_filename, bool fortran_order)</div><div class="ttdoc">Template helper function to save a tensor image to a NPY file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00586">Utils.h:586</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_random_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::RandomAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00698">GraphUtils.cpp:698</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a87f09c74765be18a99038478f96daf9b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">arm_compute::test::validation::reference::range</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; range(SimpleTensor&lt; T &gt; &amp;dst, float start, const size_t num_of_elements, float step)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_range_8cpp_source.xhtml#l00050">Range.cpp:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_affa064ad4776fa095844d632c04156f5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#affa064ad4776fa095844d632c04156f5">arm_compute::graph_utils::DummyAccessor::access_tensor_data</a></div><div class="ttdeci">bool access_tensor_data() override</div><div class="ttdoc">Returns true if the tensor data is being accessed. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00165">GraphUtils.cpp:165</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">arm_compute::utils::NPYLoader</a></div><div class="ttdoc">Numpy data loader. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00284">Utils.h:284</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml">arm_compute::IOFormatInfo</a></div><div class="ttdoc">IO formatting information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02642">Types.h:2642</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a7f0f3e5dd09a150b2cc221c01804d1a7"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7f0f3e5dd09a150b2cc221c01804d1a7">arm_compute::utils::IImageLoader::width</a></div><div class="ttdeci">unsigned int width() const</div><div class="ttdoc">Return the width of the currently open image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00137">ImageLoader.h:137</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ab988210662dbd3bf32fd563c7dd1bdbf"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">arm_compute::ITensor::buffer</a></div><div class="ttdeci">virtual uint8_t * buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator.cpp:132</a></div></div>
<div class="ttc" id="_image_loader_8h_xhtml"><div class="ttname"><a href="_image_loader_8h.xhtml">ImageLoader.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a0fdcb923dfd4c74858cc2bc326321efb"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0fdcb923dfd4c74858cc2bc326321efb">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const</div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00172">TensorShape.h:172</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::ITensorInfo::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Element size in bytes calculated as data_size() * num_channels() </div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a07b929c34ad1dc823d8315876aa403ce"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">arm_compute::ITensorInfo::padding</a></div><div class="ttdeci">virtual PaddingSize padding() const =0</div><div class="ttdoc">Padding of tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml_ad12e8048537cfc3c0d1935aa0e63a1ee"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml#ad12e8048537cfc3c0d1935aa0e63a1ee">arm_compute::graph_utils::NumPyAccessor::NumPyAccessor</a></div><div class="ttdeci">NumPyAccessor(std::string npy_path, TensorShape shape, DataType data_type, DataLayout data_layout=DataLayout::NCHW, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00185">GraphUtils.cpp:185</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml_ad12f4e3c945ec4fad9ab6386954a3550"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml#ad12f4e3c945ec4fad9ab6386954a3550">arm_compute::graph_utils::TopNPredictionsAccessor::TopNPredictionsAccessor</a></div><div class="ttdeci">TopNPredictionsAccessor(const std::string &amp;labels_path, size_t top_n=5, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00589">GraphUtils.cpp:589</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00786">Validate.h:786</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_print_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::PrintAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ad0bd5cc32e7e4c0699eccba91e5de397"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">arm_compute::ITensorInfo::offset_first_element_in_bytes</a></div><div class="ttdeci">virtual size_t offset_first_element_in_bytes() const =0</div><div class="ttdoc">The offset from the beginning of the memory allocation to the first element of the tensor...</div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_image_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_image_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ImageAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00263">GraphUtils.cpp:263</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::ValidationOutputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00432">GraphUtils.cpp:432</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor_xhtml_a1545d087d050b8e9733e7e212df73666"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#a1545d087d050b8e9733e7e212df73666">arm_compute::graph_utils::TFPreproccessor::preprocess</a></div><div class="ttdeci">void preprocess(ITensor &amp;tensor) override</div><div class="ttdoc">Preprocess the given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00069">GraphUtils.cpp:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00044">GraphUtils.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_afaafdfc441c2433c70959e3dfe46fd97"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">arm_compute::BorderSize::empty</a></div><div class="ttdeci">constexpr bool empty() const</div><div class="ttdoc">Check if the entire border is zero. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00317">Types.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00193">Helpers.inl:193</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::PPMWriter::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00145">GraphUtils.cpp:145</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor_xhtml_ab58008704726cd07353605b1d9e13d86"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.xhtml#ab58008704726cd07353605b1d9e13d86">arm_compute::graph_utils::TFPreproccessor::TFPreproccessor</a></div><div class="ttdeci">TFPreproccessor(float min_range=-1.f, float max_range=1.f)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00065">GraphUtils.cpp:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a739fd000f9e30bbc875cb48a9c6edab1"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a739fd000f9e30bbc875cb48a9c6edab1">arm_compute::utils::NPYLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;npy_filename, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Open a NPY file and reads its metadata. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00298">Utils.h:298</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_detection_output_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_detection_output_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::DetectionOutputAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00573">GraphUtils.cpp:573</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_validation_output_accessor_xhtml_ad20897c5c8bd47f5d4005989bead0e55"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_output_accessor.xhtml#ad20897c5c8bd47f5d4005989bead0e55">arm_compute::graph_utils::ValidationOutputAccessor::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdoc">Reset accessor state. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00425">GraphUtils.cpp:425</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_ac5ae9597ba20e5581726743fe7c154b5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ac5ae9597ba20e5581726743fe7c154b5">arm_compute::graph_utils::DummyAccessor::DummyAccessor</a></div><div class="ttdeci">DummyAccessor(unsigned int maximum=1)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00160">GraphUtils.cpp:160</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ade74189c92e70baa2848986c10dbe7ef"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">arm_compute::ITensor::print</a></div><div class="ttdeci">void print(std::ostream &amp;s, IOFormatInfo io_fmt=IOFormatInfo()) const</div><div class="ttdoc">Print a tensor to a given stream using user defined formatting information. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00092">Dimensions.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_a9ea94bf5b7d00ddb836df1b8dcedb93a"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">arm_compute::graph_utils::PPMWriter::PPMWriter</a></div><div class="ttdeci">PPMWriter(std::string name, unsigned int maximum=1)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00140">GraphUtils.cpp:140</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::DummyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00170">GraphUtils.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdoc">64-bit floating-point number </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_print_accessor_xhtml_a860434850cdbef7332fb2c0de7606fcd"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_print_accessor.xhtml#a860434850cdbef7332fb2c0de7606fcd">arm_compute::graph_utils::PrintAccessor::PrintAccessor</a></div><div class="ttdeci">PrintAccessor(std::ostream &amp;output_stream=std::cout, IOFormatInfo io_fmt=IOFormatInfo())</div><div class="ttdoc">Constructor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdoc">unsigned 64-bit number </div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae70b8de3a0b147a476cabb07b8707d7f"><div class="ttname"><a href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">arm_compute::swap</a></div><div class="ttdeci">void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00304">Window.inl:304</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml_abf92dad7656a4a25c3aa3d1112ef06e5"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml#abf92dad7656a4a25c3aa3d1112ef06e5">arm_compute::graph_utils::NumPyBinLoader::NumPyBinLoader</a></div><div class="ttdeci">NumPyBinLoader(std::string filename, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00775">GraphUtils.cpp:775</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_adc7679009b582b99d859c0edfc35aa4a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#adc7679009b582b99d859c0edfc35aa4a">arm_compute::utils::IImageLoader::height</a></div><div class="ttdeci">unsigned int height() const</div><div class="ttdoc">Return the height of the currently open image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00142">ImageLoader.h:142</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_validation_input_accessor_xhtml_a458082188f9eec9fdf459f508d64d9be"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_validation_input_accessor.xhtml#a458082188f9eec9fdf459f508d64d9be">arm_compute::graph_utils::ValidationInputAccessor::ValidationInputAccessor</a></div><div class="ttdeci">ValidationInputAccessor(const std::string &amp;image_list, std::string images_path, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr, bool bgr=true, unsigned int start=0, unsigned int end=0, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00306">GraphUtils.cpp:306</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor_xhtml_a17f1b10d24fd28928777ee5c62c9cbfb"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.xhtml#a17f1b10d24fd28928777ee5c62c9cbfb">arm_compute::graph_utils::CaffePreproccessor::CaffePreproccessor</a></div><div class="ttdeci">CaffePreproccessor(std::array&lt; float, 3 &gt; mean=std::array&lt; float, 3 &gt; { { 0, 0, 0 } }, bool bgr=true, float scale=1.f)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00101">GraphUtils.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_ab23b23a466d459ecbad7d046bb085324"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">arm_compute::utils::JPEGLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;filename) override</div><div class="ttdoc">Open an image file and reads its metadata (Width, height) </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00456">ImageLoader.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="_graph_utils_8cpp.xhtml">GraphUtils.cpp</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
