<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/assembly/gemm_common.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm__common_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_common.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__common_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="convolution__parameters_8hpp.xhtml">convolution_parameters.hpp</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ndrange_8hpp.xhtml">ndrange.hpp</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// Avoid circular dependency with arm_gemm.hpp</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">struct </span>GemmConfig;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// Abstract class for the GEMM/GEMV functions.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// GEMM implementations may be &quot;native&quot; (never require any input</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// permutation), &quot;pretransposed&quot; (require permutation up-front) or require</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// working space (permute as they go along).  This interface should support</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// all of them.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// The real GemmCommon class is templated based on the operand and return</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// type.  This is an interface class which is independent of those types.</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml">IGemmCommon</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">/* Pass in the pointers to the arrays to be operated on and their</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     * strides.  This &quot;generic&quot; version uses void *s, the preferred version</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * is the one provided by templated GemmCommon (below) which takes</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * appropriately typed pointers.  If B is pretransposed (see below) then</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     * the settings for B here are ignored.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#aa21ed4f40e7bd4282b205ea4fd1d75d7">set_arrays_generic</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *A, <span class="keyword">const</span> <span class="keywordtype">int</span> lda, <span class="keyword">const</span> <span class="keywordtype">int</span> A_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> A_multi_stride,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">void</span> *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="comment">/* batches share B */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                    <span class="keywordtype">void</span> *C, <span class="keyword">const</span> <span class="keywordtype">int</span> ldc, <span class="keyword">const</span> <span class="keywordtype">int</span> C_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> C_multi_stride,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">void</span> *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="comment">/* no row or batch stride needed */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> bias_multi_stride) = 0;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /** @returns an ndrange containing ranges of the compute space which can be</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * broken up and parallelised over</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">ndrange_t</a> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a06ec4bc84b2197e53f665ac9a31df52e">get_window_size</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">/* The maximum thread count is specified when the GEMM is created.  Some</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * implementations need to know how many threads will actually run in</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * order to work properly.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * In some cases, after creating the GEMM the number of threads needs to</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * be reduced (e.g. not enough work to split across threads).  This</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * method allows the number of actual threads to be run to be set (must</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * be equal or lower).</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * This has an empty default implementation, as GEMMs which don&#39;t care</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     * about thread count can safely ignore this.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">   76</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">set_nthreads</a>(<span class="keywordtype">int</span>) {};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">/* Whether this GEMM can be dynamically scheduled or not. */</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">   79</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">supports_dynamic_scheduling</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">    /** Main execute member fucntion</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * @param [in] work_range     specifies the range of work we want to be computed, total range defined by get_window_size()</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * @param [in] thread_locator where are we inside of the thread space</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     * @param [in] threadid       a unique threadid</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a7686815e0e1a7ed5d703a2f85ecd3b65">execute</a>(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;work_range, <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;thread_locator, <span class="keywordtype">int</span> threadid) = 0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">/*** Working space interface (optional) ***/</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">/* Total number of bytes of temporary working space needed.  If zero, it&#39;s not necessary to call set_working_space(). */</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">   93</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">get_working_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">/* Provide working space buffer - the void * passed in must remain allocated for the duration of any execute calls. */</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">   98</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">set_working_space</a>(<span class="keywordtype">void</span> *) {};</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">/*** &quot;Pretransposed&quot; interface (optional) ***/</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">/* Is this object set up for pretranspose?  If so, pretranspose_array() needs to be called before execute(); */</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">  102</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">B_is_pretransposed</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">/* Does pretranspose still need to be done? */</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">  107</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">B_pretranspose_required</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">/* Total number of bytes of space needed for pretransposed arrays. */</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">  112</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">get_B_pretransposed_array_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">/* Perform pretranspose - arguments are output, input, input row stride and input multi stride. */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">/* The &quot;real&quot; version of this depends on the templated operand type (see below).  */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a56e22f79e63a74948ea7a4eeec01a6c6">pretranspose_B_array_generic</a>(<span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">int</span>, <span class="keyword">const</span> <span class="keywordtype">int</span>) = 0;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">/* Set pretransposed data - the void * passed in must previously have been passed to pretranspose_B_array() for the same or a similar GEMM. */</span></div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">  120</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">set_pretransposed_B_data</a>(<span class="keywordtype">void</span> *)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">/*** &quot;Quantized bias&quot; interface (optional) ***/</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">/* Set the bias vector for quantized GEMMs */</span></div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">  126</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">set_quantized_bias</a>(<span class="keyword">const</span> int32_t *, <span class="keywordtype">size_t</span>)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">/*** Indirect interface (optional) ***/</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">/* Set the indirect table.  This comprises a number of values per kernel point, and a densely packed array of pointers,</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * multis * batches * kernel_points */</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a40f2d61f10ba1f7f4d80e6569ed189e2">  133</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a40f2d61f10ba1f7f4d80e6569ed189e2">set_indirect_parameters_generic</a>(<span class="keywordtype">size_t</span>, <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> *<span class="keyword">const</span> *)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">/*** Convolution interface (optional) ***/</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">/* Set the convolution parameters. */</span></div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">  139</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">set_convolution_parameters</a>(<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">/*** Introspection interface ***/</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">/* Get the configuration of this GEMM */</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9a7fd4eeb44e91ea8f8ed53d21b9691f">get_config</a>() = 0;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Destructor</span></div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">  148</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">~IGemmCommon</a>()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">/* &quot;Real&quot; GemmCommon class which is templated on the operand and return types.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * In addition to correctly typed versions of the functions that operate on</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * operand and return data, this class provides a default implementation of</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * &#39;set_arrays&#39; to capture the provided arguments in protected class</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * members, as essentially any implementation will need these.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml">  161</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon</a> : <span class="keyword">public</span> <a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml">IGemmCommon</a></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> To *_Aptr              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">int</span>       _lda               = 0;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">int</span>       _A_batch_stride    = 0;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">int</span>       _A_multi_stride    = 0;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> To *_Bptr              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">int</span>       _ldb               = 0;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">int</span>       _B_multi_stride    = 0;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    Tr       *_Cptr              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">int</span>       _ldc               = 0;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">int</span>       _C_batch_stride    = 0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">int</span>       _C_multi_stride    = 0;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> Tr *_bias              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">int</span>       _bias_multi_stride = 0;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">/* Pass in the pointers to the arrays to be operated on and their</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * strides (templated version with appropriate types). */</span></div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">  181</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">set_arrays</a>(<span class="keyword">const</span> To *A, <span class="keyword">const</span> <span class="keywordtype">int</span> lda, <span class="keyword">const</span> <span class="keywordtype">int</span> A_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> A_multi_stride,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                            <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="comment">/* batches share B */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                            Tr *C, <span class="keyword">const</span> <span class="keywordtype">int</span> ldc, <span class="keyword">const</span> <span class="keywordtype">int</span> C_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> C_multi_stride,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                            <span class="keyword">const</span> Tr *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="comment">/* no row or batch stride needed */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> bias_multi_stride)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        _Aptr              = A;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        _lda               = lda;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        _A_batch_stride    = A_batch_stride;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        _A_multi_stride    = A_multi_stride;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        _Bptr              = B;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        _ldb               = ldb;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        _B_multi_stride    = B_multi_stride;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        _Cptr              = C;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        _ldc               = ldc;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        _C_batch_stride    = C_batch_stride;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        _C_multi_stride    = C_multi_stride;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        _bias              = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        _bias_multi_stride = bias_multi_stride;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">/* Implementation of the void * overload which casts its arguments to the appropriate type. */</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">  202</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">set_arrays_generic</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *A, <span class="keyword">const</span> <span class="keywordtype">int</span> lda, <span class="keyword">const</span> <span class="keywordtype">int</span> A_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> A_multi_stride,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">void</span> *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="comment">/* batches share B */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            <span class="keywordtype">void</span> *C, <span class="keyword">const</span> <span class="keywordtype">int</span> ldc, <span class="keyword">const</span> <span class="keywordtype">int</span> C_batch_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> C_multi_stride,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">void</span> *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="comment">/* no row or batch stride needed */</span> <span class="keyword">const</span> <span class="keywordtype">int</span> bias_multi_stride)<span class="keyword"> override</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        set_arrays(static_cast&lt;const To *&gt;(A), lda, A_batch_stride, A_multi_stride,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                   static_cast&lt;const To *&gt;(B), ldb, B_multi_stride,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                   static_cast&lt;Tr *&gt;(C), ldc, C_batch_stride, C_multi_stride,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                   static_cast&lt;const Tr *&gt;(bias), bias_multi_stride);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">/*** &quot;Pretransposed&quot; interface ***/</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">/* Compute col sums over all columns */</span></div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">  216</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">requantize_bias</a>(<span class="keywordtype">void</span> *, <span class="keyword">const</span> To *, <span class="keyword">const</span> <span class="keywordtype">int</span>, <span class="keyword">const</span> <span class="keywordtype">int</span>) {};</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">/* Perform pretranspose - the void * passed in must remain allocated for the duration of any execute calls. */</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">/* Arguments are: output buffer pointer, source pointer, source row stride, source multi stride */</span></div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#abcc95242f389687b72fa2ec63faec7e3">  220</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#abcc95242f389687b72fa2ec63faec7e3">pretranspose_B_array</a>(<span class="keywordtype">void</span> *, <span class="keyword">const</span> To *, <span class="keyword">const</span> <span class="keywordtype">int</span>, <span class="keyword">const</span> <span class="keywordtype">int</span>) {};</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">/* Implementation of the void * overload which casts its arguments to the appropriate type. */</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#a06d4b10407385edb146b05c9df9a9f4b">  223</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a06d4b10407385edb146b05c9df9a9f4b">pretranspose_B_array_generic</a>(<span class="keywordtype">void</span> *out, <span class="keyword">const</span> <span class="keywordtype">void</span> *in, <span class="keyword">const</span> <span class="keywordtype">int</span> row_stride, <span class="keyword">const</span> <span class="keywordtype">int</span> multi_stride)<span class="keyword"> override</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        pretranspose_B_array(out, static_cast&lt;const To *&gt;(in), row_stride, multi_stride);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">/*** Indirect interface ***/</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">  229</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">set_indirect_parameters</a>(<span class="keywordtype">size_t</span>, <span class="keyword">const</span> To *<span class="keyword">const</span> *<span class="keyword">const</span> *)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">  233</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">set_indirect_parameters_generic</a>(<span class="keywordtype">size_t</span> sz, <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> *<span class="keyword">const</span> *ptr)<span class="keyword"> override</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        set_indirect_parameters(sz, reinterpret_cast&lt;const To *const *const *&gt;(ptr));</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;};</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a61189e875b30e38a11a1f8fe21e3e939"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">arm_gemm::GemmCommon::set_indirect_parameters</a></div><div class="ttdeci">virtual void set_indirect_parameters(size_t, const To *const *const *)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00229">gemm_common.hpp:229</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_abcc95242f389687b72fa2ec63faec7e3"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#abcc95242f389687b72fa2ec63faec7e3">arm_gemm::GemmCommon::pretranspose_B_array</a></div><div class="ttdeci">virtual void pretranspose_B_array(void *, const To *, const int, const int)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00220">gemm_common.hpp:220</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a5fc4bc4ac3708ea77593ac974cabd426"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">arm_gemm::GemmCommon::set_indirect_parameters_generic</a></div><div class="ttdeci">void set_indirect_parameters_generic(size_t sz, const void *const *const *ptr) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00233">gemm_common.hpp:233</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a56e22f79e63a74948ea7a4eeec01a6c6"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a56e22f79e63a74948ea7a4eeec01a6c6">arm_gemm::IGemmCommon::pretranspose_B_array_generic</a></div><div class="ttdeci">virtual void pretranspose_B_array_generic(void *, const void *, const int, const int)=0</div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a40f2d61f10ba1f7f4d80e6569ed189e2"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a40f2d61f10ba1f7f4d80e6569ed189e2">arm_gemm::IGemmCommon::set_indirect_parameters_generic</a></div><div class="ttdeci">virtual void set_indirect_parameters_generic(size_t, const void *const *const *)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00133">gemm_common.hpp:133</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml">arm_gemm::IGemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00045">gemm_common.hpp:45</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a7686815e0e1a7ed5d703a2f85ecd3b65"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a7686815e0e1a7ed5d703a2f85ecd3b65">arm_gemm::IGemmCommon::execute</a></div><div class="ttdeci">virtual void execute(const ndcoord_t &amp;work_range, const ndcoord_t &amp;thread_locator, int threadid)=0</div><div class="ttdoc">Main execute member fucntion. </div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a5e424d4bc279d4bb932d2a26f66ec418"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">arm_gemm::IGemmCommon::set_working_space</a></div><div class="ttdeci">virtual void set_working_space(void *)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00098">gemm_common.hpp:98</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a7c4f4f6a90ff91f2c2ae9a954446a762"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">arm_gemm::GemmCommon::requantize_bias</a></div><div class="ttdeci">virtual void requantize_bias(void *, const To *, const int, const int)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00216">gemm_common.hpp:216</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_ab091a53dc98522e74b3e2a4d9020d76c"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">arm_gemm::IGemmCommon::set_quantized_bias</a></div><div class="ttdeci">virtual void set_quantized_bias(const int32_t *, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00126">gemm_common.hpp:126</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00106">arm_gemm.hpp:106</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a59b3ebe4dbba64c14fa99d8367bfb3c9"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">arm_gemm::IGemmCommon::B_pretranspose_required</a></div><div class="ttdeci">virtual bool B_pretranspose_required() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00107">gemm_common.hpp:107</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_aeb17b9ef6dcfb2ab257c5a8290fac666"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">arm_gemm::IGemmCommon::set_pretransposed_B_data</a></div><div class="ttdeci">virtual void set_pretransposed_B_data(void *)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00120">gemm_common.hpp:120</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a06d4b10407385edb146b05c9df9a9f4b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a06d4b10407385edb146b05c9df9a9f4b">arm_gemm::GemmCommon::pretranspose_B_array_generic</a></div><div class="ttdeci">void pretranspose_B_array_generic(void *out, const void *in, const int row_stride, const int multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00223">gemm_common.hpp:223</a></div></div>
<div class="ttc" id="convolution__parameters_8hpp_xhtml"><div class="ttname"><a href="convolution__parameters_8hpp.xhtml">convolution_parameters.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a9992ba5ca09abf7df2927b433e869bb5"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">arm_gemm::IGemmCommon::B_is_pretransposed</a></div><div class="ttdeci">virtual bool B_is_pretransposed() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00102">gemm_common.hpp:102</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a8d067226d7026bb265784e14b45f2890"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">arm_gemm::IGemmCommon::~IGemmCommon</a></div><div class="ttdeci">virtual ~IGemmCommon()</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00148">gemm_common.hpp:148</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_ab32fbd73de4fd392a14b674fbcbd6e7f"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">arm_gemm::IGemmCommon::get_B_pretransposed_array_size</a></div><div class="ttdeci">virtual size_t get_B_pretransposed_array_size() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00112">gemm_common.hpp:112</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_ab0a90e40986e0daec072bfbfb89aa17d"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">arm_gemm::IGemmCommon::get_working_size</a></div><div class="ttdeci">virtual size_t get_working_size() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00093">gemm_common.hpp:93</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00161">gemm_common.hpp:161</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a568b1d289dcf3226443fd87e8a261f91"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">arm_gemm::IGemmCommon::set_nthreads</a></div><div class="ttdeci">virtual void set_nthreads(int)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00076">gemm_common.hpp:76</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a9a7fd4eeb44e91ea8f8ed53d21b9691f"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a9a7fd4eeb44e91ea8f8ed53d21b9691f">arm_gemm::IGemmCommon::get_config</a></div><div class="ttdeci">virtual GemmConfig get_config()=0</div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a2b4d3fc2c5f4a97d8233231161abfc5e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">arm_gemm::GemmCommon::set_arrays_generic</a></div><div class="ttdeci">void set_arrays_generic(const void *A, const int lda, const int A_batch_stride, const int A_multi_stride, const void *B, const int ldb, const int B_multi_stride, void *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const void *bias, const int bias_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00202">gemm_common.hpp:202</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00048">convolution_parameters.hpp:48</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_af6a736f1b9e80d533bd557d0fb5748bb"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">arm_gemm::GemmCommon::set_arrays</a></div><div class="ttdeci">virtual void set_arrays(const To *A, const int lda, const int A_batch_stride, const int A_multi_stride, const To *B, const int ldb, const int B_multi_stride, Tr *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const Tr *bias, const int bias_multi_stride)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00181">gemm_common.hpp:181</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_af320ce710c0547bedf4f2a6f8387d396"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">arm_gemm::IGemmCommon::supports_dynamic_scheduling</a></div><div class="ttdeci">virtual bool supports_dynamic_scheduling() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00079">gemm_common.hpp:79</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a06ec4bc84b2197e53f665ac9a31df52e"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a06ec4bc84b2197e53f665ac9a31df52e">arm_gemm::IGemmCommon::get_window_size</a></div><div class="ttdeci">virtual ndrange_t get_window_size() const =0</div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml">arm_gemm::NDCoordinate</a></div><div class="ttdoc">NDCoordinate builds upon a range, but specifies a starting position in addition to a size which it in...</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00151">ndrange.hpp:151</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml">arm_gemm::NDRange</a></div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00034">ndrange.hpp:34</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_aaabbf2723a390d8e7f859c70aea256a8"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">arm_gemm::IGemmCommon::set_convolution_parameters</a></div><div class="ttdeci">virtual void set_convolution_parameters(ConvolutionParameters)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00139">gemm_common.hpp:139</a></div></div>
<div class="ttc" id="ndrange_8hpp_xhtml"><div class="ttname"><a href="ndrange_8hpp.xhtml">ndrange.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_aa21ed4f40e7bd4282b205ea4fd1d75d7"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#aa21ed4f40e7bd4282b205ea4fd1d75d7">arm_gemm::IGemmCommon::set_arrays_generic</a></div><div class="ttdeci">virtual void set_arrays_generic(const void *A, const int lda, const int A_batch_stride, const int A_multi_stride, const void *B, const int ldb, const int B_multi_stride, void *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const void *bias, const int bias_multi_stride)=0</div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_7e0a188e879f4bc507eb0cc5f45552f2.xhtml">assembly</a></li><li class="navelem"><a class="el" href="gemm__common_8hpp.xhtml">gemm_common.hpp</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:42 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
