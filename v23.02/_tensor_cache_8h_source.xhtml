<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/TensorCache.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_cache_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TensorCache.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_cache_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_TENSOR_CACHE_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_TENSOR_CACHE_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_raw_tensor_8h.xhtml">RawTensor.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mutex_8h.xhtml">support/Mutex.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/** Stores @ref RawTensor categorised by the image they are created from</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * including name, format and channel.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">   42</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">TensorCache</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /** Search the cache for a tensor of created from the specified image and</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">     * format.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     * @param[in] key Key to look up the tensor. Consists of image name and format.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * @return The cached tensor matching the image name and format if found. A</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     *         nullptr otherwise.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> *<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">find</a>(std::tuple&lt;const std::string &amp;, Format&gt; key);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Search the cache for a tensor of created from the specified image,</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">     * format and channel.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * @param[in] key Key to look up the tensor. Consists of image name, format and channel.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @return The cached tensor matching the image name and format if found. A</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     *         nullptr otherwise.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> *<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">find</a>(std::tuple&lt;const std::string &amp;, Format, Channel&gt; key);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /** Add the given tensor to the cache. Can later be found under the given</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * image name and format.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * @param[in] key Key under which to store the tensor. Consists of image name and format.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * @param[in] raw Raw tensor to be stored.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * @return A reference to the cached tensor.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">add</a>(std::tuple&lt;const std::string &amp;, Format&gt; key, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /** Add the given tensor to the cache. Can later be found under the given</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * image name, format and channel.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * @param[in] key Key under which to store the tensor. Consists of image name, format and channel.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     * @param[in] raw Raw tensor to be stored.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * @return A reference to the cached tensor.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">add</a>(std::tuple&lt;const std::string &amp;, Format, Channel&gt; key, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">using</span> FormatMap  = std::map&lt;std::tuple&lt;std::string, Format&gt;, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&gt;;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">using</span> ChannelMap = std::map&lt;std::tuple&lt;std::string, Format, Channel&gt;, RawTensor&gt;;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    FormatMap          _raw_tensor_cache{};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    ChannelMap         _raw_tensor_channel_cache{};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a> _raw_tensor_cache_mutex{};</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a> _raw_tensor_channel_cache_mutex{};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">   95</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> *<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">TensorCache::find</a>(std::tuple&lt;const std::string &amp;, Format&gt; key)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> it = _raw_tensor_cache.find(key);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> it == _raw_tensor_cache.end() ? nullptr : &amp;it-&gt;second;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a77d062d1fc4b239c215c4534deee8a2f">  101</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> *<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">TensorCache::find</a>(std::tuple&lt;const std::string &amp;, Format, Channel&gt; key)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> it = _raw_tensor_channel_cache.find(key);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> it == _raw_tensor_channel_cache.end() ? nullptr : &amp;it-&gt;second;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">  107</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">TensorCache::add</a>(std::tuple&lt;const std::string &amp;, Format&gt; key, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::lock_guard&lt;arm_compute::Mutex&gt; lock(_raw_tensor_cache_mutex);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> std::get&lt;0&gt;(_raw_tensor_cache.emplace(std::move(key), std::move(raw)))-&gt;second;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a8a342abc82aa86a51f668dd6a7f89934">  113</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">TensorCache::add</a>(std::tuple&lt;const std::string &amp;, Format, Channel&gt; key, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::lock_guard&lt;arm_compute::Mutex&gt; lock(_raw_tensor_channel_cache_mutex);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> std::get&lt;0&gt;(_raw_tensor_channel_cache.emplace(std::move(key), std::move(raw)))-&gt;second;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_TENSOR_CACHE_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Subclass of SimpleTensor using uint8_t as value type. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00038">RawTensor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_tensor_cache_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">arm_compute::test::TensorCache</a></div><div class="ttdoc">Stores RawTensor categorised by the image they are created from including name, format and channel...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_cache_8h_source.xhtml#l00042">TensorCache.h:42</a></div></div>
<div class="ttc" id="_mutex_8h_xhtml"><div class="ttname"><a href="_mutex_8h.xhtml">Mutex.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_acded863dbfdd730829d4188d67eefcf0"><div class="ttname"><a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdoc">Wrapper of Mutex data-object. </div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00033">Mutex.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_tensor_cache_xhtml_a00b2f7f657ef8060c64fce93abac54e1"><div class="ttname"><a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#a00b2f7f657ef8060c64fce93abac54e1">arm_compute::test::TensorCache::add</a></div><div class="ttdeci">RawTensor &amp; add(std::tuple&lt; const std::string &amp;, Format &gt; key, RawTensor raw)</div><div class="ttdoc">Add the given tensor to the cache. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_cache_8h_source.xhtml#l00107">TensorCache.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_tensor_cache_xhtml_ab9838ae8ffe3b1f98e1330d3ee260f98"><div class="ttname"><a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#ab9838ae8ffe3b1f98e1330d3ee260f98">arm_compute::test::TensorCache::find</a></div><div class="ttdeci">RawTensor * find(std::tuple&lt; const std::string &amp;, Format &gt; key)</div><div class="ttdoc">Search the cache for a tensor of created from the specified image and format. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_cache_8h_source.xhtml#l00095">TensorCache.h:95</a></div></div>
<div class="ttc" id="_raw_tensor_8h_xhtml"><div class="ttname"><a href="_raw_tensor_8h.xhtml">RawTensor.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_tensor_cache_8h.xhtml">TensorCache.h</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:45 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
