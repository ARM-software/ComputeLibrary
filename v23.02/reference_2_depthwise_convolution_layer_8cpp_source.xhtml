<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/DepthwiseConvolutionLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('reference_2_depthwise_convolution_layer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DepthwiseConvolutionLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_depthwise_convolution_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_depthwise_convolution_layer_8h.xhtml">DepthwiseConvolutionLayer.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_convolution_layer_8h.xhtml">ConvolutionLayer.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_helpers_8h.xhtml">tests/validation/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_utils_8h.xhtml">tests/validation/reference/Utils.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utils_quantized_asymm_8h.xhtml">tests/validation/reference/UtilsQuantizedAsymm.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>reference</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/** Perform a depthwise convolution for floating-point types</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * - Three dimensions tensors</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * - Third dimention is number of channels</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * - Depths of input tensor and filter are equals</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * - Padding, stride and output shape &quot;match&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;SimpleTensor&lt;T&gt; depthwise_convolution_fp(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;weights, <span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;biases, <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> Size2D &amp;dilation, <span class="keyword">const</span> QuantizationInfo &amp;out_quant_info)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(out_quant_info);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    SimpleTensor&lt;T&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, src.data_type(), 1 };</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_width  = weights.shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_height = weights.shape().y();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_plane  = filter_width * filter_height;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>   = src.shape().x();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>  = src.shape().y();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>   = src.shape().z();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches   = src.shape().total_size() / (input_width * input_height * <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left = conv_info.pad_left();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top  = conv_info.pad_top();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> patch_width  = (filter_width + (dilation.x() - 1) * (filter_width - 1));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> patch_height = (filter_height + (dilation.y() - 1) * (filter_height - 1));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_half_width_floor  = patch_width / 2;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_half_height_floor = patch_height / 2;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> patch_half_width_ceil  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(patch_width / 2));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> patch_half_height_ceil = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(patch_height / 2));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> minimum_x = -pad_left + patch_half_width_floor;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> minimum_y = -pad_top + patch_half_height_floor;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> maximum_x = (conv_info.stride().first * (dst_shape[0] - 1));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> maximum_y = (conv_info.stride().second * (dst_shape[1] - 1));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> T border_value(0);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">int</span> out_pos = 0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; num_batches; ++r)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> z = 0; z &lt; <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>; ++z)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> out_z = z * depth_multiplier + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = minimum_y; y &lt;= minimum_y + maximum_y; y += conv_info.stride().second)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = minimum_x; x &lt;= minimum_x + maximum_x; x += conv_info.stride().first)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        Coordinates coords(static_cast&lt;int&gt;(x), static_cast&lt;int&gt;(y), static_cast&lt;int&gt;(z), static_cast&lt;int&gt;(r));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordtype">size_t</span>      filter_offset = filter_plane * out_z;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        T val(0);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = y - patch_half_height_floor; j &lt; y + patch_half_height_ceil; j += dilation.y())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = x - patch_half_width_floor; i &lt; x + patch_half_width_ceil; i += dilation.x())</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                            {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                coords.set(0, i);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                coords.set(1, j);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                val += *(weights.data() + filter_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">tensor_elem_at</a>(src, coords, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, border_value);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                ++filter_offset;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[out_pos++] = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T&gt;(val + *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(biases(Coordinates(out_z))));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">/** Perform a quantized depthwise convolution</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * - Three dimensions tensors</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * - Third dimention is number of channels</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * - Depths of input tensor and filter are equals</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * - Padding, stride and output shape &quot;match&quot;</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * - QASYMM8/QASYMM8_SIGNED input, output</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> * - QASYMM8/QASYMM8_SIGNED or QSYMM8_PER_CHANNEL filter</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW, <span class="keyword">typename</span> TB&gt;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;SimpleTensor&lt;T&gt; depthwise_convolution_quantized(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;src, <span class="keyword">const</span> SimpleTensor&lt;TW&gt; &amp;weights, <span class="keyword">const</span> SimpleTensor&lt;int32_t&gt; &amp;biases, <span class="keyword">const</span> TensorShape &amp;dst_shape,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                <span class="keyword">const</span> PadStrideInfo &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> Size2D &amp;dilation, <span class="keyword">const</span> QuantizationInfo &amp;out_quant_info)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// if no explicit quantization has been set you the same as src</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> QuantizationInfo &amp;dst_qinfo = out_quant_info.uniform().empty() ? src.quantization_info() : out_quant_info;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    SimpleTensor&lt;T&gt;         <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, src.data_type(), 1, dst_qinfo };</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Create reference</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   input_offset   = -src.quantization_info().uniform().offset;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> input_scale    = src.quantization_info().uniform().scale;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   weights_offset = -weights.quantization_info().uniform().offset;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   output_offset  = dst_qinfo.uniform().offset;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> output_scale   = dst_qinfo.uniform().scale;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; weights_scale_vec = weights.quantization_info().scale();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_width  = weights.shape().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_height = weights.shape().y();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> filter_plane  = filter_width * filter_height;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width   = src.shape().x();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_height  = src.shape().y();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_depth   = src.shape().z();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches   = src.shape().total_size() / (input_width * input_height * <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left = conv_info.pad_left();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top  = conv_info.pad_top();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> patch_width  = (filter_width + (dilation.x() - 1) * (filter_width - 1));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> patch_height = (filter_height + (dilation.y() - 1) * (filter_height - 1));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_half_width_floor  = patch_width / 2;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_half_height_floor = patch_height / 2;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> patch_half_width_ceil  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(patch_width / 2));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> patch_half_height_ceil = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(patch_height / 2));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> minimum_x = -pad_left + patch_half_width_floor;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> minimum_y = -pad_top + patch_half_height_floor;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> maximum_x = (conv_info.stride().first * (dst_shape[0] - 1));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> maximum_y = (conv_info.stride().second * (dst_shape[1] - 1));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_per_channel = <a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights.data_type());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max = std::numeric_limits&lt;T&gt;::max();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">int</span> out_pos = 0;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; num_batches; ++r)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> z = 0; z &lt; <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>; ++z)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0; m &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>     out_z    = z * depth_multiplier + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> int32_t bias_val = *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(biases(Coordinates(out_z)));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordtype">int</span>         output_multiplier = 0;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordtype">int</span>         output_shift      = 0;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> weights_scale     = (is_quantized_per_channel) ? weights_scale_vec[out_z] : weights_scale_vec[0];</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = input_scale * weights_scale / output_scale;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = minimum_y; y &lt;= minimum_y + maximum_y; y += conv_info.stride().second)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = minimum_x; x &lt;= minimum_x + maximum_x; x += conv_info.stride().first)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        Coordinates coords(x, y, z, r);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <span class="keywordtype">int</span>         filter_offset = filter_plane * out_z;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        int32_t val = 0;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = y - patch_half_height_floor; j &lt; y + patch_half_height_ceil; j += dilation.y())</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = x - patch_half_width_floor; i &lt; x + patch_half_width_ceil; i += dilation.x())</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                            {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                coords.set(0, i);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                coords.set(1, j);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> in_val = tensor_elem_at&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, coords, <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, -input_offset);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                <span class="keyword">const</span> TW   w_val  = *(weights.data() + filter_offset);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                val += (in_val + input_offset) * (w_val + weights_offset);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                ++filter_offset;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        val += bias_val;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <span class="comment">// Quantize down</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        val = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">quantize_down_scale_by_fixedpoint</a>(val, output_multiplier, output_shift, output_offset, min, max);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        <span class="comment">// Store the result</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[out_pos++] = val;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">  238</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">depthwise_convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> depthwise_convolution_fp(src, weights, biases, dst_shape, conv_info, depth_multiplier, dilation, out_quant_info);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aebdf8e3342c4288bd413cb07b88530f8">  245</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">depthwise_convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half&gt;</a> &amp;biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> depthwise_convolution_fp(src, weights, biases, dst_shape, conv_info, depth_multiplier, dilation, out_quant_info);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aec5c617012397c568660626f052fd23b">  252</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">depthwise_convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> depthwise_convolution_quantized&lt;uint8_t, uint8_t, int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, dilation, out_quant_info);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a57767f1ef2c2e1b61bb88c2e259701d3">  259</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">depthwise_convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> depthwise_convolution_quantized&lt;uint8_t, int8_t, int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, dilation, out_quant_info);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aaeb13fb32d7241047f289e783f45356d">  266</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">depthwise_convolution</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> depthwise_convolution_quantized&lt;int8_t, int8_t, int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, dilation, out_quant_info);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;} <span class="comment">// namespace reference</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f489943d8618d47b1ad4611f0b9b7ff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">arm_compute::test::validation::tensor_elem_at</a></div><div class="ttdeci">T tensor_elem_at(const SimpleTensor&lt; T &gt; &amp;src, Coordinates coord, BorderMode border_mode, T constant_border_value)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">Utils.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="tests_2validation_2reference_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="tests_2validation_2_helpers_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00062">impl.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a1585c725d13408e5629a216c2d2e8b01"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a></div><div class="ttdeci">const size_t input_depth</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00063">impl.cpp:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00071">QuantizationInfo.h:71</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01107">Utils.h:1107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00671">Types.h:671</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="_utils_quantized_asymm_8h_xhtml"><div class="ttname"><a href="_utils_quantized_asymm_8h.xhtml">UtilsQuantizedAsymm.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aeba431de7aa296356e936e9c39a569c8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">arm_compute::test::validation::quantize_down_scale_by_fixedpoint</a></div><div class="ttdeci">int32_t quantize_down_scale_by_fixedpoint(int32_t val, int32_t result_mult_int, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="ttdoc">Quantize down the input value in range [min, max]. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_quantized_asymm_8h_source.xhtml#l00072">UtilsQuantizedAsymm.h:72</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_aa8c74ba65c903552897b2158aed34c0f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa8c74ba65c903552897b2158aed34c0f">arm_compute::test::validation::reference::depthwise_convolution</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; depthwise_convolution(const SimpleTensor&lt; float &gt; &amp;src, const SimpleTensor&lt; float &gt; &amp;weights, const SimpleTensor&lt; float &gt; &amp;biases, const TensorShape &amp;dst_shape, const PadStrideInfo &amp;conv_info, unsigned int depth_multiplier, const Size2D &amp;dilation, const QuantizationInfo &amp;out_quant_info)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_depthwise_convolution_layer_8cpp_source.xhtml#l00238">DepthwiseConvolutionLayer.cpp:238</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00313">Utils.h:313</a></div></div>
<div class="ttc" id="_depthwise_convolution_layer_8h_xhtml"><div class="ttname"><a href="_depthwise_convolution_layer_8h.xhtml">DepthwiseConvolutionLayer.h</a></div></div>
<div class="ttc" id="_asymm_helpers_8h_xhtml"><div class="ttname"><a href="_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="_convolution_layer_8h_xhtml"><div class="ttname"><a href="_convolution_layer_8h.xhtml">ConvolutionLayer.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_depthwise_convolution_layer_8cpp.xhtml">DepthwiseConvolutionLayer.cpp</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
