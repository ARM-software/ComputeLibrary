<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/Graph.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('graph_2_graph_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Graph.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="graph_2_graph_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_GRAPH_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_GRAPH_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_edge_8h.xhtml">arm_compute/graph/Edge.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_node_8h.xhtml">arm_compute/graph/INode.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mutex_8h.xhtml">support/Mutex.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#ifndef BARE_METAL</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* BARE_METAL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/** Graph class</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * Represents a multiple source - multiple sink directed graph</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_graph.xhtml">   53</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> final</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * @param[in] id   Graph identification number. Can be used to differentiate between graphs. Default value 0</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @param[in] name Graph name. Default value empty string</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> <span class="keywordtype">id</span>, std::string <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>);<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /** Prevent instances of this class from being copy assigned (As this class contains pointers) */</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /** Prevent instances of this class from being moved (As this class contains non movable objects) */</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">    /** Prevent instances of this class from being moved (As this class contains non movable objects) */</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">operator=</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /** Adds a node to the graph</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * @note Models a single output node</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * @tparam NT Node operation</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * @tparam Ts Arguments to operation</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * @param[in] args Node arguments</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     * @return ID of the node</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> NT, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">add_node</a>(Ts &amp;&amp;... <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">    /** Remove the node with the given ID</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * @param[in] nid ID of the node to remove</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * @return True if the removal took place else false</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid);<span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /** Adds a connection between two nodes</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     * @param[in] source     ID of the source node</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * @param[in] source_idx Output index of the source node</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * @param[in] sink       ID of the sink node</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     * @param[in] sink_idx   Input index of the sink node</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     * @return ID of this connection</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> source, <span class="keywordtype">size_t</span> source_idx, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> sink, <span class="keywordtype">size_t</span> sink_idx);<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /** Removes an edge (connection)</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * @param[in] eid Connection to remove</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * @return True if the removal took place else false</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">remove_connection</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> eid);<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /** Returns graph name</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * @return Graph name</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::string <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /** Returns graph id</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * @return Graph id</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">id</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /** Returns graph input nodes</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * @param[in] type Type of nodes to return</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     * @return vector containing the graph node of given type</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> std::vector&lt;NodeID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a6d22ee22d20bf807639eee8a611229af">nodes</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>);<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">    /** Returns nodes of graph</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * @warning Nodes can be nullptr if they have been removed during the mutation steps of the graph</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * @return Nodes of graph</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;std::unique_ptr&lt;INode&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a6d22ee22d20bf807639eee8a611229af">nodes</a>();<span class="comment"></span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">    /** Returns nodes of graph</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * @warning Nodes can be nullptr if they have been removed during the mutation steps of the graph</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * @return Nodes of graph</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::unique_ptr&lt;INode&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a6d22ee22d20bf807639eee8a611229af">nodes</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /** Returns edges of graph</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * @warning Edges can be nullptr if they have been removed during the mutation steps of the graph</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * @return Edges of graph</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::unique_ptr&lt;Edge&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a1ee4bc06b30fd45b1de82e716fb11bd5">edges</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">    /** Returns tensors of graph</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * @warning Tensor can be nullptr if they have been removed during the mutation steps of the graph</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * @return Tensors of graph</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::vector&lt;std::unique_ptr&lt;Tensor&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>();<span class="comment"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">    /** Returns tensors of graph</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * @warning Tensor can be nullptr if they have been removed during the mutation steps of the graph</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @return Tensors of graph</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::unique_ptr&lt;Tensor&gt;&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>() <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /** Get node object given its id</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @warning Can be nullptr if node was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     * @param[in] id Node ID</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * @return The actual node object</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <span class="keywordtype">id</span>) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">    /** Get node object given its id</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @warning Can be nullptr if node was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @param[in] id Node ID</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * @return The actual node object</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <span class="keywordtype">id</span>);<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    /** Get edge object given its id</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * @warning Can be nullptr if node was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * @param[in] id Edge ID</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @return The actual edge object</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <span class="keywordtype">id</span>) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    /** Get edge object given its id</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * @warning Can be nullptr if node was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     * @param[in] id Edge ID</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * @return The actual edge object</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <span class="keywordtype">id</span>);<span class="comment"></span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /** Get tensor object given its id</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @warning Can be nullptr if tensor was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     * @param[in] id Tensor ID</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * @return The actual tensor object</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <span class="keywordtype">id</span>) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">    /** Get tensor object given its id</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">     * @warning Can be nullptr if tensor was removed during the mutation steps of the graph</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">     * @param[in] id Tensor ID</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     * @return The actual tensor object</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /** Creates a tensor object</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     * @param[in] desc Tensor descriptor</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     * @return Tensor ID</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> create_tensor(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;desc = <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a>                              _id      = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a>(0); <span class="comment">/**&lt; Graph id */</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::string                          _name    = {};         <span class="comment">/**&lt; Graph name */</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::vector&lt;std::unique_ptr&lt;INode&gt;&gt;  _nodes   = {};         <span class="comment">/**&lt; Graph nodes */</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    std::vector&lt;std::unique_ptr&lt;Edge&gt;&gt;   _edges   = {};         <span class="comment">/**&lt; Graph edges */</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::vector&lt;std::unique_ptr&lt;Tensor&gt;&gt; _tensors = {};         <span class="comment">/**&lt; Graph tensors */</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    std::map&lt;NodeType, std::vector&lt;NodeID&gt;&gt; _tagged_nodes = {}; <span class="comment">/**&lt; Graph nodes map with the node type as key */</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a> _mtx = {};                               <span class="comment">/**&lt; Mutex used for graph construction */</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;};</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NT, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">  235</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">Graph::add_node</a>(Ts &amp;&amp;... <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;arm_compute::Mutex&gt;</a> lock(_mtx);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Create node</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid  = _nodes.size();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span>   <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a> = std::make_unique&lt;NT&gt;(std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a>(nid);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Keep track of input nodes</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    _tagged_nodes[<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>()].push_back(nid);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Associate a new tensor with each output</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;output : <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;_outputs)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        output = create_tensor();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Propagate node shape if possible</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">forward_descriptors</a>();</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// Add node to the graph nodes</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    _nodes.push_back(std::move(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">return</span> nid;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_GRAPH_H */</span><span class="preprocessor"></span></div><div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a0fc44e75669b55a1347b89c7debdf037"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0fc44e75669b55a1347b89c7debdf037">arm_compute::graph::Graph::id</a></div><div class="ttdeci">GraphID id() const</div><div class="ttdoc">Returns graph id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00169">Graph.cpp:169</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a4c8c62ae543a38ec4aac8f1a167fbb51"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">arm_compute::graph::Graph::remove_connection</a></div><div class="ttdeci">bool remove_connection(EdgeID eid)</div><div class="ttdoc">Removes an edge (connection) </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00118">Graph.cpp:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a1ee4bc06b30fd45b1de82e716fb11bd5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a1ee4bc06b30fd45b1de82e716fb11bd5">arm_compute::graph::Graph::edges</a></div><div class="ttdeci">const std::vector&lt; std::unique_ptr&lt; Edge &gt; &gt; &amp; edges() const</div><div class="ttdoc">Returns edges of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00189">Graph.cpp:189</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a424221c5dfc8fe79f88a677d1b3b4494"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a424221c5dfc8fe79f88a677d1b3b4494">arm_compute::graph::Graph::add_node</a></div><div class="ttdeci">NodeID add_node(Ts &amp;&amp;... args)</div><div class="ttdoc">Adds a node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00235">Graph.h:235</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_acbe0278ebf263a33f3d0b9b4be834961"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">arm_compute::graph::Graph::operator=</a></div><div class="ttdeci">Graph &amp; operator=(const Graph &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy assigned (As this class contains pointers) ...</div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_mutex_8h_xhtml"><div class="ttname"><a href="_mutex_8h.xhtml">Mutex.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_acded863dbfdd730829d4188d67eefcf0"><div class="ttname"><a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdoc">Wrapper of Mutex data-object. </div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00033">Mutex.h:33</a></div></div>
<div class="ttc" id="_i_node_8h_xhtml"><div class="ttname"><a href="_i_node_8h.xhtml">INode.h</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00260">gemm_interleaved.hpp:260</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::Graph::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns graph name. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00164">Graph.cpp:164</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a6d22ee22d20bf807639eee8a611229af"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a6d22ee22d20bf807639eee8a611229af">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; INode &gt; &gt; &amp; nodes()</div><div class="ttdoc">Returns nodes of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00179">Graph.cpp:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_aabacbdcb2b491b129b119273a813bb67"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">arm_compute::graph::Graph::tensors</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; Tensor &gt; &gt; &amp; tensors()</div><div class="ttdoc">Returns tensors of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00194">Graph.cpp:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3ace781433ede299fb1dc8d0b02667b9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">arm_compute::graph::INode::set_graph</a></div><div class="ttdeci">void set_graph(Graph *g)</div><div class="ttdoc">Sets the graph that this node is registered to. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00051">INode.cpp:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a09f8d22de4cd2a2881730ad58096c7c1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">arm_compute::graph::Graph::remove_node</a></div><div class="ttdeci">bool remove_node(NodeID nid)</div><div class="ttdoc">Remove the node with the given ID. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00035">Graph.cpp:35</a></div></div>
<div class="ttc" id="graph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00199">Types.h:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a538f789bf074c367457a6f8f32b83d2d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">arm_compute::graph::Graph::add_connection</a></div><div class="ttdeci">EdgeID add_connection(NodeID source, size_t source_idx, NodeID sink, size_t sink_idx)</div><div class="ttdoc">Adds a connection between two nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00069">Graph.cpp:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a483b76accbb02199c359bd5cf23dd476"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">arm_compute::graph::INode::set_id</a></div><div class="ttdeci">void set_id(NodeID id)</div><div class="ttdoc">Sets the node id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00057">INode.cpp:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_abba17a56bbf16c7cbc7acd4aa54abcea"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">arm_compute::graph::EdgeID</a></div><div class="ttdeci">unsigned int EdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00070">Types.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00053">Graph.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml">arm_compute::graph::Edge</a></div><div class="ttdoc">Graph Edge. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00039">Edge.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a0c40af42cad207665228815f0359bbd3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">arm_compute::graph::Graph::Graph</a></div><div class="ttdeci">Graph()=default</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00204">Graph.cpp:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a0ea47db036b1c140af002ee1494dcb6f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">arm_compute::graph::Graph::edge</a></div><div class="ttdeci">const Edge * edge(EdgeID id) const</div><div class="ttdoc">Get edge object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00214">Graph.cpp:214</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5edbd8a4a1b75060bb3b49bc0ba2c6b0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">arm_compute::graph::INode::forward_descriptors</a></div><div class="ttdeci">virtual bool forward_descriptors()=0</div><div class="ttdoc">Forwards descriptor information to outputs if possible. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a18809773edf57d061fc2826abf0dab5e"><div class="ttname"><a href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard</a></div><div class="ttdeci">std::lock_guard&lt; Mutex &gt; lock_guard</div><div class="ttdoc">Wrapper of lock_guard data-object. </div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00037">Mutex.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00068">Types.h:68</a></div></div>
<div class="ttc" id="_edge_8h_xhtml"><div class="ttname"><a href="_edge_8h.xhtml">Edge.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a91bccd842a1caad3149523a05f150ee6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">arm_compute::graph::Graph::tensor</a></div><div class="ttdeci">const Tensor * tensor(TensorID id) const</div><div class="ttdoc">Get tensor object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00224">Graph.cpp:224</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa00f40248e92f039410443bfd3aa208f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">arm_compute::graph::GraphID</a></div><div class="ttdeci">unsigned int GraphID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00067">Types.h:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="graph_2_graph_8h.xhtml">Graph.h</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
