<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/experimental/PostOps.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PostOps.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arm__compute_2core_2experimental_2_post_ops_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXPERIMENTAL_POSTOPS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPERIMENTAL_POSTOPS</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_post_op_8h.xhtml">arm_compute/core/experimental/IPostOp.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/** (EXPERIMENTAL_POST_OPS)</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * Implementation of specific IPostOps</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorRelatedT&gt;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">   42</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a>&lt;TensorRelatedT&gt;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#afca52ec1ec022aba2e3f8002ae0f694b">   45</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#afca52ec1ec022aba2e3f8002ae0f694b">PostOpAct</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        : <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a95c8fa7f2e073ad7ede29dd38734538c">_act_info</a>{ act_info }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// NOTE: PostOps do not own any resources pointed to by TensorRelatedT if it&#39;s a pointer type, thus allow shallow copy</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#af32c134efbafd983d04a0e3f8ea394a8">~PostOpAct</a>() <span class="keyword">override</span>        = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#afca52ec1ec022aba2e3f8002ae0f694b">PostOpAct</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#afca52ec1ec022aba2e3f8002ae0f694b">PostOpAct</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;&amp;)                 = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">   56</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#abe3f4fb4f063604571dc8906dab9c520">   60</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#abe3f4fb4f063604571dc8906dab9c520">type</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">PostOpType::Activation</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">   64</a></span>&#160;    std::vector&lt;TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arguments</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a379268971da504167565643f1fa6d91c">   68</a></span>&#160;    std::vector&lt;const TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a379268971da504167565643f1fa6d91c">arguments</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a96b6699a97fec64563d91cbc69209830">   72</a></span>&#160;    std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a96b6699a97fec64563d91cbc69209830">clone</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;PostOpAct&lt;TensorRelatedT&gt;&gt;(*this);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a95c8fa7f2e073ad7ede29dd38734538c">   76</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a95c8fa7f2e073ad7ede29dd38734538c">_act_info</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;};</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorRelatedT&gt;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">   80</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a>&lt;TensorRelatedT&gt;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a455f540a8abc180eb65b071505feadcf">   83</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a455f540a8abc180eb65b071505feadcf">PostOpEltwiseAdd</a>(TensorRelatedT addend, <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        : _addend{ addend },</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;          _prev_dst_pos{ <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a> },</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;          _policy{ policy }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// NOTE: PostOps do not own any resources pointed to by TensorRelatedT if it&#39;s a pointer type, thus allow shallow copy</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    ~<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a>() <span class="keyword">override</span>               = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;&amp;)                 = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">   95</a></span>&#160;    <span class="keywordtype">int</span>               <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> _prev_dst_pos;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#abe3f4fb4f063604571dc8906dab9c520">   99</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#abe3f4fb4f063604571dc8906dab9c520">type</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">PostOpType::Eltwise_Add</a>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">  103</a></span>&#160;    std::vector&lt;TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arguments</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> { &amp;_addend };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a379268971da504167565643f1fa6d91c">  107</a></span>&#160;    std::vector&lt;const TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a379268971da504167565643f1fa6d91c">arguments</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> { &amp;_addend };</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a96b6699a97fec64563d91cbc69209830">  111</a></span>&#160;    std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a96b6699a97fec64563d91cbc69209830">clone</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;PostOpEltwiseAdd&lt;TensorRelatedT&gt;&gt;(*this);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a40b0d043ac0727995db12e744cbab8c0">  115</a></span>&#160;    TensorRelatedT <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a40b0d043ac0727995db12e744cbab8c0">_addend</a>;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">  116</a></span>&#160;    <span class="keywordtype">int</span>            <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">_prev_dst_pos</a>;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#acd11d6c13308bc9d251a448f94fd887e">  117</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>  <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#acd11d6c13308bc9d251a448f94fd887e">_policy</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TensorRelatedT&gt;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">  121</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> : <span class="keyword">public</span> <a class="code" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a>&lt;TensorRelatedT&gt;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aaebf43f2b10ec609b108b15c047b28ee">  124</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aaebf43f2b10ec609b108b15c047b28ee">PostOpEltwisePRelu</a>(TensorRelatedT alpha_param, <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        : _alpha_param{ alpha_param },</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;          _prev_dst_pos{ <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a> },</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;          _policy{ policy }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// NOTE: PostOps do not own any resources pointed to by TensorRelatedT if it&#39;s a pointer type, thus allow shallow copy</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    ~<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a>() <span class="keyword">override</span>                 = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;&amp;)                 = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">operator=</a>(<a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">  136</a></span>&#160;    <span class="keywordtype">int</span>                 <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">prev_dst_pos</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">return</span> _prev_dst_pos;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#abe3f4fb4f063604571dc8906dab9c520">  140</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#abe3f4fb4f063604571dc8906dab9c520">type</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">PostOpType::Eltwise_PRelu</a>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">  144</a></span>&#160;    std::vector&lt;TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arguments</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> { &amp;_alpha_param };</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a379268971da504167565643f1fa6d91c">  148</a></span>&#160;    std::vector&lt;const TensorRelatedT *&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a379268971da504167565643f1fa6d91c">arguments</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> { &amp;_alpha_param };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a96b6699a97fec64563d91cbc69209830">  152</a></span>&#160;    std::unique_ptr&lt;IPostOp&lt;TensorRelatedT&gt;&gt; <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a96b6699a97fec64563d91cbc69209830">clone</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;PostOpEltwisePRelu&lt;TensorRelatedT&gt;&gt;(*this);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ad3ec099069cbad817a8d45ba7954ce50">  156</a></span>&#160;    TensorRelatedT <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ad3ec099069cbad817a8d45ba7954ce50">_alpha_param</a>;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">  157</a></span>&#160;    <span class="keywordtype">int</span>            <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">_prev_dst_pos</a>;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#acd11d6c13308bc9d251a448f94fd887e">  158</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>  <a class="code" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#acd11d6c13308bc9d251a448f94fd887e">_policy</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;};</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif //ARM_COMPUTE_EXPERIMENTAL_POSTOPS</span></div><div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_a96b6699a97fec64563d91cbc69209830"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a96b6699a97fec64563d91cbc69209830">arm_compute::experimental::PostOpEltwiseAdd::clone</a></div><div class="ttdeci">std::unique_ptr&lt; IPostOp&lt; TensorRelatedT &gt; &gt; clone() const override</div><div class="ttdoc">Clone method used in cases where PostOps are owned by unique_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00111">PostOps.h:111</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">arm_compute::experimental::PostOpEltwiseAdd</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00080">PostOps.h:80</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_a890bd4c3567d2b9268ce0a0396d2dea4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arm_compute::experimental::PostOpAct::arguments</a></div><div class="ttdeci">std::vector&lt; TensorRelatedT * &gt; arguments() override</div><div class="ttdoc">The argument tensors The order of the argument tensor is strictly preserved. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00064">PostOps.h:64</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425ea"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">arm_compute::experimental::PostOpType</a></div><div class="ttdeci">PostOpType</div><div class="ttdoc">Type of Post Op. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00036">IPostOp.h:36</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_i_post_op_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">arm_compute::experimental::IPostOp</a></div><div class="ttdoc">An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operato...</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00089">IPostOp.h:89</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_a95c8fa7f2e073ad7ede29dd38734538c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a95c8fa7f2e073ad7ede29dd38734538c">arm_compute::experimental::PostOpAct::_act_info</a></div><div class="ttdeci">ActivationLayerInfo _act_info</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00076">PostOps.h:76</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::PostOpType::Eltwise_PRelu</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_a890bd4c3567d2b9268ce0a0396d2dea4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arm_compute::experimental::PostOpEltwisePRelu::arguments</a></div><div class="ttdeci">std::vector&lt; TensorRelatedT * &gt; arguments() override</div><div class="ttdoc">The argument tensors The order of the argument tensor is strictly preserved. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00144">PostOps.h:144</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_ab45563eee2630cf252ce7d117bba8e1c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#ab45563eee2630cf252ce7d117bba8e1c">arm_compute::experimental::PostOpAct::operator=</a></div><div class="ttdeci">PostOpAct &amp; operator=(const PostOpAct &amp;)=default</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01641">Types.h:1641</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_a96b6699a97fec64563d91cbc69209830"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a96b6699a97fec64563d91cbc69209830">arm_compute::experimental::PostOpAct::clone</a></div><div class="ttdeci">std::unique_ptr&lt; IPostOp&lt; TensorRelatedT &gt; &gt; clone() const override</div><div class="ttdoc">Clone method used in cases where PostOps are owned by unique_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00072">PostOps.h:72</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_aecd69d50bbe66a2b4e8d08a0963fc2d4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">arm_compute::experimental::PostOpEltwiseAdd::prev_dst_pos</a></div><div class="ttdeci">int prev_dst_pos() const override</div><div class="ttdoc">The position of previous op&amp;#39;s dst in current op&amp;#39;s argument list. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00095">PostOps.h:95</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_a40b0d043ac0727995db12e744cbab8c0"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a40b0d043ac0727995db12e744cbab8c0">arm_compute::experimental::PostOpEltwiseAdd::_addend</a></div><div class="ttdeci">TensorRelatedT _addend</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00115">PostOps.h:115</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">arm_compute::experimental::PostOpEltwisePRelu</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00121">PostOps.h:121</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_acd11d6c13308bc9d251a448f94fd887e"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#acd11d6c13308bc9d251a448f94fd887e">arm_compute::experimental::PostOpEltwiseAdd::_policy</a></div><div class="ttdeci">ConvertPolicy _policy</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00117">PostOps.h:117</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_a455f540a8abc180eb65b071505feadcf"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a455f540a8abc180eb65b071505feadcf">arm_compute::experimental::PostOpEltwiseAdd::PostOpEltwiseAdd</a></div><div class="ttdeci">PostOpEltwiseAdd(TensorRelatedT addend, int prev_dst_pos, ConvertPolicy policy)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00083">PostOps.h:83</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_a379268971da504167565643f1fa6d91c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a379268971da504167565643f1fa6d91c">arm_compute::experimental::PostOpEltwisePRelu::arguments</a></div><div class="ttdeci">std::vector&lt; const TensorRelatedT * &gt; arguments() const override</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00148">PostOps.h:148</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::PostOpType::Activation</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_a96b6699a97fec64563d91cbc69209830"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#a96b6699a97fec64563d91cbc69209830">arm_compute::experimental::PostOpEltwisePRelu::clone</a></div><div class="ttdeci">std::unique_ptr&lt; IPostOp&lt; TensorRelatedT &gt; &gt; clone() const override</div><div class="ttdoc">Clone method used in cases where PostOps are owned by unique_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00152">PostOps.h:152</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_ac472c5cac819ae81be1eef17cdfd56ac"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">arm_compute::experimental::PostOpEltwisePRelu::_prev_dst_pos</a></div><div class="ttdeci">int _prev_dst_pos</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00157">PostOps.h:157</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_aecd69d50bbe66a2b4e8d08a0963fc2d4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">arm_compute::experimental::PostOpAct::prev_dst_pos</a></div><div class="ttdeci">int prev_dst_pos() const override</div><div class="ttdoc">The position of previous op&amp;#39;s dst in current op&amp;#39;s argument list. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00056">PostOps.h:56</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_aecd69d50bbe66a2b4e8d08a0963fc2d4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aecd69d50bbe66a2b4e8d08a0963fc2d4">arm_compute::experimental::PostOpEltwisePRelu::prev_dst_pos</a></div><div class="ttdeci">int prev_dst_pos() const override</div><div class="ttdoc">The position of previous op&amp;#39;s dst in current op&amp;#39;s argument list. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00136">PostOps.h:136</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_a379268971da504167565643f1fa6d91c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#a379268971da504167565643f1fa6d91c">arm_compute::experimental::PostOpAct::arguments</a></div><div class="ttdeci">std::vector&lt; const TensorRelatedT * &gt; arguments() const override</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00068">PostOps.h:68</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_a890bd4c3567d2b9268ce0a0396d2dea4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a890bd4c3567d2b9268ce0a0396d2dea4">arm_compute::experimental::PostOpEltwiseAdd::arguments</a></div><div class="ttdeci">std::vector&lt; TensorRelatedT * &gt; arguments() override</div><div class="ttdoc">The argument tensors The order of the argument tensor is strictly preserved. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00103">PostOps.h:103</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_ac472c5cac819ae81be1eef17cdfd56ac"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#ac472c5cac819ae81be1eef17cdfd56ac">arm_compute::experimental::PostOpEltwiseAdd::_prev_dst_pos</a></div><div class="ttdeci">int _prev_dst_pos</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00116">PostOps.h:116</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_abe3f4fb4f063604571dc8906dab9c520"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#abe3f4fb4f063604571dc8906dab9c520">arm_compute::experimental::PostOpAct::type</a></div><div class="ttdeci">PostOpType type() const override</div><div class="ttdoc">The IPostOp type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00060">PostOps.h:60</a></div></div>
<div class="ttc" id="_i_post_op_8h_xhtml"><div class="ttname"><a href="_i_post_op_8h.xhtml">IPostOp.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_acd11d6c13308bc9d251a448f94fd887e"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#acd11d6c13308bc9d251a448f94fd887e">arm_compute::experimental::PostOpEltwisePRelu::_policy</a></div><div class="ttdeci">ConvertPolicy _policy</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00158">PostOps.h:158</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_ad3ec099069cbad817a8d45ba7954ce50"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#ad3ec099069cbad817a8d45ba7954ce50">arm_compute::experimental::PostOpEltwisePRelu::_alpha_param</a></div><div class="ttdeci">TensorRelatedT _alpha_param</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00156">PostOps.h:156</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::PostOpType::Eltwise_Add</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_abe3f4fb4f063604571dc8906dab9c520"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#abe3f4fb4f063604571dc8906dab9c520">arm_compute::experimental::PostOpEltwiseAdd::type</a></div><div class="ttdeci">PostOpType type() const override</div><div class="ttdoc">The IPostOp type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00099">PostOps.h:99</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_add_xhtml_a379268971da504167565643f1fa6d91c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml#a379268971da504167565643f1fa6d91c">arm_compute::experimental::PostOpEltwiseAdd::arguments</a></div><div class="ttdeci">std::vector&lt; const TensorRelatedT * &gt; arguments() const override</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00107">PostOps.h:107</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_afca52ec1ec022aba2e3f8002ae0f694b"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#afca52ec1ec022aba2e3f8002ae0f694b">arm_compute::experimental::PostOpAct::PostOpAct</a></div><div class="ttdeci">PostOpAct(const ActivationLayerInfo &amp;act_info)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00045">PostOps.h:45</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_abe3f4fb4f063604571dc8906dab9c520"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#abe3f4fb4f063604571dc8906dab9c520">arm_compute::experimental::PostOpEltwisePRelu::type</a></div><div class="ttdeci">PostOpType type() const override</div><div class="ttdoc">The IPostOp type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00140">PostOps.h:140</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">arm_compute::experimental::PostOpAct</a></div><div class="ttdoc">(EXPERIMENTAL_POST_OPS) Implementation of specific IPostOps </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00042">PostOps.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00406">Types.h:406</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_act_xhtml_af32c134efbafd983d04a0e3f8ea394a8"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#af32c134efbafd983d04a0e3f8ea394a8">arm_compute::experimental::PostOpAct::~PostOpAct</a></div><div class="ttdeci">~PostOpAct() override=default</div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu_xhtml_aaebf43f2b10ec609b108b15c047b28ee"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml#aaebf43f2b10ec609b108b15c047b28ee">arm_compute::experimental::PostOpEltwisePRelu::PostOpEltwisePRelu</a></div><div class="ttdeci">PostOpEltwisePRelu(TensorRelatedT alpha_param, int prev_dst_pos, ConvertPolicy policy)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml#l00124">PostOps.h:124</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_a0d10d1f11f896cb40f799a595f5f383.xhtml">experimental</a></li><li class="navelem"><a class="el" href="arm__compute_2core_2experimental_2_post_ops_8h.xhtml">PostOps.h</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
