<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/gemm_hybrid_quantized_inline.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm__hybrid__quantized__inline_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_hybrid_quantized_inline.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__hybrid__quantized__inline_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2019,2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ndrange_8hpp.xhtml">ndrange.hpp</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mergeresults_8hpp.xhtml">mergeresults.hpp</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8hpp.xhtml">transform.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;profiler.hpp&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Implementation of the GemmCommon abstract class.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">GemmHybridQuantizedInline</a> : <span class="keyword">public</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon</a>&lt;To, Tr&gt; {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::operand_type Toi;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type Tri;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">/* const properties set by constructor */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> * <span class="keyword">const</span> _ci;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Msize;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Nsize;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ksize;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nbatches;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nmulti;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">/* Blocking info */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k_block;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _n_block;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Mround;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">/* Pretransposed buffer. */</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> Toi *_B_transposed=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">NDRange&lt;4&gt;</a> _window_range;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>  _qp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    int32_t *col_bias = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> *working_space = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nthreads;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_col_sum_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> _Nsize * _nmulti * <span class="keyword">sizeof</span>(int32_t);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> compute_k_block(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// We don&#39;t support K blocks as we only temporarily store 32 bit results.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>-&gt;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a61970c81ba14081e613c12d0e85af761">get_L1_cache_size</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// k_block: Find out how much of the larger array can be loaded into half the cache.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// This should account for associative caches.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block = (L1_size / 2) / (<span class="keyword">sizeof</span>(Toi) * (std::max(strategy::out_width(), strategy::out_height())));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// Needs to be (at least a single) multiple of the K unroll level.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        k_block /= strategy::k_unroll();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        k_block = std::max(k_block, 1U) * strategy::k_unroll();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numk_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, k_block);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        k_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, numk_blocks);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        k_block = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_block, strategy::k_unroll());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> k_block;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> compute_n_block(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block = compute_k_block(args);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>-&gt;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">get_L2_cache_size</a>();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// n_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Don&#39;t allocate more than 90% of the L2 to allow for overheads, and subtract off the L1 contents.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_block = (((L2_size * 9) / 10) - (k_block * <span class="keyword">sizeof</span>(Toi) * (strategy::out_width() + strategy::out_height()))) /</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                 (<span class="keyword">sizeof</span>(Toi) * k_block);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// Needs to be (at least a single) multiple of the kernel output width.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        n_block /= strategy::out_width();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        n_block = std::max(n_block, 1U) * strategy::out_width();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numblocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, n_block);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        n_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, numblocks);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        n_block = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(n_block, strategy::out_width());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> n_block;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a3f243459017e9b1ca53e88003e0dd02b">GemmHybridQuantizedInline</a>(<a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">GemmHybridQuantizedInline</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">GemmHybridQuantizedInline</a> &amp; <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a28557b2a7e097a7b24bc15ca2fece9f4">operator= </a>(<a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">GemmHybridQuantizedInline</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">/* Constructor */</span></div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ad07e1e1a40c8e1d91ec16c522f840963">  140</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ad07e1e1a40c8e1d91ec16c522f840963">GemmHybridQuantizedInline</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;qp)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;              : _ci(args._ci), _Msize(args._Msize), _Nsize(args._Nsize), _Ksize(args._Ksize),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                _nbatches(args._nbatches), _nmulti(args._nmulti),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                _k_block(compute_k_block(args)), _n_block(compute_n_block(args)),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height())),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height()), _nbatches, <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, _n_block), _nmulti),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                _qp (qp), _nthreads(args._maxthreads) { }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Interface implementation - Compulsory functions</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">  149</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">ndrange_t</a> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> { _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">total_size</a>() };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// This kernel can always be dynamically scheduled.</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">  154</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Execute</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1d37407e8d582183b35dedbf7fa43b43">  159</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1d37407e8d582183b35dedbf7fa43b43">execute</a>(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;work_range, <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;, <span class="keywordtype">int</span>)<span class="keyword"> override </span>{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        profiler prof;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        assert(_B_transposed);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        static_assert(std::is_same&lt;To, Toi&gt;::value, <span class="stringliteral">&quot;gemm_native: Operand types must be the same.&quot;</span>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">/* For now, each work item implies all the K for a given output</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">         * pixel (so we don&#39;t need to synchronize access to the output</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">         * array).  So separate the loop over K blocks here.  */</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ksize; k0+=_k_block) {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax   = std::min(k0 + _k_block, _Ksize);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keyword">auto</span> p = _window_range.<a class="code" href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">iterator</a>(work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">get_position</a>(0), work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">get_position_end</a>(0));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> (p.done()) {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_start = p.dim(0) * strategy::out_height();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_end   = std::min(p.dim0_max() * strategy::out_height(), _Msize);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>   = p.dim(1);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0      = p.dim(2) * _n_block;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nmax    = std::min(n0 + _n_block, _Nsize);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi   = p.dim(3);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keyword">const</span> Toi *b_panel = _B_transposed +</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                     (multi * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll())) +</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                     (k0 * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width())) +</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                     (n0 * kern_k);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (m_end - m_start) * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(nmax-n0, strategy::out_width()));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    strat.kernel(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride) + (m_start * this-&gt;_lda) + k0, this-&gt;_lda,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                 b_panel,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                 this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                 (m_end - m_start), (nmax - n0), kmax - k0,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                 col_bias + (multi * _Nsize) + n0, _qp);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            } <span class="keywordflow">while</span> (p.next_dim1());</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// Interface implementation - pretransposed</span></div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ac5dec5063a75604fdc60555f15577b94">  210</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">  214</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span> (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae9fc7380e533c43a1d91e48a7578e412">  218</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">return</span> get_col_sum_size() + (<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll()) * _nmulti * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a0ae716040d875abeeba60aa4a6b73363">  222</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_nmulti; i++) {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(_qp, _Nsize, _Ksize, B + (i * B_multi_stride), ldb, col_bias + (i * _Nsize),  _Ksize, i, 0);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae385dce1a98e03f0a3ca311f031e5110">  230</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(in_buffer, B, ldb, B_multi_stride);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        Toi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_nmulti; multi++) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ksize; k0+=_k_block) {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax = std::min(k0 + _k_block, _Ksize);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0&lt;_Nsize; x0+=_n_block) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0+_n_block, _Nsize);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(xmax-x0, strategy::out_width()) * k_size;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    strat.transforms.PrepareB( buffer, B + (multi * B_multi_stride), ldb,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                               x0, xmax, k0, kmax);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    buffer += size;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">  257</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a>(<span class="keywordtype">void</span> *in_buffer)<span class="keyword"> override </span>{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a4f282c5814fcd207308c4737a1fc567b">  263</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a>(<span class="keyword">const</span> int32_t *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keywordtype">size_t</span> bias_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        _qp.<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        _qp.<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">bias_multi_stride</a> = bias_multi_stride;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;};</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">arm_gemm::Requantize32::bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00172">arm_gemm.hpp:172</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_abb02a9fd23c6187807ad015022708985"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">arm_gemm::GemmArgs::_ci</a></div><div class="ttdeci">const CPUInfo * _ci</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00145">arm_gemm.hpp:145</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a78a5c697e8717cb27954513e8ad2a508"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a78a5c697e8717cb27954513e8ad2a508">arm_gemm::NDRange::iterator</a></div><div class="ttdeci">NDRangeIterator iterator(unsigned int start, unsigned int end) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00131">ndrange.hpp:131</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_ac5c8d64b5f5a1c32846af7e260c56f04"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">arm_gemm::GemmArgs::_Nsize</a></div><div class="ttdeci">unsigned int _Nsize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00147">arm_gemm.hpp:147</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a28557b2a7e097a7b24bc15ca2fece9f4"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a28557b2a7e097a7b24bc15ca2fece9f4">arm_gemm::GemmHybridQuantizedInline::operator=</a></div><div class="ttdeci">GemmHybridQuantizedInline &amp; operator=(GemmHybridQuantizedInline &amp;)=delete</div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="mergeresults_8hpp_xhtml"><div class="ttname"><a href="mergeresults_8hpp.xhtml">mergeresults.hpp</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_ac5dec5063a75604fdc60555f15577b94"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ac5dec5063a75604fdc60555f15577b94">arm_gemm::GemmHybridQuantizedInline::B_is_pretransposed</a></div><div class="ttdeci">bool B_is_pretransposed() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00210">gemm_hybrid_quantized_inline.hpp:210</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_acf6183a5e4721a137bfce29c8b2febdb"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">arm_gemm::GemmArgs::_cfg</a></div><div class="ttdeci">const GemmConfig * _cfg</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00157">arm_gemm.hpp:157</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_acc7f8048c4c8eb94458999a3e13fc519"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">arm_gemm::GemmConfig::inner_block_size</a></div><div class="ttdeci">unsigned int inner_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00110">arm_gemm.hpp:110</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a3266f7e33a1db61de7fad71bf193d101"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">arm_gemm::GemmConfig::outer_block_size</a></div><div class="ttdeci">unsigned int outer_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00111">arm_gemm.hpp:111</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00142">arm_gemm.hpp:142</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a6e76d099f51fc0ef7f48dbd7d00214ac"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">arm_gemm::GemmHybridQuantizedInline::set_pretransposed_B_data</a></div><div class="ttdeci">void set_pretransposed_B_data(void *in_buffer) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00257">gemm_hybrid_quantized_inline.hpp:257</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_aa7cfff39cbb2be65cd40042a75e5ae1c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">arm_gemm::GemmHybridQuantizedInline::B_pretranspose_required</a></div><div class="ttdeci">bool B_pretranspose_required() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00214">gemm_hybrid_quantized_inline.hpp:214</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a9bbea489f6defd913b01a39e05e708e4"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">arm_gemm::NDCoordinate::get_position</a></div><div class="ttdeci">int_t get_position(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00176">ndrange.hpp:176</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_ae385dce1a98e03f0a3ca311f031e5110"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae385dce1a98e03f0a3ca311f031e5110">arm_gemm::GemmHybridQuantizedInline::pretranspose_B_array</a></div><div class="ttdeci">void pretranspose_B_array(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00230">gemm_hybrid_quantized_inline.hpp:230</a></div></div>
<div class="ttc" id="transform_8hpp_xhtml"><div class="ttname"><a href="transform_8hpp.xhtml">transform.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a1bb76b8a32e09fb5ffffd66e04d7f741"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">arm_gemm::GemmHybridQuantizedInline::supports_dynamic_scheduling</a></div><div class="ttdeci">bool supports_dynamic_scheduling() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00154">gemm_hybrid_quantized_inline.hpp:154</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a3f243459017e9b1ca53e88003e0dd02b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a3f243459017e9b1ca53e88003e0dd02b">arm_gemm::GemmHybridQuantizedInline::GemmHybridQuantizedInline</a></div><div class="ttdeci">GemmHybridQuantizedInline(GemmHybridQuantizedInline &amp;)=delete</div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a4f282c5814fcd207308c4737a1fc567b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a4f282c5814fcd207308c4737a1fc567b">arm_gemm::GemmHybridQuantizedInline::set_quantized_bias</a></div><div class="ttdeci">void set_quantized_bias(const int32_t *bias, size_t bias_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00263">gemm_hybrid_quantized_inline.hpp:263</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00161">gemm_common.hpp:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00066">CPPTypes.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a61970c81ba14081e613c12d0e85af761"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a61970c81ba14081e613c12d0e85af761">arm_compute::CPUInfo::get_L1_cache_size</a></div><div class="ttdeci">unsigned int get_L1_cache_size() const</div><div class="ttdoc">Gets the L1 cache size. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00129">CPPTypes.cpp:129</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a3152ff6ceec3d31c02feb4e91812f040"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">arm_compute::CPUInfo::get_L2_cache_size</a></div><div class="ttdeci">unsigned int get_L2_cache_size() const</div><div class="ttdoc">Gets the L2 cache size. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00134">CPPTypes.cpp:134</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a1d37407e8d582183b35dedbf7fa43b43"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a1d37407e8d582183b35dedbf7fa43b43">arm_gemm::GemmHybridQuantizedInline::execute</a></div><div class="ttdeci">void execute(const ndcoord_t &amp;work_range, const ndcoord_t &amp;, int) override</div><div class="ttdoc">Main execute member fucntion. </div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00159">gemm_hybrid_quantized_inline.hpp:159</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_ad07e1e1a40c8e1d91ec16c522f840963"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ad07e1e1a40c8e1d91ec16c522f840963">arm_gemm::GemmHybridQuantizedInline::GemmHybridQuantizedInline</a></div><div class="ttdeci">GemmHybridQuantizedInline(const GemmArgs &amp;args, const Requantize32 &amp;qp)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00140">gemm_hybrid_quantized_inline.hpp:140</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a8f983ca114ef72d25515a8651ea1d0e7"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">arm_gemm::GemmHybridQuantizedInline::get_window_size</a></div><div class="ttdeci">ndrange_t get_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00149">gemm_hybrid_quantized_inline.hpp:149</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml">arm_gemm::NDCoordinate</a></div><div class="ttdoc">NDCoordinate builds upon a range, but specifies a starting position in addition to a size which it in...</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00151">ndrange.hpp:151</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml_a2ee55bf0e2d8324a1360f6994a762e28"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml#a2ee55bf0e2d8324a1360f6994a762e28">arm_gemm::NDRange::total_size</a></div><div class="ttdeci">unsigned int total_size() const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00136">ndrange.hpp:136</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00169">arm_gemm.hpp:169</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_afac6d7d779e04e999149dcf095734294"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">arm_gemm::Requantize32::bias_multi_stride</a></div><div class="ttdeci">size_t bias_multi_stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00173">arm_gemm.hpp:173</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml">arm_gemm::NDRange&lt; 4 &gt;</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_adb59e12af95e4ab605ffc3e12b41de58"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">arm_gemm::GemmArgs::_Ksize</a></div><div class="ttdeci">unsigned int _Ksize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00148">arm_gemm.hpp:148</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_ae9fc7380e533c43a1d91e48a7578e412"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#ae9fc7380e533c43a1d91e48a7578e412">arm_gemm::GemmHybridQuantizedInline::get_B_pretransposed_array_size</a></div><div class="ttdeci">size_t get_B_pretransposed_array_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00218">gemm_hybrid_quantized_inline.hpp:218</a></div></div>
<div class="ttc" id="ndrange_8hpp_xhtml"><div class="ttname"><a href="ndrange_8hpp.xhtml">ndrange.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a582a56796981d98bba73d4de244bd21e"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">arm_gemm::NDCoordinate::get_position_end</a></div><div class="ttdeci">int_t get_position_end(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00190">ndrange.hpp:190</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml_a0ae716040d875abeeba60aa4a6b73363"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml#a0ae716040d875abeeba60aa4a6b73363">arm_gemm::GemmHybridQuantizedInline::requantize_bias</a></div><div class="ttdeci">void requantize_bias(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00222">gemm_hybrid_quantized_inline.hpp:222</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_hybrid_quantized_inline_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_hybrid_quantized_inline.xhtml">arm_gemm::GemmHybridQuantizedInline</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__hybrid__quantized__inline_8hpp_source.xhtml#l00045">gemm_hybrid_quantized_inline.hpp:45</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="gemm__hybrid__quantized__inline_8hpp.xhtml">gemm_hybrid_quantized_inline.hpp</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:40 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
