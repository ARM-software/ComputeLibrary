<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/Types.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('arm__compute_2core_2_types_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Types.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arm__compute_2core_2_types_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TYPES_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TYPES_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_quantization_info_8h.xhtml">arm_compute/core/QuantizationInfo.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_size2_d_8h.xhtml">arm_compute/core/Size2D.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_size3_d_8h.xhtml">arm_compute/core/Size3D.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_strides_8h.xhtml">arm_compute/core/Strides.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_post_op_8h.xhtml">arm_compute/core/experimental/IPostOp.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2misc_2_macros_8h.xhtml">arm_compute/core/utils/misc/Macros.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_bfloat16_8h.xhtml">support/Bfloat16.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_half_8h.xhtml">support/Half.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/** 16-bit floating point type */</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">   48</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> = <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half_float::half</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/** Permutation vector */</span></div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">   51</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a> = <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>;<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/** Bidirectional strides */</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">   53</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">BiStrides</a> = <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/** Image colour formats */</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">   56</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>,  <span class="comment">/**&lt; Unknown image format */</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>,       <span class="comment">/**&lt; 1 channel, 1 U8 per channel */</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>,      <span class="comment">/**&lt; 1 channel, 1 S16 per channel */</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>,      <span class="comment">/**&lt; 1 channel, 1 U16 per channel */</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>,      <span class="comment">/**&lt; 1 channel, 1 S32 per channel */</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>,      <span class="comment">/**&lt; 1 channel, 1 U32 per channel */</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>, <span class="comment">/**&lt; 16-bit brain floating-point number */</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>,      <span class="comment">/**&lt; 1 channel, 1 F16 per channel */</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>,      <span class="comment">/**&lt; 1 channel, 1 F32 per channel */</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">UV88</a>,     <span class="comment">/**&lt; 2 channel, 1 U8 per channel */</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">RGB888</a>,   <span class="comment">/**&lt; 3 channels, 1 U8 per channel */</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">RGBA8888</a>, <span class="comment">/**&lt; 4 channels, 1 U8 per channel */</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">YUV444</a>,   <span class="comment">/**&lt; A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes */</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">YUYV422</a>,  <span class="comment">/**&lt; A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes */</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">NV12</a>,     <span class="comment">/**&lt; A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling */</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">NV21</a>,     <span class="comment">/**&lt; A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling */</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">IYUV</a>,     <span class="comment">/**&lt; A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes */</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">UYVY422</a>   <span class="comment">/**&lt; A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte */</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/** Available data types */</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">   79</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>,            <span class="comment">/**&lt; Unknown data type */</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">U8</a>,                 <span class="comment">/**&lt; unsigned 8-bit number */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">S8</a>,                 <span class="comment">/**&lt; signed 8-bit number */</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">QSYMM8</a>,             <span class="comment">/**&lt; quantized, symmetric fixed-point 8-bit number */</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">QASYMM8</a>,            <span class="comment">/**&lt; quantized, asymmetric fixed-point 8-bit number unsigned */</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">QASYMM8_SIGNED</a>,     <span class="comment">/**&lt; quantized, asymmetric fixed-point 8-bit number signed */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">QSYMM8_PER_CHANNEL</a>, <span class="comment">/**&lt; quantized, symmetric per channel fixed-point 8-bit number */</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">U16</a>,                <span class="comment">/**&lt; unsigned 16-bit number */</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">S16</a>,                <span class="comment">/**&lt; signed 16-bit number */</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">QSYMM16</a>,            <span class="comment">/**&lt; quantized, symmetric fixed-point 16-bit number */</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">QASYMM16</a>,           <span class="comment">/**&lt; quantized, asymmetric fixed-point 16-bit number */</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">U32</a>,                <span class="comment">/**&lt; unsigned 32-bit number */</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">S32</a>,                <span class="comment">/**&lt; signed 32-bit number */</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">U64</a>,                <span class="comment">/**&lt; unsigned 64-bit number */</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">S64</a>,                <span class="comment">/**&lt; signed 64-bit number */</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">BFLOAT16</a>,           <span class="comment">/**&lt; 16-bit brain floating-point number */</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">F16</a>,                <span class="comment">/**&lt; 16-bit floating-point number */</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>,                <span class="comment">/**&lt; 32-bit floating-point number */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">F64</a>,                <span class="comment">/**&lt; 64-bit floating-point number */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">SIZET</a>               <span class="comment">/**&lt; size_t */</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/** Available Sampling Policies */</span></div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">  104</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">CENTER</a>,  <span class="comment">/**&lt; Samples are taken at pixel center */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">TOP_LEFT</a> <span class="comment">/**&lt; Samples are taken at pixel top left corner */</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;};</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">/** [DataLayout enum definition] **/</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/** Supported tensor data layouts */</span></div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">  113</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <span class="comment">/**&lt; Unknown data layout */</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>,    <span class="comment">/**&lt; Num samples, channels, height, width */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">NHWC</a>,    <span class="comment">/**&lt; Num samples, height, width, channels */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">NCDHW</a>,   <span class="comment">/**&lt; Num samples, channels, depth, height, width */</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">NDHWC</a>    <span class="comment">/**&lt; Num samples, depth, height, width, channels */</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;};<span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">/** [DataLayout enum definition] **/</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/** Supported tensor data layout dimensions */</span></div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">  124</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>, <span class="comment">/**&lt; channel */</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">HEIGHT</a>,  <span class="comment">/**&lt; height */</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">WIDTH</a>,   <span class="comment">/**&lt; width */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">DEPTH</a>,   <span class="comment">/**&lt; depth */</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">BATCHES</a>  <span class="comment">/**&lt; batches */</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;};</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/** Available ConvolutionMethod*/</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">  134</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>,        <span class="comment">/**&lt; Convolution using GEMM */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">GEMM_CONV2D</a>, <span class="comment">/**&lt; Direct 2D GEMM convolution */</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">DIRECT</a>,      <span class="comment">/**&lt; Direct convolution */</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06">INDIRECT</a>,    <span class="comment">/**&lt; Indirect convolution */</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">WINOGRAD</a>,    <span class="comment">/**&lt; Convolution using Winograd */</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">FFT</a>          <span class="comment">/**&lt; Convolution using FFT */</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;};</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">/** Available DepthwiseConvolutionFunction*/</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">  145</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">DepthwiseConvolutionFunction</a></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079">OPTIMIZED</a>, <span class="comment">/**&lt; Optimized Depthwise Convolution */</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">GENERIC</a>,   <span class="comment">/**&lt; Generic Depthwise Convolution */</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;};</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">/** Available DeconvolutionMethod*/</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">  152</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">DeconvolutionMethod</a></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>,            <span class="comment">/**&lt; Deconvolution using GEMM */</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">DIRECT</a>,          <span class="comment">/**&lt; Direct deconvolution */</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6">UPSCALE_CONV2D</a>   <span class="comment">/**&lt; Deconvolution with Upscaling */</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;};</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/** Available FuseBatchNormalizationType*/</span></div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">  160</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">CONVOLUTION</a>,         <span class="comment">/**&lt; For Convolution weights */</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">DEPTHWISECONVOLUTION</a> <span class="comment">/**&lt; For Depthwise Convolution weights*/</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;};</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/** Padding mode to use for PadLayer */</span></div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">  167</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">PaddingMode</a></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">REFLECT</a>,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">SYMMETRIC</a></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">/** Supported comparison operations */</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">  175</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">Equal</a>,        <span class="comment">/**&lt; Equal comparison ( \f$ x == y \f$ ) */</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">NotEqual</a>,     <span class="comment">/**&lt; NotEqual comparison ( \f$ x != y \f$ ) */</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">Greater</a>,      <span class="comment">/**&lt; Greater comparison ( \f$ x &gt; y \f$ ) */</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">GreaterEqual</a>, <span class="comment">/**&lt; Greater equal comparison ( \f$ x &gt;= y \f$ ) */</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">Less</a>,         <span class="comment">/**&lt; Less comparison ( \f$ x &lt; y \f$ ) */</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">LessEqual</a>     <span class="comment">/**&lt; Less equal comparison ( \f$ x &lt;= y \f$ ) */</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;};</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">/** Container for valid region of a window */</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml">  186</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#a77ef520daabfab023d01732f24101c6e">  189</a></span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml#a77ef520daabfab023d01732f24101c6e">ValidRegion</a>()</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        : anchor{}, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>{}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">    /** Allow instances of this class to be copy constructed */</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(<a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">    /** Allow instances of this class to be copied */</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;operator=(<a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">    /** Default destructor */</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    ~<a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">    /** Constructor for a valid region with default number of dimensions</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">     * @param[in] an_anchor Anchor for the start of the valid region.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     * @param[in] a_shape   Shape of the valid region.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#aafe658c46436747f101e5aa9f8cd28b2">  211</a></span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml#aafe658c46436747f101e5aa9f8cd28b2">ValidRegion</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;an_anchor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        : anchor{ an_anchor }, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>{ a_shape }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        anchor.set_num_dimensions(std::max(anchor.num_dimensions(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions()));</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">    /** Constructor for a valid region with specified number of dimensions</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * @param[in] an_anchor      Anchor for the start of the valid region.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     * @param[in] a_shape        Shape of the valid region.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @param[in] num_dimensions Number of dimensions (must be &gt;= number of dimensions of anchor and shape).</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#a1de12d43d932fc3b1e05ff15e85212bf">  224</a></span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1de12d43d932fc3b1e05ff15e85212bf">ValidRegion</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;an_anchor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape, <span class="keywordtype">size_t</span> num_dimensions)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        : anchor{ an_anchor }, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>{ a_shape }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_dimensions &lt; std::max(anchor.num_dimensions(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions()));</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        anchor.set_num_dimensions(num_dimensions);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">    /** Return the start of the valid region for the given dimension @p d */</span></div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">  232</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">start</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d)<span class="keyword"> const</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> anchor[d];</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">    /** Return the end of the valid region for the given dimension @p d */</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">  238</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">end</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d)<span class="keyword"> const</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">return</span> anchor[d] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[d];</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /** Accessor to set the value of anchor and shape for one of the dimensions.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * @param[in] dimension Dimension for which the value is set.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     * @param[in] start     Value to be set in anchor for the dimension.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * @param[in] size      Value to be set in shape for the dimension.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">     * @return *this.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#ae658e258947a14e0d45975c531e03540">  251</a></span>&#160;    <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<span class="keyword">set</span>(<span class="keywordtype">size_t</span> dimension, <span class="keywordtype">int</span> start, <span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        anchor.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#ae658e258947a14e0d45975c531e03540">set</a>(dimension, start);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(dimension, size);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">    /** Check whether two valid regions are equal.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">     * @param[in] lhs LHS valid region</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">     * @param[in] rhs RHS valid region</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     * @return True if the valid regions are the same.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a096590f2456b9e9bcb8db98175720b60">operator==</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;rhs);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">  267</a></span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>; <span class="comment">/**&lt; Anchor for the start of the valid region. */</span></div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">  268</a></span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;  <span class="comment">/**&lt; Shape of the valid region. */</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;};</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae2382694e40b16992c526f074c53e669">  270</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a096590f2456b9e9bcb8db98175720b60">operator==</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;rhs)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> (lhs.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a> == rhs.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>) &amp;&amp; (lhs.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a> == rhs.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">/** Methods available to handle borders */</span></div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">  276</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</a>, <span class="comment">/**&lt; Borders are left undefined */</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">CONSTANT</a>,  <span class="comment">/**&lt; Pixels outside the image are assumed to have a constant value */</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">REPLICATE</a>  <span class="comment">/**&lt; Pixels outside the image are assumed to have the same value as the closest image pixel */</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;};</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">/** Container for 2D border size */</span></div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml">  284</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">    /** Empty border, i.e. no border */</span></div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">  287</a></span>&#160;    constexpr <a class="code" href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">BorderSize</a>() noexcept</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        : top{ 0 },</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    right{ 0 },</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    bottom{ 0 },</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    left{ 0 }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">    /** Border with equal size around the 2D plane */</span></div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a7a8ad863b84b105b9275ffef67761bfd">  296</a></span>&#160;    <span class="keyword">explicit</span> constexpr <a class="code" href="structarm__compute_1_1_border_size.xhtml#a7a8ad863b84b105b9275ffef67761bfd">BorderSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size) noexcept</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        : top{ size },</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    right{ size },</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    bottom{ size },</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    left{ size }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">    /** Border with same size for top/bottom and left/right */</span></div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a44089024084b73c5b83e509518df48e0">  305</a></span>&#160;    constexpr <a class="code" href="structarm__compute_1_1_border_size.xhtml#a44089024084b73c5b83e509518df48e0">BorderSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> top_bottom, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> left_right)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        : top{ top_bottom }, right{ left_right }, bottom{ top_bottom }, left{ left_right }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">    /** Border with different sizes */</span></div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a10a8505b7c7458d1f60cac844d42e023">  311</a></span>&#160;    constexpr <a class="code" href="structarm__compute_1_1_border_size.xhtml#a10a8505b7c7458d1f60cac844d42e023">BorderSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> right, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottom, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> left)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        : top{ top }, right{ right }, bottom{ bottom }, left{ left }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">    /** Check if the entire border is zero */</span></div><div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">  317</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">empty</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">return</span> top == 0 &amp;&amp; right == 0 &amp;&amp; bottom == 0 &amp;&amp; left == 0;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">    /** Check if the border is the same size on all sides */</span></div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#adb448bef8c5a6ab061f5b852bd93a427">  323</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#adb448bef8c5a6ab061f5b852bd93a427">uniform</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">return</span> top == right &amp;&amp; top == bottom &amp;&amp; top == left;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">    /** Scale this border size.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     * @param[in] scale Scale to multiply border size by.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * @return *this.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#ac2ed52112076ed0fd2aab3fbfb758837">  334</a></span>&#160;    <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;<a class="code" href="structarm__compute_1_1_border_size.xhtml#ac2ed52112076ed0fd2aab3fbfb758837">operator*=</a>(<span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        top *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        right *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        bottom *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        left *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">    /** Scale a copy of this border size.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">     * @param[in] scale Scale to multiply border size by.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">     * @return a scaled copy of this.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a19da960d23eca69f8e65d52c741147e2">  350</a></span>&#160;    <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a19da960d23eca69f8e65d52c741147e2">operator*</a>(<span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> size = *<span class="keyword">this</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        size *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">    /** Check equality with another BorderSize struct</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * @param[in] rhs other struct to check against</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">     * @return true if they are equal</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a606e0a25401c9b861b360c29688d7a2f">  364</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a606e0a25401c9b861b360c29688d7a2f">operator==</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">return</span> (top == rhs.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>) &amp;&amp; (right == rhs.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>) &amp;&amp; (bottom == rhs.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>) &amp;&amp; (left == rhs.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">    /** Check non-equality with another BorderSize struct</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">     * @param[in] rhs other struct to check against</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     * @return true if they are different</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#ac164b20b5aa0b7de17d49ed853473896">  375</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#ac164b20b5aa0b7de17d49ed853473896">operator!=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;rhs)<span class="keyword"> const</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">    /** Limit this border size.</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     * @param[in] limit Border size to limit this border size to.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">  384</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;limit)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        top    = std::min(top, limit.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        right  = std::min(right, limit.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        bottom = std::min(bottom, limit.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        left   = std::min(left, limit.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">  392</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>;    <span class="comment">/**&lt; top of the border */</span></div><div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">  393</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>;  <span class="comment">/**&lt; right of the border */</span></div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">  394</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>; <span class="comment">/**&lt; bottom of the border */</span></div><div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">  395</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>;   <span class="comment">/**&lt; left of the border */</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;};</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">/** Container for 2D padding size */</span></div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">  399</a></span>&#160;<span class="keyword">using</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">/** Policy to handle integer overflow</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"> *  @note: This is ignored by floating point operations where the overflow behavior adheres to the IEEE-754 standard</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"> *         which states that in case of overflow ±infinity is returned for the round-to-nearest modes (and follows the</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"> *         rounding rules for the directed rounding modes) by default.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">  406</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">WRAP</a>,    <span class="comment">/**&lt; Wrap around */</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">SATURATE</a> <span class="comment">/**&lt; Saturate */</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;};</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">/** Interpolation method */</span></div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">  413</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">NEAREST_NEIGHBOR</a>, <span class="comment">/**&lt; Output values are defined to match the source pixel whose center is nearest to the sample position */</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">BILINEAR</a>,         <span class="comment">/**&lt; Output values are defined by bilinear interpolation between the pixels */</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">AREA</a>,             <span class="comment">/**&lt; Output values are determined by averaging the source pixels whose areas fall under the area of the destination pixel, projected onto the source image */</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;};</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">/** Bilinear Interpolation method used by LKTracker */</span></div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">  421</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">BilinearInterpolation</a></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532">BILINEAR_OLD_NEW</a>, <span class="comment">/**&lt; Old-new method */</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64">BILINEAR_SCHARR</a>   <span class="comment">/**&lt; Scharr method */</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;};</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">/** Rectangle type */</span></div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_rectangle.xhtml">  428</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_rectangle.xhtml">Rectangle</a></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_rectangle.xhtml#a4dde988b1b2adba65ae3efa69f65d960">  430</a></span>&#160;    uint16_t <a class="code" href="structarm__compute_1_1_rectangle.xhtml#a4dde988b1b2adba65ae3efa69f65d960">x</a>;      <span class="comment">/**&lt; Top-left x coordinate */</span></div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_rectangle.xhtml#ab0580f504a7428539be299fa71565f30">  431</a></span>&#160;    uint16_t <a class="code" href="structarm__compute_1_1_rectangle.xhtml#ab0580f504a7428539be299fa71565f30">y</a>;      <span class="comment">/**&lt; Top-left y coordinate */</span></div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_rectangle.xhtml#ad0eab1042455a2067c812ab8071d5376">  432</a></span>&#160;    uint16_t <a class="code" href="structarm__compute_1_1_rectangle.xhtml#ad0eab1042455a2067c812ab8071d5376">width</a>;  <span class="comment">/**&lt; Width of the rectangle */</span></div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_rectangle.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">  433</a></span>&#160;    uint16_t <a class="code" href="structarm__compute_1_1_rectangle.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">height</a>; <span class="comment">/**&lt; Height of the rectangle */</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;};</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">/** Coordinate type */</span></div><div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates2_d.xhtml">  437</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">  439</a></span>&#160;    int32_t <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">x</a>; <span class="comment">/**&lt; X coordinates */</span></div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">  440</a></span>&#160;    int32_t <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">y</a>; <span class="comment">/**&lt; Y coordinates */</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;};</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">/** Coordinate type */</span></div><div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates3_d.xhtml">  444</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_coordinates3_d.xhtml">Coordinates3D</a></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates3_d.xhtml#aae8a40a17c0be29c1f06ca6b4f9e2235">  446</a></span>&#160;    uint32_t <a class="code" href="structarm__compute_1_1_coordinates3_d.xhtml#aae8a40a17c0be29c1f06ca6b4f9e2235">x</a>; <span class="comment">/**&lt; X coordinates */</span></div><div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates3_d.xhtml#a9c02f93c9698e4486878867c4f265c48">  447</a></span>&#160;    uint32_t <a class="code" href="structarm__compute_1_1_coordinates3_d.xhtml#a9c02f93c9698e4486878867c4f265c48">y</a>; <span class="comment">/**&lt; Y coordinates */</span></div><div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_coordinates3_d.xhtml#ad81d8d7d582cb5752dbeab85e233603a">  448</a></span>&#160;    uint32_t <a class="code" href="structarm__compute_1_1_coordinates3_d.xhtml#ad81d8d7d582cb5752dbeab85e233603a">z</a>; <span class="comment">/**&lt; Z coordinates */</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;};</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">/** Padding information as a pair of unsigned int start/end */</span></div><div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">  452</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a> = std::pair&lt;uint32_t, uint32_t&gt;;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">/** List of padding information */</span></div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">  455</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> = std::vector&lt;PaddingInfo&gt;;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">/** Information to produce a tiled version of a Tensor */</span></div><div class="line"><a name="l00458"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">  458</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">Multiples</a> = std::vector&lt;uint32_t&gt;;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">/** Available channels */</span></div><div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">  461</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, <span class="comment">/** Unknown channel format */</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">C0</a>,      <span class="comment">/**&lt; First channel (used by formats with unknown channel types). */</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>,      <span class="comment">/**&lt; Second channel (used by formats with unknown channel types). */</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>,      <span class="comment">/**&lt; Third channel (used by formats with unknown channel types). */</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>,      <span class="comment">/**&lt; Fourth channel (used by formats with unknown channel types). */</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">R</a>,       <span class="comment">/**&lt; Red channel. */</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">G</a>,       <span class="comment">/**&lt; Green channel. */</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>,       <span class="comment">/**&lt; Blue channel. */</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>,       <span class="comment">/**&lt; Alpha channel. */</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Y</a>,       <span class="comment">/**&lt; Luma channel. */</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>,       <span class="comment">/**&lt; Cb/U channel. */</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">V</a>        <span class="comment">/**&lt; Cr/V/Value channel. */</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;};</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">/** Available reduction operations */</span></div><div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">  478</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">ARG_IDX_MAX</a>, <span class="comment">/**&lt; Index of the max value */</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">ARG_IDX_MIN</a>, <span class="comment">/**&lt; Index of the min value */</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">MEAN_SUM</a>,    <span class="comment">/**&lt; Mean of sum */</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">PROD</a>,        <span class="comment">/**&lt; Product */</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">SUM_SQUARE</a>,  <span class="comment">/**&lt; Sum of squares */</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">SUM</a>,         <span class="comment">/**&lt; Sum */</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">MIN</a>,         <span class="comment">/**&lt; Min */</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>,         <span class="comment">/**&lt; Max */</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;};</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">/** Available element-wise operations */</span></div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">  491</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ADD</a>,          <span class="comment">/**&lt; (x + y) */</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">SUB</a>,          <span class="comment">/**&lt; (x  - y) */</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">DIV</a>,          <span class="comment">/**&lt; (x / y) */</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">MIN</a>,          <span class="comment">/**&lt; Min(x, y) */</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>,          <span class="comment">/**&lt; Max(x, y) */</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">SQUARED_DIFF</a>, <span class="comment">/**&lt; (x - y)^2 */</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">POWER</a>,        <span class="comment">/**&lt; x ^ y */</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">PRELU</a>,        <span class="comment">/**&lt; y*x if x &lt; 0, x otherwise */</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;};</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">/** Available element wise unary operations */</span></div><div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">  504</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">RSQRT</a>,       <span class="comment">/**&lt; Reverse square root */</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">EXP</a>,         <span class="comment">/**&lt; Exponential */</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">NEG</a>,         <span class="comment">/**&lt; Negate */</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</a>,         <span class="comment">/**&lt; Natural Logarithm */</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>,         <span class="comment">/**&lt; Absolute value */</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">SIN</a>,         <span class="comment">/**&lt; Sine */</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">ROUND</a>,       <span class="comment">/**&lt; Round */</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">LOGICAL_NOT</a>, <span class="comment">/**&lt; Logical Not */</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;};</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">/** Available bitwise operations */</span></div><div class="line"><a name="l00517"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">  517</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">BitwiseOperation</a></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532">AND</a>, <span class="comment">/**&lt; Bitwise AND operation */</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d">NOT</a>, <span class="comment">/**&lt; Bitwise NOT operation */</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616">OR</a>,  <span class="comment">/**&lt; Bitwise OR operation  */</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d">XOR</a>, <span class="comment">/**&lt; Bitwise XOR operation  */</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;};</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">/** The normalization type used for the normalization layer */</span></div><div class="line"><a name="l00526"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">  526</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">IN_MAP_1D</a>, <span class="comment">/**&lt; Normalization applied within the same map in 1D region */</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">IN_MAP_2D</a>, <span class="comment">/**&lt; Normalization applied within the same map in 2D region */</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">CROSS_MAP</a>  <span class="comment">/**&lt; Normalization applied cross maps */</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;};</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">/** Detection window used for the object detection. The detection window keeps the following information:</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"> *  -# Geometry of the rectangular window (x/y of top-left corner and width/height)</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment"> *  -# Index of the class used for evaluating which class the detection window belongs to</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"> *  -# Confidence value (score) obtained with the classifier</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml">  539</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div><div class="line"><a name="l00541"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">  541</a></span>&#160;    uint16_t x{ 0 };         <span class="comment">/**&lt; Top-left x coordinate */</span></div><div class="line"><a name="l00542"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">  542</a></span>&#160;    uint16_t y{ 0 };         <span class="comment">/**&lt; Top-left y coordinate */</span></div><div class="line"><a name="l00543"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">  543</a></span>&#160;    uint16_t width{ 0 };     <span class="comment">/**&lt; Width of the detection window */</span></div><div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">  544</a></span>&#160;    uint16_t height{ 0 };    <span class="comment">/**&lt; Height of the detection window */</span></div><div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">  545</a></span>&#160;    uint16_t idx_class{ 0 }; <span class="comment">/**&lt; Index of the class */</span></div><div class="line"><a name="l00546"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">  546</a></span>&#160;    <span class="keywordtype">float</span>    score{ 0.f };   <span class="comment">/**&lt; Confidence value for the detection window */</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;};</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">/** Dimension rounding type when down-scaling on CNNs</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"> * @note Used in pooling and convolution layer</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">  552</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>, <span class="comment">/**&lt; Floor rounding */</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</a>   <span class="comment">/**&lt; Ceil rounding */</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;};</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment">/** Available pooling types */</span></div><div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">  559</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;{</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>, <span class="comment">/**&lt; Max Pooling */</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">AVG</a>, <span class="comment">/**&lt; Average Pooling */</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</a>   <span class="comment">/**&lt; L2 Pooling */</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;};</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">/** Available non maxima suppression types */</span></div><div class="line"><a name="l00567"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">  567</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;{</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>,   <span class="comment">/**&lt; Linear NMS */</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">GAUSSIAN</a>, <span class="comment">/**&lt; Gaussian NMS */</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">ORIGINAL</a>  <span class="comment">/**&lt; Original NMS */</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;};</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">/** BoxWithNonMaximaSuppressionLimit Information class */</span></div><div class="line"><a name="l00575"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">  575</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> final</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;{</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">     * @param[in] score_thresh             (Optional) Score threshold.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">     * @param[in] nms                      (Optional) NMS value</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">     * @param[in] detections               (Optional) Number of detections</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">     * @param[in] soft_nms_enabled         (Optional) Enable SoftNMS</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">     * @param[in] soft_nms_method          (Optional) Soft NMS method</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">     * @param[in] soft_nms_sigma           (Optional) Soft NMS sigma value</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment">     * @param[in] soft_nms_min_score_thres (Optional) Soft NMS minimum score threshold</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">     * @param[in] suppress_size            (Optional) Filter out boxes based on their size. Defaults to false</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">     * @param[in] min_size                 (Optional) Smaller boxes than min_size will be filtered out. Defaults to 1</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">     * @param[in] im_width                 (Optional) Boxes whose centers (on the x axis) is beyond im_width will be filtered. Defaults to 1</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">     * @param[in] im_height                (Optional) Boxes whose centers (on the y axis) is beyond im_height will be filtered. Defaults to 1</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa1d81460ec22dc75efcb8f4eada940f6">  592</a></span>&#160;    <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa1d81460ec22dc75efcb8f4eada940f6">BoxNMSLimitInfo</a>(<span class="keywordtype">float</span> score_thresh = 0.05f, <span class="keywordtype">float</span> nms = 0.3f,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <span class="keywordtype">int</span> detections = 100, <span class="keywordtype">bool</span> soft_nms_enabled = <span class="keyword">false</span>,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> soft_nms_method = <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">NMSType::LINEAR</a>,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                    <span class="keywordtype">float</span> soft_nms_sigma = 0.5f, <span class="keywordtype">float</span> soft_nms_min_score_thres = 0.001f, <span class="keywordtype">bool</span> suppress_size = <span class="keyword">false</span>, <span class="keywordtype">float</span> min_size = 1.0f, <span class="keywordtype">float</span> im_width = 1.0f, <span class="keywordtype">float</span> im_height = 1.0f)</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        : _score_thresh(score_thresh), _nms(nms), _detections_per_im(detections), _soft_nms_enabled(soft_nms_enabled), _soft_nms_method(soft_nms_method), _soft_nms_sigma(soft_nms_sigma),</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;          _soft_nms_min_score_thres(soft_nms_min_score_thres), _suppress_size(suppress_size), _min_size(min_size), _im_width(im_width), _im_height(im_height)</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">    /** Get the score threshold */</span></div><div class="line"><a name="l00601"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a535a6f56c148f286729fad7749a58e9b">  601</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a535a6f56c148f286729fad7749a58e9b">score_thresh</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> _score_thresh;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">    /** Get the NMS */</span></div><div class="line"><a name="l00606"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a90dc98d4ae6b7ab06d5e089378817672">  606</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a90dc98d4ae6b7ab06d5e089378817672">nms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordflow">return</span> _nms;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">    /** Get the number of detections */</span></div><div class="line"><a name="l00611"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#af3ec399a9e0cea025fa9b37773a6eb13">  611</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#af3ec399a9e0cea025fa9b37773a6eb13">detections_per_im</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">return</span> _detections_per_im;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">    /** Check if soft NMS is enabled */</span></div><div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a9bfc32f4601b11c9c5b18648ad6ae0fc">  616</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a9bfc32f4601b11c9c5b18648ad6ae0fc">soft_nms_enabled</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">return</span> _soft_nms_enabled;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">    /** Get soft NMS method */</span></div><div class="line"><a name="l00621"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ab1de5a83f57e76567391915b23d2b483">  621</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ab1de5a83f57e76567391915b23d2b483">soft_nms_method</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">return</span> _soft_nms_method;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">    /** Get soft NMS sigma */</span></div><div class="line"><a name="l00626"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ad54fb0c74b50fe8594e530abc8765888">  626</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ad54fb0c74b50fe8594e530abc8765888">soft_nms_sigma</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordflow">return</span> _soft_nms_sigma;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment">    /** Get soft nms min score threshold */</span></div><div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a8ce2eccce44a2d3bf9dce07cbf821cd4">  631</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a8ce2eccce44a2d3bf9dce07cbf821cd4">soft_nms_min_score_thres</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">return</span> _soft_nms_min_score_thres;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">    /** Get if NMS will suppress boxes based on their size/position */</span></div><div class="line"><a name="l00636"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a0c1430ec3d495d93f98731a5f1c89f08">  636</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a0c1430ec3d495d93f98731a5f1c89f08">suppress_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">return</span> _suppress_size;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">    /** Get size suppression threshold */</span></div><div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa7d375782a8b80e3d4efee296a059855">  641</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa7d375782a8b80e3d4efee296a059855">min_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">return</span> _min_size;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">    /** Get image width (NMS may suppress boxes whose center sits beyond the image width) */</span></div><div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">  646</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">im_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordflow">return</span> _im_width;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">    /** Get image height (NMS may suppress boxes whose center sits beyond the image height) */</span></div><div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">  651</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">im_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">return</span> _im_height;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordtype">float</span>   _score_thresh;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordtype">float</span>   _nms;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordtype">int</span>     _detections_per_im;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordtype">bool</span>    _soft_nms_enabled;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> _soft_nms_method;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordtype">float</span>   _soft_nms_sigma;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordtype">float</span>   _soft_nms_min_score_thres;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keywordtype">bool</span>    _suppress_size;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keywordtype">float</span>   _min_size;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordtype">float</span>   _im_width;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keywordtype">float</span>   _im_height;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;};</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">/** Padding and stride information class */</span></div><div class="line"><a name="l00671"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml">  671</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment">     * @param[in] stride_x (Optional) Stride, in elements, across x. Defaults to 1.</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment">     * @param[in] stride_y (Optional) Stride, in elements, across y. Defaults to 1.</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment">     * @param[in] pad_x    (Optional) Padding, in elements, across x. Defaults to 0.</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment">     * @param[in] pad_y    (Optional) Padding, in elements, across y. Defaults to 0.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment">     * @param[in] round    (Optional) Dimensions rounding. Defaults to @ref FLOOR.</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00682"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#aebf88ce57c0ad3d796ca66edb8a43e1a">  682</a></span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#aebf88ce57c0ad3d796ca66edb8a43e1a">PadStrideInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_x = 1, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_y = 1,</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_x = 0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_y = 0,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                  <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a> = <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>)</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        : _stride(<a class="code" href="namespacestd.xhtml">std</a>::make_pair(stride_x, stride_y)),</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;          _pad_left(pad_x),</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;          _pad_top(pad_y),</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;          _pad_right(pad_x),</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;          _pad_bottom(pad_y),</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;          _round_type(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>)</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    {</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment">     * @param[in] stride_x   Stride, in elements, across x.</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">     * @param[in] stride_y   Stride, in elements, across y.</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">     * @param[in] pad_left   Padding across x on the left, in elements.</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment">     * @param[in] pad_right  Padding across x on the right, in elements.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment">     * @param[in] pad_top    Padding across y on the top, in elements.</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">     * @param[in] pad_bottom Padding across y on the bottom, in elements.</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment">     * @param[in] round      Dimensions rounding.</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#ad71c061b948d43c30e489e15fee6dc8b">  703</a></span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad71c061b948d43c30e489e15fee6dc8b">PadStrideInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_y,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                  <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>)</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        : _stride(<a class="code" href="namespacestd.xhtml">std</a>::make_pair(stride_x, stride_y)),</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;          _pad_left(pad_left),</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;          _pad_top(pad_top),</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;          _pad_right(pad_right),</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;          _pad_bottom(pad_bottom),</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;          _round_type(round)</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">    /** Get the stride.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">     * @return a pair: stride x, stride y.</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00719"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">  719</a></span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">return</span> _stride;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">    /** Check whether the padding is symmetric.</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment">     * @return True if the padding is symmetric.</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00727"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#ab4f112d61c643fe54d616201a9414267">  727</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ab4f112d61c643fe54d616201a9414267">padding_is_symmetric</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <span class="keywordflow">return</span> (_pad_left == _pad_right) &amp;&amp; (_pad_top == _pad_bottom);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">    /** Get the padding.</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment">     * @note This should only be used when the padding is symmetric.</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment">     * @return a pair: padding left/right, padding top/bottom</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00737"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#ae33ab50602da54038611e30d5013c040">  737</a></span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ae33ab50602da54038611e30d5013c040">pad</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="comment">//this accessor should be used only when padding is symmetric</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!padding_is_symmetric());</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">return</span> std::make_pair(_pad_left, _pad_top);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    }</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment">    /** Get the left padding */</span></div><div class="line"><a name="l00745"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">  745</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="keywordflow">return</span> _pad_left;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">    /** Get the right padding */</span></div><div class="line"><a name="l00750"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">  750</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">return</span> _pad_right;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">    /** Get the top padding */</span></div><div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">  755</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        <span class="keywordflow">return</span> _pad_top;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment">    /** Get the bottom padding */</span></div><div class="line"><a name="l00760"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">  760</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keywordflow">return</span> _pad_bottom;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">    /** Get the rounding type */</span></div><div class="line"><a name="l00766"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">  766</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">round</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="keywordflow">return</span> _round_type;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    }</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">    /** Check whether this has any padding */</span></div><div class="line"><a name="l00772"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_pad_stride_info.xhtml#add9dd56c183d91e148b0a7b390159fda">  772</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#add9dd56c183d91e148b0a7b390159fda">has_padding</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">return</span> (_pad_left != 0 || _pad_top != 0 || _pad_right != 0 || _pad_bottom != 0);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; _stride;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pad_left;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pad_top;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pad_right;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pad_bottom;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> _round_type;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;};</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">/** Padding information for 2D operations like Conv2d */</span></div><div class="line"><a name="l00788"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml">  788</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;{</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <a class="code" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00791"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml#a4e5f55b5ca6d0185a7b23b447c696d08">  791</a></span>&#160;    <a class="code" href="structarm__compute_1_1_padding2_d.xhtml#a4e5f55b5ca6d0185a7b23b447c696d08">Padding2D</a>(<span class="keywordtype">size_t</span> left, <span class="keywordtype">size_t</span> right, <span class="keywordtype">size_t</span> top, <span class="keywordtype">size_t</span> bottom)</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        : left(left), right(right), top(top), bottom(bottom)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    }</div><div class="line"><a name="l00795"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml#a951236a0702535ba18ba51db69428658">  795</a></span>&#160;    <span class="keywordtype">size_t</span> left   = { 0 }; <span class="comment">/**&lt;  Padding across the width dimension on the left, in elements. */</span></div><div class="line"><a name="l00796"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">  796</a></span>&#160;    <span class="keywordtype">size_t</span> right  = { 0 }; <span class="comment">/**&lt;  Padding across the width dimension on the right, in elements. */</span></div><div class="line"><a name="l00797"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">  797</a></span>&#160;    <span class="keywordtype">size_t</span> top    = { 0 }; <span class="comment">/**&lt;  Padding across the height dimension on the top, in elements. */</span></div><div class="line"><a name="l00798"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding2_d.xhtml#a859088de403805f35d826df5ef39ee80">  798</a></span>&#160;    <span class="keywordtype">size_t</span> bottom = { 0 }; <span class="comment">/**&lt;  Padding across the height dimension on the bottom, in elements. */</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;};</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment">/** Padding information for 3D operations like Conv3d */</span></div><div class="line"><a name="l00802"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml">  802</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;{</div><div class="line"><a name="l00804"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#a4b9bd2a8b6377b91b9e2bb16976b3ba5">  804</a></span>&#160;    <a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a4b9bd2a8b6377b91b9e2bb16976b3ba5">Padding3D</a>() noexcept</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    {</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#ac2c7670a6bc4ebe6a07bf9b8f7034ecc">  808</a></span>&#160;    <a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ac2c7670a6bc4ebe6a07bf9b8f7034ecc">Padding3D</a>(<span class="keywordtype">size_t</span> pad_x, <span class="keywordtype">size_t</span> pad_y, <span class="keywordtype">size_t</span> pad_z)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        : left(pad_x), right(pad_x), top(pad_y), bottom(pad_y), front(pad_z), back(pad_z)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    {</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#a5e133b0eab146ce38719d888468740f1">  813</a></span>&#160;    <a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a5e133b0eab146ce38719d888468740f1">Padding3D</a>(<span class="keywordtype">size_t</span> left, <span class="keywordtype">size_t</span> right, <span class="keywordtype">size_t</span> top, <span class="keywordtype">size_t</span> bottom, <span class="keywordtype">size_t</span> front, <span class="keywordtype">size_t</span> back)</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        : left(left), right(right), top(top), bottom(bottom), front(front), back(back)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    {</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">  818</a></span>&#160;    <span class="keywordtype">size_t</span> left   = { 0 }; <span class="comment">/**&lt;  Padding across the width dimenstion on the left, in elements. */</span></div><div class="line"><a name="l00819"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">  819</a></span>&#160;    <span class="keywordtype">size_t</span> right  = { 0 }; <span class="comment">/**&lt;  Padding across the width dimenstion on the right, in elements. */</span></div><div class="line"><a name="l00820"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">  820</a></span>&#160;    <span class="keywordtype">size_t</span> top    = { 0 }; <span class="comment">/**&lt;  Padding across the height dimenstion  on the top, in elements. */</span></div><div class="line"><a name="l00821"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">  821</a></span>&#160;    <span class="keywordtype">size_t</span> bottom = { 0 }; <span class="comment">/**&lt;  Padding across the height dimenstion on the bottom, in elements. */</span></div><div class="line"><a name="l00822"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">  822</a></span>&#160;    <span class="keywordtype">size_t</span> front  = { 0 }; <span class="comment">/**&lt;  Padding across the depth dimenstion on the front, in elements. */</span></div><div class="line"><a name="l00823"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">  823</a></span>&#160;    <span class="keywordtype">size_t</span> back   = { 0 }; <span class="comment">/**&lt;  Padding across the depth dimenstion on the back, in elements. */</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;};</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">/** PriorBox layer info */</span></div><div class="line"><a name="l00827"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml">  827</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> final</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;{</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment">    /** Default Constructor */</span></div><div class="line"><a name="l00831"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a02b66d0a0d561b44c99b1db8b740d1dd">  831</a></span>&#160;    <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a02b66d0a0d561b44c99b1db8b740d1dd">PriorBoxLayerInfo</a>()</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        : _min_sizes(),</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;          _variances(),</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;          _offset(),</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;          _flip(true),</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;          _clip(false),</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;          _max_sizes(),</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;          _aspect_ratios(),</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;          _img_size(),</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;          _steps()</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    {</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">     * @param[in] min_sizes     Min sizes vector.</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">     * @param[in] variances     Variances vector.</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">     * @param[in] offset        Offset value.</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment">     * @param[in] flip          (Optional) Flip the aspect ratios.</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">     * @param[in] clip          (Optional) Clip coordinates so that they&#39;re within [0,1].</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment">     * @param[in] max_sizes     (Optional) Max sizes vector.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">     * @param[in] aspect_ratios (Optional) Aspect ratios of the boxes.</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">     * @param[in] img_size      (Optional) Image size.</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment">     * @param[in] steps         (Optional) Step values.</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00855"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a9752ea0a44b131caa9384231944a2b8d">  855</a></span>&#160;    <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a9752ea0a44b131caa9384231944a2b8d">PriorBoxLayerInfo</a>(<span class="keyword">const</span> std::vector&lt;float&gt; &amp;min_sizes, <span class="keyword">const</span> std::vector&lt;float&gt; &amp;variances, <span class="keywordtype">float</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keywordtype">bool</span> flip = <span class="keyword">true</span>, <span class="keywordtype">bool</span> clip = <span class="keyword">false</span>,</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                      <span class="keyword">const</span> std::vector&lt;float&gt; &amp;max_sizes = {}, <span class="keyword">const</span> std::vector&lt;float&gt; &amp;aspect_ratios = {},</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> &amp;img_size = <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a>{ 0, 0 }, <span class="keyword">const</span> std::array&lt;float, 2&gt; &amp;steps = { { 0.f, 0.f } })</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        : _min_sizes(min_sizes),</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;          _variances(variances),</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;          _offset(offset),</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;          _flip(flip),</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;          _clip(clip),</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;          _max_sizes(max_sizes),</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;          _aspect_ratios(),</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;          _img_size(img_size),</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;          _steps(steps)</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    {</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        _aspect_ratios.push_back(1.);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; aspect_ratios.size(); ++i)</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        {</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordtype">float</span> ar            = aspect_ratios[i];</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordtype">bool</span>  already_exist = <span class="keyword">false</span>;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> ar_new : _aspect_ratios)</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;            {</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                <span class="keywordflow">if</span>(fabs(ar - ar_new) &lt; 1e-6)</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                {</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    already_exist = <span class="keyword">true</span>;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                }</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            }</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            <span class="keywordflow">if</span>(!already_exist)</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            {</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                _aspect_ratios.push_back(ar);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                <span class="keywordflow">if</span>(flip)</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                {</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                    _aspect_ratios.push_back(1.f / ar);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                }</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;            }</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        }</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">    /** Get min sizes. */</span></div><div class="line"><a name="l00892"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a147b1e13f347e7b995de58f8fafd6723">  892</a></span>&#160;    std::vector&lt;float&gt; <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a147b1e13f347e7b995de58f8fafd6723">min_sizes</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        <span class="keywordflow">return</span> _min_sizes;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">    /** Get min variances. */</span></div><div class="line"><a name="l00897"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#afd15b7132dbacc847969f91c72633e7d">  897</a></span>&#160;    std::vector&lt;float&gt; <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#afd15b7132dbacc847969f91c72633e7d">variances</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        <span class="keywordflow">return</span> _variances;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">    /** Get the step coordinates */</span></div><div class="line"><a name="l00902"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6b45b0e0f8dd18aae641aebaf5055e4d">  902</a></span>&#160;    std::array&lt;float, 2&gt; <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6b45b0e0f8dd18aae641aebaf5055e4d">steps</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        <span class="keywordflow">return</span> _steps;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment">    /** Get the image size coordinates */</span></div><div class="line"><a name="l00907"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a3fda69c38090070865d117fe94cf0c88">  907</a></span>&#160;    <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a3fda69c38090070865d117fe94cf0c88">img_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        <span class="keywordflow">return</span> _img_size;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment">    /** Get the offset */</span></div><div class="line"><a name="l00912"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a8420f76d876fd4e61e653dfb6b56b5f5">  912</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a8420f76d876fd4e61e653dfb6b56b5f5">offset</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordflow">return</span> _offset;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">    /** Get the flip value */</span></div><div class="line"><a name="l00917"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a4333016b04c798f769404aad7683ec3d">  917</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a4333016b04c798f769404aad7683ec3d">flip</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <span class="keywordflow">return</span> _flip;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">    /** Get the clip value */</span></div><div class="line"><a name="l00922"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a7a636f1561bb52de88a5ef9671f28c12">  922</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a7a636f1561bb52de88a5ef9671f28c12">clip</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        <span class="keywordflow">return</span> _clip;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">    /** Get max sizes. */</span></div><div class="line"><a name="l00927"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a985940fefc02bdbc0ea1c916bb0ac82b">  927</a></span>&#160;    std::vector&lt;float&gt; <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a985940fefc02bdbc0ea1c916bb0ac82b">max_sizes</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        <span class="keywordflow">return</span> _max_sizes;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">    /** Get aspect ratios. */</span></div><div class="line"><a name="l00932"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6a8ad2364ce45d0cb7c6938544711f7c">  932</a></span>&#160;    std::vector&lt;float&gt; <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6a8ad2364ce45d0cb7c6938544711f7c">aspect_ratios</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="keywordflow">return</span> _aspect_ratios;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    }</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    std::vector&lt;float&gt; _min_sizes;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    std::vector&lt;float&gt; _variances;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordtype">float</span>              _offset;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordtype">bool</span>               _flip;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordtype">bool</span>               _clip;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    std::vector&lt;float&gt; _max_sizes;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    std::vector&lt;float&gt; _aspect_ratios;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <a class="code" href="structarm__compute_1_1_coordinates2_d.xhtml">Coordinates2D</a>      _img_size;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    std::array&lt;float, 2&gt; _steps;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;};</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment">// Bounding Box [xmin, ymin, xmax, ymax]</span></div><div class="line"><a name="l00950"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">  950</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">BBox</a> = std::array&lt;float, 4&gt;;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment">// LabelBBox used for map label and bounding box</span></div><div class="line"><a name="l00952"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae6550ea34c33d2e943476386d6ba8bed">  952</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ae6550ea34c33d2e943476386d6ba8bed">LabelBBox</a> = std::map&lt;int, std::vector&lt;BBox&gt;&gt;;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">/** Available Detection Output code types */</span></div><div class="line"><a name="l00955"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">  955</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;{</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">CORNER</a>,      <span class="comment">/**&lt; Use box corners */</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">CENTER_SIZE</a>, <span class="comment">/**&lt; Use box centers and size */</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">CORNER_SIZE</a>, <span class="comment">/**&lt; Use box centers and size */</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">TF_CENTER</a>    <span class="comment">/**&lt; Use box centers and size but flip x and y co-ordinates */</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;};</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">/** Detection Output layer info */</span></div><div class="line"><a name="l00964"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml">  964</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> final</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">    /** Default Constructor */</span></div><div class="line"><a name="l00968"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#aba5c653899ad75de3548b6c60c08939c">  968</a></span>&#160;    <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#aba5c653899ad75de3548b6c60c08939c">DetectionOutputLayerInfo</a>()</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        : _num_classes(),</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;          _share_location(),</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;          _code_type(<a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a>::<a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">CORNER</a>),</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;          _keep_top_k(),</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;          _nms_threshold(),</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;          _top_k(),</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;          _background_label_id(),</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;          _confidence_threshold(),</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;          _variance_encoded_in_target(false),</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;          _eta(),</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;          _num_loc_classes()</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        _num_loc_classes = _share_location ? 1 : _num_classes;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="comment">     * @param[in] num_classes                Number of classes to be predicted.</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="comment">     * @param[in] share_location             If true, bounding box are shared among different classes.</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="comment">     * @param[in] code_type                  Type of coding method for bbox.</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment">     * @param[in] keep_top_k                 Number of total bounding boxes to be kept per image after NMS step.</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment">     * @param[in] nms_threshold              Threshold to be used in NMS.</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="comment">     * @param[in] top_k                      (Optional) Number of boxes per image with top confidence scores that are fed into the NMS algorithm. Default set to -1.</span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment">     * @param[in] background_label_id        (Optional) Background label ID. If there is no background class, set it as -1.</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="comment">     * @param[in] confidence_threshold       (Optional) Only consider detections whose confidences are larger than a threshold. Default set to -FLT_MAX.</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment">     * @param[in] variance_encoded_in_target (Optional) If true, variance is encoded in target. Otherwise we need to adjust the predicted offset accordingly.Default set to false.</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment">     * @param[in] eta                        (Optional) Eta.</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00996"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a13f922d9427581021eca1cc48faa431c">  996</a></span>&#160;    <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a13f922d9427581021eca1cc48faa431c">DetectionOutputLayerInfo</a>(<span class="keywordtype">int</span> num_classes, <span class="keywordtype">bool</span> share_location, <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> code_type, <span class="keywordtype">int</span> keep_top_k, <span class="keywordtype">float</span> nms_threshold, <span class="keywordtype">int</span> top_k = -1, <span class="keywordtype">int</span> background_label_id = -1,</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                             <span class="keywordtype">float</span> confidence_threshold = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>(), <span class="keywordtype">bool</span> variance_encoded_in_target = <span class="keyword">false</span>, <span class="keywordtype">float</span> eta = 1)</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        : _num_classes(num_classes),</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;          _share_location(share_location),</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;          _code_type(code_type),</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;          _keep_top_k(keep_top_k),</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;          _nms_threshold(nms_threshold),</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;          _top_k(top_k),</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;          _background_label_id(background_label_id),</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;          _confidence_threshold(confidence_threshold),</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;          _variance_encoded_in_target(variance_encoded_in_target),</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;          _eta(eta),</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;          _num_loc_classes()</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    {</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        _num_loc_classes = _share_location ? 1 : _num_classes;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment">    /** Get num classes. */</span></div><div class="line"><a name="l01013"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a2411dd5edb9ccb581d303f3396e9c14c"> 1013</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a2411dd5edb9ccb581d303f3396e9c14c">num_classes</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <span class="keywordflow">return</span> _num_classes;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">    /** Get share location. */</span></div><div class="line"><a name="l01018"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a7bc581f245390f063f02c3fcbb422320"> 1018</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a7bc581f245390f063f02c3fcbb422320">share_location</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="keywordflow">return</span> _share_location;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="comment">    /** Get detection output code type. */</span></div><div class="line"><a name="l01023"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a025a49ad16e9d5d59d3919c25a17d1ae"> 1023</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a025a49ad16e9d5d59d3919c25a17d1ae">code_type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        <span class="keywordflow">return</span> _code_type;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment">    /** Get if variance encoded in target. */</span></div><div class="line"><a name="l01028"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#aa5081eb6d3f7bf20f32573af8a60f1f9"> 1028</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#aa5081eb6d3f7bf20f32573af8a60f1f9">variance_encoded_in_target</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordflow">return</span> _variance_encoded_in_target;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">    /** Get the number of total bounding boxes to be kept per image. */</span></div><div class="line"><a name="l01033"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a381583deeb7c92f3b86d959c1e6c8185"> 1033</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a381583deeb7c92f3b86d959c1e6c8185">keep_top_k</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        <span class="keywordflow">return</span> _keep_top_k;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment">    /** Get nms threshold. */</span></div><div class="line"><a name="l01038"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#af14fc4cf24dfb69a0f225a582ef01d54"> 1038</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#af14fc4cf24dfb69a0f225a582ef01d54">nms_threshold</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <span class="keywordflow">return</span> _nms_threshold;</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="comment">    /** Get eta. */</span></div><div class="line"><a name="l01043"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a206472366fc0981d36701fe46679fd8f"> 1043</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a206472366fc0981d36701fe46679fd8f">eta</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordflow">return</span> _eta;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment">    /** Get background label ID. */</span></div><div class="line"><a name="l01048"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a158d49c7c1df3c6c6589b47d3de56cf0"> 1048</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a158d49c7c1df3c6c6589b47d3de56cf0">background_label_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        <span class="keywordflow">return</span> _background_label_id;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment">    /** Get confidence threshold. */</span></div><div class="line"><a name="l01053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a47c941c24980e6f61a74986c4a16c16c"> 1053</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#a47c941c24980e6f61a74986c4a16c16c">confidence_threshold</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;        <span class="keywordflow">return</span> _confidence_threshold;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment">    /** Get top K. */</span></div><div class="line"><a name="l01058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#acf35ae15a9350f47bcba0d0cedeb3e7c"> 1058</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#acf35ae15a9350f47bcba0d0cedeb3e7c">top_k</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        <span class="keywordflow">return</span> _top_k;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment">    /** Get number of location classes. */</span></div><div class="line"><a name="l01063"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_output_layer_info.xhtml#ae82a2ccc5739cb255a9a7679d6161399"> 1063</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml#ae82a2ccc5739cb255a9a7679d6161399">num_loc_classes</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        <span class="keywordflow">return</span> _num_loc_classes;</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    }</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <span class="keywordtype">int</span>                          _num_classes;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <span class="keywordtype">bool</span>                         _share_location;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">DetectionOutputLayerCodeType</a> _code_type;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <span class="keywordtype">int</span>                          _keep_top_k;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keywordtype">float</span>                        _nms_threshold;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keywordtype">int</span>                          _top_k;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordtype">int</span>                          _background_label_id;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="keywordtype">float</span>                        _confidence_threshold;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    <span class="keywordtype">bool</span>                         _variance_encoded_in_target;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <span class="keywordtype">float</span>                        _eta;</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <span class="keywordtype">int</span>                          _num_loc_classes;</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;};</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment">/** Detection Output layer info */</span></div><div class="line"><a name="l01083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml"> 1083</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> final</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;{</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment">    /** Default Constructor */</span></div><div class="line"><a name="l01087"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a6eaedc96f1e42852da9afbb0c33df4be"> 1087</a></span>&#160;    <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a6eaedc96f1e42852da9afbb0c33df4be">DetectionPostProcessLayerInfo</a>()</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        : _max_detections(),</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;          _max_classes_per_detection(),</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;          _nms_score_threshold(),</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;          _iou_threshold(),</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;          _num_classes(),</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;          _scales_values(),</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;          _use_regular_nms(),</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;          _detection_per_class(),</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;          _dequantize_scores()</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    {</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment">     * @param[in] max_detections            Number of total detection.</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="comment">     * @param[in] max_classes_per_detection Number of total classes to be kept after NMS step. Used in the Fast Non-Max-Suppression</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="comment">     * @param[in] nms_score_threshold       Threshold to be used in NMS</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="comment">     * @param[in] iou_threshold             Threshold to be used during the intersection over union.</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment">     * @param[in] num_classes               Number of classes.</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="comment">     * @param[in] scales_values             Scales values used for decode center size boxes.</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="comment">     * @param[in] use_regular_nms           (Optional) Boolean to determinate if use regular or fast nms. Defaults to false.</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="comment">     * @param[in] detection_per_class       (Optional) Number of detection per class. Used in the Regular Non-Max-Suppression. Defaults to 100.</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment">     * @param[in] dequantize_scores         (Optional) If the scores need to be dequantized. Defaults to true.</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01111"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae90105aa70d36e539722ec84f94554cf"> 1111</a></span>&#160;    <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae90105aa70d36e539722ec84f94554cf">DetectionPostProcessLayerInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_detections, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_classes_per_detection, <span class="keywordtype">float</span> nms_score_threshold, <span class="keywordtype">float</span> iou_threshold, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes,</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                  std::array&lt;float, 4&gt; scales_values, <span class="keywordtype">bool</span> use_regular_nms = <span class="keyword">false</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> detection_per_class = 100, <span class="keywordtype">bool</span> dequantize_scores = <span class="keyword">true</span>)</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        : _max_detections(max_detections),</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;          _max_classes_per_detection(max_classes_per_detection),</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;          _nms_score_threshold(nms_score_threshold),</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;          _iou_threshold(iou_threshold),</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;          _num_classes(num_classes),</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;          _scales_values(scales_values),</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;          _use_regular_nms(use_regular_nms),</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;          _detection_per_class(detection_per_class),</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;          _dequantize_scores(dequantize_scores)</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    {</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="comment">    /** Get max detections. */</span></div><div class="line"><a name="l01125"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb"> 1125</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;        <span class="keywordflow">return</span> _max_detections;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment">    /** Get max_classes per detection. Used in the Fast Non-Max-Suppression.*/</span></div><div class="line"><a name="l01130"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de"> 1130</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;        <span class="keywordflow">return</span> _max_classes_per_detection;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="comment">    /** Get detection per class. Used in the Regular Non-Max-Suppression */</span></div><div class="line"><a name="l01135"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740"> 1135</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keywordflow">return</span> _detection_per_class;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="comment">    /** Get nms threshold. */</span></div><div class="line"><a name="l01140"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf"> 1140</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">nms_score_threshold</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        <span class="keywordflow">return</span> _nms_score_threshold;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment">    /** Get intersection over union threshold. */</span></div><div class="line"><a name="l01145"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e"> 1145</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">iou_threshold</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        <span class="keywordflow">return</span> _iou_threshold;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment">    /** Get num classes. */</span></div><div class="line"><a name="l01150"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3"> 1150</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        <span class="keywordflow">return</span> _num_classes;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="comment">    /** Get if use regular nms. */</span></div><div class="line"><a name="l01155"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476"> 1155</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        <span class="keywordflow">return</span> _use_regular_nms;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="comment">    /** Get y scale value. */</span></div><div class="line"><a name="l01160"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#aee7a73260f91fe8eedce52929fa829eb"> 1160</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#aee7a73260f91fe8eedce52929fa829eb">scale_value_y</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        <span class="comment">// Saved as [y,x,h,w]</span></div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        <span class="keywordflow">return</span> _scales_values[0];</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="comment">    /** Get x scale value. */</span></div><div class="line"><a name="l01166"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a3dadbc544718b54f1737d4f24c078ad4"> 1166</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a3dadbc544718b54f1737d4f24c078ad4">scale_value_x</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        <span class="comment">// Saved as [y,x,h,w]</span></div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;        <span class="keywordflow">return</span> _scales_values[1];</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment">    /** Get h scale value. */</span></div><div class="line"><a name="l01172"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9db6ab0530ca15abab491a354bea90dc"> 1172</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9db6ab0530ca15abab491a354bea90dc">scale_value_h</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        <span class="comment">// Saved as [y,x,h,w]</span></div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        <span class="keywordflow">return</span> _scales_values[2];</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;<span class="comment">    /** Get w scale value. */</span></div><div class="line"><a name="l01178"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0c255b6748d3a249c9c4d8f691994dba"> 1178</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0c255b6748d3a249c9c4d8f691994dba">scale_value_w</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        <span class="comment">// Saved as [y,x,h,w]</span></div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <span class="keywordflow">return</span> _scales_values[3];</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="comment">    /** Get dequantize_scores value. */</span></div><div class="line"><a name="l01184"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9f94c4edaf37250de1a0403d0f929644"> 1184</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9f94c4edaf37250de1a0403d0f929644">dequantize_scores</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;        <span class="keywordflow">return</span> _dequantize_scores;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    }</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _max_detections;</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _max_classes_per_detection;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="keywordtype">float</span>        _nms_score_threshold;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keywordtype">float</span>        _iou_threshold;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _num_classes;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    std::array&lt;float, 4&gt; _scales_values;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keywordtype">bool</span>         _use_regular_nms;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _detection_per_class;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keywordtype">bool</span>         _dequantize_scores;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;};</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="comment">/** Pooling Layer Information struct*/</span></div><div class="line"><a name="l01202"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml"> 1202</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<span class="comment">    /** Default Constructor */</span></div><div class="line"><a name="l01205"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a21d59f266df349880afd6143469c8f29"> 1205</a></span>&#160;    <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a21d59f266df349880afd6143469c8f29">PoolingLayerInfo</a>()</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        : pool_type(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>::<a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>),</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>()),</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>::<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>),</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;          pad_stride_info(<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>()),</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;          exclude_padding(false),</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;          fp_mixed_precision(false)</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    {</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment">     * @param[in] pool_type          Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="comment">     * @param[in] pool_size          Pooling size, in elements, across  x and y.</span></div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="comment">     * @param[in] data_layout        Data layout used by the layer @ref DataLayout</span></div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="comment">     * @param[in] pad_stride_info    (Optional) Padding and stride information @ref PadStrideInfo</span></div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="comment">     * @param[in] exclude_padding    (Optional) Strategy when accounting padding in calculations.</span></div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="comment">     *                               True will exclude padding while false will not (Used in AVG/L2 pooling to determine the pooling area).</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment">     *                               Defaults to false;</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment">     * @param[in] fp_mixed_precision (Optional) Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</span></div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01226"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a574d3a97bb043512658126e515c1b90e"> 1226</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a574d3a97bb043512658126e515c1b90e">PoolingLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>   pool_type,</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  pool_size,</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>,</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                              <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> pad_stride_info    = <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(),</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                              <span class="keywordtype">bool</span>          exclude_padding    = <span class="keyword">false</span>,</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                              <span class="keywordtype">bool</span>          fp_mixed_precision = <span class="keyword">false</span>)</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(pool_size, pool_size)),</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;          data_layout(data_layout),</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;          pad_stride_info(pad_stride_info),</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;          exclude_padding(exclude_padding),</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;          fp_mixed_precision(fp_mixed_precision)</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    {</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    }</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="comment">     * @param[in] pool_type          Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;<span class="comment">     * @param[in] pool_size          Pooling size, in elements, across  x and y.</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment">     * @param[in] data_layout        Data layout used by the layer @ref DataLayout</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="comment">     * @param[in] pad_stride_info    (Optional) Padding and stride information @ref PadStrideInfo</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment">     * @param[in] exclude_padding    (Optional) Strategy when accounting padding in calculations.</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment">     *                               True will exclude padding while false will not (Used in AVG/L2 pooling to determine the pooling area).</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment">     *                               Defaults to false;</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment">     * @param[in] fp_mixed_precision (Optional) Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01253"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a93e2246c8f5500552788602f344b32f3"> 1253</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a93e2246c8f5500552788602f344b32f3">PoolingLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>   pool_type,</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                              <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        pool_size,</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                              <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    data_layout,</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                              <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> pad_stride_info    = <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(),</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                              <span class="keywordtype">bool</span>          exclude_padding    = <span class="keyword">false</span>,</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                              <span class="keywordtype">bool</span>          fp_mixed_precision = <span class="keyword">false</span>)</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;          pool_size(pool_size),</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;          data_layout(data_layout),</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;          pad_stride_info(pad_stride_info),</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;          exclude_padding(exclude_padding),</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;          fp_mixed_precision(fp_mixed_precision)</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    {</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    }</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;<span class="comment">     * @note This constructor is used for global pooling</span></div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="comment">     * @param[in] pool_type   Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="comment">     * @param[in] data_layout Data layout used by the layer @ref DataLayout</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01276"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a137799efe970715f1969e800f92387c0"> 1276</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a137799efe970715f1969e800f92387c0">PoolingLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> pool_type, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>()),</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;          data_layout(data_layout),</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;          pad_stride_info(<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(1, 1, 0, 0)),</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;          exclude_padding(false),</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;          is_global_pooling(true),</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;          fp_mixed_precision(false)</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    {</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    }</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;</div><div class="line"><a name="l01287"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a"> 1287</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>   <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">pool_type</a>;</div><div class="line"><a name="l01288"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9"> 1288</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">pool_size</a>;</div><div class="line"><a name="l01289"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a317508a148d55ca7e093b9447c3366e7"> 1289</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a>;</div><div class="line"><a name="l01290"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17"> 1290</a></span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">pad_stride_info</a>;</div><div class="line"><a name="l01291"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891"> 1291</a></span>&#160;    <span class="keywordtype">bool</span>          <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a>;</div><div class="line"><a name="l01292"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d"> 1292</a></span>&#160;    <span class="keywordtype">bool</span>          <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a>;</div><div class="line"><a name="l01293"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1"> 1293</a></span>&#160;    <span class="keywordtype">bool</span>          <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">fp_mixed_precision</a>;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;};</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="comment">/** Pooling Layer Information struct*/</span></div><div class="line"><a name="l01297"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml"> 1297</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;<span class="comment">    /** Default Constructor */</span></div><div class="line"><a name="l01300"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#af33467c502c3e31eca0dbb6552f403e7"> 1300</a></span>&#160;    <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#af33467c502c3e31eca0dbb6552f403e7">Pooling3dLayerInfo</a>() noexcept</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;        : pool_type(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>::<a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">MAX</a>),</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>()),</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;          stride(Size3D()),</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;          padding(<a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>()),</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;          exclude_padding(false),</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;          fp_mixed_precision(false),</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;          round_type(<a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a>::<a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>)</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    {</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;<span class="comment">     * @param[in] pool_type          Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;<span class="comment">     * @param[in] pool_size          Pooling size, in elements, across x, y and z.</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="comment">     * @param[in] stride             (Optional) stride information @ref Size3D</span></div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="comment">     * @param[in] padding            (Optional) padding information @ref Padding3D</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="comment">     * @param[in] exclude_padding    (Optional) Strategy when accounting padding in calculations.</span></div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="comment">     *                               True will exclude padding while false will not (Used in AVG/L2 pooling to determine the pooling area).</span></div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="comment">     *                               Defaults to false;</span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="comment">     * @param[in] fp_mixed_precision (Optional) Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</span></div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment">     * @param[in] round_type         (Optional) Dimensions rounding. Defaults to @ref FLOOR</span></div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01323"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bc341d9c0161c4dba89ae832aa216a"> 1323</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bc341d9c0161c4dba89ae832aa216a">Pooling3dLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>           pool_type,</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;                                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>          pool_size,</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                                <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>                stride             = <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>),</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                                <a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>             padding            = <a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>(),</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                                <span class="keywordtype">bool</span>                  exclude_padding    = <span class="keyword">false</span>,</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                                <span class="keywordtype">bool</span>                  fp_mixed_precision = <span class="keyword">false</span>,</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;                                <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> round_type         = <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>)</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>(pool_size, pool_size, pool_size)),</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;          stride(stride),</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;          padding(padding),</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;          exclude_padding(exclude_padding),</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;          fp_mixed_precision(fp_mixed_precision),</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;          round_type(round_type)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    {</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    }</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment">     * @param[in] pool_type          Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="comment">     * @param[in] pool_size          Pooling size, in elements, across  x, y and z.</span></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment">     * @param[in] stride             (Optional) stride information @ref Size3D</span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment">     * @param[in] padding            (Optional) padding information @ref Padding3D</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="comment">     * @param[in] exclude_padding    (Optional) Strategy when accounting padding in calculations.</span></div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="comment">     *                               True will exclude padding while false will not (Used in AVG/L2 pooling to determine the pooling area).</span></div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="comment">     *                               Defaults to false;</span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="comment">     * @param[in] fp_mixed_precision (Optional) Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</span></div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="comment">     * @param[in] round_type         (Optional) Dimensions rounding. Defaults to @ref FLOOR</span></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01353"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a5a28c96b4c6a639b84a6f74a6231f49d"> 1353</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a5a28c96b4c6a639b84a6f74a6231f49d">Pooling3dLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>           pool_type,</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>                pool_size,</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                                <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>                stride             = <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>),</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                                <a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>             padding            = <a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>(),</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                                <span class="keywordtype">bool</span>                  exclude_padding    = <span class="keyword">false</span>,</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;                                <span class="keywordtype">bool</span>                  fp_mixed_precision = <span class="keyword">false</span>,</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                                <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> round_type         = <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>)</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;          pool_size(pool_size),</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;          stride(stride),</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;          padding(padding),</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;          exclude_padding(exclude_padding),</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;          is_global_pooling(false),</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;          fp_mixed_precision(fp_mixed_precision),</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;          round_type(round_type)</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    {</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    }</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="comment">     * @note This constructor is used for global pooling</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="comment">     * @param[in] pool_type Pooling type @ref PoolingType.</span></div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01377"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bdca05df9cd678454196e05d2d190f"> 1377</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bdca05df9cd678454196e05d2d190f">Pooling3dLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> pool_type)</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        : pool_type(pool_type),</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;          pool_size(<a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>()),</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;          stride(<a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>)),</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;          padding(<a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>(0, 0, 0)),</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;          exclude_padding(false),</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;          is_global_pooling(true),</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;          fp_mixed_precision(false),</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;          round_type(<a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a>::<a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</a>)</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    {</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    }</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a"> 1389</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a>           <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">pool_type</a>;</div><div class="line"><a name="l01390"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd"> 1390</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>                <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>;</div><div class="line"><a name="l01391"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504"> 1391</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size3_d.xhtml">Size3D</a>                <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>;</div><div class="line"><a name="l01392"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf"> 1392</a></span>&#160;    <a class="code" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a>             <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>;</div><div class="line"><a name="l01393"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891"> 1393</a></span>&#160;    <span class="keywordtype">bool</span>                  <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a>;</div><div class="line"><a name="l01394"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d"> 1394</a></span>&#160;    <span class="keywordtype">bool</span>                  <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a>;</div><div class="line"><a name="l01395"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1"> 1395</a></span>&#160;    <span class="keywordtype">bool</span>                  <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">fp_mixed_precision</a>;</div><div class="line"><a name="l01396"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd"> 1396</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">round_type</a>;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;};</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="comment">/** ROI Pooling Layer Information class */</span></div><div class="line"><a name="l01400"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml"> 1400</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> final</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;{</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;<span class="comment">     * @param[in] pooled_width   Pooled width of the layer.</span></div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;<span class="comment">     * @param[in] pooled_height  Pooled height of the layer.</span></div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;<span class="comment">     * @param[in] spatial_scale  Spatial scale to be applied to the ROI coordinates and dimensions.</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;<span class="comment">     * @param[in] sampling_ratio Number of samples to include in each pooling region (if set to zero, a ceil(roi_dims/pooling_dims))</span></div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01410"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aabcaf278d82498bd5ba1e8d2ce1196cc"> 1410</a></span>&#160;    <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aabcaf278d82498bd5ba1e8d2ce1196cc">ROIPoolingLayerInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pooled_width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pooled_height, <span class="keywordtype">float</span> spatial_scale, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sampling_ratio = 0)</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;        : _pooled_width(pooled_width), _pooled_height(pooled_height), _spatial_scale(spatial_scale), _sampling_ratio(sampling_ratio)</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    {</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="comment">    /** Get the pooled width of the layer */</span></div><div class="line"><a name="l01415"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e"> 1415</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">pooled_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;        <span class="keywordflow">return</span> _pooled_width;</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="comment">    /** Get the pooled height of the layer */</span></div><div class="line"><a name="l01420"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb"> 1420</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">pooled_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        <span class="keywordflow">return</span> _pooled_height;</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;<span class="comment">    /** Get the spatial scale */</span></div><div class="line"><a name="l01425"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a70fd561a558e9f433088b64587a9cb62"> 1425</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a70fd561a558e9f433088b64587a9cb62">spatial_scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        <span class="keywordflow">return</span> _spatial_scale;</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment">    /** Get sampling ratio */</span></div><div class="line"><a name="l01430"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#afbc0a0e37966224f004d4525b1cf012f"> 1430</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#afbc0a0e37966224f004d4525b1cf012f">sampling_ratio</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        <span class="keywordflow">return</span> _sampling_ratio;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    }</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pooled_width;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _pooled_height;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <span class="keywordtype">float</span>        _spatial_scale;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _sampling_ratio;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;};</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">/** Generate Proposals Information class */</span></div><div class="line"><a name="l01443"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml"> 1443</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;{</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;<span class="comment">     * @param[in] im_width       Width of the original image</span></div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;<span class="comment">     * @param[in] im_height      Height of the original image</span></div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;<span class="comment">     * @param[in] im_scale       Scale applied to the original image</span></div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;<span class="comment">     * @param[in] spatial_scale  (Optional)Scale applied to the feature map. Defaults to 1.0</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;<span class="comment">     * @param[in] pre_nms_topN   (Optional)Number of the best scores to be selected from the transformations. Defaults to 6000.</span></div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;<span class="comment">     * @param[in] post_nms_topN  (Optional)Number of the best scores to be selected from the NMS operation. Defaults to 300.</span></div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;<span class="comment">     * @param[in] nms_thres      (Optional)NMS overlap threshold. Defaults to 0.7.</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="comment">     * @param[in] min_size       (Optional)Size used to validate the anchors produced. Defaults to 16.</span></div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;<span class="comment">     * @param[in] values_per_roi (Optional)Values used to represent a ROI(Region of interest). Defaults to 4.</span></div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01458"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a00edeeb4822422b6b7095d5aeb68fc39"> 1458</a></span>&#160;    <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a00edeeb4822422b6b7095d5aeb68fc39">GenerateProposalsInfo</a>(<span class="keywordtype">float</span> im_width, <span class="keywordtype">float</span> im_height, <span class="keywordtype">float</span> im_scale, <span class="keywordtype">float</span> spatial_scale = 1.0, <span class="keywordtype">int</span> pre_nms_topN = 6000, <span class="keywordtype">int</span> post_nms_topN = 300, <span class="keywordtype">float</span> nms_thres = 0.7, <span class="keywordtype">float</span> min_size = 16.0,</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                          <span class="keywordtype">size_t</span> values_per_roi = 4)</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        : _im_height(im_height), _im_width(im_width), _im_scale(im_scale), _spatial_scale(spatial_scale), _pre_nms_topN(pre_nms_topN), _post_nms_topN(post_nms_topN), _nms_thres(nms_thres),</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;          _min_size(min_size), _values_per_roi(values_per_roi)</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    {</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    }</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    <span class="comment">/* Get the original height */</span></div><div class="line"><a name="l01466"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba"> 1466</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">im_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;        <span class="keywordflow">return</span> _im_height;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    }</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="comment">/* Get the original width */</span></div><div class="line"><a name="l01471"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2"> 1471</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">im_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        <span class="keywordflow">return</span> _im_width;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    }</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="comment">/* Get the image scale */</span></div><div class="line"><a name="l01476"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#af5d260b8c4c285dbdc1b6f545f86b160"> 1476</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#af5d260b8c4c285dbdc1b6f545f86b160">im_scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        <span class="keywordflow">return</span> _im_scale;</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    }</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="comment">/* Get the value of how many best scores to select (before NMS) */</span></div><div class="line"><a name="l01481"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d2ef6ac7f91aa842b3fe47262cac45a"> 1481</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d2ef6ac7f91aa842b3fe47262cac45a">pre_nms_topN</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;        <span class="keywordflow">return</span> _pre_nms_topN;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    }</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="comment">/* Get the value of how many best scores to select (after NMS) */</span></div><div class="line"><a name="l01486"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a2a3e74a86ee9c520cc1a43191145edf6"> 1486</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a2a3e74a86ee9c520cc1a43191145edf6">post_nms_topN</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        <span class="keywordflow">return</span> _post_nms_topN;</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    }</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="comment">/* Get the NMS overlap threshold */</span></div><div class="line"><a name="l01491"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#aff8f31ab7ca98957eb196d34a3da3d68"> 1491</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#aff8f31ab7ca98957eb196d34a3da3d68">nms_thres</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;        <span class="keywordflow">return</span> _nms_thres;</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    }</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    <span class="comment">/* Get the minimal size */</span></div><div class="line"><a name="l01496"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#aa7d375782a8b80e3d4efee296a059855"> 1496</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#aa7d375782a8b80e3d4efee296a059855">min_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;        <span class="keywordflow">return</span> _min_size;</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    }</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="comment">/* Get the spatial scale to be applied to the feature maps */</span></div><div class="line"><a name="l01501"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a70fd561a558e9f433088b64587a9cb62"> 1501</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a70fd561a558e9f433088b64587a9cb62">spatial_scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;        <span class="keywordflow">return</span> _spatial_scale;</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    }</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <span class="comment">/* Get the values used to represent a ROI(Region of interest)*/</span></div><div class="line"><a name="l01506"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_generate_proposals_info.xhtml#a00870168b3c59d0a29a7a66f935c1880"> 1506</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml#a00870168b3c59d0a29a7a66f935c1880">values_per_roi</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;        <span class="keywordflow">return</span> _values_per_roi;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    }</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordtype">float</span>  _im_height;</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="keywordtype">float</span>  _im_width;</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    <span class="keywordtype">float</span>  _im_scale;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keywordtype">float</span>  _spatial_scale;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keywordtype">int</span>    _pre_nms_topN;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordtype">int</span>    _post_nms_topN;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keywordtype">float</span>  _nms_thres;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    <span class="keywordtype">float</span>  _min_size;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="keywordtype">size_t</span> _values_per_roi;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;};</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;<span class="comment">/** ComputeAnchors information class */</span></div><div class="line"><a name="l01524"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml"> 1524</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a></div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;{</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;<span class="comment">     * @param[in] feat_width     Feature map width</span></div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;<span class="comment">     * @param[in] feat_height    Feature map height</span></div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;<span class="comment">     * @param[in] spatial_scale  Feature map scale</span></div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;<span class="comment">     * @param[in] values_per_roi (Optional)Values used to represent a ROI(Region Of Interest). Defaults to 4</span></div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01534"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml#a754fb667b78b7376c989a3923d172ff9"> 1534</a></span>&#160;    <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a754fb667b78b7376c989a3923d172ff9">ComputeAnchorsInfo</a>(<span class="keywordtype">float</span> feat_width, <span class="keywordtype">float</span> feat_height, <span class="keywordtype">float</span> spatial_scale, <span class="keywordtype">size_t</span> values_per_roi = 4)</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;        : _feat_height(feat_height),</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;          _feat_width(feat_width),</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;          _spatial_scale(spatial_scale),</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;          _values_per_roi(values_per_roi)</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    {</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    }</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <span class="comment">/* Get the height of the feature map */</span></div><div class="line"><a name="l01543"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml#a1938a8fb37c002870984041e630f8b07"> 1543</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a1938a8fb37c002870984041e630f8b07">feat_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;        <span class="keywordflow">return</span> _feat_height;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    }</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <span class="comment">/* Get the width of the feature map */</span></div><div class="line"><a name="l01549"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml#a5b8b00c38aee11870396f12e764fa3ce"> 1549</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a5b8b00c38aee11870396f12e764fa3ce">feat_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        <span class="keywordflow">return</span> _feat_width;</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    }</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="comment">/* Get the scale of the feature map */</span></div><div class="line"><a name="l01555"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml#a70fd561a558e9f433088b64587a9cb62"> 1555</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a70fd561a558e9f433088b64587a9cb62">spatial_scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;        <span class="keywordflow">return</span> _spatial_scale;</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    }</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <span class="comment">/* Get the values used to represent a ROI(Region Of Interest)*/</span></div><div class="line"><a name="l01561"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_compute_anchors_info.xhtml#a00870168b3c59d0a29a7a66f935c1880"> 1561</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_compute_anchors_info.xhtml#a00870168b3c59d0a29a7a66f935c1880">values_per_roi</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;        <span class="keywordflow">return</span> _values_per_roi;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    }</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    <span class="keywordtype">float</span>  _feat_height;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    <span class="keywordtype">float</span>  _feat_width;</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    <span class="keywordtype">float</span>  _spatial_scale;</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="keywordtype">size_t</span> _values_per_roi;</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;};</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;<span class="comment">/** Bounding Box Transform information class */</span></div><div class="line"><a name="l01574"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml"> 1574</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> final</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;{</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;<span class="comment">     * @param[in] img_width                Width of the original image</span></div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;<span class="comment">     * @param[in] img_height               Height, of the original image</span></div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;<span class="comment">     * @param[in] scale                    Scale of the original image</span></div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;<span class="comment">     * @param[in] apply_scale              (Optional)Re-apply scaling after transforming the boxes. Defaults to false</span></div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;<span class="comment">     * @param[in] weights                  (Optional)Weights [wx, wy, ww, wh] for the deltas. Defaults to all ones</span></div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;<span class="comment">     * @param[in] correct_transform_coords (Optional)Correct bounding box transform coordinates. Defaults to false</span></div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;<span class="comment">     * @param[in] bbox_xform_clip          (Optional)Minimum bounding box width and height after bounding box transformation in log-space. Defaults to log(1000/16)</span></div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01587"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ada3616dad46d826be3766a0f0d11fc35"> 1587</a></span>&#160;    <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ada3616dad46d826be3766a0f0d11fc35">BoundingBoxTransformInfo</a>(<span class="keywordtype">float</span> img_width, <span class="keywordtype">float</span> img_height, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, <span class="keywordtype">bool</span> apply_scale = <span class="keyword">false</span>, <span class="keyword">const</span> std::array&lt;float, 4&gt; weights = { { 1.f, 1.f, 1.f, 1.f } }, <span class="keywordtype">bool</span> correct_transform_coords =</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <span class="keyword">false</span>,</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    <span class="keywordtype">float</span> bbox_xform_clip =</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        4.135166556742356f)</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;        : _img_width(img_width), _img_height(img_height), _scale(scale), _apply_scale(apply_scale), _correct_transform_coords(correct_transform_coords), _weights(weights), _bbox_xform_clip(bbox_xform_clip)</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    {</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    }</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;</div><div class="line"><a name="l01595"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a8f456133a1d886f466a79264a10f42ea"> 1595</a></span>&#160;    std::array&lt;float, 4&gt; <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a8f456133a1d886f466a79264a10f42ea">weights</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;        <span class="keywordflow">return</span> _weights;</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    }</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;</div><div class="line"><a name="l01600"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a0b6688157393c43306aec60185ff067f"> 1600</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a0b6688157393c43306aec60185ff067f">bbox_xform_clip</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;        <span class="keywordflow">return</span> _bbox_xform_clip;</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    }</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;</div><div class="line"><a name="l01605"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e"> 1605</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">img_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;        <span class="keywordflow">return</span> _img_height;</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    }</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;</div><div class="line"><a name="l01610"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85"> 1610</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">img_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;        <span class="keywordflow">return</span> _img_width;</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    }</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;</div><div class="line"><a name="l01615"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ade87abafbd6b200b22de988f32b66dea"> 1615</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ade87abafbd6b200b22de988f32b66dea">scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        <span class="keywordflow">return</span> _scale;</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    }</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;</div><div class="line"><a name="l01620"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a491fddb771387738421f6d8e2b05f17f"> 1620</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a491fddb771387738421f6d8e2b05f17f">apply_scale</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        <span class="keywordflow">return</span> _apply_scale;</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    }</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;</div><div class="line"><a name="l01625"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a0745ad0a3b87c22a1997bcf0bc92b6"> 1625</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a0745ad0a3b87c22a1997bcf0bc92b6">correct_transform_coords</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        <span class="keywordflow">return</span> _correct_transform_coords;</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    }</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <span class="keywordtype">float</span> _img_width;</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <span class="keywordtype">float</span> _img_height;</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;    <span class="keywordtype">float</span> _scale;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    <span class="keywordtype">bool</span>  _apply_scale;</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    <span class="keywordtype">bool</span>  _correct_transform_coords;</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;    std::array&lt;float, 4&gt; _weights;</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <span class="keywordtype">float</span> _bbox_xform_clip;</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;};</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;<span class="comment">/** Activation Layer Information class */</span></div><div class="line"><a name="l01641"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml"> 1641</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a></div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;{</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;<span class="comment">    /** Available activation functions */</span></div><div class="line"><a name="l01645"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea"> 1645</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a></div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    {</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;        LOGISTIC,        <span class="comment">/**&lt; Logistic ( \f$ f(x) = \frac{1}{1 + e^{-x}} \f$ ) */</span></div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;        TANH,            <span class="comment">/**&lt; Hyperbolic tangent ( \f$ f(x) = a \cdot tanh(b \cdot x) \f$ ) */</span></div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        RELU,            <span class="comment">/**&lt; Rectifier ( \f$ f(x) = max(0,x) \f$ ) */</span></div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        BOUNDED_RELU,    <span class="comment">/**&lt; Upper Bounded Rectifier ( \f$ f(x) = min(a, max(0,x)) \f$ ) */</span></div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        LU_BOUNDED_RELU, <span class="comment">/**&lt; Lower and Upper Bounded Rectifier ( \f$ f(x) = min(a, max(b,x)) \f$ ) */</span></div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        LEAKY_RELU,      <span class="comment">/**&lt; Leaky Rectifier ( \f$ f(x) = \begin{cases}  \alpha x &amp; \quad \text{if } x \text{ &lt; 0}\\  x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \f$ ) */</span></div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;        SOFT_RELU,       <span class="comment">/**&lt; Soft Rectifier ( \f$ f(x)= log(1+e^x) \f$ ) */</span></div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;        ELU,             <span class="comment">/**&lt; Exponential Linear Unit ( \f$ f(x) = \begin{cases}  \alpha (exp(x) - 1) &amp; \quad \text{if } x \text{ &lt; 0}\\  x &amp; \quad \text{if } x \geq \text{ 0 } \end{cases} \f$ ) */</span></div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">ABS</a>,             <span class="comment">/**&lt; Absolute ( \f$ f(x)= |x| \f$ ) */</span></div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;        SQUARE,          <span class="comment">/**&lt; Square ( \f$ f(x)= x^2 \f$ )*/</span></div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;        SQRT,            <span class="comment">/**&lt; Square root ( \f$ f(x) = \sqrt{x} \f$ )*/</span></div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">LINEAR</a>,          <span class="comment">/**&lt; Linear ( \f$ f(x)= ax + b \f$ ) */</span></div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;        IDENTITY,        <span class="comment">/**&lt; Identity ( \f$ f(x)= x \f$ ) */</span></div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;        HARD_SWISH,      <span class="comment">/**&lt; Hard-swish ( \f$ f(x) = (x \text{ReLU6}(x+3))/6 = x \min(\max(0,x+3),6)/6 \f$ ) */</span></div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        SWISH,           <span class="comment">/**&lt; Swish ( \f$ f(x) = \frac{x}{1 + e^{-ax}} = x \text{logistic}(ax) \f$ ) */</span></div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;        GELU             <span class="comment">/**&lt; GELU ( \f$ f(x) = x * 1/2 * 1 + erf(x / \sqrt{2}) \f$ ) */</span></div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    };</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;<span class="comment">    /** Lookup table  */</span></div><div class="line"><a name="l01666"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d"> 1666</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> = std::array&lt;qasymm8_t, 256&gt;;</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;<span class="comment">    /** Default Constructor</span></div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;<span class="comment">     * @param[in] f The activation function to use.</span></div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;<span class="comment">     * @param[in] a (Optional) The alpha parameter used by some activation functions</span></div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;<span class="comment">     *              (@ref ActivationFunction::BOUNDED_RELU, @ref ActivationFunction::LU_BOUNDED_RELU, @ref ActivationFunction::LINEAR, @ref ActivationFunction::TANH).</span></div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;<span class="comment">     * @param[in] b (Optional) The beta parameter used by some activation functions (@ref ActivationFunction::LINEAR, @ref ActivationFunction::LU_BOUNDED_RELU, @ref ActivationFunction::TANH).</span></div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01676"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#af56abff12f887fddfa02e0bc18a318a1"> 1676</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af56abff12f887fddfa02e0bc18a318a1">ActivationLayerInfo</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> f, <span class="keywordtype">float</span> a = 0.0f, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 0.0f)</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        : _act(f), _a(a), _b(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), _enabled(true)</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    {</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;<span class="comment">    /** Get the type of activation function */</span></div><div class="line"><a name="l01681"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2"> 1681</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">activation</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        <span class="keywordflow">return</span> _act;</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;<span class="comment">    /** Get the alpha value */</span></div><div class="line"><a name="l01686"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#aec65e090c2276e8c8f8dffb6e3edd178"> 1686</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#aec65e090c2276e8c8f8dffb6e3edd178">a</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;        <span class="keywordflow">return</span> _a;</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;<span class="comment">    /** Get the beta value */</span></div><div class="line"><a name="l01691"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#a02a00a5d20986f3a7ab72b9c86be3a54"> 1691</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a02a00a5d20986f3a7ab72b9c86be3a54">b</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        <span class="keywordflow">return</span> _b;</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;<span class="comment">    /** Check if initialised */</span></div><div class="line"><a name="l01696"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2"> 1696</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        <span class="keywordflow">return</span> _enabled;</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    }</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut()<span class="keyword"> const</span></div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;        <span class="keywordflow">return</span> _lut;</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    }</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    <span class="keywordtype">void</span> init_lut(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out)</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    {</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;        <span class="keywordflow">if</span>(_act == ActivationFunction::HARD_SWISH)</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        {</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;            <span class="keywordflow">if</span>(data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;            {</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;                qasymm8_hard_swish_populate_table(_lut, qi_in, qi_out);</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;            }</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;            {</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;                qasymm8_signed_hard_swish_populate_table(_lut, qi_in, qi_out);</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;            }</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;        }</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_act == ActivationFunction::LEAKY_RELU)</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        {</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;            qasymm8_leaky_relu_populate_table(_lut, qi_in, qi_out, _a);</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        }</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_act == ActivationFunction::LOGISTIC)</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        {</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;            <span class="keywordflow">if</span>(data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;            {</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;                qasymm8_logistic_populate_table(_lut, qi_in, qi_out);</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;            }</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;            {</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;                qasymm8_signed_logistic_populate_table(_lut, qi_in, qi_out);</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;            }</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;        }</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    }</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;</div><div class="line"><a name="l01738"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_activation_layer_info.xhtml#afd58441adf1f2570be5b0be4070465cf"> 1738</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#afd58441adf1f2570be5b0be4070465cf">is_lut_supported</a>(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> act_func, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    {</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;        <span class="keywordflow">switch</span>(act_func)</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        {</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;            <span class="keywordflow">case</span> ActivationFunction::HARD_SWISH:</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;                <span class="keywordflow">return</span> data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>;</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;            <span class="keywordflow">case</span> ActivationFunction::LEAKY_RELU:</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;                <span class="keywordflow">return</span> data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>;</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;            <span class="keywordflow">case</span> ActivationFunction::LOGISTIC:</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;                <span class="keywordflow">return</span> data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>;</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        }</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(act_func);</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(data_type);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    }</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> _act     = { <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">ActivationLayerInfo::ActivationFunction::IDENTITY</a> };</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <span class="keywordtype">float</span>              _a       = {};</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    <span class="keywordtype">float</span>              _b       = {};</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="keywordtype">bool</span>               _enabled = { <span class="keyword">false</span> };</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> _lut = {};</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> qasymm8_hard_swish_populate_table(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out)</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    {</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lut.size(); ++i)</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;        {</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;            lut[i] = <a class="code" href="namespacearm__compute.xhtml#aacab12f6a68f1f61022d12d31aed3a19">qasymm8_hard_swish</a>(i, qi_in, qi_out);</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;        }</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    }</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> qasymm8_signed_hard_swish_populate_table(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out)</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    {</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lut.size(); ++i)</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;        {</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;            lut[i] = <a class="code" href="namespacearm__compute.xhtml#a632338b050964b8fa64327991f2cde5c">qasymm8_signed_hard_swish</a>(i, qi_in, qi_out);</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;        }</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;    }</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> qasymm8_leaky_relu_populate_table(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out, <span class="keywordtype">float</span> alpha)</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    {</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lut.size(); ++i)</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;        {</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;            lut[i] = <a class="code" href="namespacearm__compute.xhtml#a38826e5398bc1a772225c256a91ae708">qasymm8_leaky_relu</a>(i, qi_in, qi_out, alpha);</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;        }</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    }</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> qasymm8_logistic_populate_table(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out)</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    {</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lut.size(); ++i)</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;        {</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;            lut[i] = <a class="code" href="namespacearm__compute.xhtml#a47a4ac4d2f91cff3c1e2b456d96e64c0">qasymm8_logistic</a>(i, qi_in, qi_out);</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        }</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    }</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> qasymm8_signed_logistic_populate_table(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">LookupTable256</a> &amp;lut, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_in, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;qi_out)</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    {</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; lut.size(); ++i)</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;        {</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;            lut[i] = <a class="code" href="namespacearm__compute.xhtml#a5f4aa560276aa1c941116b53d764c827">qasymm8_signed_logistic</a>(static_cast&lt;int8_t&gt;(i), qi_in, qi_out);</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;        }</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    }</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;};</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;<span class="comment">/** Fully connected layer info */</span></div><div class="line"><a name="l01811"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml"> 1811</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a></div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;{</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    <span class="comment">/* Fused-activation parameters */</span></div><div class="line"><a name="l01814"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#ad5f55d98fbe268b4eb6225aca14a2403"> 1814</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> activation_info{}; <span class="comment">/**&lt;  Fused activation to apply after the matrix multiplication. */</span></div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    <span class="comment">/* Information about weights */</span></div><div class="line"><a name="l01816"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a89d0ed86875fd3fb395899187c84bc2f"> 1816</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> weights_trained_layout{ <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a> }; <span class="comment">/**&lt;  Layout that the weights have been trained with. */</span></div><div class="line"><a name="l01817"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a11851649b6a7cd12ae25cf72b769cfb9"> 1817</a></span>&#160;    <span class="keywordtype">bool</span>       transpose_weights{ <span class="keyword">true</span> };                  <span class="comment">/**&lt;  Transpose weights if true. */</span></div><div class="line"><a name="l01818"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a146a7be9d813ad80abb72a0bf6566cbc"> 1818</a></span>&#160;    <span class="keywordtype">bool</span>       are_weights_reshaped{ <span class="keyword">false</span> };              <span class="comment">/**&lt;  Reshape the weights tensor if false. */</span></div><div class="line"><a name="l01819"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4f87c5060cca01305f94a9d2f10e9d83"> 1819</a></span>&#160;    <span class="keywordtype">bool</span>       retain_internal_weights{ <span class="keyword">false</span> };           <span class="comment">/**&lt;  Retain internal reshaped weights. */</span></div><div class="line"><a name="l01820"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a94c30e1956b73564d2ea11c8aea6d975"> 1820</a></span>&#160;    <span class="keywordtype">bool</span>       enable_fast_math{ <span class="keyword">false</span> };                  <span class="comment">/**&lt;  Enable fast math computation. */</span></div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    <span class="comment">/* Other parameters */</span></div><div class="line"><a name="l01822"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1"> 1822</a></span>&#160;    <span class="keywordtype">bool</span> fp_mixed_precision{ <span class="keyword">false</span> }; <span class="comment">/**&lt;  Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy. */</span></div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;<span class="comment">    /** Sets the weights trained data layout</span></div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="comment">     * @param[in] layout Data layout that the weights were trained with</span></div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;<span class="comment">     * @return Updated object</span></div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01830"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a8fb35e774b0145f41acab2dac458edb2"> 1830</a></span>&#160;    <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a8fb35e774b0145f41acab2dac458edb2">set_weights_trained_layout</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout)</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    {</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        weights_trained_layout = layout;</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;<span class="comment">    /** Sets the transpose weights flag</span></div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;<span class="comment">     * @param[in] should_transpose_weights Boolean flag indicating if weights should be transposed</span></div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;<span class="comment">     * @return Updated object</span></div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01841"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4970577135598818a35078d95bbbd401"> 1841</a></span>&#160;    <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> &amp;<a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4970577135598818a35078d95bbbd401">set_transpose_weights</a>(<span class="keywordtype">bool</span> should_transpose_weights)</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    {</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;        transpose_weights = should_transpose_weights;</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;    }</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;};</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;<span class="comment">/** Normalization Layer Information class */</span></div><div class="line"><a name="l01849"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml"> 1849</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a></div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;{</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;<span class="comment">    /** Default Constructor</span></div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;<span class="comment">     * @param[in] type      The normalization type. Can be @ref NormType::IN_MAP_1D, @ref NormType::IN_MAP_2D or @ref NormType::CROSS_MAP</span></div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;<span class="comment">     * @param[in] norm_size The normalization size is the number of elements to normalize across. Defaults to 5.</span></div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;<span class="comment">     * @param[in] alpha     (Optional) Alpha parameter used by normalization equation. Defaults to 0.0001.</span></div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;<span class="comment">     * @param[in] beta      (Optional) Beta parameter used by normalization equation. Defaults to 0.5.</span></div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;<span class="comment">     * @param[in] kappa     (Optional) Kappa parameter used by [Krichevksy 2012] Across Channel Local Brightness Normalization equation.</span></div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;<span class="comment">     * @param[in] is_scaled (Optional) Boolean that specifies if alpha will be scaled by the normalization size or not.</span></div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;<span class="comment">     *                      Should be false to follow [Krichevksy 2012].</span></div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01862"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a305c2145d26b998641402a9fec76f0bb"> 1862</a></span>&#160;    <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a305c2145d26b998641402a9fec76f0bb">NormalizationLayerInfo</a>(<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>, uint32_t norm_size = 5, <span class="keywordtype">float</span> alpha = 0.0001f, <span class="keywordtype">float</span> beta = 0.5f, <span class="keywordtype">float</span> kappa = 1.f, <span class="keywordtype">bool</span> is_scaled = <span class="keyword">true</span>)</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;        : _type(type), _norm_size(norm_size), _alpha(alpha), _beta(beta), _kappa(kappa), _is_scaled(is_scaled)</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    {</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;<span class="comment">    /** Get the normalization type */</span></div><div class="line"><a name="l01867"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#abf43f970446f0b82889df52463b9c2b8"> 1867</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#abf43f970446f0b82889df52463b9c2b8">type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        <span class="keywordflow">return</span> _type;</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;<span class="comment">    /** Get the normalization size */</span></div><div class="line"><a name="l01872"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a7c3edc4b354dda6c7285541f4f0e5c43"> 1872</a></span>&#160;    uint32_t <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a7c3edc4b354dda6c7285541f4f0e5c43">norm_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;        <span class="keywordflow">return</span> _norm_size;</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;<span class="comment">    /** Get the alpha value */</span></div><div class="line"><a name="l01877"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a418f33d41dc0830534ee590a162a10e3"> 1877</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a418f33d41dc0830534ee590a162a10e3">alpha</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;        <span class="keywordflow">return</span> _alpha;</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;<span class="comment">    /** Get the beta value */</span></div><div class="line"><a name="l01882"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a01524f49fa1d982d4382e390bef91de7"> 1882</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a01524f49fa1d982d4382e390bef91de7">beta</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;        <span class="keywordflow">return</span> _beta;</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;<span class="comment">    /** Get the kappa value */</span></div><div class="line"><a name="l01887"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#afb71e43799c794c059aa2d6244bd3140"> 1887</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#afb71e43799c794c059aa2d6244bd3140">kappa</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;        <span class="keywordflow">return</span> _kappa;</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;<span class="comment">    /** Get the is_scaled value */</span></div><div class="line"><a name="l01892"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a97a1f3636f40206d67ff65902f7ff3a3"> 1892</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a97a1f3636f40206d67ff65902f7ff3a3">is_scaled</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;        <span class="keywordflow">return</span> _is_scaled;</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;<span class="comment">    /** Check if normalization is cross map */</span></div><div class="line"><a name="l01897"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a727a7ffe5a01a9d26fb910796e84e163"> 1897</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a727a7ffe5a01a9d26fb910796e84e163">is_cross_map</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;        <span class="keywordflow">return</span> _type == <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">NormType::CROSS_MAP</a>;</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;<span class="comment">    /** Check if normalization is not cross map */</span></div><div class="line"><a name="l01902"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a9f8e7c7833f47804091414a46bef67d6"> 1902</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a9f8e7c7833f47804091414a46bef67d6">is_in_map</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;        <span class="keywordflow">return</span> !is_cross_map();</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;<span class="comment">    /** Return the scaling factor of the normalization function.</span></div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;<span class="comment">     * If is_scaled is set to false then [Krichevksy 2012] normalization scaling is performed,</span></div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;<span class="comment">     * where alpha is returned plainly, else alpha is scaled by the total number of elements used for the normalization.</span></div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;<span class="comment">     * @return The normalization scaling factor.</span></div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01913"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_normalization_layer_info.xhtml#a7a6d5f8b1f761ea40f7f1072642be9e5"> 1913</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a7a6d5f8b1f761ea40f7f1072642be9e5">scale_coeff</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;        <span class="keyword">const</span> uint32_t size = (_type == <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">NormType::IN_MAP_2D</a>) ? _norm_size * _norm_size : _norm_size;</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;        <span class="keywordflow">return</span> (_is_scaled) ? (_alpha / size) : _alpha;</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;    }</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;</div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> _type;</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;    uint32_t _norm_size;</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    <span class="keywordtype">float</span>    _alpha;</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    <span class="keywordtype">float</span>    _beta;</div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    <span class="keywordtype">float</span>    _kappa;</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;    <span class="keywordtype">bool</span>     _is_scaled;</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;};</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;</div><div class="line"><a name="l01928"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_strided_slice_layer_info.xhtml"> 1928</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a></div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;{</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;<span class="comment">    /** Default Constructor</span></div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;<span class="comment">     * @param[in] begin_mask       (Optional) If the ith bit of begin_mask is set, starts[i] is ignored and the fullest possible range in that dimension is used instead.</span></div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;<span class="comment">     * @param[in] end_mask         (Optional) If the ith bit of end_mask is set, ends[i] is ignored and the fullest possible range in that dimension is used instead.</span></div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;<span class="comment">     * @param[in] shrink_axis_mask (Optional) If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1.</span></div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01937"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a4b92160f7c48cb1c0b5ce716ec895fbc"> 1937</a></span>&#160;    <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a4b92160f7c48cb1c0b5ce716ec895fbc">StridedSliceLayerInfo</a>(int32_t begin_mask = 0, int32_t end_mask = 0, int32_t shrink_axis_mask = 0)</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;        : _begin_mask(begin_mask), _end_mask(end_mask), _shrink_axis_mask(shrink_axis_mask)</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    {</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    }</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    <span class="comment">/* Get the begin mask value */</span></div><div class="line"><a name="l01943"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a29ef3fb90fdd7ef335d67c286dd0d7f3"> 1943</a></span>&#160;    int32_t <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a29ef3fb90fdd7ef335d67c286dd0d7f3">begin_mask</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        <span class="keywordflow">return</span> _begin_mask;</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    }</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    <span class="comment">/* Get the end mask value */</span></div><div class="line"><a name="l01949"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#aa7396e4f53e9cf7a7da5d90e92c74447"> 1949</a></span>&#160;    int32_t <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#aa7396e4f53e9cf7a7da5d90e92c74447">end_mask</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;        <span class="keywordflow">return</span> _end_mask;</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    }</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    <span class="comment">/* Get the shrink axis mask value */</span></div><div class="line"><a name="l01955"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#afa9ae68895fa738879123fbdf60447ab"> 1955</a></span>&#160;    int32_t <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml#afa9ae68895fa738879123fbdf60447ab">shrink_axis_mask</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;        <span class="keywordflow">return</span> _shrink_axis_mask;</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    }</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    int32_t _begin_mask;</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    int32_t _end_mask;</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;    int32_t _shrink_axis_mask;</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;};</div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;<span class="comment">/** Memory layouts for the weights tensor.</span></div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;<span class="comment">  * * UNSPECIFIED is used to select kernels that do not run in</span></div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;<span class="comment">  *    variable weights mode.</span></div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;<span class="comment">  * * ANY is used to query the kernel database to retrieve any of the</span></div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;<span class="comment">  *   kernels that runs in variable weights mode. Once a kernel is</span></div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;<span class="comment">  *   found, the specific format expected by the kernel can be</span></div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;<span class="comment">  *   retrieved by the user for reordering the weights tensor</span></div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;<span class="comment">  *   accordingly.</span></div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;<span class="comment">  * The other values OHWIo{interleave_by}i{block_by} describe the</span></div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;<span class="comment">  * memory layout of a 4D tensor with layout OHWI that has been</span></div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;<span class="comment">  * transformed into a 4D tensor with dimensions O&#39;HWI&#39; where:</span></div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;<span class="comment">  * O&#39; = first multiple of {interleave_by} s.t. O&lt;=O&#39;</span></div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;<span class="comment">  * I&#39; = first multiple of {block_by} s.t. I&lt;=I&#39;</span></div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;<span class="comment">  * The total size of the dst tensor is O&#39; x H x W x I&#39;</span></div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;<span class="comment">  * The access function of the tensor with layout</span></div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;<span class="comment">  * OHWIo{interleave_by}i{block_by} and size O&#39;HWI&#39; is a 6-parameter</span></div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;<span class="comment">  * access function, where the 6 parameters are computed as follows:</span></div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;<span class="comment">  * x5 = floor(o/{interleave_by}) RANGE [0, O&#39;/{interleave_by} -1] SIZE: O&#39;/{interleave_by}</span></div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;<span class="comment">  * x4 = h                        RANGE [0, H-1]                   SIZE: H</span></div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;<span class="comment">  * x3 = w                        RANGE [0, W-1]                   SIZE: W</span></div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;<span class="comment">  * x2 = floor(i/{block_by})      RANGE [0, I&#39;/{block_by} -1]      SIZE: I&#39;/{block_by}</span></div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;<span class="comment">  * x1 = o%{interleave_by}        RANGE [0, {interleave_by} -1]    SIZE: {interleave_by}</span></div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;<span class="comment">  * x0 = i%{block_by}             RANGE [0, {block_by} -1]         SIZE: {block_by}</span></div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;<span class="comment">  *                                                          TOTAL SIZE: O&#39; * H * W * I&#39;</span></div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;<span class="comment">  *        4D                       6D</span></div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;<span class="comment">  * -----------------   -----------------------------------</span></div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;<span class="comment">  * value(o, h, w, i) =   x5 * H * W * I&#39; * {interleave_by}</span></div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;<span class="comment">  *                     + x4 * W * I&#39; * {interleave_by}</span></div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;<span class="comment">  *                     + x3 * I&#39; * {interleave_by}</span></div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;<span class="comment">  *                     + x2 * {interleave_by} * {block_by}</span></div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;<span class="comment">  *                     + x1 * {block_by}</span></div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;<span class="comment">  *                     + x0</span></div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;<span class="comment">  * Notice that in arm_gemm the 4D tensor of dimension O&#39;HWI&#39; created</span></div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;<span class="comment">  * for the OHWIo{interleave_by}i{block_by} format is in reality seen</span></div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;<span class="comment">  * as a 2D tensor, where the number of rows is O&#39;/{interleave_by}</span></div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;<span class="comment">  * and the number of columns is {interleave_by} * H * W * I&#39;.</span></div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;<span class="comment">  *</span></div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;<span class="comment">  * The postfix *_bf16 is for the memory layout needed for the</span></div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;<span class="comment">  * fast-mode kernels, in which the weights are passed in bfloat16</span></div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;<span class="comment">  * format.</span></div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;<span class="comment">  */</span></div><div class="line"><a name="l02017"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5"> 2017</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a></div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;{</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>    = 0x1,</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">ANY</a>            = 0x2,</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">OHWI</a>           = 0x100100,</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">OHWIo2</a>         = 0x100200,</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">OHWIo4</a>         = 0x100400,</div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">OHWIo8</a>         = 0x100800,</div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">OHWIo16</a>        = 0x101000,</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">OHWIo32</a>        = 0x102000,</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">OHWIo64</a>        = 0x104000,</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">OHWIo128</a>       = 0x108000,</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">OHWIo4i2</a>       = 0x200400,</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">OHWIo4i2_bf16</a>  = 0x200410,</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">OHWIo8i2</a>       = 0x200800,</div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">OHWIo8i2_bf16</a>  = 0x200810,</div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">OHWIo16i2</a>      = 0x201000,</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">OHWIo16i2_bf16</a> = 0x201010,</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">OHWIo32i2</a>      = 0x202000,</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">OHWIo32i2_bf16</a> = 0x202010,</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">OHWIo64i2</a>      = 0x204000,</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">OHWIo64i2_bf16</a> = 0x204010,</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">OHWIo4i4</a>       = 0x400400,</div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">OHWIo4i4_bf16</a>  = 0x400410,</div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">OHWIo8i4</a>       = 0x400800,</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">OHWIo8i4_bf16</a>  = 0x400810,</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">OHWIo16i4</a>      = 0x401000,</div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">OHWIo16i4_bf16</a> = 0x401010,</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">OHWIo32i4</a>      = 0x402000,</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">OHWIo32i4_bf16</a> = 0x402010,</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">OHWIo64i4</a>      = 0x404000,</div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">OHWIo64i4_bf16</a> = 0x404010,</div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">OHWIo2i8</a>       = 0x800200,</div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">OHWIo4i8</a>       = 0x800400,</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">OHWIo8i8</a>       = 0x800800,</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">OHWIo16i8</a>      = 0x801000,</div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">OHWIo32i8</a>      = 0x802000,</div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">OHWIo64i8</a>      = 0x804000</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;};</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;<span class="comment">// OHWIo&lt;interleave_by&gt;i&lt;block_by&gt;</span></div><div class="line"><a name="l02057"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6504035918188c363f421a6677b185fd"> 2057</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute.xhtml#a6504035918188c363f421a6677b185fd">interleave_by</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> wf)</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;{</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;    <span class="keywordflow">return</span> (static_cast&lt;int&gt;(wf) &gt;&gt; 8) &amp; 0xFFF;</div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;}</div><div class="line"><a name="l02061"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af117513e1fddf0534bb90275f0a9db42"> 2061</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute.xhtml#af117513e1fddf0534bb90275f0a9db42">block_by</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> wf)</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;{</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;    <span class="keywordflow">return</span> (static_cast&lt;int&gt;(wf) &gt;&gt; 20) &amp; 0xF;</div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;}</div><div class="line"><a name="l02065"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54"> 2065</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54">is_fixed_format</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;wf)</div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;{</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;    <span class="keywordflow">return</span> wf != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">WeightFormat::UNSPECIFIED</a> &amp;&amp; wf != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">WeightFormat::ANY</a>;</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;}</div><div class="line"><a name="l02069"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0"> 2069</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">is_fixed_format_fast_math</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a> &amp;wf)</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;{</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;    <span class="keywordflow">return</span> (static_cast&lt;int&gt;(wf) &gt;&gt; 4) &amp; 0x1;</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;}</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;<span class="comment">/** Convolution Layer Weights Information class. This class stores the necessary information to compute convolution layer when the weights are already reshaped */</span></div><div class="line"><a name="l02075"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml"> 2075</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a></div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;{</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l02079"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a8bf46ce65f0f9cc0210774dfc60b4e2f"> 2079</a></span>&#160;    <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a8bf46ce65f0f9cc0210774dfc60b4e2f">WeightsInfo</a>()</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;        : _are_reshaped(false), _kernel_width(0), _kernel_height(0), _num_kernels(0), _retain_internal_weights(false), _weight_format(<a class="code" href="namespacearm__compute.xhtml">arm_compute</a>::<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a>::<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>)</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;    {</div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;<span class="comment">     * @param[in] are_reshaped            True if the weights have been reshaped</span></div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;<span class="comment">     * @param[in] kernel_width            Kernel width.</span></div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;<span class="comment">     * @param[in] kernel_height           Kernel height.</span></div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;<span class="comment">     * @param[in] num_kernels             Number of convolution kernels.</span></div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;<span class="comment">     * @param[in] retain_internal_weights (Optional) True if internal reshaped weights must be retained. Used for reconfiguration purposes. Default is false.</span></div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;<span class="comment">     * @param[in] weight_format           (Optional) arm_gemm:WeightFormat enumeration requested by the user. Default is arm_compute::WeightFormat::UNSPECIFIED.</span></div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02092"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a2c0001bed10395d8b7e4510bb02c6620"> 2092</a></span>&#160;    <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a2c0001bed10395d8b7e4510bb02c6620">WeightsInfo</a>(<span class="keywordtype">bool</span> are_reshaped, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_height, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_kernels, <span class="keywordtype">bool</span> retain_internal_weights = <span class="keyword">false</span>,</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> weight_format = <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a>)</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;        : _are_reshaped(are_reshaped), _kernel_width(kernel_width), _kernel_height(kernel_height), _num_kernels(num_kernels), _retain_internal_weights(retain_internal_weights), _weight_format(weight_format)</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    {</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;<span class="comment">    /** Flag which specifies if the weights tensor has been reshaped.</span></div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;<span class="comment">     * @return True if the weights tensors has been reshaped</span></div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a54a5271cc6a1b58827a9b3f58ec5ba56"> 2101</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a54a5271cc6a1b58827a9b3f58ec5ba56">are_reshaped</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;        <span class="keywordflow">return</span> _are_reshaped;</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;<span class="comment">    /** Return the number of convolution kernels</span></div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;<span class="comment">     * @return The number of convolution kernels</span></div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02109"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#ab039f58ba3db07baaba2cbdc65608dbb"> 2109</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#ab039f58ba3db07baaba2cbdc65608dbb">num_kernels</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;        <span class="keywordflow">return</span> _num_kernels;</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;<span class="comment">    /** Return the width and height of the kernel</span></div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;<span class="comment">     * @return The width and height of the kernel</span></div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02117"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a1fba899b6ce8e0a8f4091031d75b0241"> 2117</a></span>&#160;    std::pair&lt;unsigned int, unsigned int&gt; <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a1fba899b6ce8e0a8f4091031d75b0241">kernel_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;        <span class="keywordflow">return</span> std::make_pair(_kernel_width, _kernel_height);</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;    }</div><div class="line"><a name="l02121"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9"> 2121</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9">retain_internal_weights</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;        <span class="keywordflow">return</span> _retain_internal_weights;</div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    }</div><div class="line"><a name="l02125"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6"> 2125</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6">weight_format</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;        <span class="keywordflow">return</span> _weight_format;</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;    }</div><div class="line"><a name="l02129"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6"> 2129</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6">set_weight_format</a>(<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> weight_format)</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    {</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;        _weight_format = weight_format;</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    }</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;</div><div class="line"><a name="l02134"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a05cb475ce43d447dd39a783eb08b8146"> 2134</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a05cb475ce43d447dd39a783eb08b8146">kernel_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;        <span class="keywordflow">return</span> _kernel_width;</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;    }</div><div class="line"><a name="l02138"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_weights_info.xhtml#a90990c547da68db979b9c54874382e17"> 2138</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_weights_info.xhtml#a90990c547da68db979b9c54874382e17">kernel_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;        <span class="keywordflow">return</span> _kernel_height;</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    }</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    <span class="keywordtype">bool</span>                      _are_reshaped;</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>              _kernel_width;</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>              _kernel_height;</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>              _num_kernels;</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;    <span class="keywordtype">bool</span>                      _retain_internal_weights;</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> _weight_format;</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;};</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;<span class="comment">/** GEMM reshape information class. This class stores the necessary information about matrix A and matrix B reshape.</span></div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;<span class="comment"> * The matrix A can only be reshaped through @ref opencl::kernels::ClGemmReshapeLhsMatrixKernel or  @ref cpu::kernels::CpuGemmInterleave4x4Kernel</span></div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;<span class="comment"> * Note: Optionally just for @ref opencl::kernels::ClGemmReshapeLhsMatrixKernel is it possible to set mult_interleave4x4_height, the multiplication factor for the height of the 4x4 interleaved block</span></div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;<span class="comment"> * The matrix B can only be reshaped through @ref opencl::kernels::ClGemmReshapeRhsMatrixKernel or  @ref cpu::kernels::CpuGemmTranspose1xWKernel</span></div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;<span class="comment"> * Note: Optionally just for @ref opencl::kernels::ClGemmReshapeRhsMatrixKernel is it possible to set mult_transpose1xW_width, the multiplication factor for the width of the 1xW transposed block</span></div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02161"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml"> 2161</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">GEMMReshapeInfo</a> final</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;{</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l02165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#aee6f5a043173c4d51c11a54db8e0f519"> 2165</a></span>&#160;    <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#aee6f5a043173c4d51c11a54db8e0f519">GEMMReshapeInfo</a>()</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;        : _m(1), _n(1), _k(1), _mult_transpose1xW_width(1), _mult_interleave4x4_height(1), _depth_output_gemm3d(0), _reinterpret_input_as_3d(false), _broadcast_bias(false)</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;    {</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;<span class="comment">     * @param[in] m                         Number of matrix A rows</span></div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;<span class="comment">     * @param[in] n                         Number of matrix B columns</span></div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;<span class="comment">     * @param[in] k                         Number of matrix A columns or matrix B rows</span></div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;<span class="comment">     * @param[in] mult_transpose1xW_width   (Optional) Multiplication factor for the width of the 1xW transposed block</span></div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;<span class="comment">     * @param[in] mult_interleave4x4_height (Optional) Multiplication factor for the height of the 4x4 interleaved block</span></div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;<span class="comment">     * @param[in] depth_output_gemm3d       (Optional) Depth (third dimension) of the output tensor to be used with the GEMM3D kernel.</span></div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;<span class="comment">     *                                      If 0 the output will not be reinterpreted as 3D. Default 0</span></div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;<span class="comment">     * @param[in] reinterpret_input_as_3d   (Optional) Reinterpret the input as 3D tensor. (i.e. this flag should be set to true when GEMM is used</span></div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;<span class="comment">     *                                      to perform 1x1 convolutions with the NHWC data layout)</span></div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;<span class="comment">     * @param[in] broadcast_bias            (Optional) Broadcast the shape of the bias tensor from a vector to a matrix.</span></div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02182"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a7c7dca610a813588a26253efb8261064"> 2182</a></span>&#160;    <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a7c7dca610a813588a26253efb8261064">GEMMReshapeInfo</a>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>, <span class="keywordtype">int</span> mult_transpose1xW_width = 1, <span class="keywordtype">int</span> mult_interleave4x4_height = 1, <span class="keywordtype">int</span> depth_output_gemm3d = 0, <span class="keywordtype">bool</span> reinterpret_input_as_3d = <span class="keyword">false</span>, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af964802a181e4f401a7a38950bdefb24">broadcast_bias</a> = <span class="keyword">false</span>)</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;        : _m(m), _n(n), _k(k), _mult_transpose1xW_width(mult_transpose1xW_width), _mult_interleave4x4_height(mult_interleave4x4_height), _depth_output_gemm3d(depth_output_gemm3d),</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;          _reinterpret_input_as_3d(reinterpret_input_as_3d), _broadcast_bias(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af964802a181e4f401a7a38950bdefb24">broadcast_bias</a>)</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    {</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;<span class="comment">    /** Number of matrix A rows</span></div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;<span class="comment">     * @return the number of matrix A rows</span></div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02191"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb"> 2191</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">m</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;        <span class="keywordflow">return</span> _m;</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;<span class="comment">    /** Number of matrix B columns</span></div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;<span class="comment">     * @return the number of matrix B columns</span></div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02199"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3"> 2199</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">n</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;        <span class="keywordflow">return</span> _n;</div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;<span class="comment">    /** Number of matrix A columns or matrix B rows</span></div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;<span class="comment">     * @return the number of matrix A columns or matrix B rows</span></div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02207"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#ab86946326c4e33cbfb38cef7312b4ae5"> 2207</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#ab86946326c4e33cbfb38cef7312b4ae5">k</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;        <span class="keywordflow">return</span> _k;</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;<span class="comment">    /** Multiplication factor for the width of the 1xW transposed block</span></div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;<span class="comment">     * @return the multiplication factor for the width of the 1xW transposed block</span></div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02215"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a081936aca13d31ebfbeaa95c7cb16cb7"> 2215</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a081936aca13d31ebfbeaa95c7cb16cb7">mult_transpose1xW_width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;        <span class="keywordflow">return</span> _mult_transpose1xW_width;</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;<span class="comment">    /** Multiplication factor for the height of the 4x4 interleaved block</span></div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;<span class="comment">     * @return the multiplication factor for the height of the 4x4 interleaved block</span></div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02223"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a4852ed701888ba87cb52b0d2dfc7c4ce"> 2223</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a4852ed701888ba87cb52b0d2dfc7c4ce">mult_interleave4x4_height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        <span class="keywordflow">return</span> _mult_interleave4x4_height;</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;<span class="comment">    /** Depth (third dimension) of the output tensor to be used with the GEMM3D kernel</span></div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;<span class="comment">     * @note GEMM3D kernel is used when the output has to be reinterpret as 3D tensor. In that case:</span></div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;<span class="comment">     *       m = depth_output_gemm3d * output_height</span></div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;<span class="comment">     * @return the depth of the output tensor to be used with the GEMM3D kernel</span></div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02234"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07"> 2234</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;        <span class="keywordflow">return</span> _depth_output_gemm3d;</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;<span class="comment">    /** Flag which specifies if the input tensor has to be reinterpreted as 3D</span></div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;<span class="comment">     * @return True if the input tensor has to be reinterpreted as 3D tensor</span></div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02242"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806"> 2242</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;        <span class="keywordflow">return</span> _reinterpret_input_as_3d;</div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;<span class="comment">    /** Flag which specifies whether to broadcast the shape of the bias tensor.</span></div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;<span class="comment">     * @return True if the shape of the bias tensor is to be broadcasted.</span></div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02250"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688"> 2250</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688">broadcast_bias</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;        <span class="keywordflow">return</span> _broadcast_bias;</div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;    };</div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;    <span class="keywordtype">int</span>  _m;</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;    <span class="keywordtype">int</span>  _n;</div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;    <span class="keywordtype">int</span>  _k;</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;    <span class="keywordtype">int</span>  _mult_transpose1xW_width;</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;    <span class="keywordtype">int</span>  _mult_interleave4x4_height;</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;    <span class="keywordtype">int</span>  _depth_output_gemm3d;</div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;    <span class="keywordtype">bool</span> _reinterpret_input_as_3d;</div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    <span class="keywordtype">bool</span> _broadcast_bias;</div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;};</div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;</div><div class="line"><a name="l02266"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml"> 2266</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a></div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;{</div><div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;    <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l02269"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml#aea0c7db32b968de3cf0633654e8c7cd7"> 2269</a></span>&#160;    <a class="code" href="structarm__compute_1_1_convolution_info.xhtml#aea0c7db32b968de3cf0633654e8c7cd7">ConvolutionInfo</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation)</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;        : pad_stride_info(pad_stride_info), depth_multiplier(depth_multiplier), act_info(act_info), dilation(dilation)</div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;    {</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    }</div><div class="line"><a name="l02273"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17"> 2273</a></span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>       pad_stride_info{};        <span class="comment">/**&lt; Convolution info (Pads, strides,...) */</span></div><div class="line"><a name="l02274"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml#adccaa3ddba466fa0857ec3c9f33a9db4"> 2274</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        depth_multiplier{ 1 };    <span class="comment">/**&lt; Multiplier to apply to input&#39;s depth to retrieve the output depth. Defaults to 1 */</span></div><div class="line"><a name="l02275"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml#ae2b713ec1b7911df357fc13679691cda"> 2275</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>{};               <span class="comment">/**&lt; Fused activation to apply after convolution. */</span></div><div class="line"><a name="l02276"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_convolution_info.xhtml#a5159123bf7ffd6ecb44e7322a9b0492e"> 2276</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>              dilation{ <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 1) }; <span class="comment">/**&lt; Dilation, in elements, across x and y. Defaults to (1, 1). */</span></div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;};</div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;<span class="comment">/** GEMMLowp output stage type */</span></div><div class="line"><a name="l02280"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864"> 2280</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a></div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;{</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">NONE</a>,                     <span class="comment">/**&lt; No quantization */</span></div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">QUANTIZE_DOWN</a>,            <span class="comment">/**&lt; Quantize using an integer multiplication */</span></div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">QUANTIZE_DOWN_FIXEDPOINT</a>, <span class="comment">/**&lt; Quantize using a fixed point multiplication */</span></div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">QUANTIZE_DOWN_FLOAT</a>       <span class="comment">/**&lt; Quantize using a floating point multiplication */</span></div><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;};</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;<span class="comment">/** GEMMLowp output stage info */</span></div><div class="line"><a name="l02289"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml"> 2289</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a></div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;{</div><div class="line"><a name="l02291"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a6e019ad85979fd73c74f97e5483faf35"> 2291</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>{ <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">GEMMLowpOutputStageType::NONE</a> };                        <span class="comment">/**&lt; GEMMLowp output stage type */</span></div><div class="line"><a name="l02292"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a01934c5087f5193aaf3ea9bf41d1a8dc"> 2292</a></span>&#160;    int32_t                 gemmlowp_offset{ 0 };                                         <span class="comment">/**&lt; GEMMLowp output stage offset used for quantizing to QASYMM8 */</span></div><div class="line"><a name="l02293"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a1cfb92f1c287bf099c3fca0ef0391a2b"> 2293</a></span>&#160;    int32_t                 gemmlowp_multiplier{ 0 };                                     <span class="comment">/**&lt; GEMMLowp output stage multiplier used for quantizing to QASYMM8 */</span></div><div class="line"><a name="l02294"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a3f0613aeb69c326e7d8ffb34b44fae94"> 2294</a></span>&#160;    int32_t                 gemmlowp_shift{ 0 };                                          <span class="comment">/**&lt; GEMMLowp output stage shift used for quantizing to uint8 */</span></div><div class="line"><a name="l02295"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a155d27c75f14a82a74e5039c9657c8eb"> 2295</a></span>&#160;    int32_t                 gemmlowp_min_bound{ <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>() }; <span class="comment">/**&lt; GEMMLowp min value used to saturate down the output result before converting back to QASYMM8 */</span></div><div class="line"><a name="l02296"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a6db94040329f1dedcd348ec7de072e2a"> 2296</a></span>&#160;    int32_t                 gemmlowp_max_bound{ std::numeric_limits&lt;int32_t&gt;::max() };    <span class="comment">/**&lt; GEMMLowp max value used to saturate down the output result before converting back to QASYMM8 */</span></div><div class="line"><a name="l02297"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#ae5bd6bebbc0c7ebd9e7dbfd47d939c2a"> 2297</a></span>&#160;    std::vector&lt;int32_t&gt;    gemmlowp_multipliers{};                                       <span class="comment">/**&lt; GEMMLowp output stage multiplier used for quantizing to QASYMM8 */</span></div><div class="line"><a name="l02298"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#ab269b182588a158cd256f9d4bb2a00dd"> 2298</a></span>&#160;    std::vector&lt;int32_t&gt;    gemmlowp_shifts{};                                            <span class="comment">/**&lt; GEMMLowp output stage multiplier used for quantizing to QASYMM8 */</span></div><div class="line"><a name="l02299"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#adc26274f64ea797e55d06e6a813f30f9"> 2299</a></span>&#160;    <span class="keywordtype">float</span>                   gemmlowp_real_multiplier{ 0 };                                <span class="comment">/**&lt; GEMMLowp output stage real multiplier used for quantizing to QASYMM8 */</span></div><div class="line"><a name="l02300"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#a94e1801be6c3d9d6645c694d7e280cda"> 2300</a></span>&#160;    <span class="keywordtype">bool</span>                    is_quantized_per_channel{ <span class="keyword">false</span> };                            <span class="comment">/**&lt; GEMMLowp quantized per-channel flag */</span></div><div class="line"><a name="l02301"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml#ab233758aca2751c6e71a2f79baf7b92a"> 2301</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>                output_data_type{ <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a> };                        <span class="comment">/**&lt; Output tensor data type to use if the output is not initialized */</span></div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;};</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;<span class="comment">/** GEMM LHS (Left Hand Side) matrix information */</span></div><div class="line"><a name="l02305"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml"> 2305</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a></div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;{</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">GEMMLHSMatrixInfo</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l02308"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a5a98f0686cb0eff3120ef84a003f8855"> 2308</a></span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a5a98f0686cb0eff3120ef84a003f8855">GEMMLHSMatrixInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> v, <span class="keywordtype">bool</span> trans, <span class="keywordtype">bool</span> inter)</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;        : m0(m), k0(k), v0(v), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#acf9a40691cf4bd2c9af93bc806358a24">transpose</a>(trans), interleave(inter)</div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;    {</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;    }</div><div class="line"><a name="l02312"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a41618231c7d7b990c42fe6846b4dde27"> 2312</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m0{ 1 };            <span class="comment">/**&lt; Number of rows processed by the matrix multiplication */</span></div><div class="line"><a name="l02313"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f"> 2313</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0{ 1 };            <span class="comment">/**&lt; Number of partial accumulations performed by the matrix multiplication */</span></div><div class="line"><a name="l02314"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#acfef62abd2f827bf05666ba50a705c0d"> 2314</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> v0{ 1 };            <span class="comment">/**&lt; Number of vertical blocks of size (m0xk0) stored on the same output row */</span></div><div class="line"><a name="l02315"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a25a62de4b18dc349803bf5447052d673"> 2315</a></span>&#160;    <span class="keywordtype">bool</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#acf9a40691cf4bd2c9af93bc806358a24">transpose</a>{ <span class="keyword">true</span> };  <span class="comment">/**&lt; True if the (m0xk0) block has to be transposed before been stored */</span></div><div class="line"><a name="l02316"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a955e0ea38fdf2cad6dbce624c7fc22a3"> 2316</a></span>&#160;    <span class="keywordtype">bool</span>         interleave{ <span class="keyword">true</span> }; <span class="comment">/**&lt; True if the v0 (m0xk0) blocks have to be interleaved in the output row */</span></div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;};</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;<span class="comment">/** GEMM RHS (Right Hand Side) matrix information */</span></div><div class="line"><a name="l02320"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml"> 2320</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a></div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;{</div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">GEMMRHSMatrixInfo</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l02323"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ab04889362609fea21e42bc1b2432f340"> 2323</a></span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ab04889362609fea21e42bc1b2432f340">GEMMRHSMatrixInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h, <span class="keywordtype">bool</span> trans, <span class="keywordtype">bool</span> inter, <span class="keywordtype">bool</span> export_to_cl_img)</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;        : n0(n), k0(k), h0(h), <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#acf9a40691cf4bd2c9af93bc806358a24">transpose</a>(trans), interleave(inter), <a class="code" href="namespacearm__compute.xhtml#aad1276bf6fb54ae42d709743edbe5a21">export_to_cl_image</a>(export_to_cl_img)</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;    {</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;    }</div><div class="line"><a name="l02327"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ac0c87b58d0d04796c81d8138231dccda"> 2327</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0{ 1 };                     <span class="comment">/**&lt; Number of columns processed by the matrix multiplication */</span></div><div class="line"><a name="l02328"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a9bca3aa421b5fa7c07b0aa751b39b25f"> 2328</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0{ 1 };                     <span class="comment">/**&lt; Number of partial accumulations performed by the matrix multiplication */</span></div><div class="line"><a name="l02329"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a2dc097fefeb3d010fb5570a19cac6cd3"> 2329</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h0{ 1 };                     <span class="comment">/**&lt; Number of horizontal blocks of size (k0xn0) stored on the same output row */</span></div><div class="line"><a name="l02330"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a25a62de4b18dc349803bf5447052d673"> 2330</a></span>&#160;    <span class="keywordtype">bool</span>         <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#acf9a40691cf4bd2c9af93bc806358a24">transpose</a>{ <span class="keyword">true</span> };           <span class="comment">/**&lt; True if the (k0xn0) block has to be transposed before been stored */</span></div><div class="line"><a name="l02331"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#a955e0ea38fdf2cad6dbce624c7fc22a3"> 2331</a></span>&#160;    <span class="keywordtype">bool</span>         interleave{ <span class="keyword">true</span> };          <span class="comment">/**&lt; True if the h0 (k0xn0) blocks have to be interleaved in the output row */</span></div><div class="line"><a name="l02332"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#aec6e1c3e7602e18a520597aab0cf3a6a"> 2332</a></span>&#160;    <span class="keywordtype">bool</span>         <a class="code" href="namespacearm__compute.xhtml#aad1276bf6fb54ae42d709743edbe5a21">export_to_cl_image</a>{ <span class="keyword">false</span> }; <span class="comment">/**&lt; True if the reshaped rhs has to be exported to cl_image. n0 must be equal to 4 */</span></div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;};</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;</div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>;<span class="comment"></span></div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;<span class="comment">/** GEMM information class. This class stores the necessary information to compute GEMM functions</span></div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;<span class="comment"> * This object also contains the information about how matrix A and matrix B have been reshaped</span></div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l02341"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml"> 2341</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a></div><div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;{</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l02345"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae0c4636f1099428785df0463f7151889"> 2345</a></span>&#160;    <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae0c4636f1099428785df0463f7151889">GEMMInfo</a>() noexcept</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;        : _is_a_reshaped(false),</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;          _is_b_reshaped(false),</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;          _reshape_b_only_on_first_run(true),</div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;          _depth_output_gemm3d(0),</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;          _reinterpret_input_as_3d(false),</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;          _retain_internal_weights(false),</div><div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;          _gemmlowp_output_stage(),</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;          _fast_math(false),</div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;          _fp_mixed_precision(false),</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;          _broadcast_bias(false),</div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;          _pretranspose_A(false),</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;          _pretranspose_B(false),</div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;          _activation_info(),</div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;          _post_ops(),</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;          _fixed_format(false),</div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;          _weight_format(<a class="code" href="namespacearm__compute.xhtml">arm_compute</a>::<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">WeightFormat</a>::<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>)</div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;    {</div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;<span class="comment">    /** Constructor</span></div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;<span class="comment">     * @param[in] is_a_reshaped               True if the matrix A has been reshaped</span></div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;<span class="comment">     * @param[in] is_b_reshaped               True if the matrix B has been reshaped</span></div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;<span class="comment">     * @param[in] reshape_b_only_on_first_run Reshape matrix B only for the first run</span></div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;<span class="comment">     * @param[in] depth_output_gemm3d         (Optional) Depth (third dimension) of the output tensor to be used with the GEMM3D kernel</span></div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;<span class="comment">     *                                        If 0 the output will not be reinterpreted as 3D. Default 0</span></div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;<span class="comment">     * @param[in] reinterpret_input_as_3d     (Optional) Reinterpret the input as 3D tensor. (i.e. this flag should be set to true when GEMM is used</span></div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;<span class="comment">     *                                        to perform 1x1 convolutions with the NHWC data layout)</span></div><div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;<span class="comment">     * @param[in] retain_internal_weights     (Optional) Retain the weights tensor from previous run</span></div><div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;<span class="comment">     * @param[in] gemmlowp_output_stage       (Optional) GEMMLowp Output stage info</span></div><div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;<span class="comment">     * @param[in] fp_mixed_precision          (Optional) Use wider accumulators (32 bit instead of 16 for FP16) to improve accuracy.</span></div><div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;<span class="comment">     * @param[in] fast_math                   (Optional) Use a data type of shorter width to improve performance</span></div><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;<span class="comment">     * @param[in] broadcast_bias              (Optional) Broadcast the shape of the bias tensor from a vector to a matrix.</span></div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;<span class="comment">     * @param[in] activation_info             (Optional) Activation to apply after the matrix multiplication</span></div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;<span class="comment">     * @param[in] post_ops                    (Optional) A sequence of post operations that are performed after the main operation.</span></div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;<span class="comment">     * @param[in] fixed_format                (Optional) Specify the selection of fixed format kernels for variable weights support in GEMM. These kernels expect the weights tensor to be in amemory format that is fixed by the kernel itself. For more information, see arm_compute::WeightFormat.</span></div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;<span class="comment">     * @param[in] weight_format               (Optional) arm_gemm:WeightFormat enumeration requested by the user. Default is arm_compute::WeightFormat::UNSPECIFIED.</span></div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02383"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a5249ed9224810a95f8fa1366bc77c523"> 2383</a></span>&#160;    <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a5249ed9224810a95f8fa1366bc77c523">GEMMInfo</a>(<span class="keywordtype">bool</span> is_a_reshaped, <span class="keywordtype">bool</span> is_b_reshaped, <span class="keywordtype">bool</span> reshape_b_only_on_first_run, <span class="keywordtype">int</span> depth_output_gemm3d = 0, <span class="keywordtype">bool</span> reinterpret_input_as_3d = <span class="keyword">false</span>, <span class="keywordtype">bool</span> retain_internal_weights = <span class="keyword">false</span>,</div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;             <a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> gemmlowp_output_stage = <a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a>(), <span class="keywordtype">bool</span> fp_mixed_precision = <span class="keyword">false</span>, <span class="keywordtype">bool</span> fast_math = <span class="keyword">false</span>, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af964802a181e4f401a7a38950bdefb24">broadcast_bias</a> = <span class="keyword">false</span>,</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a> = <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a>(),</div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;             <span class="keywordtype">bool</span> fixed_format = <span class="keyword">false</span>, <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> weight_format = <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a>) noexcept</div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;        : _is_a_reshaped(is_a_reshaped),</div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;          _is_b_reshaped(is_b_reshaped),</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;          _reshape_b_only_on_first_run(reshape_b_only_on_first_run),</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;          _depth_output_gemm3d(depth_output_gemm3d),</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;          _reinterpret_input_as_3d(reinterpret_input_as_3d),</div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;          _retain_internal_weights(retain_internal_weights),</div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;          _gemmlowp_output_stage(gemmlowp_output_stage),</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;          _fast_math(fast_math),</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;          _fp_mixed_precision(fp_mixed_precision),</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;          _broadcast_bias(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af964802a181e4f401a7a38950bdefb24">broadcast_bias</a>),</div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;          _pretranspose_A(<span class="keyword">false</span>),</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;          _pretranspose_B(<span class="keyword">false</span>),</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;          _activation_info(activation_info),</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;          _post_ops(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>),</div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;          _fixed_format(fixed_format),</div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;          _weight_format(weight_format)</div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;    {</div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;<span class="comment">    /** Flag which specifies if the matrix A has been reshaped</span></div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;<span class="comment">     * @return True if the matrix A has been reshaped</span></div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02409"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#aa7e9584d7080ca6442cec62afaff6cad"> 2409</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#aa7e9584d7080ca6442cec62afaff6cad">is_a_reshaped</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;        <span class="keywordflow">return</span> _is_a_reshaped;</div><div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;<span class="comment">    /** Flag which specifies if the matrix B has been reshaped</span></div><div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;<span class="comment">     * @return True if the matrix B has been reshaped</span></div><div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02417"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a77964edb8d16bb8ec14ddd8985e03cb0"> 2417</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a77964edb8d16bb8ec14ddd8985e03cb0">is_b_reshaped</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;        <span class="keywordflow">return</span> _is_b_reshaped;</div><div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;<span class="comment">    /** Flag which specifies if the reshape of matrix B should executed only for the first</span></div><div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;<span class="comment">     * @note This flag could be set to TRUE when GEMM is used to accelerate convolution layer</span></div><div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;<span class="comment">     * @return True if the reshaped of matrix B happens only for the first run</span></div><div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02427"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a4c8f9fa843de1086c27c86a6b8cf4582"> 2427</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a4c8f9fa843de1086c27c86a6b8cf4582">reshape_b_only_on_first_run</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;        <span class="keywordflow">return</span> _reshape_b_only_on_first_run;</div><div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;<span class="comment">    /** Depth of the output when GEMM output is reinterpreted as 3D tensor</span></div><div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;<span class="comment">     * @return the depth of the output tensor</span></div><div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02435"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#abbd888f118c2209bf7578eb4f8942a07"> 2435</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">depth_output_gemm3d</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;        <span class="keywordflow">return</span> _depth_output_gemm3d;</div><div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;<span class="comment">    /** Flag which specifies if the input tensor has to be reinterpreted as 3D</span></div><div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;<span class="comment">     * @return True if the input tensor has to be reinterpreted as 3D tensor</span></div><div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02443"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a00330b8913cac3b07029ac0c3350e806"> 2443</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a00330b8913cac3b07029ac0c3350e806">reinterpret_input_as_3d</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;        <span class="keywordflow">return</span> _reinterpret_input_as_3d;</div><div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;<span class="comment">    /** Flag which specifies if the weights tensor has to be retained from previous run</span></div><div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;<span class="comment">     * @return True if the weights tensor has to be retained</span></div><div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02451"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9"> 2451</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9">retain_internal_weights</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;        <span class="keywordflow">return</span> _retain_internal_weights;</div><div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;<span class="comment">    /** GEMMLowp output stage</span></div><div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;<span class="comment">     * @return the GEMMLowp output stage info</span></div><div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02459"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a11d8f855e323a8396fe6944edcef4238"> 2459</a></span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a11d8f855e323a8396fe6944edcef4238">gemmlowp_output_stage</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;        <span class="keywordflow">return</span> _gemmlowp_output_stage;</div><div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;<span class="comment">    /** Sets GEMMLowp output stage</span></div><div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;<span class="comment">     * @param[in] output_stage Output stage to set</span></div><div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02467"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae081b85ce44f2ec7cfe875afabcdfcc3"> 2467</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae081b85ce44f2ec7cfe875afabcdfcc3">set_gemmlowp_output_stage</a>(<a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;<a class="code" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>)</div><div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;    {</div><div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;        _gemmlowp_output_stage = <a class="code" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>;</div><div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;<span class="comment">    /** Flag which specifies if a wider accumulator should be used.</span></div><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;<span class="comment">     * @return True if a wider accumulator has to be used</span></div><div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02475"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a501521734ce4f9d81d91d0c7e35dcfe9"> 2475</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a501521734ce4f9d81d91d0c7e35dcfe9">fp_mixed_precision</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;        <span class="keywordflow">return</span> _fp_mixed_precision;</div><div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;<span class="comment">    /** Flag which specifies if a shorter accumulator to be used.</span></div><div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;<span class="comment">     * @return True if a shorter accumulator has to be used</span></div><div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02483"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae2d38726d9f14d748185f77798617c8a"> 2483</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae2d38726d9f14d748185f77798617c8a">fast_math</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;        <span class="keywordflow">return</span> _fast_math;</div><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;<span class="comment">    /** Set fast math flag</span></div><div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;<span class="comment">     * @param[in] fast_math Flag to set</span></div><div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02491"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#af706055cbc19cf4ee2b6effe3beaccee"> 2491</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#af706055cbc19cf4ee2b6effe3beaccee">set_fast_math</a>(<span class="keywordtype">bool</span> fast_math)</div><div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;    {</div><div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;        _fast_math = fast_math;</div><div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;<span class="comment">    /** Flag which specifies whether to broadcast the shape of the bias tensor.</span></div><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;<span class="comment">     * @return True if the shape of the bias tensor is to be broadcasted.</span></div><div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02499"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688"> 2499</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688">broadcast_bias</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;        <span class="keywordflow">return</span> _broadcast_bias;</div><div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;<span class="comment">    /** Flag which specifies whether A should be pre-transposed if supported.</span></div><div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;<span class="comment">     * @return True if A should be pre-transposed else false.</span></div><div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02507"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac6663acffe7ad0fa26750779bec17d82"> 2507</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac6663acffe7ad0fa26750779bec17d82">pretranspose_A</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;        <span class="keywordflow">return</span> _pretranspose_A;</div><div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;<span class="comment">    /** Set pre-transpose A flag</span></div><div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;<span class="comment">     * @param[in] flag Flag to set</span></div><div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02515"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a72940f70ecb21f935870ca4b61947ce9"> 2515</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a72940f70ecb21f935870ca4b61947ce9">set_pretranspose_A</a>(<span class="keywordtype">bool</span> flag)</div><div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;    {</div><div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;        _pretranspose_A = flag;</div><div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;<span class="comment">    /** Flag which specifies whether b should be pre-transposed if supported.</span></div><div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;<span class="comment">     * @return True if b should be pre-transposed else false.</span></div><div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02523"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ade745f0d990160b2ad90ded0814a2498"> 2523</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ade745f0d990160b2ad90ded0814a2498">pretranspose_B</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;        <span class="keywordflow">return</span> _pretranspose_B;</div><div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;<span class="comment">    /** Set pre-transpose b flag</span></div><div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;<span class="comment">     * @param[in] flag Flag to set</span></div><div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02531"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a7e1df6b05c99e52dc87aaa3b1aeab3e9"> 2531</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a7e1df6b05c99e52dc87aaa3b1aeab3e9">set_pretranspose_B</a>(<span class="keywordtype">bool</span> flag)</div><div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;    {</div><div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;        _pretranspose_B = flag;</div><div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;<span class="comment">    /** Activation layer to apply after the matrix multiplication</span></div><div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;<span class="comment">     * @return ActivationLayerInfo object</span></div><div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02539"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a39a8dd296461705ee5cb54eacb4b2818"> 2539</a></span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a39a8dd296461705ee5cb54eacb4b2818">activation_info</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;        <span class="keywordflow">return</span> _activation_info;</div><div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;<span class="comment">    /** Set activation layer info</span></div><div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;<span class="comment">     * @param[in] activation_info ActivationLayerInfo object to set</span></div><div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02547"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad8fc03416b05b11b3b57e6cb17deea6f"> 2547</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad8fc03416b05b11b3b57e6cb17deea6f">set_activation_info</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation_info)</div><div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;    {</div><div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;        _activation_info = activation_info;</div><div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;<span class="comment">    /** Post operations to apply after the matrix multiplication</span></div><div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;<span class="comment">     * @return experimental::PostOpList object</span></div><div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02555"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad712f5f9ad21fa465f07cd8a6336c2d3"> 2555</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad712f5f9ad21fa465f07cd8a6336c2d3">post_ops</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;        <span class="keywordflow">return</span> _post_ops;</div><div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;<span class="comment">    /** Set post ops</span></div><div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;<span class="comment">     * @param[in] post_ops experimental::PostOpList object to set</span></div><div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02563"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab522b11b1700985df0dae26ec03cb249"> 2563</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab522b11b1700985df0dae26ec03cb249">set_post_ops</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>)</div><div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;    {</div><div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;        _post_ops = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>;</div><div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;<span class="comment">    /** Flag which specifies if the GEMM operation is running fixed-format kernels.</span></div><div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;<span class="comment">     * @return True if the GEMM operation is running fixed-format kernel else false.</span></div><div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02571"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab8326941d60f08c5d1f47ed65514f3ed"> 2571</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab8326941d60f08c5d1f47ed65514f3ed">fixed_format</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;        <span class="keywordflow">return</span> _fixed_format;</div><div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;    }</div><div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;<span class="comment">    /** Set fixed-format flag</span></div><div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;<span class="comment">     * @param[in] fixed_format sets whether or not to use fixed-format kernels</span></div><div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02580"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a15aa71f614ff585d24cbb101bfa5232e"> 2580</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a15aa71f614ff585d24cbb101bfa5232e">set_fixed_format</a>(<span class="keywordtype">bool</span> fixed_format)</div><div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;    {</div><div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;        _fixed_format = fixed_format;</div><div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;    }</div><div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;</div><div class="line"><a name="l02585"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6"> 2585</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6">weight_format</a>()<span class="keyword"> const</span></div><div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;        <span class="keywordflow">return</span> _weight_format;</div><div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;    }</div><div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;<span class="comment">    /** Set weight format to be used</span></div><div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;<span class="comment">     * @param[in] weight_format arm_compute::WeightFormat enumeration</span></div><div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02594"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6"> 2594</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_g_e_m_m_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6">set_weight_format</a>(<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> weight_format)</div><div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;    {</div><div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;        _weight_format = weight_format;</div><div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    }</div><div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;</div><div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;    <span class="keywordtype">bool</span>                                    _is_a_reshaped;</div><div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;    <span class="keywordtype">bool</span>                                    _is_b_reshaped;</div><div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;    <span class="keywordtype">bool</span>                                    _reshape_b_only_on_first_run;</div><div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;    <span class="keywordtype">int</span>                                     _depth_output_gemm3d;</div><div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;    <span class="keywordtype">bool</span>                                    _reinterpret_input_as_3d;</div><div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;    <span class="keywordtype">bool</span>                                    _retain_internal_weights;</div><div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;    <a class="code" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a>                 _gemmlowp_output_stage;</div><div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;    <span class="keywordtype">bool</span>                                    _fast_math;</div><div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;    <span class="keywordtype">bool</span>                                    _fp_mixed_precision;</div><div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;    <span class="keywordtype">bool</span>                                    _broadcast_bias;</div><div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;    <span class="keywordtype">bool</span>                                    _pretranspose_A;</div><div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;    <span class="keywordtype">bool</span>                                    _pretranspose_B;</div><div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>                     _activation_info;</div><div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList&lt;ITensorInfo *&gt;</a> _post_ops;</div><div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;    <span class="keywordtype">bool</span>                                    _fixed_format;</div><div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a>               _weight_format;</div><div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;};</div><div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;<span class="comment">/** Winograd information */</span></div><div class="line"><a name="l02619"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml"> 2619</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a></div><div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;<span class="comment">    /** Default constructor</span></div><div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;<span class="comment">     * @param[in] output_tile_sz Width and height of the output tile</span></div><div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;<span class="comment">     * @param[in] kernel_sz      Width and height of the kernel</span></div><div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;<span class="comment">     * @param[in] input_dims     Width and height of the input tensor before the convolution is applied</span></div><div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;<span class="comment">     * @param[in] conv_info      Convolution info (Pads, strides)</span></div><div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;<span class="comment">     * @param[in] data_layout    Data layout to use for the output tensor once the convolution has been applied</span></div><div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02629"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#af8cfb6ab1e028484d875995bf6c224e3"> 2629</a></span>&#160;    <a class="code" href="structarm__compute_1_1_winograd_info.xhtml#af8cfb6ab1e028484d875995bf6c224e3">WinogradInfo</a>(<a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> output_tile_sz, <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> kernel_sz, <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> input_dims, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</div><div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;        : output_tile_size(output_tile_sz), kernel_size(kernel_sz), input_dimensions(input_dims), convolution_info(conv_info), output_data_layout(data_layout)</div><div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;    {</div><div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;    }</div><div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;</div><div class="line"><a name="l02634"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#a5cd6561e9acc0cf9ba11bc2f51ec7a33"> 2634</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        output_tile_size{};                     <span class="comment">/**&lt; Width and height of the output tile */</span></div><div class="line"><a name="l02635"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#aca57076ead1d06c47d3d32f4302b14ac"> 2635</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        kernel_size{};                          <span class="comment">/**&lt; Width and height of the kernel*/</span></div><div class="line"><a name="l02636"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#af9ef316b2c98c946b47cd18f1319b93f"> 2636</a></span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        input_dimensions{};                     <span class="comment">/**&lt; Width and height of the input tensor before the convolution is applied */</span></div><div class="line"><a name="l02637"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#ad99e40b120f0a9e96821c08bf60a84f2"> 2637</a></span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> convolution_info{};                     <span class="comment">/**&lt; Convolution info (Pads, strides,...) */</span></div><div class="line"><a name="l02638"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_winograd_info.xhtml#a0bc60aaf23b2d3ed3b344576a708e84e"> 2638</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>    output_data_layout{ <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a> }; <span class="comment">/**&lt; Data layout to use for the output tensor once the convolution has been applied (NCHW or NHWC) */</span></div><div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;};</div><div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;<span class="comment">/** IO formatting information class*/</span></div><div class="line"><a name="l02642"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml"> 2642</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a></div><div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;<span class="comment">    /** Precision type used when printing floating point numbers */</span></div><div class="line"><a name="l02645"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6"> 2645</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6">PrecisionType</a></div><div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;    {</div><div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;        Default, <span class="comment">/**&lt; Default precision to the one that the current stream has */</span></div><div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;        Custom,  <span class="comment">/**&lt; Custom precision specified by the user using the precision parameter */</span></div><div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;        Full     <span class="comment">/**&lt; The maximum precision of the floating point representation */</span></div><div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;    };</div><div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;<span class="comment">    /** Specifies the area to be printed, used by Tensor objects */</span></div><div class="line"><a name="l02653"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0"> 2653</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0">PrintRegion</a></div><div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;    {</div><div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;        <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>, <span class="comment">/**&lt; Prints the valid region of the Tensor object */</span></div><div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;        NoPadding,   <span class="comment">/**&lt; Prints the Tensor object without the padding */</span></div><div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;        Full         <span class="comment">/**&lt; Print the tensor object including padding */</span></div><div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;    };</div><div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;<span class="comment">    /** Construct a set of IO formatting information.</span></div><div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;<span class="comment">     * @param[in] print_region   Area to be printed. Used by Tensor objects. Default: ValidRegion.</span></div><div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;<span class="comment">     * @param[in] precision_type Precision type for floating point numbers. Default: stream default.</span></div><div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160;<span class="comment">     * @param[in] precision      Precision value for float point numbers. Default: 10.</span></div><div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;<span class="comment">     * @param[in] align_columns  Whether to align columns when printed. Default: true.</span></div><div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;<span class="comment">     * @param[in] element_delim  Delimeter between elements. Default: &quot; &quot;.</span></div><div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;<span class="comment">     * @param[in] row_delim      Delimenter between rows. Default: &quot;\n&quot;.</span></div><div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l02669"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#aa0a9be7908d667b4d3735c4eef01a667"> 2669</a></span>&#160;    <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#aa0a9be7908d667b4d3735c4eef01a667">IOFormatInfo</a>(<a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0">PrintRegion</a>   print_region   = PrintRegion::ValidRegion,</div><div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;                 <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6">PrecisionType</a> precision_type = PrecisionType::Default,</div><div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  precision      = 10,</div><div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;                 <span class="keywordtype">bool</span>          align_columns  = <span class="keyword">true</span>,</div><div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;                 std::string   element_delim  = <span class="stringliteral">&quot; &quot;</span>,</div><div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;                 std::string   row_delim      = <span class="stringliteral">&quot;\n&quot;</span>)</div><div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;        : print_region(print_region),</div><div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;          precision_type(precision_type),</div><div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;          precision(precision),</div><div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;          element_delim(element_delim),</div><div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;          row_delim(row_delim),</div><div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;          align_columns(align_columns)</div><div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;    {</div><div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;    }</div><div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;<span class="comment"></span></div><div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;<span class="comment">    /** Area to be printed by Tensor objects */</span></div><div class="line"><a name="l02685"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#a3e3b8af91d2afbfeed14560f2070fd50"> 2685</a></span>&#160;    <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0">PrintRegion</a> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a3e3b8af91d2afbfeed14560f2070fd50">print_region</a>;<span class="comment"></span></div><div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;<span class="comment">    /** Floating point precision type */</span></div><div class="line"><a name="l02687"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#ad53ff460a7430f45c22b27aad707e41f"> 2687</a></span>&#160;    <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6">PrecisionType</a> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#ad53ff460a7430f45c22b27aad707e41f">precision_type</a>;<span class="comment"></span></div><div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;<span class="comment">    /** Floating point precision */</span></div><div class="line"><a name="l02689"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#a1fba9343eade93326cb985cfcb6de487"> 2689</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a1fba9343eade93326cb985cfcb6de487">precision</a>;<span class="comment"></span></div><div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;<span class="comment">    /** Element delimeter */</span></div><div class="line"><a name="l02691"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#a38c5b617ead74af00cc7957553bd0d66"> 2691</a></span>&#160;    std::string <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a38c5b617ead74af00cc7957553bd0d66">element_delim</a>;<span class="comment"></span></div><div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;<span class="comment">    /** Row delimeter */</span></div><div class="line"><a name="l02693"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#ab1a3e6cb2768124a6853f52bd0e10596"> 2693</a></span>&#160;    std::string <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#ab1a3e6cb2768124a6853f52bd0e10596">row_delim</a>;<span class="comment"></span></div><div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;<span class="comment">    /** Align columns */</span></div><div class="line"><a name="l02695"></a><span class="lineno"><a class="line" href="structarm__compute_1_1_i_o_format_info.xhtml#a1d81fe110d5dcac79dd73a532015bb94"> 2695</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml#a1d81fe110d5dcac79dd73a532015bb94">align_columns</a>;</div><div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;};</div><div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TYPES_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a7a6d5f8b1f761ea40f7f1072642be9e5"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a7a6d5f8b1f761ea40f7f1072642be9e5">arm_compute::NormalizationLayerInfo::scale_coeff</a></div><div class="ttdeci">float scale_coeff() const</div><div class="ttdoc">Return the scaling factor of the normalization function. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01913">Types.h:1913</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00276">Types.h:276</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::ElementWiseUnary::EXP</a></div><div class="ttdoc">Exponential. </div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1de12d43d932fc3b1e05ff15e85212bf"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1de12d43d932fc3b1e05ff15e85212bf">arm_compute::ValidRegion::ValidRegion</a></div><div class="ttdeci">ValidRegion(const Coordinates &amp;an_anchor, const TensorShape &amp;a_shape, size_t num_dimensions)</div><div class="ttdoc">Constructor for a valid region with specified number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00224">Types.h:224</a></div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml">arm_compute::Rectangle</a></div><div class="ttdoc">Rectangle type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00428">Types.h:428</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_ad53ff460a7430f45c22b27aad707e41f"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#ad53ff460a7430f45c22b27aad707e41f">arm_compute::IOFormatInfo::precision_type</a></div><div class="ttdeci">PrecisionType precision_type</div><div class="ttdoc">Floating point precision type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02687">Types.h:2687</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a07bdca05df9cd678454196e05d2d190f"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bdca05df9cd678454196e05d2d190f">arm_compute::Pooling3dLayerInfo::Pooling3dLayerInfo</a></div><div class="ttdeci">Pooling3dLayerInfo(PoolingType pool_type)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01377">Types.h:1377</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ElementWiseUnary::ABS</a></div><div class="ttdoc">Absolute value. </div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates3_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_coordinates3_d.xhtml">arm_compute::Coordinates3D</a></div><div class="ttdoc">Coordinate type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00444">Types.h:444</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f66ec167e002c7c0549ff6c8a8939ad"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ad">arm_compute::DeconvolutionMethod</a></div><div class="ttdeci">DeconvolutionMethod</div><div class="ttdoc">Available DeconvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00152">Types.h:152</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01110">helpers.h:1110</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a06eeee52deca91c5f2d378c409143626">arm_compute::WeightFormat::OHWIo8i8</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_ae658e258947a14e0d45975c531e03540"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#ae658e258947a14e0d45975c531e03540">arm_compute::ValidRegion::set</a></div><div class="ttdeci">ValidRegion &amp; set(size_t dimension, int start, size_t size)</div><div class="ttdoc">Accessor to set the value of anchor and shape for one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00251">Types.h:251</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml_a5a98f0686cb0eff3120ef84a003f8855"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml#a5a98f0686cb0eff3120ef84a003f8855">arm_compute::GEMMLHSMatrixInfo::GEMMLHSMatrixInfo</a></div><div class="ttdeci">GEMMLHSMatrixInfo(unsigned int m, unsigned int k, unsigned int v, bool trans, bool inter)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02308">Types.h:2308</a></div></div>
<div class="ttc" id="_bfloat16_8h_xhtml"><div class="ttname"><a href="_bfloat16_8h.xhtml">Bfloat16.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00392">Types.h:392</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdoc">Alpha channel. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a856d68c521c4c85363f54d95a33b7532">arm_compute::BilinearInterpolation::BILINEAR_OLD_NEW</a></div><div class="ttdoc">Old-new method. </div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_ac2a327bd7d58d9fa1c49c302fefbbcba"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">arm_compute::GenerateProposalsInfo::im_height</a></div><div class="ttdeci">float im_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01466">Types.h:1466</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a25fad7bae3b2e71a2a00af3630cba541">arm_compute::WeightFormat::OHWI</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58af557448a61ad2927194f63442e131dfa">arm_compute::Format::UYVY422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of U0, Y0, V0, Y1 byte. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa9027481bc29bbb314c9f96132ce6e0a">arm_compute::WeightFormat::OHWIo64</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_aa7d375782a8b80e3d4efee296a059855"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#aa7d375782a8b80e3d4efee296a059855">arm_compute::GenerateProposalsInfo::min_size</a></div><div class="ttdeci">float min_size() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01496">Types.h:1496</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8ae"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">arm_compute::ArithmeticOperation</a></div><div class="ttdeci">ArithmeticOperation</div><div class="ttdoc">Available element-wise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00491">Types.h:491</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a2411dd5edb9ccb581d303f3396e9c14c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a2411dd5edb9ccb581d303f3396e9c14c">arm_compute::DetectionOutputLayerInfo::num_classes</a></div><div class="ttdeci">int num_classes() const</div><div class="ttdoc">Get num classes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01013">Types.h:1013</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a4852ed701888ba87cb52b0d2dfc7c4ce"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a4852ed701888ba87cb52b0d2dfc7c4ce">arm_compute::GEMMReshapeInfo::mult_interleave4x4_height</a></div><div class="ttdeci">int mult_interleave4x4_height() const</div><div class="ttdoc">Multiplication factor for the height of the 4x4 interleaved block. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02223">Types.h:2223</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da55e8f99cd4149c397fc50a5d1c86bd06">arm_compute::ConvolutionMethod::INDIRECT</a></div><div class="ttdoc">Indirect convolution. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad90c2dcb1189e2d9c2fe83780a5a5f10">arm_compute::WeightFormat::OHWIo32</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::ArithmeticOperation::POWER</a></div><div class="ttdoc">x ^ y </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0b192a6bfeb3ced2dadfb8a1546e685f">arm_compute::WeightFormat::OHWIo64i8</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml">arm_compute::GenerateProposalsInfo</a></div><div class="ttdoc">Generate Proposals Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01443">Types.h:1443</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">arm_compute::Channel::C1</a></div><div class="ttdoc">Second channel (used by formats with unknown channel types). </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0255421478a6f5ab8a2596d966411a5b"><div class="ttname"><a href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5b">arm_compute::DepthwiseConvolutionFunction</a></div><div class="ttdeci">DepthwiseConvolutionFunction</div><div class="ttdoc">Available DepthwiseConvolutionFunction. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00145">Types.h:145</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_afb71e43799c794c059aa2d6244bd3140"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#afb71e43799c794c059aa2d6244bd3140">arm_compute::NormalizationLayerInfo::kappa</a></div><div class="ttdeci">float kappa() const</div><div class="ttdoc">Get the kappa value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01887">Types.h:1887</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdoc">Quantize using a fixed point multiplication. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">ConvolutionLayer.cpp:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a15aa71f614ff585d24cbb101bfa5232e"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a15aa71f614ff585d24cbb101bfa5232e">arm_compute::GEMMInfo::set_fixed_format</a></div><div class="ttdeci">void set_fixed_format(bool fixed_format)</div><div class="ttdoc">Set fixed-format flag. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02580">Types.h:2580</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad7f1a17c9a0347508381eca5ddd185ee">arm_compute::WeightFormat::OHWIo16i2_bf16</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates3_d_xhtml_aae8a40a17c0be29c1f06ca6b4f9e2235"><div class="ttname"><a href="structarm__compute_1_1_coordinates3_d.xhtml#aae8a40a17c0be29c1f06ca6b4f9e2235">arm_compute::Coordinates3D::x</a></div><div class="ttdeci">uint32_t x</div><div class="ttdoc">X coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00446">Types.h:446</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a7bc581f245390f063f02c3fcbb422320"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a7bc581f245390f063f02c3fcbb422320">arm_compute::DetectionOutputLayerInfo::share_location</a></div><div class="ttdeci">bool share_location() const</div><div class="ttdoc">Get share location. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01018">Types.h:1018</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a5d68f71fde6fb8401332cbe3973368a2"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">arm_compute::BoxNMSLimitInfo::im_width</a></div><div class="ttdeci">float im_width() const</div><div class="ttdoc">Get image width (NMS may suppress boxes whose center sits beyond the image width) ...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00646">Types.h:646</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a8fb35e774b0145f41acab2dac458edb2"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a8fb35e774b0145f41acab2dac458edb2">arm_compute::FullyConnectedLayerInfo::set_weights_trained_layout</a></div><div class="ttdeci">FullyConnectedLayerInfo &amp; set_weights_trained_layout(DataLayout layout)</div><div class="ttdoc">Sets the weights trained data layout. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01830">Types.h:1830</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ae90105aa70d36e539722ec84f94554cf"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae90105aa70d36e539722ec84f94554cf">arm_compute::DetectionPostProcessLayerInfo::DetectionPostProcessLayerInfo</a></div><div class="ttdeci">DetectionPostProcessLayerInfo(unsigned int max_detections, unsigned int max_classes_per_detection, float nms_score_threshold, float iou_threshold, unsigned int num_classes, std::array&lt; float, 4 &gt; scales_values, bool use_regular_nms=false, unsigned int detection_per_class=100, bool dequantize_scores=true)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01111">Types.h:1111</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a3dadbc544718b54f1737d4f24c078ad4"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a3dadbc544718b54f1737d4f24c078ad4">arm_compute::DetectionPostProcessLayerInfo::scale_value_x</a></div><div class="ttdeci">float scale_value_x() const</div><div class="ttdoc">Get x scale value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01166">Types.h:1166</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a535a6f56c148f286729fad7749a58e9b"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a535a6f56c148f286729fad7749a58e9b">arm_compute::BoxNMSLimitInfo::score_thresh</a></div><div class="ttdeci">float score_thresh() const</div><div class="ttdoc">Get the score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00601">Types.h:601</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a711b72c2817604dfbb9d20d142882bab"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">arm_compute::PadStrideInfo::round</a></div><div class="ttdeci">DimensionRoundingType round() const</div><div class="ttdoc">Get the rounding type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00766">Types.h:766</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0cb9573cb46f8ad7d50add08ec2a8efb">arm_compute::WeightFormat::OHWIo64i4_bf16</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_aa7396e4f53e9cf7a7da5d90e92c74447"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#aa7396e4f53e9cf7a7da5d90e92c74447">arm_compute::StridedSliceLayerInfo::end_mask</a></div><div class="ttdeci">int32_t end_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01949">Types.h:1949</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ad8fc03416b05b11b3b57e6cb17deea6f"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad8fc03416b05b11b3b57e6cb17deea6f">arm_compute::GEMMInfo::set_activation_info</a></div><div class="ttdeci">void set_activation_info(const ActivationLayerInfo &amp;activation_info)</div><div class="ttdoc">Set activation layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02547">Types.h:2547</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::ArithmeticOperation::DIV</a></div><div class="ttdoc">(x / y) </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830a1150a8d7752b01d30d91fe18fe9d8a54">arm_compute::DetectionOutputLayerCodeType::CENTER_SIZE</a></div><div class="ttdoc">Use box centers and size. </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ac6663acffe7ad0fa26750779bec17d82"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac6663acffe7ad0fa26750779bec17d82">arm_compute::GEMMInfo::pretranspose_A</a></div><div class="ttdeci">bool pretranspose_A() const</div><div class="ttdoc">Flag which specifies whether A should be pre-transposed if supported. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02507">Types.h:2507</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a2c0001bed10395d8b7e4510bb02c6620"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a2c0001bed10395d8b7e4510bb02c6620">arm_compute::WeightsInfo::WeightsInfo</a></div><div class="ttdeci">WeightsInfo(bool are_reshaped, unsigned int kernel_width, unsigned int kernel_height, unsigned int num_kernels, bool retain_internal_weights=false, arm_compute::WeightFormat weight_format=arm_compute::WeightFormat::UNSPECIFIED)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02092">Types.h:2092</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a48b3226275a4406903647fb8b8f49cc8">arm_compute::WeightFormat::OHWIo8</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_aabcaf278d82498bd5ba1e8d2ce1196cc"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aabcaf278d82498bd5ba1e8d2ce1196cc">arm_compute::ROIPoolingLayerInfo::ROIPoolingLayerInfo</a></div><div class="ttdeci">ROIPoolingLayerInfo(unsigned int pooled_width, unsigned int pooled_height, float spatial_scale, unsigned int sampling_ratio=0)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01410">Types.h:1410</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_ade87abafbd6b200b22de988f32b66dea"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ade87abafbd6b200b22de988f32b66dea">arm_compute::BoundingBoxTransformInfo::scale</a></div><div class="ttdeci">float scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01615">Types.h:1615</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f4aa560276aa1c941116b53d764c827"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f4aa560276aa1c941116b53d764c827">arm_compute::qasymm8_signed_logistic</a></div><div class="ttdeci">qasymm8_signed_t qasymm8_signed_logistic(qasymm8_signed_t in, const UniformQuantizationInfo &amp;qi_in, const UniformQuantizationInfo &amp;qi_out)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00443">QuantizationInfo.h:443</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_a4b9bd2a8b6377b91b9e2bb16976b3ba5"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a4b9bd2a8b6377b91b9e2bb16976b3ba5">arm_compute::Padding3D::Padding3D</a></div><div class="ttdeci">Padding3D() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00804">Types.h:804</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">arm_compute::DimensionRoundingType::CEIL</a></div><div class="ttdoc">Ceil rounding. </div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00268">Types.h:268</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml_af8cfb6ab1e028484d875995bf6c224e3"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml#af8cfb6ab1e028484d875995bf6c224e3">arm_compute::WinogradInfo::WinogradInfo</a></div><div class="ttdeci">WinogradInfo(Size2D output_tile_sz, Size2D kernel_sz, Size2D input_dims, PadStrideInfo conv_info, DataLayout data_layout)</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02629">Types.h:2629</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a9f8e7c7833f47804091414a46bef67d6"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a9f8e7c7833f47804091414a46bef67d6">arm_compute::NormalizationLayerInfo::is_in_map</a></div><div class="ttdeci">bool is_in_map() const</div><div class="ttdoc">Check if normalization is not cross map. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01902">Types.h:1902</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_af5a8385102f8f8dd6c5957eac08b04c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">arm_compute::ActivationLayerInfo::enabled</a></div><div class="ttdeci">bool enabled() const</div><div class="ttdoc">Check if initialised. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01696">Types.h:1696</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml_ab04889362609fea21e42bc1b2432f340"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml#ab04889362609fea21e42bc1b2432f340">arm_compute::GEMMRHSMatrixInfo::GEMMRHSMatrixInfo</a></div><div class="ttdeci">GEMMRHSMatrixInfo(unsigned int n, unsigned int k, unsigned int h, bool trans, bool inter, bool export_to_cl_img)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02323">Types.h:2323</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">arm_compute::ReductionOperation</a></div><div class="ttdeci">ReductionOperation</div><div class="ttdoc">Available reduction operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00478">Types.h:478</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6504035918188c363f421a6677b185fd"><div class="ttname"><a href="namespacearm__compute.xhtml#a6504035918188c363f421a6677b185fd">arm_compute::interleave_by</a></div><div class="ttdeci">int interleave_by(const WeightFormat wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02057">Types.h:2057</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00284">Types.h:284</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a00870168b3c59d0a29a7a66f935c1880"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a00870168b3c59d0a29a7a66f935c1880">arm_compute::ComputeAnchorsInfo::values_per_roi</a></div><div class="ttdeci">size_t values_per_roi() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01561">Types.h:1561</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_af56abff12f887fddfa02e0bc18a318a1"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af56abff12f887fddfa02e0bc18a318a1">arm_compute::ActivationLayerInfo::ActivationLayerInfo</a></div><div class="ttdeci">ActivationLayerInfo(ActivationFunction f, float a=0.0f, float b=0.0f)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01676">Types.h:1676</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a608a923caea677f5ba10a23a5dd1fee9">arm_compute::WeightFormat::OHWIo16</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">arm_compute::GEMMLowpOutputStageType::NONE</a></div><div class="ttdoc">No quantization. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae6550ea34c33d2e943476386d6ba8bed"><div class="ttname"><a href="namespacearm__compute.xhtml#ae6550ea34c33d2e943476386d6ba8bed">arm_compute::LabelBBox</a></div><div class="ttdeci">std::map&lt; int, std::vector&lt; BBox &gt; &gt; LabelBBox</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00952">Types.h:952</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a23e83519067d74d4f1855d38741151eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">arm_compute::DetectionPostProcessLayerInfo::max_detections</a></div><div class="ttdeci">unsigned int max_detections() const</div><div class="ttdoc">Get max detections. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01125">Types.h:1125</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718a0fceff26ae86a047835cafbb6cadb1b9">arm_compute::NMSType::GAUSSIAN</a></div><div class="ttdoc">Gaussian NMS. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a></div><div class="ttdoc">Cr/V/Value channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_aff8f31ab7ca98957eb196d34a3da3d68"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#aff8f31ab7ca98957eb196d34a3da3d68">arm_compute::GenerateProposalsInfo::nms_thres</a></div><div class="ttdeci">float nms_thres() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01491">Types.h:1491</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da48a8d451a651128acd0863f6bd2d4a84">arm_compute::ConvolutionMethod::GEMM_CONV2D</a></div><div class="ttdoc">Direct 2D GEMM convolution. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00124">Types.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba2ce6e134b828b72fad160fa17c8d1b64">arm_compute::ReductionOperation::SUM_SQUARE</a></div><div class="ttdoc">Sum of squares. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdoc">Blue channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">arm_compute::BoxNMSLimitInfo</a></div><div class="ttdoc">BoxWithNonMaximaSuppressionLimit Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00575">Types.h:575</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a137799efe970715f1969e800f92387c0"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a137799efe970715f1969e800f92387c0">arm_compute::PoolingLayerInfo::PoolingLayerInfo</a></div><div class="ttdeci">PoolingLayerInfo(PoolingType pool_type, DataLayout data_layout)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01276">Types.h:1276</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml">arm_compute::WinogradInfo</a></div><div class="ttdoc">Winograd information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02619">Types.h:2619</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a7c3edc4b354dda6c7285541f4f0e5c43"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a7c3edc4b354dda6c7285541f4f0e5c43">arm_compute::NormalizationLayerInfo::norm_size</a></div><div class="ttdeci">uint32_t norm_size() const</div><div class="ttdoc">Get the normalization size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01872">Types.h:1872</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_abf43f970446f0b82889df52463b9c2b8"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#abf43f970446f0b82889df52463b9c2b8">arm_compute::NormalizationLayerInfo::type</a></div><div class="ttdeci">NormType type() const</div><div class="ttdoc">Get the normalization type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01867">Types.h:1867</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a081936aca13d31ebfbeaa95c7cb16cb7"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a081936aca13d31ebfbeaa95c7cb16cb7">arm_compute::GEMMReshapeInfo::mult_transpose1xW_width</a></div><div class="ttdeci">int mult_transpose1xW_width() const</div><div class="ttdoc">Multiplication factor for the width of the 1xW transposed block. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02215">Types.h:2215</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_aec65e090c2276e8c8f8dffb6e3edd178"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#aec65e090c2276e8c8f8dffb6e3edd178">arm_compute::ActivationLayerInfo::a</a></div><div class="ttdeci">float a() const</div><div class="ttdoc">Get the alpha value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01686">Types.h:1686</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml">arm_compute::GEMMReshapeInfo</a></div><div class="ttdoc">GEMM reshape information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02161">Types.h:2161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a15d08af98fbce252909bed2c458ab3ee">arm_compute::WeightFormat::OHWIo4i4_bf16</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a6a8ad2364ce45d0cb7c6938544711f7c"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6a8ad2364ce45d0cb7c6938544711f7c">arm_compute::PriorBoxLayerInfo::aspect_ratios</a></div><div class="ttdeci">std::vector&lt; float &gt; aspect_ratios() const</div><div class="ttdoc">Get aspect ratios. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00932">Types.h:932</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ArithmeticOperation::ADD</a></div><div class="ttdoc">(x + y) </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ab522b11b1700985df0dae26ec03cb249"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab522b11b1700985df0dae26ec03cb249">arm_compute::GEMMInfo::set_post_ops</a></div><div class="ttdeci">void set_post_ops(const experimental::PostOpList&lt; ITensorInfo *&gt; &amp;post_ops)</div><div class="ttdoc">Set post ops. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02563">Types.h:2563</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size3_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml">arm_compute::Size3D</a></div><div class="ttdoc">Class for specifying the size of a 3D shape or object. </div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00032">Size3D.h:32</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a9752ea0a44b131caa9384231944a2b8d"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a9752ea0a44b131caa9384231944a2b8d">arm_compute::PriorBoxLayerInfo::PriorBoxLayerInfo</a></div><div class="ttdeci">PriorBoxLayerInfo(const std::vector&lt; float &gt; &amp;min_sizes, const std::vector&lt; float &gt; &amp;variances, float offset, bool flip=true, bool clip=false, const std::vector&lt; float &gt; &amp;max_sizes={}, const std::vector&lt; float &gt; &amp;aspect_ratios={}, const Coordinates2D &amp;img_size=Coordinates2D{ 0, 0 }, const std::array&lt; float, 2 &gt; &amp;steps={ { 0.f, 0.f } })</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00855">Types.h:855</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a0c4914ffae86590799e04ac0bf6adf0e">arm_compute::WeightFormat::OHWIo8i4_bf16</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml_a4970577135598818a35078d95bbbd401"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml#a4970577135598818a35078d95bbbd401">arm_compute::FullyConnectedLayerInfo::set_transpose_weights</a></div><div class="ttdeci">FullyConnectedLayerInfo &amp; set_transpose_weights(bool should_transpose_weights)</div><div class="ttdoc">Sets the transpose weights flag. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01841">Types.h:1841</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a11d8f855e323a8396fe6944edcef4238"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a11d8f855e323a8396fe6944edcef4238">arm_compute::GEMMInfo::gemmlowp_output_stage</a></div><div class="ttdeci">GEMMLowpOutputStageInfo gemmlowp_output_stage() const</div><div class="ttdoc">GEMMLowp output stage. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02459">Types.h:2459</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a54a5271cc6a1b58827a9b3f58ec5ba56"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a54a5271cc6a1b58827a9b3f58ec5ba56">arm_compute::WeightsInfo::are_reshaped</a></div><div class="ttdeci">bool are_reshaped() const</div><div class="ttdoc">Flag which specifies if the weights tensor has been reshaped. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02101">Types.h:2101</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aefd69da4bc3990fe980992a79c332164">arm_compute::WeightFormat::OHWIo32i4</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a5a28c96b4c6a639b84a6f74a6231f49d"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a5a28c96b4c6a639b84a6f74a6231f49d">arm_compute::Pooling3dLayerInfo::Pooling3dLayerInfo</a></div><div class="ttdeci">Pooling3dLayerInfo(PoolingType pool_type, Size3D pool_size, Size3D stride=Size3D(1U, 1U, 1U), Padding3D padding=Padding3D(), bool exclude_padding=false, bool fp_mixed_precision=false, DimensionRoundingType round_type=DimensionRoundingType::FLOOR)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01353">Types.h:1353</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">arm_compute::DimensionRoundingType</a></div><div class="ttdeci">DimensionRoundingType</div><div class="ttdoc">Dimension rounding type when down-scaling on CNNs. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00552">Types.h:552</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01849">Types.h:1849</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">arm_compute::Channel::C0</a></div><div class="ttdoc">Unknown channel format. </div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_ac2c7670a6bc4ebe6a07bf9b8f7034ecc"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#ac2c7670a6bc4ebe6a07bf9b8f7034ecc">arm_compute::Padding3D::Padding3D</a></div><div class="ttdeci">Padding3D(size_t pad_x, size_t pad_y, size_t pad_z)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00808">Types.h:808</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d"><div class="ttname"><a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caaf7fb587bad912d390b57a5d6e7ccc55d">arm_compute::FuseBatchNormalizationType::CONVOLUTION</a></div><div class="ttdoc">For Convolution weights. </div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a9a76aeb3d02431c5dc06ea031c2e49a6"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6">arm_compute::WeightsInfo::set_weight_format</a></div><div class="ttdeci">void set_weight_format(arm_compute::WeightFormat weight_format)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02129">Types.h:2129</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_a1fba9343eade93326cb985cfcb6de487"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#a1fba9343eade93326cb985cfcb6de487">arm_compute::IOFormatInfo::precision</a></div><div class="ttdeci">unsigned int precision</div><div class="ttdoc">Floating point precision. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02689">Types.h:2689</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a727a7ffe5a01a9d26fb910796e84e163"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a727a7ffe5a01a9d26fb910796e84e163">arm_compute::NormalizationLayerInfo::is_cross_map</a></div><div class="ttdeci">bool is_cross_map() const</div><div class="ttdoc">Check if normalization is cross map. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01897">Types.h:1897</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a5249ed9224810a95f8fa1366bc77c523"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a5249ed9224810a95f8fa1366bc77c523">arm_compute::GEMMInfo::GEMMInfo</a></div><div class="ttdeci">GEMMInfo(bool is_a_reshaped, bool is_b_reshaped, bool reshape_b_only_on_first_run, int depth_output_gemm3d=0, bool reinterpret_input_as_3d=false, bool retain_internal_weights=false, GEMMLowpOutputStageInfo gemmlowp_output_stage=GEMMLowpOutputStageInfo(), bool fp_mixed_precision=false, bool fast_math=false, bool broadcast_bias=false, const ActivationLayerInfo &amp;activation_info=ActivationLayerInfo(), const experimental::PostOpList&lt; ITensorInfo *&gt; &amp;post_ops=experimental::PostOpList&lt; ITensorInfo *&gt;(), bool fixed_format=false, arm_compute::WeightFormat weight_format=arm_compute::WeightFormat::UNSPECIFIED) noexcept</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02383">Types.h:2383</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml">arm_compute::FullyConnectedLayerInfo</a></div><div class="ttdoc">Fully connected layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01811">Types.h:1811</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a501521734ce4f9d81d91d0c7e35dcfe9"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a501521734ce4f9d81d91d0c7e35dcfe9">arm_compute::GEMMInfo::fp_mixed_precision</a></div><div class="ttdeci">bool fp_mixed_precision() const</div><div class="ttdoc">Flag which specifies if a wider accumulator should be used. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02475">Types.h:2475</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d8a00f1d80a53ce8f75fa929c873202"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202">arm_compute::BilinearInterpolation</a></div><div class="ttdeci">BilinearInterpolation</div><div class="ttdoc">Bilinear Interpolation method used by LKTracker. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00421">Types.h:421</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml">arm_compute::GEMMLHSMatrixInfo</a></div><div class="ttdoc">GEMM LHS (Left Hand Side) matrix information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02305">Types.h:2305</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a202f5d8c2c70d31048154d8b8b28e755">arm_compute::Format::NV12</a></div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba39102811589b9a0d7a6aa8721663b4d1">arm_compute::ReductionOperation::ARG_IDX_MIN</a></div><div class="ttdoc">Index of the min value. </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a21d59f266df349880afd6143469c8f29"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a21d59f266df349880afd6143469c8f29">arm_compute::PoolingLayerInfo::PoolingLayerInfo</a></div><div class="ttdeci">PoolingLayerInfo()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01205">Types.h:1205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a7c7dca610a813588a26253efb8261064"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a7c7dca610a813588a26253efb8261064">arm_compute::GEMMReshapeInfo::GEMMReshapeInfo</a></div><div class="ttdeci">GEMMReshapeInfo(int m, int n, int k, int mult_transpose1xW_width=1, int mult_interleave4x4_height=1, int depth_output_gemm3d=0, bool reinterpret_input_as_3d=false, bool broadcast_bias=false)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02182">Types.h:2182</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00044">QuantizationInfo.h:44</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f66ec167e002c7c0549ff6c8a8939ada8a0848a018d542f96ceb3c61ebeaf2c6">arm_compute::DeconvolutionMethod::UPSCALE_CONV2D</a></div><div class="ttdoc">Deconvolution with Upscaling. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::DataType::QASYMM16</a></div><div class="ttdoc">quantized, asymmetric fixed-point 16-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00394">Types.h:394</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a></div><div class="ttdeci">WeightFormat</div><div class="ttdoc">Memory layouts for the weights tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02017">Types.h:2017</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::ComparisonOperation::Less</a></div><div class="ttdoc">Less comparison (  ) </div></div>
<div class="ttc" id="_size3_d_8h_xhtml"><div class="ttname"><a href="_size3_d_8h.xhtml">Size3D.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a206472366fc0981d36701fe46679fd8f"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a206472366fc0981d36701fe46679fd8f">arm_compute::DetectionOutputLayerInfo::eta</a></div><div class="ttdeci">float eta() const</div><div class="ttdoc">Get eta. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01043">Types.h:1043</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_abbd888f118c2209bf7578eb4f8942a07"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">arm_compute::GEMMInfo::depth_output_gemm3d</a></div><div class="ttdeci">int depth_output_gemm3d() const</div><div class="ttdoc">Depth of the output when GEMM output is reinterpreted as 3D tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02435">Types.h:2435</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_a3e3b8af91d2afbfeed14560f2070fd50"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#a3e3b8af91d2afbfeed14560f2070fd50">arm_compute::IOFormatInfo::print_region</a></div><div class="ttdeci">PrintRegion print_region</div><div class="ttdoc">Area to be printed by Tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02685">Types.h:2685</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a5a00bf3cb11be124771cf7e3958e218e"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a5a00bf3cb11be124771cf7e3958e218e">arm_compute::ROIPoolingLayerInfo::pooled_width</a></div><div class="ttdeci">unsigned int pooled_width() const</div><div class="ttdoc">Get the pooled width of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01415">Types.h:1415</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3fea0ce4e6eeee7bf3a511c31b51d44f"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">arm_compute::PadStrideInfo::pad_top</a></div><div class="ttdeci">unsigned int pad_top() const</div><div class="ttdoc">Get the top padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00755">Types.h:755</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a096590f2456b9e9bcb8db98175720b60"><div class="ttname"><a href="namespacearm__compute.xhtml#a096590f2456b9e9bcb8db98175720b60">arm_compute::operator==</a></div><div class="ttdeci">bool operator==(const Dimensions&lt; T &gt; &amp;lhs, const Dimensions&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Check that given dimensions are equal. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00276">Dimensions.h:276</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position...</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea10df3d67626099df882920ba6552f16d">arm_compute::BitwiseOperation::NOT</a></div><div class="ttdoc">Bitwise NOT operation. </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a6eaedc96f1e42852da9afbb0c33df4be"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a6eaedc96f1e42852da9afbb0c33df4be">arm_compute::DetectionPostProcessLayerInfo::DetectionPostProcessLayerInfo</a></div><div class="ttdeci">DetectionPostProcessLayerInfo()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01087">Types.h:1087</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ac9e7f8fc8a688fd119d3fb2892cce6b9"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9">arm_compute::GEMMInfo::retain_internal_weights</a></div><div class="ttdeci">bool retain_internal_weights() const</div><div class="ttdoc">Flag which specifies if the weights tensor has to be retained from previous run. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02451">Types.h:2451</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a79c4b728af7b8da698fe0af807084fc4">arm_compute::WeightFormat::OHWIo32i2</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830">arm_compute::DetectionOutputLayerCodeType</a></div><div class="ttdeci">DetectionOutputLayerCodeType</div><div class="ttdoc">Available Detection Output code types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00955">Types.h:955</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a></div><div class="ttdoc">Red channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01641">Types.h:1641</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00260">gemm_interleaved.hpp:260</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a2a4c9b03dd6ecd782cdc2174edcaf58d">arm_compute::WeightFormat::OHWIo8i2_bf16</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a70fd561a558e9f433088b64587a9cb62"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a70fd561a558e9f433088b64587a9cb62">arm_compute::ComputeAnchorsInfo::spatial_scale</a></div><div class="ttdeci">float spatial_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01555">Types.h:1555</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a491fddb771387738421f6d8e2b05f17f"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a491fddb771387738421f6d8e2b05f17f">arm_compute::BoundingBoxTransformInfo::apply_scale</a></div><div class="ttdeci">bool apply_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01620">Types.h:1620</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a161b3d9016563aba9ac190fc02ada9bb">arm_compute::PaddingMode::SYMMETRIC</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a8e9f6aa1af7e0abbc7e64521e6ffe1b4">arm_compute::Format::NV21</a></div><div class="ttdoc">A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling. </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ae1c2cc7a6c3db74d8be5f6e23aa84476"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">arm_compute::DetectionPostProcessLayerInfo::use_regular_nms</a></div><div class="ttdeci">bool use_regular_nms() const</div><div class="ttdoc">Get if use regular nms. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01155">Types.h:1155</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_acf35ae15a9350f47bcba0d0cedeb3e7c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#acf35ae15a9350f47bcba0d0cedeb3e7c">arm_compute::DetectionOutputLayerInfo::top_k</a></div><div class="ttdeci">int top_k() const</div><div class="ttdoc">Get top K. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01058">Types.h:1058</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a1938a8fb37c002870984041e630f8b07"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a1938a8fb37c002870984041e630f8b07">arm_compute::ComputeAnchorsInfo::feat_height</a></div><div class="ttdeci">float feat_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01543">Types.h:1543</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a44089024084b73c5b83e509518df48e0"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a44089024084b73c5b83e509518df48e0">arm_compute::BorderSize::BorderSize</a></div><div class="ttdeci">constexpr BorderSize(unsigned int top_bottom, unsigned int left_right)</div><div class="ttdoc">Border with same size for top/bottom and left/right. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00305">Types.h:305</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a8bf46ce65f0f9cc0210774dfc60b4e2f"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a8bf46ce65f0f9cc0210774dfc60b4e2f">arm_compute::WeightsInfo::WeightsInfo</a></div><div class="ttdeci">WeightsInfo()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02079">Types.h:2079</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a0c1430ec3d495d93f98731a5f1c89f08"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a0c1430ec3d495d93f98731a5f1c89f08">arm_compute::BoxNMSLimitInfo::suppress_size</a></div><div class="ttdeci">bool suppress_size() const</div><div class="ttdoc">Get if NMS will suppress boxes based on their size/position. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00636">Types.h:636</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a77964edb8d16bb8ec14ddd8985e03cb0"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a77964edb8d16bb8ec14ddd8985e03cb0">arm_compute::GEMMInfo::is_b_reshaped</a></div><div class="ttdeci">bool is_b_reshaped() const</div><div class="ttdoc">Flag which specifies if the matrix B has been reshaped. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02417">Types.h:2417</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a8552c72afa19c3cb09f61e2ac730f504"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">arm_compute::Pooling3dLayerInfo::stride</a></div><div class="ttdeci">Size3D stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01391">Types.h:1391</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates2_d_xhtml_af6d3062751bd565decb1a2cd3b63bdb2"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml#af6d3062751bd565decb1a2cd3b63bdb2">arm_compute::Coordinates2D::x</a></div><div class="ttdeci">int32_t x</div><div class="ttdoc">X coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00439">Types.h:439</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01645">Types.h:1645</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="_size2_d_8h_xhtml"><div class="ttname"><a href="_size2_d_8h.xhtml">Size2D.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">arm_compute::SamplingPolicy::CENTER</a></div><div class="ttdoc">Samples are taken at pixel center. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::ComparisonOperation::GreaterEqual</a></div><div class="ttdoc">Greater equal comparison (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a634bf1faedaec956983af4d41940239e"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a634bf1faedaec956983af4d41940239e">arm_compute::DetectionPostProcessLayerInfo::iou_threshold</a></div><div class="ttdeci">float iou_threshold() const</div><div class="ttdoc">Get intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01145">Types.h:1145</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_aa1d81460ec22dc75efcb8f4eada940f6"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa1d81460ec22dc75efcb8f4eada940f6">arm_compute::BoxNMSLimitInfo::BoxNMSLimitInfo</a></div><div class="ttdeci">BoxNMSLimitInfo(float score_thresh=0.05f, float nms=0.3f, int detections=100, bool soft_nms_enabled=false, NMSType soft_nms_method=NMSType::LINEAR, float soft_nms_sigma=0.5f, float soft_nms_min_score_thres=0.001f, bool suppress_size=false, float min_size=1.0f, float im_width=1.0f, float im_height=1.0f)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00592">Types.h:592</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates3_d_xhtml_ad81d8d7d582cb5752dbeab85e233603a"><div class="ttname"><a href="structarm__compute_1_1_coordinates3_d.xhtml#ad81d8d7d582cb5752dbeab85e233603a">arm_compute::Coordinates3D::z</a></div><div class="ttdeci">uint32_t z</div><div class="ttdoc">Z coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00448">Types.h:448</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a00edeeb4822422b6b7095d5aeb68fc39"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a00edeeb4822422b6b7095d5aeb68fc39">arm_compute::GenerateProposalsInfo::GenerateProposalsInfo</a></div><div class="ttdeci">GenerateProposalsInfo(float im_width, float im_height, float im_scale, float spatial_scale=1.0, int pre_nms_topN=6000, int post_nms_topN=300, float nms_thres=0.7, float min_size=16.0, size_t values_per_roi=4)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01458">Types.h:1458</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d8a00f1d80a53ce8f75fa929c873202a731cb35d2d520920db9ab20dfc5edc64">arm_compute::BilinearInterpolation::BILINEAR_SCHARR</a></div><div class="ttdoc">Scharr method. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">arm_compute::NMSType</a></div><div class="ttdeci">NMSType</div><div class="ttdoc">Available non maxima suppression types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00567">Types.h:567</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02075">Types.h:2075</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a81d3ead1af21f9c8cbaa0436c583ad8b">arm_compute::WeightFormat::OHWIo16i2</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_aba5c653899ad75de3548b6c60c08939c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#aba5c653899ad75de3548b6c60c08939c">arm_compute::DetectionOutputLayerInfo::DetectionOutputLayerInfo</a></div><div class="ttdeci">DetectionOutputLayerInfo()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00968">Types.h:968</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a31ff0f4153b53a0abfc96250b18b15f1"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">arm_compute::Pooling3dLayerInfo::fp_mixed_precision</a></div><div class="ttdeci">bool fp_mixed_precision</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01395">Types.h:1395</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a317508a148d55ca7e093b9447c3366e7"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a317508a148d55ca7e093b9447c3366e7">arm_compute::PoolingLayerInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01289">Types.h:1289</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_aa5081eb6d3f7bf20f32573af8a60f1f9"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#aa5081eb6d3f7bf20f32573af8a60f1f9">arm_compute::DetectionOutputLayerInfo::variance_encoded_in_target</a></div><div class="ttdeci">bool variance_encoded_in_target() const</div><div class="ttdoc">Get if variance encoded in target. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01028">Types.h:1028</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::Format::BFLOAT16</a></div><div class="ttdoc">16-bit brain floating-point number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdoc">signed 64-bit number </div></div>
<div class="ttc" id="_half_8h_xhtml"><div class="ttname"><a href="_half_8h.xhtml">Half.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a841b7b7f4c7b50931fabb298cfb7bed3"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a841b7b7f4c7b50931fabb298cfb7bed3">arm_compute::GEMMReshapeInfo::n</a></div><div class="ttdeci">int n() const</div><div class="ttdoc">Number of matrix B columns. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02199">Types.h:2199</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_af33467c502c3e31eca0dbb6552f403e7"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#af33467c502c3e31eca0dbb6552f403e7">arm_compute::Pooling3dLayerInfo::Pooling3dLayerInfo</a></div><div class="ttdeci">Pooling3dLayerInfo() noexcept</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01300">Types.h:1300</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">3 channels, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079"><div class="ttname"><a href="namespacearm__compute.xhtml#a0255421478a6f5ab8a2596d966411a5ba90190a007b4cd58a842970e987761079">arm_compute::DepthwiseConvolutionFunction::OPTIMIZED</a></div><div class="ttdoc">Optimized Depthwise Convolution. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da4c5d06b02c97731aaa976179c62dcf76">arm_compute::ConvolutionMethod::DIRECT</a></div><div class="ttdoc">Direct convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a305c2145d26b998641402a9fec76f0bb"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a305c2145d26b998641402a9fec76f0bb">arm_compute::NormalizationLayerInfo::NormalizationLayerInfo</a></div><div class="ttdeci">NormalizationLayerInfo(NormType type, uint32_t norm_size=5, float alpha=0.0001f, float beta=0.5f, float kappa=1.f, bool is_scaled=true)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01862">Types.h:1862</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a7e1df6b05c99e52dc87aaa3b1aeab3e9"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a7e1df6b05c99e52dc87aaa3b1aeab3e9">arm_compute::GEMMInfo::set_pretranspose_B</a></div><div class="ttdeci">void set_pretranspose_B(bool flag)</div><div class="ttdoc">Set pre-transpose b flag. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02531">Types.h:2531</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afb7e3dd8a833840aaaf618bd43ead0ca"><div class="ttname"><a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">arm_compute::FuseBatchNormalizationType</a></div><div class="ttdeci">FuseBatchNormalizationType</div><div class="ttdoc">Available FuseBatchNormalizationType. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00160">Types.h:160</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_aa2b9b52a4827eeb41f97f92a3781eee8"><div class="ttname"><a href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a></div><div class="ttdeci">const OutputStage &amp; output_stage</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00107">working_space.hpp:107</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba6970bdc2201030b9c03fbdcf3973858a">arm_compute::ReductionOperation::SUM</a></div><div class="ttdoc">Sum. </div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates2_d_xhtml_af64066d134a77e01b3d6eb8da813627a"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml#af64066d134a77e01b3d6eb8da813627a">arm_compute::Coordinates2D::y</a></div><div class="ttdeci">int32_t y</div><div class="ttdoc">Y coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00440">Types.h:440</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div><div class="ttdoc">size_t </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a93e2246c8f5500552788602f344b32f3"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a93e2246c8f5500552788602f344b32f3">arm_compute::PoolingLayerInfo::PoolingLayerInfo</a></div><div class="ttdeci">PoolingLayerInfo(PoolingType pool_type, Size2D pool_size, DataLayout data_layout, PadStrideInfo pad_stride_info=PadStrideInfo(), bool exclude_padding=false, bool fp_mixed_precision=false)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01253">Types.h:1253</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a6b45b0e0f8dd18aae641aebaf5055e4d"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a6b45b0e0f8dd18aae641aebaf5055e4d">arm_compute::PriorBoxLayerInfo::steps</a></div><div class="ttdeci">std::array&lt; float, 2 &gt; steps() const</div><div class="ttdoc">Get the step coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00902">Types.h:902</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a90dc98d4ae6b7ab06d5e089378817672"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a90dc98d4ae6b7ab06d5e089378817672">arm_compute::BoxNMSLimitInfo::nms</a></div><div class="ttdeci">float nms() const</div><div class="ttdoc">Get the NMS. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00606">Types.h:606</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_aafa923d0a069ae069f7a9239f65452dd"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">arm_compute::Pooling3dLayerInfo::pool_size</a></div><div class="ttdeci">Size3D pool_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01390">Types.h:1390</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_af14fc4cf24dfb69a0f225a582ef01d54"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#af14fc4cf24dfb69a0f225a582ef01d54">arm_compute::DetectionOutputLayerInfo::nms_threshold</a></div><div class="ttdeci">float nms_threshold() const</div><div class="ttdoc">Get nms threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01038">Types.h:1038</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba654fed6e9b6c154d04bcaa439e32d0d5">arm_compute::ReductionOperation::ARG_IDX_MAX</a></div><div class="ttdoc">Index of the max value. </div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a4a5b4a276ace0cc81f724921643ceb85"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a5b4a276ace0cc81f724921643ceb85">arm_compute::BoundingBoxTransformInfo::img_width</a></div><div class="ttdeci">float img_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01610">Types.h:1610</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ElementWiseUnary::ROUND</a></div><div class="ttdoc">Round. </div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_aea0c7db32b968de3cf0633654e8c7cd7"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#aea0c7db32b968de3cf0633654e8c7cd7">arm_compute::ConvolutionInfo::ConvolutionInfo</a></div><div class="ttdeci">ConvolutionInfo(const PadStrideInfo &amp;pad_stride_info, unsigned int depth_multiplier, const ActivationLayerInfo &amp;act_info, const Size2D &amp;dilation)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02269">Types.h:2269</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">arm_compute::Channel::C2</a></div><div class="ttdoc">Third channel (used by formats with unknown channel types). </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da330c6551c4bc9acbc0a7363dc8f68680">arm_compute::ElementWiseUnary::LOGICAL_NOT</a></div><div class="ttdoc">Logical Not. </div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ab4f112d61c643fe54d616201a9414267"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ab4f112d61c643fe54d616201a9414267">arm_compute::PadStrideInfo::padding_is_symmetric</a></div><div class="ttdeci">bool padding_is_symmetric() const</div><div class="ttdoc">Check whether the padding is symmetric. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00727">Types.h:727</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a97a1f3636f40206d67ff65902f7ff3a3"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a97a1f3636f40206d67ff65902f7ff3a3">arm_compute::NormalizationLayerInfo::is_scaled</a></div><div class="ttdeci">bool is_scaled() const</div><div class="ttdoc">Get the is_scaled value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01892">Types.h:1892</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml">arm_compute::GEMMRHSMatrixInfo</a></div><div class="ttdoc">GEMM RHS (Right Hand Side) matrix information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02320">Types.h:2320</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">arm_compute::NormType::IN_MAP_1D</a></div><div class="ttdoc">Normalization applied within the same map in 1D region. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00461">Types.h:461</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_ab1a3e6cb2768124a6853f52bd0e10596"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#ab1a3e6cb2768124a6853f52bd0e10596">arm_compute::IOFormatInfo::row_delim</a></div><div class="ttdeci">std::string row_delim</div><div class="ttdoc">Row delimeter. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02693">Types.h:2693</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding2_d_xhtml_a4e5f55b5ca6d0185a7b23b447c696d08"><div class="ttname"><a href="structarm__compute_1_1_padding2_d.xhtml#a4e5f55b5ca6d0185a7b23b447c696d08">arm_compute::Padding2D::Padding2D</a></div><div class="ttdeci">Padding2D(size_t left, size_t right, size_t top, size_t bottom)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00791">Types.h:791</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91">arm_compute::PaddingMode</a></div><div class="ttdeci">PaddingMode</div><div class="ttdoc">Padding mode to use for PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00167">Types.h:167</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml">arm_compute::IOFormatInfo</a></div><div class="ttdoc">IO formatting information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02642">Types.h:2642</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_acfcc7a243b3338bedc78c7c645d972fd"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">arm_compute::Pooling3dLayerInfo::round_type</a></div><div class="ttdeci">DimensionRoundingType round_type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01396">Types.h:1396</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5acc872da961a924c6fdea2ae1d02be4dd">arm_compute::WeightFormat::OHWIo4</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_af5d260b8c4c285dbdc1b6f545f86b160"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#af5d260b8c4c285dbdc1b6f545f86b160">arm_compute::GenerateProposalsInfo::im_scale</a></div><div class="ttdeci">float im_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01476">Types.h:1476</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a00870168b3c59d0a29a7a66f935c1880"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a00870168b3c59d0a29a7a66f935c1880">arm_compute::GenerateProposalsInfo::values_per_roi</a></div><div class="ttdeci">size_t values_per_roi() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01506">Types.h:1506</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8933e0ff80cefd53572e08f64a55cae1">arm_compute::WeightFormat::OHWIo32i2_bf16</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a07bc341d9c0161c4dba89ae832aa216a"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a07bc341d9c0161c4dba89ae832aa216a">arm_compute::Pooling3dLayerInfo::Pooling3dLayerInfo</a></div><div class="ttdeci">Pooling3dLayerInfo(PoolingType pool_type, unsigned int pool_size, Size3D stride=Size3D(1U, 1U, 1U), Padding3D padding=Padding3D(), bool exclude_padding=false, bool fp_mixed_precision=false, DimensionRoundingType round_type=DimensionRoundingType::FLOOR)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01323">Types.h:1323</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a926b274a33003e76a1fbaff96a91c827">arm_compute::WeightFormat::OHWIo8i2</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a9f7e7793c31d02fd3ba59e0fcf3ef891"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">arm_compute::Pooling3dLayerInfo::exclude_padding</a></div><div class="ttdeci">bool exclude_padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01393">Types.h:1393</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a10608f5b5910df56c8dd68f687bc5c54"><div class="ttname"><a href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54">arm_compute::is_fixed_format</a></div><div class="ttdeci">bool is_fixed_format(const WeightFormat &amp;wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02065">Types.h:2065</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_aae139363fa58e04c3d391339e820a06f"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">arm_compute::ValidRegion::start</a></div><div class="ttdeci">int start(unsigned int d) const</div><div class="ttdoc">Return the start of the valid region for the given dimension d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00232">Types.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::ElementWiseUnary::LOG</a></div><div class="ttdoc">Natural Logarithm. </div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a632338b050964b8fa64327991f2cde5c"><div class="ttname"><a href="namespacearm__compute.xhtml#a632338b050964b8fa64327991f2cde5c">arm_compute::qasymm8_signed_hard_swish</a></div><div class="ttdeci">qasymm8_signed_t qasymm8_signed_hard_swish(qasymm8_signed_t in, const UniformQuantizationInfo &amp;qi_in, const UniformQuantizationInfo &amp;qi_out)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00412">QuantizationInfo.h:412</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml">arm_compute::Pooling3dLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01297">Types.h:1297</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a9db6ab0530ca15abab491a354bea90dc"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9db6ab0530ca15abab491a354bea90dc">arm_compute::DetectionPostProcessLayerInfo::scale_value_h</a></div><div class="ttdeci">float scale_value_h() const</div><div class="ttdoc">Get h scale value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01172">Types.h:1172</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a6e324c1bd1111876469ea247da156147"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const</div><div class="ttdoc">Get the stride. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00719">Types.h:719</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a0c255b6748d3a249c9c4d8f691994dba"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0c255b6748d3a249c9c4d8f691994dba">arm_compute::DetectionPostProcessLayerInfo::scale_value_w</a></div><div class="ttdeci">float scale_value_w() const</div><div class="ttdoc">Get w scale value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01178">Types.h:1178</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a16875a1122accc1277a22e0ddbb8e94d"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">arm_compute::Pooling3dLayerInfo::is_global_pooling</a></div><div class="ttdeci">bool is_global_pooling</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01394">Types.h:1394</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01202">Types.h:1202</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a0732a1286ff6a838da5c19e6d48c99cf"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a0732a1286ff6a838da5c19e6d48c99cf">arm_compute::DetectionPostProcessLayerInfo::nms_score_threshold</a></div><div class="ttdeci">float nms_score_threshold() const</div><div class="ttdoc">Get nms threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01140">Types.h:1140</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a8ce2eccce44a2d3bf9dce07cbf821cd4"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a8ce2eccce44a2d3bf9dce07cbf821cd4">arm_compute::BoxNMSLimitInfo::soft_nms_min_score_thres</a></div><div class="ttdeci">float soft_nms_min_score_thres() const</div><div class="ttdoc">Get soft nms min score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00631">Types.h:631</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16e"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16e">arm_compute::BitwiseOperation</a></div><div class="ttdeci">BitwiseOperation</div><div class="ttdoc">Available bitwise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00517">Types.h:517</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa2b075b5da72ec6bb14f90c202443eb0"><div class="ttname"><a href="namespacearm__compute.xhtml#aa2b075b5da72ec6bb14f90c202443eb0">arm_compute::BBox</a></div><div class="ttdeci">std::array&lt; float, 4 &gt; BBox</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00950">Types.h:950</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a90990c547da68db979b9c54874382e17"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a90990c547da68db979b9c54874382e17">arm_compute::WeightsInfo::kernel_height</a></div><div class="ttdeci">unsigned int kernel_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02138">Types.h:2138</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a9f94c4edaf37250de1a0403d0f929644"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a9f94c4edaf37250de1a0403d0f929644">arm_compute::DetectionPostProcessLayerInfo::dequantize_scores</a></div><div class="ttdeci">bool dequantize_scores() const</div><div class="ttdoc">Get dequantize_scores value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01184">Types.h:1184</a></div></div>
<div class="ttc" id="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">arm_compute::GEMMLowpOutputStageInfo</a></div><div class="ttdoc">GEMMLowp output stage info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02289">Types.h:2289</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml">arm_compute::ConvolutionInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02266">Types.h:2266</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a05cb475ce43d447dd39a783eb08b8146"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a05cb475ce43d447dd39a783eb08b8146">arm_compute::WeightsInfo::kernel_width</a></div><div class="ttdeci">unsigned int kernel_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02134">Types.h:2134</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a11cfa56ee0ddbbc30a2fd189d7475f4c">arm_compute::Format::YUV444</a></div><div class="ttdoc">A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7ba747385047b85ae751f83adb36435a3c1">arm_compute::SamplingPolicy::TOP_LEFT</a></div><div class="ttdoc">Samples are taken at pixel top left corner. </div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00827">Types.h:827</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a8420f76d876fd4e61e653dfb6b56b5f5"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a8420f76d876fd4e61e653dfb6b56b5f5">arm_compute::PriorBoxLayerInfo::offset</a></div><div class="ttdeci">float offset() const</div><div class="ttdoc">Get the offset. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00912">Types.h:912</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">arm_compute::Channel::C3</a></div><div class="ttdoc">Fourth channel (used by formats with unknown channel types). </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a08e970e04625d630f2b0b83b1143b3f9">arm_compute::WeightFormat::OHWIo4i4</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a025a49ad16e9d5d59d3919c25a17d1ae"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a025a49ad16e9d5d59d3919c25a17d1ae">arm_compute::DetectionOutputLayerInfo::code_type</a></div><div class="ttdeci">DetectionOutputLayerCodeType code_type() const</div><div class="ttdoc">Get detection output code type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01023">Types.h:1023</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3860caeeaa259d59ccf69c3aea23f549"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">arm_compute::PadStrideInfo::pad_right</a></div><div class="ttdeci">unsigned int pad_right() const</div><div class="ttdoc">Get the right padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00750">Types.h:750</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a01524f49fa1d982d4382e390bef91de7"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a01524f49fa1d982d4382e390bef91de7">arm_compute::NormalizationLayerInfo::beta</a></div><div class="ttdeci">float beta() const</div><div class="ttdoc">Get the beta value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01882">Types.h:1882</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a53f42078c68df9f29e9ad4c47ce24dc0">arm_compute::WeightFormat::OHWIo2i8</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_ab86946326c4e33cbfb38cef7312b4ae5"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#ab86946326c4e33cbfb38cef7312b4ae5">arm_compute::GEMMReshapeInfo::k</a></div><div class="ttdeci">int k() const</div><div class="ttdoc">Number of matrix A columns or matrix B rows. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02207">Types.h:2207</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af117513e1fddf0534bb90275f0a9db42"><div class="ttname"><a href="namespacearm__compute.xhtml#af117513e1fddf0534bb90275f0a9db42">arm_compute::block_by</a></div><div class="ttdeci">int block_by(const WeightFormat wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02061">Types.h:2061</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT</a></div><div class="ttdoc">Quantize using a floating point multiplication. </div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00671">Types.h:671</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58c"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">arm_compute::ComparisonOperation</a></div><div class="ttdeci">ComparisonOperation</div><div class="ttdoc">Supported comparison operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00175">Types.h:175</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a0b6688157393c43306aec60185ff067f"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a0b6688157393c43306aec60185ff067f">arm_compute::BoundingBoxTransformInfo::bbox_xform_clip</a></div><div class="ttdeci">float bbox_xform_clip() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01600">Types.h:1600</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a574d3a97bb043512658126e515c1b90e"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a574d3a97bb043512658126e515c1b90e">arm_compute::PoolingLayerInfo::PoolingLayerInfo</a></div><div class="ttdeci">PoolingLayerInfo(PoolingType pool_type, unsigned int pool_size, DataLayout data_layout, PadStrideInfo pad_stride_info=PadStrideInfo(), bool exclude_padding=false, bool fp_mixed_precision=false)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01226">Types.h:1226</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">arm_compute::GEMMLowpOutputStageType</a></div><div class="ttdeci">GEMMLowpOutputStageType</div><div class="ttdoc">GEMMLowp output stage type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02280">Types.h:2280</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a3fda69c38090070865d117fe94cf0c88"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a3fda69c38090070865d117fe94cf0c88">arm_compute::PriorBoxLayerInfo::img_size</a></div><div class="ttdeci">Coordinates2D img_size() const</div><div class="ttdoc">Get the image size coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00907">Types.h:907</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">arm_compute::Channel::Y</a></div><div class="ttdoc">Luma channel. </div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_a1d81fe110d5dcac79dd73a532015bb94"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#a1d81fe110d5dcac79dd73a532015bb94">arm_compute::IOFormatInfo::align_columns</a></div><div class="ttdeci">bool align_columns</div><div class="ttdoc">Align columns. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02695">Types.h:2695</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a70fd561a558e9f433088b64587a9cb62"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a70fd561a558e9f433088b64587a9cb62">arm_compute::GenerateProposalsInfo::spatial_scale</a></div><div class="ttdeci">float spatial_scale() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01501">Types.h:1501</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_ab039f58ba3db07baaba2cbdc65608dbb"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#ab039f58ba3db07baaba2cbdc65608dbb">arm_compute::WeightsInfo::num_kernels</a></div><div class="ttdeci">unsigned int num_kernels() const</div><div class="ttdoc">Return the number of convolution kernels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02109">Types.h:2109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a72940f70ecb21f935870ca4b61947ce9"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a72940f70ecb21f935870ca4b61947ce9">arm_compute::GEMMInfo::set_pretranspose_A</a></div><div class="ttdeci">void set_pretranspose_A(bool flag)</div><div class="ttdoc">Set pre-transpose A flag. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02515">Types.h:2515</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a00330b8913cac3b07029ac0c3350e806"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a00330b8913cac3b07029ac0c3350e806">arm_compute::GEMMInfo::reinterpret_input_as_3d</a></div><div class="ttdeci">bool reinterpret_input_as_3d() const</div><div class="ttdoc">Flag which specifies if the input tensor has to be reinterpreted as 3D. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02443">Types.h:2443</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml">arm_compute::BoundingBoxTransformInfo</a></div><div class="ttdoc">Bounding Box Transform information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01574">Types.h:1574</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00395">Types.h:395</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a7a8ad863b84b105b9275ffef67761bfd"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a7a8ad863b84b105b9275ffef67761bfd">arm_compute::BorderSize::BorderSize</a></div><div class="ttdeci">constexpr BorderSize(unsigned int size) noexcept</div><div class="ttdoc">Border with equal size around the 2D plane. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00296">Types.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ae0c4636f1099428785df0463f7151889"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae0c4636f1099428785df0463f7151889">arm_compute::GEMMInfo::GEMMInfo</a></div><div class="ttdeci">GEMMInfo() noexcept</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02345">Types.h:2345</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bac8074bb318fb85693233e64acc64c1ed">arm_compute::ReductionOperation::PROD</a></div><div class="ttdoc">Product. </div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a02b66d0a0d561b44c99b1db8b740d1dd"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a02b66d0a0d561b44c99b1db8b740d1dd">arm_compute::PriorBoxLayerInfo::PriorBoxLayerInfo</a></div><div class="ttdeci">PriorBoxLayerInfo()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00831">Types.h:831</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00393">Types.h:393</a></div></div>
<div class="ttc" id="_quantization_info_8h_xhtml"><div class="ttname"><a href="_quantization_info_8h.xhtml">QuantizationInfo.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::ArithmeticOperation::PRELU</a></div><div class="ttdoc">y*x if x &lt; 0, x otherwise </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">arm_compute::ReductionOperation::MAX</a></div><div class="ttdoc">Max. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">arm_compute::DataLayout::NDHWC</a></div><div class="ttdoc">Num samples, depth, height, width, channels. </div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a7f5fdd9585e3de60e819aa6cc7356b7e"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a7f5fdd9585e3de60e819aa6cc7356b7e">arm_compute::BoundingBoxTransformInfo::img_height</a></div><div class="ttdeci">float img_height() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01605">Types.h:1605</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN</a></div><div class="ttdoc">Quantize using an integer multiplication. </div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_ada3616dad46d826be3766a0f0d11fc35"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#ada3616dad46d826be3766a0f0d11fc35">arm_compute::BoundingBoxTransformInfo::BoundingBoxTransformInfo</a></div><div class="ttdeci">BoundingBoxTransformInfo(float img_width, float img_height, float scale, bool apply_scale=false, const std::array&lt; float, 4 &gt; weights={ { 1.f, 1.f, 1.f, 1.f } }, bool correct_transform_coords=false, float bbox_xform_clip=4.135166556742356f)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01587">Types.h:1587</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a38826e5398bc1a772225c256a91ae708"><div class="ttname"><a href="namespacearm__compute.xhtml#a38826e5398bc1a772225c256a91ae708">arm_compute::qasymm8_leaky_relu</a></div><div class="ttdeci">qasymm8_t qasymm8_leaky_relu(qasymm8_t in, const UniformQuantizationInfo &amp;qi_in, const UniformQuantizationInfo &amp;qi_out, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00422">QuantizationInfo.h:422</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdoc">batches </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a757197ffaf53ef6b284c6ceb24fdb688"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688">arm_compute::GEMMInfo::broadcast_bias</a></div><div class="ttdeci">bool broadcast_bias() const</div><div class="ttdoc">Flag which specifies whether to broadcast the shape of the bias tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02499">Types.h:2499</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ade745f0d990160b2ad90ded0814a2498"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ade745f0d990160b2ad90ded0814a2498">arm_compute::GEMMInfo::pretranspose_B</a></div><div class="ttdeci">bool pretranspose_B() const</div><div class="ttdoc">Flag which specifies whether b should be pre-transposed if supported. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02523">Types.h:2523</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a4a0745ad0a3b87c22a1997bcf0bc92b6"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a4a0745ad0a3b87c22a1997bcf0bc92b6">arm_compute::BoundingBoxTransformInfo::correct_transform_coords</a></div><div class="ttdeci">bool correct_transform_coords() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01625">Types.h:1625</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a381583deeb7c92f3b86d959c1e6c8185"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a381583deeb7c92f3b86d959c1e6c8185">arm_compute::DetectionOutputLayerInfo::keep_top_k</a></div><div class="ttdeci">int keep_top_k() const</div><div class="ttdoc">Get the number of total bounding boxes to be kept per image. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01033">Types.h:1033</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a639aaa22a784d5e5cb03a522267e79c4">arm_compute::InterpolationPolicy::AREA</a></div><div class="ttdoc">Output values are determined by averaging the source pixels whose areas fall under the area of the de...</div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml">arm_compute::StridedSliceLayerInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01928">Types.h:1928</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">arm_compute::DataLayout::NCDHW</a></div><div class="ttdoc">Num samples, channels, depth, height, width. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdoc">L2 Pooling. </div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_afbc0a0e37966224f004d4525b1cf012f"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#afbc0a0e37966224f004d4525b1cf012f">arm_compute::ROIPoolingLayerInfo::sampling_ratio</a></div><div class="ttdeci">unsigned int sampling_ratio() const</div><div class="ttdoc">Get sampling ratio. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01430">Types.h:1430</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af964802a181e4f401a7a38950bdefb24"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af964802a181e4f401a7a38950bdefb24">arm_compute::test::validation::broadcast_bias</a></div><div class="ttdeci">broadcast_bias</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00423">GEMMMatrixMultiplyNative.cpp:423</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_a36c28b28da4e04d698d6b598fb1eaca6"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6">arm_compute::IOFormatInfo::PrecisionType</a></div><div class="ttdeci">PrecisionType</div><div class="ttdoc">Precision type used when printing floating point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02645">Types.h:2645</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a5a8dd817290578adde8a5bdaaa3a08b8">arm_compute::WeightFormat::OHWIo8i4</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aacab12f6a68f1f61022d12d31aed3a19"><div class="ttname"><a href="namespacearm__compute.xhtml#aacab12f6a68f1f61022d12d31aed3a19">arm_compute::qasymm8_hard_swish</a></div><div class="ttdeci">qasymm8_t qasymm8_hard_swish(qasymm8_t in, const UniformQuantizationInfo &amp;qi_in, const UniformQuantizationInfo &amp;qi_out)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00402">QuantizationInfo.h:402</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a73aa59d7b088082ec257a1c65edbf1d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">arm_compute::test::validation::k</a></div><div class="ttdeci">const unsigned int k</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00361">GEMMMatrixMultiplyNative.cpp:361</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ad54d768454ff1000504546898078d0de"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">arm_compute::DetectionPostProcessLayerInfo::max_classes_per_detection</a></div><div class="ttdeci">unsigned int max_classes_per_detection() const</div><div class="ttdoc">Get max_classes per detection. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01130">Types.h:1130</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a757197ffaf53ef6b284c6ceb24fdb688"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a757197ffaf53ef6b284c6ceb24fdb688">arm_compute::GEMMReshapeInfo::broadcast_bias</a></div><div class="ttdeci">bool broadcast_bias() const</div><div class="ttdoc">Flag which specifies whether to broadcast the shape of the bias tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02250">Types.h:2250</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ad6d940d6e848829b5b12a71ac473ab27">arm_compute::WeightFormat::OHWIo4i2_bf16</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::ComparisonOperation::Equal</a></div><div class="ttdoc">Equal comparison (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_aa7e9584d7080ca6442cec62afaff6cad"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#aa7e9584d7080ca6442cec62afaff6cad">arm_compute::GEMMInfo::is_a_reshaped</a></div><div class="ttdeci">bool is_a_reshaped() const</div><div class="ttdoc">Flag which specifies if the matrix A has been reshaped. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02409">Types.h:2409</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x. </div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_aee7a73260f91fe8eedce52929fa829eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#aee7a73260f91fe8eedce52929fa829eb">arm_compute::DetectionPostProcessLayerInfo::scale_value_y</a></div><div class="ttdeci">float scale_value_y() const</div><div class="ttdoc">Get y scale value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01160">Types.h:1160</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::ComparisonOperation::Greater</a></div><div class="ttdoc">Greater comparison (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ad712f5f9ad21fa465f07cd8a6336c2d3"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ad712f5f9ad21fa465f07cd8a6336c2d3">arm_compute::GEMMInfo::post_ops</a></div><div class="ttdeci">const experimental::PostOpList&lt; ITensorInfo * &gt; &amp; post_ops() const</div><div class="ttdoc">Post operations to apply after the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02555">Types.h:2555</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ad71c061b948d43c30e489e15fee6dc8b"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ad71c061b948d43c30e489e15fee6dc8b">arm_compute::PadStrideInfo::PadStrideInfo</a></div><div class="ttdeci">PadStrideInfo(unsigned int stride_x, unsigned int stride_y, unsigned int pad_left, unsigned int pad_right, unsigned int pad_top, unsigned int pad_bottom, DimensionRoundingType round)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00703">Types.h:703</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da9d024a5762b3a992dec7eb3c49d17ae8">arm_compute::ConvolutionMethod::WINOGRAD</a></div><div class="ttdoc">Convolution using Winograd. </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a606e0a25401c9b861b360c29688d7a2f"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a606e0a25401c9b861b360c29688d7a2f">arm_compute::BorderSize::operator==</a></div><div class="ttdeci">bool operator==(const BorderSize &amp;rhs) const</div><div class="ttdoc">Check equality with another BorderSize struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00364">Types.h:364</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ab08f0cb36474118c5bbc03b3a172a778">arm_compute::Format::IYUV</a></div><div class="ttdoc">A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes. </div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_aa7d375782a8b80e3d4efee296a059855"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#aa7d375782a8b80e3d4efee296a059855">arm_compute::BoxNMSLimitInfo::min_size</a></div><div class="ttdeci">float min_size() const</div><div class="ttdoc">Get size suppression threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Types.h:641</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_aebf88ce57c0ad3d796ca66edb8a43e1a"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#aebf88ce57c0ad3d796ca66edb8a43e1a">arm_compute::PadStrideInfo::PadStrideInfo</a></div><div class="ttdeci">PadStrideInfo(unsigned int stride_x=1, unsigned int stride_y=1, unsigned int pad_x=0, unsigned int pad_y=0, DimensionRoundingType round=DimensionRoundingType::FLOOR)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00682">Types.h:682</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml">arm_compute::DetectionOutputLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00964">Types.h:964</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a31ff0f4153b53a0abfc96250b18b15f1"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a31ff0f4153b53a0abfc96250b18b15f1">arm_compute::PoolingLayerInfo::fp_mixed_precision</a></div><div class="ttdeci">bool fp_mixed_precision</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01293">Types.h:1293</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a165f06116e7b8d9b2481dfc805db4619">arm_compute::Format::RGBA8888</a></div><div class="ttdoc">4 channels, 1 U8 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates3_d_xhtml_a9c02f93c9698e4486878867c4f265c48"><div class="ttname"><a href="structarm__compute_1_1_coordinates3_d.xhtml#a9c02f93c9698e4486878867c4f265c48">arm_compute::Coordinates3D::y</a></div><div class="ttdeci">uint32_t y</div><div class="ttdoc">Y coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00447">Types.h:447</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_aafe658c46436747f101e5aa9f8cd28b2"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#aafe658c46436747f101e5aa9f8cd28b2">arm_compute::ValidRegion::ValidRegion</a></div><div class="ttdeci">ValidRegion(const Coordinates &amp;an_anchor, const TensorShape &amp;a_shape)</div><div class="ttdoc">Constructor for a valid region with default number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00211">Types.h:211</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00559">Types.h:559</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ac411afd31d32cec664d372acc12f404a">arm_compute::DetectionOutputLayerCodeType::CORNER</a></div><div class="ttdoc">Use box corners. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea97675eb3f268048604dc5155511a2a4d">arm_compute::BitwiseOperation::XOR</a></div><div class="ttdoc">Bitwise XOR operation. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">arm_compute::WeightFormat::ANY</a></div></div>
<div class="ttc" id="_strides_8h_xhtml"><div class="ttname"><a href="_strides_8h.xhtml">Strides.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">arm_compute::ActivationLayerInfo::ActivationFunction::IDENTITY</a></div><div class="ttdoc">Identity (  ) </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">arm_compute::ReductionOperation::MIN</a></div><div class="ttdoc">Min. </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a38fe393e11c69a5d459a75e2858e9f17"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">arm_compute::PoolingLayerInfo::pad_stride_info</a></div><div class="ttdeci">PadStrideInfo pad_stride_info</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01290">Types.h:1290</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_aee6f5a043173c4d51c11a54db8e0f519"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#aee6f5a043173c4d51c11a54db8e0f519">arm_compute::GEMMReshapeInfo::GEMMReshapeInfo</a></div><div class="ttdeci">GEMMReshapeInfo()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02165">Types.h:2165</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ade272d59e5c207310f2f232b6d409096">arm_compute::WeightFormat::OHWIo16i4_bf16</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ae081b85ce44f2ec7cfe875afabcdfcc3"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae081b85ce44f2ec7cfe875afabcdfcc3">arm_compute::GEMMInfo::set_gemmlowp_output_stage</a></div><div class="ttdeci">void set_gemmlowp_output_stage(GEMMLowpOutputStageInfo &amp;output_stage)</div><div class="ttdoc">Sets GEMMLowp output stage. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02467">Types.h:2467</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding2_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_padding2_d.xhtml">arm_compute::Padding2D</a></div><div class="ttdoc">Padding information for 2D operations like Conv2d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00788">Types.h:788</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_afaafdfc441c2433c70959e3dfe46fd97"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">arm_compute::BorderSize::empty</a></div><div class="ttdeci">constexpr bool empty() const</div><div class="ttdoc">Check if the entire border is zero. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00317">Types.h:317</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_afa9ae68895fa738879123fbdf60447ab"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#afa9ae68895fa738879123fbdf60447ab">arm_compute::StridedSliceLayerInfo::shrink_axis_mask</a></div><div class="ttdeci">int32_t shrink_axis_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01955">Types.h:1955</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a36b5c2550292b008aa1f018a7623c6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">arm_compute::is_fixed_format_fast_math</a></div><div class="ttdeci">bool is_fixed_format_fast_math(const WeightFormat &amp;wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02069">Types.h:2069</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="_i_post_op_8h_xhtml"><div class="ttname"><a href="_i_post_op_8h.xhtml">IPostOp.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a90b95f8f9579b94f5013c8904f616cd7">arm_compute::WeightFormat::OHWIo32i8</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a669b5d3c5994f9ae3be31df9a1014297"><div class="ttname"><a href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">arm_compute::PaddingInfo</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; PaddingInfo</div><div class="ttdoc">Padding information as a pair of unsigned int start/end. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00452">Types.h:452</a></div></div>
<div class="ttc" id="structarm__compute_1_1_coordinates2_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_coordinates2_d.xhtml">arm_compute::Coordinates2D</a></div><div class="ttdoc">Coordinate type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00437">Types.h:437</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdoc">Average Pooling. </div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1cb8fae6eb760594815b62ec5af5eca2"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">arm_compute::ValidRegion::end</a></div><div class="ttdeci">int end(unsigned int d) const</div><div class="ttdoc">Return the end of the valid region for the given dimension d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00238">Types.h:238</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a5b8b00c38aee11870396f12e764fa3ce"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a5b8b00c38aee11870396f12e764fa3ce">arm_compute::ComputeAnchorsInfo::feat_width</a></div><div class="ttdeci">float feat_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01549">Types.h:1549</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a68fe6a141bc6154b83d213f4a1edbac6">arm_compute::WeightFormat::OHWIo2</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::ElementWiseUnary::SIN</a></div><div class="ttdoc">Sine. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea558ffc8f5770d8e4f95f51d822685532">arm_compute::BitwiseOperation::AND</a></div><div class="ttdoc">Bitwise AND operation. </div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_aee6a0c75a44f00d3306101e14ffc3ebb"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#aee6a0c75a44f00d3306101e14ffc3ebb">arm_compute::ROIPoolingLayerInfo::pooled_height</a></div><div class="ttdeci">unsigned int pooled_height() const</div><div class="ttdoc">Get the pooled height of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01420">Types.h:1420</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a137948e04c296b448be2c0de97c6adcb"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a137948e04c296b448be2c0de97c6adcb">arm_compute::GEMMReshapeInfo::m</a></div><div class="ttdeci">int m() const</div><div class="ttdoc">Number of matrix A rows. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02191">Types.h:2191</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ae2d38726d9f14d748185f77798617c8a"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ae2d38726d9f14d748185f77798617c8a">arm_compute::GEMMInfo::fast_math</a></div><div class="ttdeci">bool fast_math() const</div><div class="ttdoc">Flag which specifies if a shorter accumulator to be used. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02483">Types.h:2483</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdoc">Borders are left undefined. </div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01400">Types.h:1400</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616"><div class="ttname"><a href="namespacearm__compute.xhtml#a1f8212fef242f87e34893c8db13fc16ea1d00e7dce692e8dc3f6877f035e3a616">arm_compute::BitwiseOperation::OR</a></div><div class="ttdoc">Bitwise OR operation. </div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a></div><div class="ttdoc">Detection window used for the object detection. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00539">Types.h:539</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bafc54513dae613e117ffc4169e48bfce5">arm_compute::ReductionOperation::MEAN_SUM</a></div><div class="ttdoc">Mean of sum. </div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a5d68f71fde6fb8401332cbe3973368a2"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d68f71fde6fb8401332cbe3973368a2">arm_compute::GenerateProposalsInfo::im_width</a></div><div class="ttdeci">float im_width() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01471">Types.h:1471</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a985940fefc02bdbc0ea1c916bb0ac82b"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a985940fefc02bdbc0ea1c916bb0ac82b">arm_compute::PriorBoxLayerInfo::max_sizes</a></div><div class="ttdeci">std::vector&lt; float &gt; max_sizes() const</div><div class="ttdoc">Get max sizes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00927">Types.h:927</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml">arm_compute::ComputeAnchorsInfo</a></div><div class="ttdoc">ComputeAnchors information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01524">Types.h:1524</a></div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_ad0eab1042455a2067c812ab8071d5376"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#ad0eab1042455a2067c812ab8071d5376">arm_compute::Rectangle::width</a></div><div class="ttdeci">uint16_t width</div><div class="ttdoc">Width of the rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00432">Types.h:432</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">arm_compute::ConvertPolicy::WRAP</a></div><div class="ttdoc">Wrap around. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a36e65a7f80a07a2393e6a1cadd974740"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">arm_compute::DetectionPostProcessLayerInfo::detection_per_class</a></div><div class="ttdeci">unsigned int detection_per_class() const</div><div class="ttdoc">Get detection per class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01135">Types.h:1135</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a4333016b04c798f769404aad7683ec3d"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a4333016b04c798f769404aad7683ec3d">arm_compute::PriorBoxLayerInfo::flip</a></div><div class="ttdeci">bool flip() const</div><div class="ttdoc">Get the flip value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00917">Types.h:917</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a079eb95759d2ad31254f659d63651825">arm_compute::Format::UV88</a></div><div class="ttdoc">2 channel, 1 U8 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a9454e2a604136e9b2bddf630b4c9b09a"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">arm_compute::PoolingLayerInfo::pool_type</a></div><div class="ttdeci">PoolingType pool_type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01287">Types.h:1287</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml_a70fd561a558e9f433088b64587a9cb62"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml#a70fd561a558e9f433088b64587a9cb62">arm_compute::ROIPoolingLayerInfo::spatial_scale</a></div><div class="ttdeci">float spatial_scale() const</div><div class="ttdoc">Get the spatial scale. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01425">Types.h:1425</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da86de502ad3fe05ceedaba87164d54d28">arm_compute::ConvolutionMethod::FFT</a></div><div class="ttdoc">Convolution using FFT. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::ComparisonOperation::LessEqual</a></div><div class="ttdoc">Less equal comparison (  ) </div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_ab0580f504a7428539be299fa71565f30"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#ab0580f504a7428539be299fa71565f30">arm_compute::Rectangle::y</a></div><div class="ttdeci">uint16_t y</div><div class="ttdoc">Top-left y coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00431">Types.h:431</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01083">Types.h:1083</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_abbd888f118c2209bf7578eb4f8942a07"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#abbd888f118c2209bf7578eb4f8942a07">arm_compute::GEMMReshapeInfo::depth_output_gemm3d</a></div><div class="ttdeci">int depth_output_gemm3d() const</div><div class="ttdoc">Depth (third dimension) of the output tensor to be used with the GEMM3D kernel. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02234">Types.h:2234</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_adb448bef8c5a6ab061f5b852bd93a427"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#adb448bef8c5a6ab061f5b852bd93a427">arm_compute::BorderSize::uniform</a></div><div class="ttdeci">constexpr bool uniform() const</div><div class="ttdoc">Check if the border is the same size on all sides. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00323">Types.h:323</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91ae4f6a05f82ed398f984f4bc1a55838df">arm_compute::PaddingMode::REFLECT</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_adda82c28c368106734620f105bb0e1e3"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">arm_compute::DetectionPostProcessLayerInfo::num_classes</a></div><div class="ttdeci">unsigned int num_classes() const</div><div class="ttdoc">Get num classes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01150">Types.h:1150</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830ae65a115db9b4bcc4ae0aa0b989089d16">arm_compute::DetectionOutputLayerCodeType::TF_CENTER</a></div><div class="ttdoc">Use box centers and size but flip x and y co-ordinates. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4"><div class="ttname"><a href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0caa481bc07ed7c792045e8b277c0c88f8d4">arm_compute::FuseBatchNormalizationType::DEPTHWISECONVOLUTION</a></div><div class="ttdoc">For Depthwise Convolution weights. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa44b7820928723814e563efaa90bf927">arm_compute::WeightFormat::OHWIo64i2</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a"><div class="ttname"><a href="namespacearm__compute.xhtml#ad818ba0ecd4a87d8f1bb0d5b17f07830afbc6c35854fe02eb9e792f897399c42a">arm_compute::DetectionOutputLayerCodeType::CORNER_SIZE</a></div><div class="ttdoc">Use box centers and size. </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a51ba0498913f8c74b9ba8938694d09bf"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">arm_compute::Pooling3dLayerInfo::padding</a></div><div class="ttdeci">Padding3D padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01392">Types.h:1392</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_aa0a9be7908d667b4d3735c4eef01a667"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#aa0a9be7908d667b4d3735c4eef01a667">arm_compute::IOFormatInfo::IOFormatInfo</a></div><div class="ttdeci">IOFormatInfo(PrintRegion print_region=PrintRegion::ValidRegion, PrecisionType precision_type=PrecisionType::Default, unsigned int precision=10, bool align_columns=true, std::string element_delim=&quot; &quot;, std::string row_delim=&quot;\)</div><div class="ttdoc">Construct a set of IO formatting information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02669">Types.h:2669</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_ae283722f31a4c59039f9abd44f10dbd0"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0">arm_compute::IOFormatInfo::PrintRegion</a></div><div class="ttdeci">PrintRegion</div><div class="ttdoc">Specifies the area to be printed, used by Tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02653">Types.h:2653</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_afd15b7132dbacc847969f91c72633e7d"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#afd15b7132dbacc847969f91c72633e7d">arm_compute::PriorBoxLayerInfo::variances</a></div><div class="ttdeci">std::vector&lt; float &gt; variances() const</div><div class="ttdoc">Get min variances. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00897">Types.h:897</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac192f173bb2880729e17cf86d4e7d741">arm_compute::WeightFormat::OHWIo64i2_bf16</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a></div><div class="ttdoc">Green channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a6d5e7ad98fd0d58a84c837e931464de6"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6">arm_compute::WeightsInfo::weight_format</a></div><div class="ttdeci">arm_compute::WeightFormat weight_format() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02125">Types.h:2125</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::ElementWiseUnary::NEG</a></div><div class="ttdoc">Negate. </div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml_a8f456133a1d886f466a79264a10f42ea"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml#a8f456133a1d886f466a79264a10f42ea">arm_compute::BoundingBoxTransformInfo::weights</a></div><div class="ttdeci">std::array&lt; float, 4 &gt; weights() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01595">Types.h:1595</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a4c8f9fa843de1086c27c86a6b8cf4582"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a4c8f9fa843de1086c27c86a6b8cf4582">arm_compute::GEMMInfo::reshape_b_only_on_first_run</a></div><div class="ttdeci">bool reshape_b_only_on_first_run() const</div><div class="ttdoc">Flag which specifies if the reshape of matrix B should executed only for the first. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02427">Types.h:2427</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a10a8505b7c7458d1f60cac844d42e023"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a10a8505b7c7458d1f60cac844d42e023">arm_compute::BorderSize::BorderSize</a></div><div class="ttdeci">constexpr BorderSize(unsigned int top, unsigned int right, unsigned int bottom, unsigned int left)</div><div class="ttdoc">Border with different sizes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00311">Types.h:311</a></div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_a4dde988b1b2adba65ae3efa69f65d960"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#a4dde988b1b2adba65ae3efa69f65d960">arm_compute::Rectangle::x</a></div><div class="ttdeci">uint16_t x</div><div class="ttdoc">Top-left x coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00430">Types.h:430</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a418f33d41dc0830534ee590a162a10e3"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a418f33d41dc0830534ee590a162a10e3">arm_compute::NormalizationLayerInfo::alpha</a></div><div class="ttdeci">float alpha() const</div><div class="ttdoc">Get the alpha value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01877">Types.h:1877</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml">arm_compute::GEMMInfo</a></div><div class="ttdoc">GEMM information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02341">Types.h:2341</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a71f0df0f3b7d1380f1ee669aec324eb9"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a71f0df0f3b7d1380f1ee669aec324eb9">arm_compute::PoolingLayerInfo::pool_size</a></div><div class="ttdeci">Size2D pool_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01288">Types.h:1288</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_acf9a40691cf4bd2c9af93bc806358a24"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#acf9a40691cf4bd2c9af93bc806358a24">arm_compute::test::validation::reference::transpose</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; transpose(const SimpleTensor&lt; T &gt; &amp;src)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_transpose_8cpp_source.xhtml#l00038">Transpose.cpp:38</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a19da960d23eca69f8e65d52c741147e2"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a19da960d23eca69f8e65d52c741147e2">arm_compute::BorderSize::operator*</a></div><div class="ttdeci">BorderSize operator*(float scale)</div><div class="ttdoc">Scale a copy of this border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00350">Types.h:350</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ae33ab50602da54038611e30d5013c040"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ae33ab50602da54038611e30d5013c040">arm_compute::PadStrideInfo::pad</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; pad() const</div><div class="ttdoc">Get the padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00737">Types.h:737</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::ArithmeticOperation::SQUARED_DIFF</a></div><div class="ttdoc">(x - y)^2 </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a13f922d9427581021eca1cc48faa431c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a13f922d9427581021eca1cc48faa431c">arm_compute::DetectionOutputLayerInfo::DetectionOutputLayerInfo</a></div><div class="ttdeci">DetectionOutputLayerInfo(int num_classes, bool share_location, DetectionOutputLayerCodeType code_type, int keep_top_k, float nms_threshold, int top_k=-1, int background_label_id=-1, float confidence_threshold=std::numeric_limits&lt; float &gt;::lowest(), bool variance_encoded_in_target=false, float eta=1)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00996">Types.h:996</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a9e0fb1d1462557f28966ae19988532c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a9e0fb1d1462557f28966ae19988532c2">arm_compute::ActivationLayerInfo::activation</a></div><div class="ttdeci">ActivationFunction activation() const</div><div class="ttdoc">Get the type of activation function. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01681">Types.h:1681</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a02a00a5d20986f3a7ab72b9c86be3a54"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a02a00a5d20986f3a7ab72b9c86be3a54">arm_compute::ActivationLayerInfo::b</a></div><div class="ttdeci">float b() const</div><div class="ttdoc">Get the beta value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01691">Types.h:1691</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_ab8326941d60f08c5d1f47ed65514f3ed"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#ab8326941d60f08c5d1f47ed65514f3ed">arm_compute::GEMMInfo::fixed_format</a></div><div class="ttdeci">bool fixed_format() const</div><div class="ttdoc">Flag which specifies if the GEMM operation is running fixed-format kernels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02571">Types.h:2571</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdoc">64-bit floating-point number </div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a16875a1122accc1277a22e0ddbb8e94d"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">arm_compute::PoolingLayerInfo::is_global_pooling</a></div><div class="ttdeci">bool is_global_pooling</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01292">Types.h:1292</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00186">Types.h:186</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml_a5e133b0eab146ce38719d888468740f1"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a5e133b0eab146ce38719d888468740f1">arm_compute::Padding3D::Padding3D</a></div><div class="ttdeci">Padding3D(size_t left, size_t right, size_t top, size_t bottom, size_t front, size_t back)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00813">Types.h:813</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac202cc92a20e27405c4f8f791e74b1e0">arm_compute::WeightFormat::OHWIo32i4_bf16</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling3d_layer_info_xhtml_a9454e2a604136e9b2bddf630b4c9b09a"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9454e2a604136e9b2bddf630b4c9b09a">arm_compute::Pooling3dLayerInfo::pool_type</a></div><div class="ttdeci">PoolingType pool_type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01389">Types.h:1389</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a5d2ef6ac7f91aa842b3fe47262cac45a"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a5d2ef6ac7f91aa842b3fe47262cac45a">arm_compute::GenerateProposalsInfo::pre_nms_topN</a></div><div class="ttdeci">int pre_nms_topN() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01481">Types.h:1481</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_ae415dd6029ea707421701cd13ae4fcef"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">arm_compute::BorderSize::BorderSize</a></div><div class="ttdeci">constexpr BorderSize() noexcept</div><div class="ttdoc">Empty border, i.e. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00287">Types.h:287</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_ac164b20b5aa0b7de17d49ed853473896"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#ac164b20b5aa0b7de17d49ed853473896">arm_compute::BorderSize::operator!=</a></div><div class="ttdeci">bool operator!=(const BorderSize &amp;rhs) const</div><div class="ttdoc">Check non-equality with another BorderSize struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00375">Types.h:375</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::ComparisonOperation::NotEqual</a></div><div class="ttdoc">NotEqual comparison (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml_a2a3e74a86ee9c520cc1a43191145edf6"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml#a2a3e74a86ee9c520cc1a43191145edf6">arm_compute::GenerateProposalsInfo::post_nms_topN</a></div><div class="ttdeci">int post_nms_topN() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01486">Types.h:1486</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5ac9ae99c7c154b112ea7e5949afc62121">arm_compute::WeightFormat::OHWIo64i4</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate. </div></div>
<div class="ttc" id="structarm__compute_1_1_rectangle_xhtml_a81c9f8d0b8c3b49d770be14dbe9f0d37"><div class="ttname"><a href="structarm__compute_1_1_rectangle.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">arm_compute::Rectangle::height</a></div><div class="ttdeci">uint16_t height</div><div class="ttdoc">Height of the rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00433">Types.h:433</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5af1c10e01dded7edf3ab7bb573812f30f">arm_compute::WeightFormat::OHWIo16i8</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">arm_compute::CPUModel::GENERIC</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ac49df0924d183da42cffc04cf9aba1f8"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">arm_compute::PadStrideInfo::pad_bottom</a></div><div class="ttdeci">unsigned int pad_bottom() const</div><div class="ttdoc">Get the bottom padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00760">Types.h:760</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a481e7a6945eb9f23e87f2de780b2e164">arm_compute::Format::YUYV422</a></div><div class="ttdoc">A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a7a636f1561bb52de88a5ef9671f28c12"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a7a636f1561bb52de88a5ef9671f28c12">arm_compute::PriorBoxLayerInfo::clip</a></div><div class="ttdeci">bool clip() const</div><div class="ttdoc">Get the clip value. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00922">Types.h:922</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aa87d5006e1de1bfc07d5c56086ad20f1">arm_compute::NMSType::ORIGINAL</a></div><div class="ttdoc">Original NMS. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdoc">unsigned 64-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_reshape_info_xhtml_a00330b8913cac3b07029ac0c3350e806"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml#a00330b8913cac3b07029ac0c3350e806">arm_compute::GEMMReshapeInfo::reinterpret_input_as_3d</a></div><div class="ttdeci">bool reinterpret_input_as_3d() const</div><div class="ttdoc">Flag which specifies if the input tensor has to be reinterpreted as 3D. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02242">Types.h:2242</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a39a8dd296461705ee5cb54eacb4b2818"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a39a8dd296461705ee5cb54eacb4b2818">arm_compute::GEMMInfo::activation_info</a></div><div class="ttdeci">ActivationLayerInfo activation_info() const</div><div class="ttdoc">Activation layer to apply after the matrix multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02539">Types.h:2539</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::ArithmeticOperation::SUB</a></div><div class="ttdoc">(x - y) </div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a7144874ab401f5c4e249a1115dfb5166"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">arm_compute::PadStrideInfo::pad_left</a></div><div class="ttdeci">unsigned int pad_left() const</div><div class="ttdoc">Get the left padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00745">Types.h:745</a></div></div>
<div class="ttc" id="arm__compute_2core_2utils_2misc_2_macros_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2misc_2_macros_8h.xhtml">Macros.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936d"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">arm_compute::ElementWiseUnary</a></div><div class="ttdeci">ElementWiseUnary</div><div class="ttdoc">Available element wise unary operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00504">Types.h:504</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aad1276bf6fb54ae42d709743edbe5a21"><div class="ttname"><a href="namespacearm__compute.xhtml#aad1276bf6fb54ae42d709743edbe5a21">arm_compute::export_to_cl_image</a></div><div class="ttdeci">bool export_to_cl_image(const ITensorInfo *tensor)</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00444">CLHelpers.cpp:444</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe9e10e5fdfd1e2665ac17c75c0cacd8"><div class="ttname"><a href="namespacearm__compute.xhtml#afe9e10e5fdfd1e2665ac17c75c0cacd8">arm_compute::Multiples</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Multiples</div><div class="ttdoc">Information to produce a tiled version of a Tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59ca"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">arm_compute::NormType</a></div><div class="ttdeci">NormType</div><div class="ttdoc">The normalization type used for the normalization layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00526">Types.h:526</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_a29ef3fb90fdd7ef335d67c286dd0d7f3"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a29ef3fb90fdd7ef335d67c286dd0d7f3">arm_compute::StridedSliceLayerInfo::begin_mask</a></div><div class="ttdeci">int32_t begin_mask() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01943">Types.h:1943</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_post_op_list_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">arm_compute::experimental::PostOpList</a></div><div class="ttdoc">A sequence of PostOps that can be appended to the end of other operators. </div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00119">IPostOp.h:119</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::NormType::CROSS_MAP</a></div><div class="ttdoc">Normalization applied cross maps. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781"><div class="ttname"><a href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::ElementWiseUnary::RSQRT</a></div><div class="ttdoc">Reverse square root. </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_ac2ed52112076ed0fd2aab3fbfb758837"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#ac2ed52112076ed0fd2aab3fbfb758837">arm_compute::BorderSize::operator*=</a></div><div class="ttdeci">BorderSize &amp; operator*=(float scale)</div><div class="ttdoc">Scale this border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00334">Types.h:334</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a200f8195335b939daa12ff6db12f5210">arm_compute::WeightFormat::OHWIo128</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::ConvolutionMethod::GEMM</a></div><div class="ttdoc">Convolution using GEMM. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a47a4ac4d2f91cff3c1e2b456d96e64c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a47a4ac4d2f91cff3c1e2b456d96e64c0">arm_compute::qasymm8_logistic</a></div><div class="ttdeci">qasymm8_t qasymm8_logistic(qasymm8_t in, const UniformQuantizationInfo &amp;qi_in, const UniformQuantizationInfo &amp;qi_out)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00433">QuantizationInfo.h:433</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00406">Types.h:406</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_ab1de5a83f57e76567391915b23d2b483"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ab1de5a83f57e76567391915b23d2b483">arm_compute::BoxNMSLimitInfo::soft_nms_method</a></div><div class="ttdeci">NMSType soft_nms_method() const</div><div class="ttdoc">Get soft NMS method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00621">Types.h:621</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a00ac5d6334fe3217b4ef49ea8dc61fb0"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">arm_compute::BorderSize::limit</a></div><div class="ttdeci">void limit(const BorderSize &amp;limit)</div><div class="ttdoc">Limit this border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00384">Types.h:384</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a158d49c7c1df3c6c6589b47d3de56cf0"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a158d49c7c1df3c6c6589b47d3de56cf0">arm_compute::DetectionOutputLayerInfo::background_label_id</a></div><div class="ttdeci">int background_label_id() const</div><div class="ttdoc">Get background label ID. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01048">Types.h:1048</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_ac2a327bd7d58d9fa1c49c302fefbbcba"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ac2a327bd7d58d9fa1c49c302fefbbcba">arm_compute::BoxNMSLimitInfo::im_height</a></div><div class="ttdeci">float im_height() const</div><div class="ttdoc">Get image height (NMS may suppress boxes whose center sits beyond the image height) ...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00651">Types.h:651</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00267">Types.h:267</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_afd58441adf1f2570be5b0be4070465cf"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#afd58441adf1f2570be5b0be4070465cf">arm_compute::ActivationLayerInfo::is_lut_supported</a></div><div class="ttdeci">static bool is_lut_supported(ActivationFunction act_func, DataType data_type)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01738">Types.h:1738</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5aa181500a35cda4d9bde47038ff0d9b31">arm_compute::WeightFormat::OHWIo4i8</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a77ef520daabfab023d01732f24101c6e"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a77ef520daabfab023d01732f24101c6e">arm_compute::ValidRegion::ValidRegion</a></div><div class="ttdeci">ValidRegion()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00189">Types.h:189</a></div></div>
<div class="ttc" id="structarm__compute_1_1_pooling_layer_info_xhtml_a9f7e7793c31d02fd3ba59e0fcf3ef891"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">arm_compute::PoolingLayerInfo::exclude_padding</a></div><div class="ttdeci">bool exclude_padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01291">Types.h:1291</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_a47c941c24980e6f61a74986c4a16c16c"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#a47c941c24980e6f61a74986c4a16c16c">arm_compute::DetectionOutputLayerInfo::confidence_threshold</a></div><div class="ttdeci">float confidence_threshold() const</div><div class="ttdoc">Get confidence threshold. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01053">Types.h:1053</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::NormType::IN_MAP_2D</a></div><div class="ttdoc">Normalization applied within the same map in 2D region. </div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_ac9e7f8fc8a688fd119d3fb2892cce6b9"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#ac9e7f8fc8a688fd119d3fb2892cce6b9">arm_compute::WeightsInfo::retain_internal_weights</a></div><div class="ttdeci">bool retain_internal_weights() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02121">Types.h:2121</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml_a4b92160f7c48cb1c0b5ce716ec895fbc"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml#a4b92160f7c48cb1c0b5ce716ec895fbc">arm_compute::StridedSliceLayerInfo::StridedSliceLayerInfo</a></div><div class="ttdeci">StridedSliceLayerInfo(int32_t begin_mask=0, int32_t end_mask=0, int32_t shrink_axis_mask=0)</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01937">Types.h:1937</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7b"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">arm_compute::SamplingPolicy</a></div><div class="ttdeci">SamplingPolicy</div><div class="ttdoc">Available Sampling Policies. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00104">Types.h:104</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a07284479b872cb46b6925ff3b4ff5ae0">arm_compute::WeightFormat::OHWIo16i4</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_ad54fb0c74b50fe8594e530abc8765888"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#ad54fb0c74b50fe8594e530abc8765888">arm_compute::BoxNMSLimitInfo::soft_nms_sigma</a></div><div class="ttdeci">float soft_nms_sigma() const</div><div class="ttdoc">Get soft NMS sigma. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00626">Types.h:626</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml_a1fba899b6ce8e0a8f4091031d75b0241"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml#a1fba899b6ce8e0a8f4091031d75b0241">arm_compute::WeightsInfo::kernel_size</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; kernel_size() const</div><div class="ttdoc">Return the width and height of the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02117">Types.h:2117</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml_ae82a2ccc5739cb255a9a7679d6161399"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml#ae82a2ccc5739cb255a9a7679d6161399">arm_compute::DetectionOutputLayerInfo::num_loc_classes</a></div><div class="ttdeci">int num_loc_classes() const</div><div class="ttdoc">Get number of location classes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01063">Types.h:1063</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02aaa1780b4fcce2d5d9af13dc25386d111">arm_compute::DataLayoutDimension::DEPTH</a></div><div class="ttdoc">depth </div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_a9bfc32f4601b11c9c5b18648ad6ae0fc"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#a9bfc32f4601b11c9c5b18648ad6ae0fc">arm_compute::BoxNMSLimitInfo::soft_nms_enabled</a></div><div class="ttdeci">bool soft_nms_enabled() const</div><div class="ttdoc">Check if soft NMS is enabled. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00616">Types.h:616</a></div></div>
<div class="ttc" id="classarm__compute_1_1_box_n_m_s_limit_info_xhtml_af3ec399a9e0cea025fa9b37773a6eb13"><div class="ttname"><a href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml#af3ec399a9e0cea025fa9b37773a6eb13">arm_compute::BoxNMSLimitInfo::detections_per_im</a></div><div class="ttdeci">int detections_per_im() const</div><div class="ttdoc">Get the number of detections. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00611">Types.h:611</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml_a38c5b617ead74af00cc7957553bd0d66"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml#a38c5b617ead74af00cc7957553bd0d66">arm_compute::IOFormatInfo::element_delim</a></div><div class="ttdeci">std::string element_delim</div><div class="ttdoc">Element delimeter. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02691">Types.h:2691</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a6d5e7ad98fd0d58a84c837e931464de6"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a6d5e7ad98fd0d58a84c837e931464de6">arm_compute::GEMMInfo::weight_format</a></div><div class="ttdeci">arm_compute::WeightFormat weight_format() const</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02585">Types.h:2585</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_af706055cbc19cf4ee2b6effe3beaccee"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#af706055cbc19cf4ee2b6effe3beaccee">arm_compute::GEMMInfo::set_fast_math</a></div><div class="ttdeci">void set_fast_math(bool fast_math)</div><div class="ttdoc">Set fast math flag. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02491">Types.h:2491</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml_a147b1e13f347e7b995de58f8fafd6723"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml#a147b1e13f347e7b995de58f8fafd6723">arm_compute::PriorBoxLayerInfo::min_sizes</a></div><div class="ttdeci">std::vector&lt; float &gt; min_sizes() const</div><div class="ttdoc">Get min sizes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00892">Types.h:892</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_e_m_m_info_xhtml_a9a76aeb3d02431c5dc06ea031c2e49a6"><div class="ttname"><a href="classarm__compute_1_1_g_e_m_m_info.xhtml#a9a76aeb3d02431c5dc06ea031c2e49a6">arm_compute::GEMMInfo::set_weight_format</a></div><div class="ttdeci">void set_weight_format(arm_compute::WeightFormat weight_format)</div><div class="ttdoc">Set weight format to be used. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02594">Types.h:2594</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a94d39bf54ea1e81c05161d7b073cddde">arm_compute::WeightFormat::OHWIo4i2</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a8530b7f0eff18ec11fec288f7573005d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a8530b7f0eff18ec11fec288f7573005d">arm_compute::ActivationLayerInfo::LookupTable256</a></div><div class="ttdeci">std::array&lt; qasymm8_t, 256 &gt; LookupTable256</div><div class="ttdoc">Lookup table. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01666">Types.h:1666</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046"><div class="ttname"><a href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718aaac544aacc3615aada24897a215f5046">arm_compute::NMSType::LINEAR</a></div><div class="ttdoc">Linear NMS. </div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_add9dd56c183d91e148b0a7b390159fda"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#add9dd56c183d91e148b0a7b390159fda">arm_compute::PadStrideInfo::has_padding</a></div><div class="ttdeci">bool has_padding() const</div><div class="ttdoc">Check whether this has any padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00772">Types.h:772</a></div></div>
<div class="ttc" id="structarm__compute_1_1_padding3_d_xhtml"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml">arm_compute::Padding3D</a></div><div class="ttdoc">Padding information for 3D operations like Conv3d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00802">Types.h:802</a></div></div>
<div class="ttc" id="classarm__compute_1_1_compute_anchors_info_xhtml_a754fb667b78b7376c989a3923d172ff9"><div class="ttname"><a href="classarm__compute_1_1_compute_anchors_info.xhtml#a754fb667b78b7376c989a3923d172ff9">arm_compute::ComputeAnchorsInfo::ComputeAnchorsInfo</a></div><div class="ttdeci">ComputeAnchorsInfo(float feat_width, float feat_height, float spatial_scale, size_t values_per_roi=4)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01534">Types.h:1534</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
