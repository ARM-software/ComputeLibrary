<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_interleaved_pretransposed2d__coll__graph.svg" width="260" height="202"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1a12e7d5e0236aab8e417197704e4d81"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a1a12e7d5e0236aab8e417197704e4d81">GemmInterleavedPretransposed2d</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;)=delete</td></tr>
<tr class="separator:a1a12e7d5e0236aab8e417197704e4d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a58b10b9a21d1ad3dbb9cf9a1b1e8fdac">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;)=delete</td></tr>
<tr class="separator:a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63b1e682fe5886b27199ff95fb68660e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a63b1e682fe5886b27199ff95fb68660e">GemmInterleavedPretransposed2d</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</td></tr>
<tr class="separator:a63b1e682fe5886b27199ff95fb68660e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a> () const override</td></tr>
<tr class="separator:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a> () const override</td></tr>
<tr class="separator:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">set_nthreads</a> (int nthreads) override</td></tr>
<tr class="separator:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18e9a188320dd783a61cb41ff6ba357c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a18e9a188320dd783a61cb41ff6ba357c">execute</a> (const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;work_range, const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;thread_locator, int threadid) override</td></tr>
<tr class="memdesc:a18e9a188320dd783a61cb41ff6ba357c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main execute member fucntion.  <a href="#a18e9a188320dd783a61cb41ff6ba357c">More...</a><br /></td></tr>
<tr class="separator:a18e9a188320dd783a61cb41ff6ba357c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace003f90d5d728a19d96f697db05f3dc"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ace003f90d5d728a19d96f697db05f3dc">get_working_size</a> () const override</td></tr>
<tr class="separator:ace003f90d5d728a19d96f697db05f3dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee006b8384820aa25720e84b91b32a27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#aee006b8384820aa25720e84b91b32a27">set_working_space</a> (void *working_space) override</td></tr>
<tr class="separator:aee006b8384820aa25720e84b91b32a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae385dce1a98e03f0a3ca311f031e5110"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:ae385dce1a98e03f0a3ca311f031e5110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon&lt; To, Tr &gt;</a></td></tr>
<tr class="memitem:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">set_arrays</a> (const To *A, const int lda, const int A_batch_stride, const int A_multi_stride, const To *B, const int ldb, const int B_multi_stride, Tr *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const Tr *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride)</td></tr>
<tr class="separator:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">set_arrays_generic</a> (const void *A, const int lda, const int A_batch_stride, const int A_multi_stride, const void *B, const int ldb, const int B_multi_stride, void *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const void *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride) override</td></tr>
<tr class="separator:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c4f4f6a90ff91f2c2ae9a954446a762 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">requantize_bias</a> (void *, const To *, const int, const int)</td></tr>
<tr class="separator:a7c4f4f6a90ff91f2c2ae9a954446a762 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d4b10407385edb146b05c9df9a9f4b inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a06d4b10407385edb146b05c9df9a9f4b">pretranspose_B_array_generic</a> (void *out, const void *in, const int row_stride, const int multi_stride) override</td></tr>
<tr class="separator:a06d4b10407385edb146b05c9df9a9f4b inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61189e875b30e38a11a1f8fe21e3e939 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">set_indirect_parameters</a> (size_t, const To *const *const *)</td></tr>
<tr class="separator:a61189e875b30e38a11a1f8fe21e3e939 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">set_indirect_parameters_generic</a> (size_t sz, const void *const *const *ptr) override</td></tr>
<tr class="separator:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_i_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_i_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml">IGemmCommon</a></td></tr>
<tr class="memitem:ab091a53dc98522e74b3e2a4d9020d76c inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">set_quantized_bias</a> (const int32_t *, size_t)</td></tr>
<tr class="separator:ab091a53dc98522e74b3e2a4d9020d76c inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaabbf2723a390d8e7f859c70aea256a8 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">set_convolution_parameters</a> (<a class="el" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a>)</td></tr>
<tr class="separator:aaabbf2723a390d8e7f859c70aea256a8 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a7fd4eeb44e91ea8f8ed53d21b9691f inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9a7fd4eeb44e91ea8f8ed53d21b9691f">get_config</a> ()=0</td></tr>
<tr class="separator:a9a7fd4eeb44e91ea8f8ed53d21b9691f inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">~IGemmCommon</a> ()</td></tr>
<tr class="separator:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:acf8df17931191a9ecc8cff5196c603e5"><td class="memItemLeft" align="right" valign="top">static uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#acf8df17931191a9ecc8cff5196c603e5">estimate_cycles</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, const <a class="el" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> &amp;params)</td></tr>
<tr class="separator:acf8df17931191a9ecc8cff5196c603e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr&gt;<br />
class arm_gemm::GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1a12e7d5e0236aab8e417197704e4d81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a12e7d5e0236aab8e417197704e4d81">&#9670;&nbsp;</a></span>GemmInterleavedPretransposed2d() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a63b1e682fe5886b27199ff95fb68660e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63b1e682fe5886b27199ff95fb68660e">&#9670;&nbsp;</a></span>GemmInterleavedPretransposed2d() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00341">341</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00157">GemmArgs::_cfg</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00134">CPUInfo::get_L2_cache_size()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, and <a class="el" href="arm__gemm_8hpp_source.xhtml#l00111">GemmConfig::outer_block_size</a>.</p>
<div class="fragment"><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    :    _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    ,    _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    ,    _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize)</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    ,    _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    ,    _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    ,    _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    ,    _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    ,    _maxthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    ,    _nthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    ,    _k_block(get_k_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>))</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// Work out the rounded size of M - needed for some buffers.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    ,    _Mround_div ( <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Msize, strategy::out_height()) )</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    ,    _Mround     ( _Mround_div * strategy::out_height()     )</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    ,    _Nround_div ( <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, strategy::out_width()) )</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    ,    _Nround     ( _Nround_div * strategy::out_width()     )</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        assert(_maxthreads &gt; 0);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = _ci-&gt;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">get_L2_cache_size</a>();</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size) {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            _x_block = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="comment">// Don&#39;t allocate more than 90% of the L2 to allow for overheads, and subtract off the L1 contents.</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            _x_block = (((L2_size * 9) / 10) - (_k_block * <span class="keyword">sizeof</span>(Toi) * (strategy::out_width() + strategy::out_height()))) /</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                      (<span class="keyword">sizeof</span>(Toi) * _k_block);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="comment">// Needs to be (at least a single) multiple of the kernel output width.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            _x_block /= strategy::out_width();</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            _x_block = std::max(_x_block, 1U) * strategy::out_width();</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_x_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, _x_block);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            _x_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, num_x_blocks);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            _x_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_x_block, strategy::out_width());</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            _x_block *= strategy::out_width();</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a3152ff6ceec3d31c02feb4e91812f040"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">arm_compute::CPUInfo::get_L2_cache_size</a></div><div class="ttdeci">unsigned int get_L2_cache_size() const</div><div class="ttdoc">Gets the L2 cache size. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00134">CPPTypes.cpp:134</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00450">450</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                             {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00454">454</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                                  {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">return</span> _B_transposed==<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="acf8df17931191a9ecc8cff5196c603e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf8df17931191a9ecc8cff5196c603e5">&#9670;&nbsp;</a></span>estimate_cycles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint64_t estimate_cycles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00511">511</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00148">GemmArgs::_Ksize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00154">GemmArgs::_maxthreads</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00146">GemmArgs::_Msize</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00150">GemmArgs::_nbatches</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00151">GemmArgs::_nmulti</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00147">GemmArgs::_Nsize</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00029">PerformanceParameters::kernel_macs_cycle</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00031">PerformanceParameters::merge_bytes_cycle</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00030">PerformanceParameters::prepare_bytes_cycle</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                                                                               {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, get_k_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>));</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width());</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        uint64_t total_macs    = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll());</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        uint64_t prepare_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll()) * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        uint64_t merge_bytes   = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * k_blocks * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * <span class="keyword">sizeof</span>(Tr);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="comment">// Wide problems incur extra preparation cost, as it is done per thread.</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="comment">// Duplicate the logic the scheduler will later use to figure out how much that will affect us</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordtype">float</span> ratio = m_blocks / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(n_blocks);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ideal_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::sqrt(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads * ratio) + 0.5);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = 1;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">if</span> (ideal_height == 0) {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            height = 1;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> adj=0; adj&lt;ideal_height; adj++) {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> round_down = ideal_height - adj;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads % round_down == 0) {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    height = round_down;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> round_up = ideal_height + adj;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads % round_up == 0) {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    height = round_up;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        }</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="comment">// We&#39;ve computed the height here - we need to multiply the amount of preparation effort by the width (which is total threads / height)</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        prepare_bytes *= (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads / height);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordtype">float</span> mac_cycles     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.kernel_macs_cycle;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordtype">float</span> prepare_cycles = static_cast&lt;float&gt;(prepare_bytes) / params.prepare_bytes_cycle;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keywordtype">float</span> merge_cycles   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(merge_bytes) / params.merge_bytes_cycle;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordtype">float</span> total_cycles = mac_cycles + prepare_cycles + merge_cycles;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="comment">// We can&#39;t thread over multis, which might be a problem in some</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="comment">// threaded cases.  Penalize that here.</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <span class="keywordtype">float</span> parallelism_available = static_cast&lt;float&gt;(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches * <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width())) * 0.9;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordflow">if</span> (parallelism_available &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads) {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            total_cycles *= (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads) / parallelism_available);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(total_cycles);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a18e9a188320dd783a61cb41ff6ba357c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18e9a188320dd783a61cb41ff6ba357c">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>work_range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>thread_locator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threadid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Main execute member fucntion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">work_range</td><td>specifies the range of work we want to be computed, total range defined by <a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thread_locator</td><td>where are we inside of the thread space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">threadid</td><td>a unique threadid </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a7686815e0e1a7ed5d703a2f85ecd3b65">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00401">401</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="ndrange_8hpp_source.xhtml#l00176">NDCoordinate&lt; N &gt;::get_position()</a>, and <a class="el" href="ndrange_8hpp_source.xhtml#l00141">NDRange&lt; D &gt;::get_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                                                                                      {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="comment">/* This particular GEMM implementation can only be broken up over the M &amp; N</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">         * dimensions, we inform the frame work of this limitation via the get_window_size function</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_start = work_range.get_position(0);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_start = work_range.get_position(1);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_size  = work_range.get_size(0);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_size  = work_range.get_size(1);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_end   = m_start + m_size;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_end   = n_start + n_size;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_threadid = thread_locator.get_position(0);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_threadid = thread_locator.get_position(1);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        execute_pretranspose(m_start, m_end, n_start, n_end, threadid, m_threadid, n_threadid);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00459">459</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>.</p>
<div class="fragment"><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                                           {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordtype">size_t</span> total=0;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            x_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            k_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            total += x_size * k_size * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">return</span> total;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f983ca114ef72d25515a8651ea1d0e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f983ca114ef72d25515a8651ea1d0e7">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a> get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an ndrange containing ranges of the compute space which can be broken up and parallelised over </dd></dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a06ec4bc84b2197e53f665ac9a31df52e">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00385">385</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">arm_compute::test::validation::m</a>, and <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>.</p>
<div class="fragment"><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                               {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordtype">unsigned</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = (_Mround / strategy::out_height()) * _nbatches;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordtype">unsigned</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = _Nround_div;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">return</span> { <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>, n };</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ace003f90d5d728a19d96f697db05f3dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace003f90d5d728a19d96f697db05f3dc">&#9670;&nbsp;</a></span>get_working_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t get_working_size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00418">418</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="comment">/* Because we do not know how schedular will break up</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">         * the task, we need to ensure that alloc enough</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">         * space to be able to handle the case where every thread</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">         * is parallelised across B AND also every thrread is parallelised across A</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">         * If we parallelise across A, then we only need one buffer of A and 64 buffers of B</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">         * If we parallelise across B, then we only need 64 buffer of B and</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">return</span> get_c_working_size() * _maxthreads</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;             + get_a_working_size() * _maxthreads</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;             + 64; <span class="comment">//to account for cacheline alignment</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58b10b9a21d1ad3dbb9cf9a1b1e8fdac">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae385dce1a98e03f0a3ca311f031e5110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae385dce1a98e03f0a3ca311f031e5110">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#abcc95242f389687b72fa2ec63faec7e3">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00481">481</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, and <a class="el" href="working__space_8hpp_source.xhtml#l00105">strategy</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                                                                                              {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        Toi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            x_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            k_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                      current.x0(), current.xmax(), current.k0(), current.kmax());</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            buffer += (x_size * k_size);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a468e9c50d4decc2ba86f9bd393ba27d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a468e9c50d4decc2ba86f9bd393ba27d6">&#9670;&nbsp;</a></span>set_nthreads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_nthreads </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nthreads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00397">397</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                             {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        _nthreads = std::min(nthreads, _maxthreads);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00506">506</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                                            {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aee006b8384820aa25720e84b91b32a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee006b8384820aa25720e84b91b32a27">&#9670;&nbsp;</a></span>set_working_space()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_working_space </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>working_space</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00433">433</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                         {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="comment">// Make sure everything ends up cache line aligned</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        intptr_t working_space_int  = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordtype">size_t</span> diff=0;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0x3F) {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            diff = 0x40 - (working_space_int &amp; 0x3F);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        working_space_bytes += diff;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        _working_space = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(working_space_bytes);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1bb76b8a32e09fb5ffffd66e04d7f741"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bb76b8a32e09fb5ffffd66e04d7f741">&#9670;&nbsp;</a></span>supports_dynamic_scheduling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supports_dynamic_scheduling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00392">392</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                      {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
