<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: StackLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">StackLayer Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Stack Layer.  
 <a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_layers_8h_source.xhtml">Layers.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for StackLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer__coll__graph.svg" width="106" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4e534985818ce7c5560abc0c6a99e021"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a4e534985818ce7c5560abc0c6a99e021"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a4e534985818ce7c5560abc0c6a99e021">StackLayer</a> (<a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</td></tr>
<tr class="memdesc:a4e534985818ce7c5560abc0c6a99e021"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a concatenation layer.  <a href="#a4e534985818ce7c5560abc0c6a99e021">More...</a><br /></td></tr>
<tr class="separator:a4e534985818ce7c5560abc0c6a99e021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeea441309ced0e245856a5e70e82b63e"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:aeea441309ced0e245856a5e70e82b63e"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#aeea441309ced0e245856a5e70e82b63e">StackLayer</a> (int axis, <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</td></tr>
<tr class="memdesc:aeea441309ced0e245856a5e70e82b63e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a concatenation layer.  <a href="#aeea441309ced0e245856a5e70e82b63e">More...</a><br /></td></tr>
<tr class="separator:aeea441309ced0e245856a5e70e82b63e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a198fc3f27d247211a87832d4e74d4a70"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a198fc3f27d247211a87832d4e74d4a70"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a198fc3f27d247211a87832d4e74d4a70">StackLayer</a> (<a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream)</td></tr>
<tr class="memdesc:a198fc3f27d247211a87832d4e74d4a70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a concat layer.  <a href="#a198fc3f27d247211a87832d4e74d4a70">More...</a><br /></td></tr>
<tr class="separator:a198fc3f27d247211a87832d4e74d4a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a225fb162b43cbef27d5a1dbd7a51c60d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s) override</td></tr>
<tr class="memdesc:a225fb162b43cbef27d5a1dbd7a51c60d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create layer and add to the given stream.  <a href="#a225fb162b43cbef27d5a1dbd7a51c60d">More...</a><br /></td></tr>
<tr class="separator:a225fb162b43cbef27d5a1dbd7a51c60d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></td></tr>
<tr class="memitem:a0907bb3524e5dfbe23a0f694b2a55c6a inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#a0907bb3524e5dfbe23a0f694b2a55c6a">~ILayer</a> ()=default</td></tr>
<tr class="memdesc:a0907bb3524e5dfbe23a0f694b2a55c6a inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#a0907bb3524e5dfbe23a0f694b2a55c6a">More...</a><br /></td></tr>
<tr class="separator:a0907bb3524e5dfbe23a0f694b2a55c6a inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af664a2598e05f8de28fb9f94e3902886 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a> (std::string <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>)</td></tr>
<tr class="memdesc:af664a2598e05f8de28fb9f94e3902886 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the name of the layer.  <a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">More...</a><br /></td></tr>
<tr class="separator:af664a2598e05f8de28fb9f94e3902886 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8227ba86a01f26e4f173cd5e219d5d1 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a> () const</td></tr>
<tr class="memdesc:ad8227ba86a01f26e4f173cd5e219d5d1 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Layer name accessor.  <a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">More...</a><br /></td></tr>
<tr class="separator:ad8227ba86a01f26e4f173cd5e219d5d1 inherit pub_methods_classarm__compute_1_1graph_1_1frontend_1_1_i_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Stack Layer. </p>

<p class="definition">Definition at line <a class="el" href="_layers_8h_source.xhtml#l01347">1347</a> of file <a class="el" href="_layers_8h_source.xhtml">Layers.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4e534985818ce7c5560abc0c6a99e021"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e534985818ce7c5560abc0c6a99e021">&#9670;&nbsp;</a></span>StackLayer() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>sub_stream1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>sub_stream2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>rest_sub_streams</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct a concatenation layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sub_stream1</td><td>First graph branch </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sub_stream2</td><td>Second graph branch </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rest_sub_streams</td><td>Rest sub-graph branches </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_layers_8h_source.xhtml#l01357">1357</a> of file <a class="el" href="_layers_8h_source.xhtml">Layers.h</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>.</p>
<div class="fragment"><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        : _sub_streams(), _axis(0)</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    {</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](SubStream &amp;&amp; sub_stream)</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        {</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        },</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeea441309ced0e245856a5e70e82b63e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeea441309ced0e245856a5e70e82b63e">&#9670;&nbsp;</a></span>StackLayer() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>sub_stream1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>sub_stream2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>rest_sub_streams</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct a concatenation layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Stack layer axis along which to stack the inputs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sub_stream1</td><td>First graph branch </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sub_stream2</td><td>Second graph branch </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rest_sub_streams</td><td>Rest sub-graph branches </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_layers_8h_source.xhtml#l01377">1377</a> of file <a class="el" href="_layers_8h_source.xhtml">Layers.h</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>.</p>
<div class="fragment"><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        : _sub_streams(), _axis(axis)</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    {</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](SubStream &amp;&amp; sub_stream)</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        {</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        },</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a198fc3f27d247211a87832d4e74d4a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a198fc3f27d247211a87832d4e74d4a70">&#9670;&nbsp;</a></span>StackLayer() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>sub_stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct a concat layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sub_stream</td><td>Sub-stream </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_layers_8h_source.xhtml#l01394">1394</a> of file <a class="el" href="_layers_8h_source.xhtml">Layers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        : _sub_streams(), _axis(0)</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    {</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a225fb162b43cbef27d5a1dbd7a51c60d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a225fb162b43cbef27d5a1dbd7a51c60d">&#9670;&nbsp;</a></span>create_layer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> create_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create layer and add to the given stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml" title="Stream frontend class to construct simple graphs in a stream fashion. ">Stream</a> to add layer to.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ID of the created node. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#afd0f42ef97e62ef3b6849bcbb8a7533a">ILayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layers_8h_source.xhtml#l01399">1399</a> of file <a class="el" href="_layers_8h_source.xhtml">Layers.h</a>.</p>

<p class="reference">References <a class="el" href="_graph_builder_8cpp_source.xhtml#l00730">GraphBuilder::add_stack_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">IStream::graph()</a>, <a class="el" href="_i_stream_8h_source.xhtml#l00073">IStream::hints()</a>, <a class="el" href="_i_layer_8h_source.xhtml#l00064">ILayer::name()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::Output</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>, and <a class="el" href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00063">StreamHints::target_hint</a>.</p>
<div class="fragment"><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    {</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     nid           = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        NodeParams common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.hints().target_hint };</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        <span class="keywordflow">if</span>(_sub_streams.size() == 1 &amp;&amp; _sub_streams.at(0) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;        {</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            nid = _sub_streams[0]-&gt;tail_node();</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        }</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        {</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            <span class="comment">// Collect tail nodes and stack</span></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            std::vector&lt;NodeIdxPair&gt; nodes;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> : _sub_streams)</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;            {</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>))</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                {</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tail_node = s.graph().node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node());</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                    <span class="keywordflow">if</span>(tail_node != <span class="keyword">nullptr</span> &amp;&amp; tail_node-&gt;type() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>)</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                    {</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;                        nodes.push_back({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node(), 0 });</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;                    }</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;                }</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            }</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;            nid = <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">GraphBuilder::add_stack_node</a>(s.graph(), common_params, nodes, _axis);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;        }</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;        <span class="keywordflow">return</span> nid;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ae0a382c6800d4ebe51ba9ced8841e2b5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">arm_compute::graph::GraphBuilder::add_stack_node</a></div><div class="ttdeci">static NodeID add_stack_node(Graph &amp;g, NodeParams params, const std::vector&lt; NodeIdxPair &gt; &amp;inputs, int axis)</div><div class="ttdoc">Adds a stack layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00730">GraphBuilder.cpp:730</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_layer_xhtml_ad8227ba86a01f26e4f173cd5e219d5d1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">arm_compute::graph::frontend::ILayer::name</a></div><div class="ttdeci">const std::string &amp; name() const</div><div class="ttdoc">Layer name accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00064">ILayer.h:64</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/graph/frontend/<a class="el" href="_layers_8h_source.xhtml">Layers.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph_1_1frontend.xhtml">frontend</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:55 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
